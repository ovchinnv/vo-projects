module pdbio
 __DEP_OUTPUT
 __DEP_PARSER
 __IMPNONE
! character(len=100), parameter :: fmt='(A6,I5,1X,A4,1X,A4,1X,A5,3X,3F8.3,2F6.2,1X,3X,2X,A4)' ! resid is a string
 character(len=100), parameter :: fmt='(A6,I5,1X,A4,1X,A4,1X,A5,3X,3F8.3,2F6.2,1X,3X,2X,A4)' ! extend resname and resnum by 1 each
 contains
!
 subroutine pdb_read(fid,r,O,B,qatomid_only_)
 use psf
 character, parameter :: comment(1)=(/'*'/)
 int :: fid
 float :: r(:,:) ! coordinates
 float, optional :: B(:)   ! B-factor column
 float, optional :: O(:)   ! occupancy column
 __IAM(PDB_READ)
 character(len=200) :: cmdline
 character(len=8) :: keyword
 int :: natom
 int :: atomid, i, j
 integer :: ioerr
 float :: x,y,z
 character(len=8) :: aname, resname, segid, resid
 bool :: flags(atoms%last)
 bool :: found=.false.
 bool :: qo, qb       ! B/occupancy flags
 float :: occ, bf
 __OPAR(qatomid_only,bool)
!
!
 natom=size(r,2)
 flags=.false.
!
 qb=present(B)
 qo=present(O)
 __PRESENT(qatomid_only,.false.)
!
 if (qb) then 
  if (size(B).ne.natom) then 
    call error(whoami, 'INCONSISTENT SIZE OF B-FACTOR ARRAY',-1)
  endif
 endif
!
 if (qo) then 
  if (size(O).ne.natom) then 
    call error(whoami, 'INCONSISTENT SIZE OF OCCUPANCY ARRAY',-1)
  endif
 endif

! remove comments at the beginning, if any
 do while (.true.)
  read(fid,'(A)',IOSTAT=ioerr) cmdline
  if (ioerr.eq.0) then 
   if (any(comment.eq.cmdline(1:1))) cycle    ! note: this will not get rid of 'REMARK' fields in PDBs
   exit
  else
   call error(whoami, 'Unexpected end of file',-1)
   return
  endif
 enddo
!
 i=0
 do while (ioerr.eq.0)
! process command line
#ifdef DEBUG
  call message(whoami,cmdline(1:80))
#endif
! process command line
! only lines that begin with 'ATOM'/'HETATM' are processed; 'TER ' or 'END ' indicates end of read
  keyword(1:6)=cmdline(1:6);
  call toupper(keyword)
!  
  select case(keyword(1:6))
   case('ATOM  ', 'HETATM');
   read(cmdline,fmt) keyword, atomid, aname, resname, resid, x, y, z, occ, bf, segid
   call adjustleft(cmdline)
   call adjustleft(segid)
   call adjustleft(resid)
   call adjustleft(resname)
   call adjustleft(aname)
! match atom coordinate entry with structure
   if (atomid.lt.1) then
    call warning(whoami, cmdline(1:len_trim(cmdline)),0)
    call warning(whoami, 'Nonpositive atom ID read. Skipping entry. Some coordinates may be undefined',0)
! try to read next line
    read(fid,'(A)',IOSTAT=ioerr) cmdline 
    cycle
   elseif (natom.lt.atomid) then
    call error(whoami, 'Coordinate array has incorrect dimensions. Abort.',-1)
    return
   endif
! find index of the atom in structure
   found=.false.
   do j=atomid, atoms%last ! first, a forward search, assuming ordering; usually atomids will be [1..natom] 
    if (atoms%atomid(j).eq.atomid) then
     found=.true.
     exit
    endif
   enddo
   if (.not.found) then    ! try a reverse search, in case the file is disordered
    do j=min(atomid-1,atoms%last), 1, -1 ! make sure indices stay within bounds
     if (atoms%atomid(j).eq.atomid) then
      found=.true.
      exit
     endif
    enddo
   endif
!
   if (.not.found.or.((atoms%segid(j).ne.segid).or.(atoms%resid(j).ne.resid).or.&
          (atoms%resname(j).ne.resname).or.(atoms%aname(j).ne.aname))) then
    call warning(whoami, cmdline(1:len_trim(cmdline)),0)
    if (found .and. qatomid_only) then
     __WRN(whoami, 'Cannot find corresponding entry in structure file. Will match ATOMID only.')
    else
     call warning(whoami, 'Cannot find corresponding entry in structure file. Skipping line.',0)
! try to read next line
     read(fid,'(A)',IOSTAT=ioerr) cmdline 
     cycle
    endif
   endif
   r(:,j)=(/x,y,z/);
   if (qb) B(j)=bf;  ! b-factor
   if (qo) O(j)=occ; ! occupancy
   flags(atomid)=.true.
!
   i=i+1 ! increment atom count
! try to read next line
   read(fid,'(A)',IOSTAT=ioerr) cmdline 
!**********************************************************************************
   case('TER   ','END   ');
   exit ! loop over lines
   case default ! keyword not recognized; assume that we can continue (we are not enforcing the PDB standard)
! try to read next line
   read(fid,'(A)',IOSTAT=ioerr) cmdline 
  end select
!  
 enddo ! while()
!
! the number of lines processed is i; were all of them valid atom entries?
 if (i.ne.atoms%last) call warning(whoami, 'NUMBER OF ATOMS IN COORDINATE FILE INCONSISTENT WITH STRUCTURE.',0)
 if (.not.all(flags)) call warning(whoami, 'SOME COORDINATES WERE MISSING.',0)
!
 call message(whoami, 'PDB file read.')
!
 end subroutine pdb_read
!
!**********************************************************************************
!
 subroutine pqr_read(fid,r,O,B)
! format very similar to PDB; whitespace-delimited free-form instead of fixed form
! occupancy contains charge; b-factor column contains radius
! no segid field; APBS PQR has a chain ID, which is currently unsupported
 use psf
 character, parameter :: comment(1)=(/'*'/)
 int :: fid
 float :: r(:,:) ! coordinates
 float, optional :: B(:)   ! B-factor column
 float, optional :: O(:)   ! occupancy column
 __IAM(PQR_READ)
 character(len=200) :: cmdline
 character(len=8) :: keyword
 int :: natom
 character(len=100) :: fmt='*'
 int :: atomid, i, j
 integer :: ioerr
 float :: x,y,z
 character(len=8) :: aname, resname, resid
 bool :: flags(atoms%last)
 bool :: found=.false.
 bool :: qo, qb       ! B/occupancy flags
 float :: occ, bf
!
!
 natom=size(r,2)
 flags=.false.
!
 qb=present(B)
 qo=present(O)
!
 if (qb) then 
  if (size(B).ne.natom) then 
    call error(whoami, 'INCONSISTENT SIZE OF B-FACTOR ARRAY',-1)
  endif
 endif
!
 if (qo) then 
  if (size(O).ne.natom) then 
    call error(whoami, 'INCONSISTENT SIZE OF OCCUPANCY ARRAY',-1)
  endif
 endif

! remove comments at the beginning, if any
 do while (.true.)
  read(fid,'(A)',IOSTAT=ioerr) cmdline
  if (ioerr.eq.0) then 
   if (any(comment.eq.cmdline(1:1))) cycle
   exit
  else
   call error(whoami, 'UNEXPECTED END OF FILE',-1)
   return
  endif
 enddo
!
 i=0
 do while (.true.)
! process command line
! only lines that begin with 'ATOM'/'HETATM' are processed; 'TER ' or 'END ' indicates end of read
  keyword(1:6)=cmdline(1:6);
  call toupper(keyword)
!  
  select case(keyword(1:6))
   case('ATOM  ', 'HETATM');
   read(cmdline,fmt) keyword, atomid, aname, resname, resid, x, y, z, occ, bf
   call adjustleft(cmdline)
   call adjustleft(resid)
   call adjustleft(resname)
   call adjustleft(aname)
! match atom coordinate entry with structure
   if (atomid.lt.1) then
    call warning(whoami, cmdline(1:len_trim(cmdline)),0)
    call warning(whoami, 'NEGATIVE ATOM ID READ. ABORT. SOME COORDINATES MAY BE UNDEFINED',0)
   elseif (natom.lt.atomid) then
    call error(whoami, 'COORDINATE ARRAY HAS INCORRECT DIMENSIONS. ABORT.',-1)
    return
   endif
! find index of the atom in structure
   found=.false.
   do j=atomid, atoms%last ! first, a forward search, assuming ordering
    if (atoms%atomid(j).eq.atomid) then
     found=.true.
     exit
    endif
   enddo
   if (.not.found) then    ! try a reverse search, in case the file is disordered
    do j=atomid-1, 1
     if (atoms%atomid(j).eq.atomid) then
      found=.true.
      exit
     endif
    enddo
   endif
!
   if (.not.found.or.((atoms%resid(j).ne.resid).or.&
          (atoms%resname(j).ne.resname).or.(atoms%aname(j).ne.aname))) then
    call warning(whoami, cmdline(1:len_trim(cmdline)),0)
    call warning(whoami, 'CANNOT FIND CORRESPONDING ENTRY IN STRUCTURE FILE. SKIPPING LINE.',0)
   else
    r(:,j)=(/x,y,z/);
    if (qb) B(j)=bf;  ! b-factor
    if (qo) O(j)=occ; ! occupancy
    flags(atomid)=.true.
   endif
!
   i=i+1 ! increment atom count
! try to read next line
   read(fid,'(A)',IOSTAT=ioerr) cmdline 
   if (ioerr.ne.0) exit
!**********************************************************************************
   case('TER   ','END   ');
   exit ! loop over lines
  end select
!  
 enddo ! while(.true.)
!
! the number of lines processed is i; were all of them valid atom entries?
 if (i.ne.atoms%last) call warning(whoami, 'NUMBER OF ATOMS IN COORDINATE FILE INCONSISTENT WITH STRUCTURE.',0)
 if (.not.all(flags)) call warning(whoami, 'SOME COORDINATES WERE MISSING.',0)
!
 call message(whoami, 'PQR file read.')
!
 end subroutine pqr_read
!%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
 function pdb_write(fid, r, O, B, iselection) result(ok)
 use psf
 int :: fid
 float, intent(in) :: r(:,:)
 float, optional, intent(in) :: B(:)   ! B-factor column
 float, optional, intent(in) :: O(:)   ! occupancy column
 int, optional, intent(in) :: iselection(:) ! optional atom selection (note : when provided, only the selected coordinates are present in r)
 int :: natom, i, j, resnum
 __IAM(PDB_WRITE)
 bool :: qo, qb, qsel, ok       ! B/occupancy/selection flags
 float :: occ, bf
!
 ok=.true.
!
 natom=size(r,2) ; !  number of atoms to be written (possibly selected atoms)
!
 qb=present(B)
 qo=present(O)
 qsel=present(iselection);
!
 if (qb) then 
  if (size(B).ne.natom) then 
    call error(whoami, 'INCONSISTENT SIZE OF B-FACTOR ARRAY',-1) ; ok=.false.
  endif
 endif
!
 if (qo) then 
  if (size(O).ne.natom) then 
    call error(whoami, 'INCONSISTENT SIZE OF OCCUPANCY ARRAY',-1) ; ok=.false.
  endif
 endif
!
 if (qsel) then 
  if (size(iselection).ne.natom) then 
    call error(whoami, 'INCONSISTENT SIZE OF ATOM SELECTION ARRAY',-1) ; ok=.false.
  elseif (any(iselection.gt.atoms%last.or.iselection.lt.1)) then
!  elseif (any(iselection.gt.atoms%last).or.any(iselection.lt.1)) then
   call error(whoami, 'SELECTION ARRAY HAS INVALID ATOM INDICES. ABORT.',-1) ; ok=.false.
  endif
 elseif (natom.ne.atoms%last) then ! not qsel
   call error(whoami, 'COORDINATE ARRAY HAS INCORRECT DIMENSIONS. ABORT.',-1) ; ok=.false.
 endif ! qsel
!
 if (ok) then
  write(fid,'(A)') 'REMARK: PDB FILE WRITTEN BY DYNAMO PROGRAM'
!
  bf=0d0
  occ=0d0
  do j=1, natom
   if (qsel) then ; i=iselection(j) ; else ; i=j ; endif
   read(atoms%resid(i),*) resnum ! set residue numbers to resid (ad-hoc, but we do not store any info on them)
   if (qb) bf= B(j); ! b-factor
   if (qo) occ=O(j); ! occupancy
   write(fid, fmt) 'ATOM  ',atoms%atomid(i),atoms%aname(i),atoms%resname(i),atoms%resid(i),r(1:3,j),occ,bf,atoms%segid(i)
  enddo
  write(fid,'(A3)') 'END'
!
 endif
!
 call message(whoami, 'PDB file writen.')
!
 end function pdb_write
!%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
 function pqr_write(fid, r, O, B, iselection) result(ok)
! format very similar to PDB; whitespace-delimited free-form instead of fixed form
! occupancy contains charge; b-factor column contains radius
! no segid field; APBS PQR has a chain ID, which is currently unsupported
 use psf
 int :: fid
 float, intent(in) :: r(:,:)
 float, optional, intent(in) :: B(:)   ! B-factor column
 float, optional, intent(in) :: O(:)   ! occupancy column
 int, optional, intent(in) :: iselection(:) ! optional atom selection (note : when provided, only the selected coordinates are present in r)
 int :: natom, i, j, resnum
 __IAM(PQR_WRITE)
 bool :: qo, qb, qsel, ok       ! B/occupancy/selection flags
 float :: occ, bf
!
 ok=.true.
!
 natom=size(r,2)
!
 qb=present(B)
 qo=present(O)
 qsel=present(iselection);
!
 if (qb) then 
  if (size(B).ne.natom) then 
    call error(whoami, 'INCONSISTENT SIZE OF B-FACTOR ARRAY',-1) ; ok=.false.
  endif
 endif
!
 if (qo) then 
  if (size(O).ne.natom) then 
    call error(whoami, 'INCONSISTENT SIZE OF OCCUPANCY ARRAY',-1) ; ok=.false.
  endif
 endif
!
 if (qsel) then 
  if (size(iselection).ne.natom) then 
    call error(whoami, 'INCONSISTENT SIZE OF ATOM SELECTION ARRAY',-1) ; ok=.false.
  elseif (any(iselection.gt.atoms%last.or.iselection.lt.1)) then
!  elseif (any(iselection.gt.atoms%last).or.any(iselection.lt.1)) then
   call error(whoami, 'SELECTION ARRAY HAS INVALID ATOM INDICES. ABORT.',-1) ; ok=.false.
  endif
 elseif (natom.ne.atoms%last) then ! not qsel
   call error(whoami, 'COORDINATE ARRAY HAS INCORRECT DIMENSIONS. ABORT.',-1) ; ok=.false.
 endif ! qsel
!
 if (ok) then
  write(fid,'(A)') 'REMARK: PQR FILE WRITTEN BY DYNAMO PROGRAM'
!
  bf=0d0
  occ=0d0
  do j=1, natom
   if (qsel) then ; i=iselection(j) ; else ; i=j ; endif
   read(atoms%resid(i),*) resnum ! set residue numbers to resid (ad-hoc, but we do not store any info on them)
   if (qb) bf= B(j); ! b-factor
   if (qo) occ=O(j); ! occupancy
   write(fid, fmt) 'ATOM  ',atoms%atomid(i),atoms%aname(i),atoms%resname(i),atoms%resid(i),r(1:3,j),occ,bf
  enddo
  write(fid,'(A3)') 'END'
!
 endif
!
 call message(whoami, 'PQR file writen.')
!
 end function pqr_write
!%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
end module pdbio
