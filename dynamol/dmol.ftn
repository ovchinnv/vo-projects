#define __CTX __STRING(__DMOLCTX)
#define __THISCOMM __DMOLCOMM
#include "multicom_def.src"
module dmol
! contains setup and details of molecular simulation
! this module a proof-of-principle "wrapper" around other modules
! Work is underway to make the design more OO.
!%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
 __DEP_PARSER
 __DEP_OUTPUT
 use system
 use stats
 use verlet
 use rng
 use files

 __IMPNONE

 public dmol_init
 public dmol_done
 public dmol_integrate
 public dmol_exec

 int, save :: num_iterations
 int, save :: iteration_count                               ! number of MD iterations (persistent)
 int, parameter :: nfreq=5
 int, parameter :: printf=1, outf=2, trajf=3, resf=4, statf=5
 int :: outfreq(nfreq)                                ! frequency array for writing output
!
! output options persistent in case use runs sequential simulations but wants to kep same files
 character(len=vartaglen), save :: trajectoryoutname, restartoutname, statisticsoutname
 int, save :: trajectoryfid=-1, statisticsfid=-1
!
 bool, save :: restart
 bool, save :: dmol_initialized=.false.
!
 int :: msglev = 1
!
 contains
!====================================================================================
 subroutine dmol_init()
 character(len=vartaglen) :: keyword
 int :: l
!
 __IAM(DMOL_INIT)
!
!initialize system
 call system_initialize()
 call system_list_parameters()
 call random_init()      ! initialize random number generator
 call verlet_init()      ! initialize verlet integrator
!
! note that there is no mechanism for restarts -- to be added !
!
 if (existtag_nocase('init_temp', __CTX)) then
  if (system_velocities_initialized) then 
   call warning(whoami, 'Starting velocities and initial temperature cannot both be specified. Abort.',-1)
  else
   call system_init_velocities()
  endif ! velocities initialized
 else
  call warning(whoami, 'Either starting velocities or initial temperature must be specified. Abort.',-1)
 endif ! init_temp
!
 if (fatal_warning()) return
!
 call message(whoami, 'Testing energy calculation:',msglev)
!
 call system_check()   ! check that all parameters are known and whether coordinates/velocities are defined 
 call system_compute() ! if langevin on, already computed; ignore for now
 call system_printe()
!
!%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% request a few parameters from parser %%%%%%%%%%%%%%%%%%%%%%%%%%%%
! define context for macros below
#define __CONTEXT __CTX
!
#define __INT
#define __MINUSERR
#undef  __WARNIFMISSING
!
#define __VAR	outfreq(printf)
#define __TAG	printfreq
#define __NAME	Print frequency
#include "parser/parser_macro1.src"
!
#define __VAR	outfreq(outf)
#define __TAG	outputfreq
#define __NAME	Output frequency
#include "parser/parser_macro1.src"
!
#define __VAR	outfreq(trajf)
#define __TAG	trajectoryfreq
#define __NAME	Trajectory output frequency
#include "parser/parser_macro1.src"
!
#define __VAR	outfreq(resf)
#define __TAG	restartfreq
#define __NAME	Restart file output frequency
#include "parser/parser_macro1.src"
!
#define __VAR	outfreq(statf)
#define __TAG	statisticsfreq
#define __NAME	Statistics output frequency
#include "parser/parser_macro1.src"
!
 if (outfreq(trajf).gt.0) then 
  if (existtag_nocase('trajectoryfile',__CTX)) then
   trajectoryoutname=getval_nocase('trajectoryfile',__CTX)
  else
   call warning(whoami,'Trajectory output file name not specified.',-1)
  endif
 endif
!
 if (outfreq(resf).gt.0) then 
  if (existtag_nocase('restartfile',__CTX)) then
   restartoutname=getval_nocase('restartfile',__CTX)
  else
   call warning(whoami,'Restart file name not specified.',-1)
  endif
 endif
!
 if (outfreq(statf).gt.0) then 
  if (existtag_nocase('statisticsfile',__CTX)) then
   statisticsoutname=getval_nocase('statisticsfile',__CTX)
  else
   call warning(whoami,'Statistics output file name not specified.',-1)
  endif
 endif
!
!%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
 if (fatal_warning()) then 
  call system_done()
 else
!
  iteration_count=0
  dmol_initialized=.true.
!
 endif
!
 end subroutine dmol_init
!
!======================================
 subroutine dmol_done()
  call verlet_done()
  dmol_initialized=.false.
 end subroutine dmol_done
!======================================
!%%%%%%%%%%%%%%%%%%%%%%% integrate %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
 subroutine dmol_integrate(numiter)
#ifdef __PARALLEL
 __DEP_MULTICOM
#endif
!
 int, optional :: numiter ! optional number of integraion steps
 int :: minfreq, iterations, ncycles, i
 bool :: addheader
 character(len=6) :: action
 int :: l
 character(len=vartaglen) :: keyword
!
 __IAM(DMOL_INTEGRATE)
!
#include "multicom_def.src"
!
 if (present(numiter)) then ; num_iterations=numiter ;
 else
!%%%%%%%%%%%%%%%%%%%%%%%%%%%% get number of iterations from input file %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
#define __INT
#define __MINUSERR
#define  __WARNIFMISSING
!
#define __VAR	num_iterations
#define __TAG	iterations
#define __NAME	Number of simulation steps
#include "parser/parser_macro1.src"
!
 endif ! numiter
!%%%%%%%%%%%%%%%%%%%%%%%%%%% get number of iterations from input file %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
!
 if (any(outfreq>0)) then ; minfreq=minval(outfreq,1,outfreq>0); else; minfreq=num_iterations; endif ! minimum frequency
 if (minfreq.ne.0) then
  if (sum(mod(outfreq,minfreq)).gt.0) then
   call warning(whoami, 'One of the frequency values must divide the others. Abort.',-1);
   return
  endif
 else
  minfreq=1 ! in this case, niter nust be zero (see above), so ncycle will be zero below
 endif
 ncycles=num_iterations/minfreq+min(mod(num_iterations,minfreq),1)
!
 do i=1, ncycles
  iterations=min(minfreq,num_iterations-iteration_count)
  call verlet_integrate(iterations)
  iteration_count=iteration_count+iterations 
!%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
  if (outfreq(printf).gt.0) then;if (mod(iteration_count,outfreq(printf)).eq.0) call system_printe(); endif
!%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
  if (outfreq(resf).gt.0) then;if (mod(iteration_count,outfreq(resf)).eq.0) call system_write_restart(restartoutname); endif
!%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
  if (outfreq(statf).gt.0) then; 
   if (mod(iteration_count,outfreq(statf)).eq.0) then 
    if (__ME.le.0) then
     if (statisticsfid.le.0) then ; action='write' ; else ; action='append'; endif
     call files_open(statisticsfid, name_=statisticsoutname, form_='FORMATTED', action_=action)
     if (statisticsfid.le.0) call warning(whoami, 'Cannot open input file. Abort.',-1)
    endif ! me
!
!    call system_statistics(statisticsfid); ! must be parallel-aware; must call fatal_warning
!
    call files_close(statisticsfid)
!
   endif ! mod
  endif ! outfreq
!%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
  if (outfreq(trajf).gt.0) then; 
   if (mod(iteration_count,outfreq(trajf)).eq.0) then 
    if (__ME.le.0) then
!
! note: in the future should close and reopen traj. file with APPEND option to protect from crashes
!
     if (trajectoryfid.le.0) then ; addheader=.true.; action='write'; else ; addheader=.false.; action='append'; endif
     call files_open(trajectoryfid, name_=trajectoryoutname, form_='UNFORMATTED', action_=action)
     if (trajectoryfid.le.0) call warning(whoami, 'Cannot open input file. Abort.',-1)
    endif ! me
!
    call system_write_dcd(trajectoryfid,addheader); ! must be parallel-aware; must call fatal_warning
    call files_close(trajectoryfid)
!
   endif ! mod
  endif ! outfreq
!
  if (fatal_warning()) exit
!
 enddo ! ncycles
! final restart file
 if (outfreq(resf).gt.0) call system_write_restart(restartoutname)
!optional coordinate/and/or/velocity files
 if (existtag_nocase('finalcoordinates',__CTX)) call system_write_coordinates(getval_nocase('finalcoordinates',__CTX))
 if (existtag_nocase('finalvelocities',__CTX))  call system_write_velocities(getval_nocase('finalvelocities',__CTX))
!%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
 end subroutine dmol_integrate
!=================================================================================
!
#ifdef __CONTEXT
#undef __CONTEXT
#endif
#define __CONTEXT __DMOLCTX
#define _IFS1 'INIT','INITIALIZE'
#define _DOS1 init
#define _IFS2 'SOLVE','RUN','EXEC'
#define _DOS2 integrate
#define _IFS4 'DONE','STOP','END'
#define _DOS4 done
#include "exec.def"
!=================================================================================

end module dmol
