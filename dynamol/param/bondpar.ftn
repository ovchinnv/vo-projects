      module bondpar
!    define a derived type to store bond parameters
      type bonds
       character(len=8), dimension(:), pointer :: a1, a2
       float, dimension(:), pointer :: kb, b0
! V(bond) = Kb(b - b0)**2
!Kb: kcal/mole/A**2
!b0: A
       int :: length ! length of the array
       int :: last ! index of last element
       bool :: initialized=.false. ! has the vector been initialized
      end type bonds
!
      int, parameter, private :: expand_incr=200
!
      contains
!******************************************** bond data routines*********************
       subroutine bonds_init( v )
       __IMPNONE
       type (bonds) :: v
!       if (associated(v%...)) deallocate(v%...) ! testing unassigned pointer is an error!
       allocate(v%a1(expand_incr),v%a2(expand_incr),v%kb(expand_incr),v%b0(expand_incr))
!
       v%a1=''; v%a2=''; v%kb=0; v%b0=0
       v%length=expand_incr
       v%last=0
       v%initialized=.true.
       end subroutine bonds_init
!ccccc
       subroutine bonds_done( v )
       __IMPNONE
       type (bonds) :: v
       if (associated(v%a1)) deallocate(v%a1)
       if (associated(v%a2)) deallocate(v%a2)
       if (associated(v%kb)) deallocate(v%kb)
       if (associated(v%b0)) deallocate(v%b0)
       v%length=0
       v%last=0
       v%initialized=.false.
       end subroutine bonds_done
!
       subroutine bonds_expand( v )
       __IMPNONE
       type (bonds) :: v
       int :: newlength
       character(len=8), dimension(:), pointer :: a1, a2
       float, dimension(:), pointer :: kb, b0
!
       if (.not.v%initialized) then 
        call bonds_init(v) 
       else
!    assume length is valid
        newlength=v%length+expand_incr ! temporary storage space
        allocate(a1(newlength),a2(newlength),kb(newlength),b0(newlength)) ! copy old data
        a1(1:v%length)=v%a1; a2(1:v%length)=v%a2; kb(1:v%length)=v%kb; b0(1:v%length)=v%b0 
        deallocate(v%a1,v%a2,v%kb,v%b0)
        v%a1=>a1; v%a2=>a2; v%kb=>kb; v%b0=>b0
        v%length=newlength
       endif 
       end subroutine bonds_expand
!ccccc
       function bonds_add(v,a1,a2,kb,b0)
       __IMPNONE
       type (bonds) :: v
       int :: bonds_add
       float :: kb, b0
       character(len=*) :: a1, a2
       int :: j
!
       if (.not.v%initialized) call bonds_init(v) 
!    add element to the list
       if (v%last.eq.v%length) call bonds_expand(v)       
       j=v%last+1
       v%a1(j)=a1; v%kb(j)=kb
       v%a2(j)=a2; v%b0(j)=b0
       v%last=j
       bonds_add=j
       end function bonds_add
!ccccc
       function bonds_uadd(v,a1,a2,kb,b0) 
       use output, only: warning
       __IMPNONE
       type (bonds) :: v
       int :: bonds_uadd
       float :: kb, b0
       character(len=*) :: a1, a2
       int :: j
!
       if (.not.v%initialized) call bonds_init(v) 
       do j=1,v%last
        if ( (v%a1(j).eq.a1.and.v%a2(j).eq.a2).or.(v%a1(j).eq.a2.and.v%a2(j).eq.a1) ) then
!       found element
         bonds_uadd=j
         call warning('BONDS_UADD','Parameters for bond "'//v%a1(j)//'--'//v%a2(j)//'" already present. Will overwrite.',0)
         v%kb(j)=kb; v%b0(j)=b0
         return
        endif
       enddo
!    add element to the list: use regular routine
       bonds_uadd=bonds_add(v,a1,a2,kb,b0)
!
       end function bonds_uadd
!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
       function bonds_getind( v,a1,a2 ) 
       __IMPNONE
       type (bonds) :: v
       int :: bonds_getind
       character(len=*) :: a1, a2
       int :: j
!
       bonds_getind=-1
       if (.not.v%initialized) then 
!
       else
        do j=1,v%last
         if ( (v%a1(j).eq.a1.and.v%a2(j).eq.a2).or.(v%a1(j).eq.a2.and.v%a2(j).eq.a1) ) then
!       found element
          bonds_getind=j
          exit
         endif
        enddo
       endif
!
       end function bonds_getind
      end module bondpar
