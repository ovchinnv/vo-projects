!     much of this code is adapted from parser.F90
      module ch_param
      __DEP_PARSER
!      use parser, only: adjustleft, numword, toupper
      use atompar
      use bondpar
      use anglpar
      use dihepar
      private
!
!     read, parse & store CHARMM parameter/topology file; 
!
! obtained from parser (note parser comment chars include # and % -- that`s OK ?!)
!      character, parameter :: hyphen='-'
!      character, parameter :: tab=char(9)
      character, parameter :: comment(2) = (/'*','!'/)
!
      bool, save :: ch_param_initialized=.false. 
      type (atoms), save, public :: tpar ! atom type parameters
      type (bonds), save, public :: bpar ! bond parameters
      type (angles), save, public :: apar ! angle parameters
      type (dihes), save, public :: dpar ! angle parameters
      type (dihes), save, public :: ipar ! angle parameters
!
      public parse_ch_param ! read input file and store all parameters
      private ch_param_init
      public ch_param_done
      public list_ch_params    ! list parameters
      public getbpar_ind
      public getapar_ind
      public getdpar_ind
      public getipar_ind
!
      contains
!
       function getpar(a1)
       use output, only: error
       type (atom) :: a, getpar
       character(len=*) :: a1
!
       a=atoms_getpar(tpar,a1)
       if (len_trim(a%a1).eq.0) call error('GETPAR','Parameters for atom "'//a1//'" not found. Cannot continue.',-1)
       getpar=a
!
       end function getpar
!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
       function getbpar_ind(a1,a2)
       use output, only: error
       int :: ind, getbpar_ind
       character(len=*) :: a1,a2
!
       ind=bonds_getind(bpar,a1,a2)
       if (ind.lt.0) call error('GETBPAR_IND','Parameters for bond "'//a1//'--'//a2//'" not found.',0)
       getbpar_ind=ind
!
       end function getbpar_ind
!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
       function getapar_ind(a1,a2,a3)
       use output, only: error
       int :: ind, getapar_ind
       character(len=*) :: a1,a2,a3
!
       ind=angles_getind(apar,a1,a2,a3)
       if (ind.lt.0) call error('GETAPAR_IND','Parameters for angle "'//a1//'--'//a2//' --'//a3//&
&                                      '" not found.',0)
       getapar_ind=ind
!
       end function getapar_ind
!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
       function getdpar_ind(a1,a2,a3,a4)
       use output, only: error
       use ivector
       int, pointer, dimension(:) :: d, getdpar_ind
       character(len=*) :: a1,a2,a3,a4
!
       d=>dihes_getind(dpar,a1,a2,a3,a4)
       if (d(1).eq.0) call error('GETDPAR_IND','Parameters for dihedral "'//a1//'--'//a2//'--'//a3//'--'//a4//&
&                                           '" not found. Cannot continue.',-1)
!         write(0,*) d
       getdpar_ind=>d
!
       end function getdpar_ind
!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
       function getipar_ind(a1,a2,a3,a4)
       use output, only: error
       use ivector
       int, pointer, dimension(:) :: d, getipar_ind
       character(len=*) :: a1,a2,a3,a4
!
       d=>dihes_getind(ipar,a1,a2,a3,a4)
       if (d(1).eq.0) call error('GETDPAR_IND','Parameters for dihedral "'//a1//'--'//a2//'--'//a3//'--'//a4//&
&                                           '" not found. Cannot continue.',-1)
!         write(0,*) d
       getipar_ind=>d
!
       end function getipar_ind
!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
       subroutine ch_param_init()
!    initialize params structure
       call ch_param_done()
       call atoms_init(tpar)
       call bonds_init(bpar)
       call angles_init(apar)
       call dihes_init(dpar)
       call dihes_init(ipar)
       ch_param_initialized=.true.
       end subroutine ch_param_init
!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
       subroutine ch_param_done()
       call atoms_done(tpar)
       call bonds_done(bpar)
       call angles_done(apar)
       call dihes_done(dpar)
       call dihes_done(ipar)
       ch_param_initialized=.false.
       end subroutine ch_param_done
!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
!
       subroutine parse_ch_param(fid                 &
#ifdef __PARALLEL
     &                           ,communicator, me__ &
#endif
     &                           )
!
       __DEP_OUTPUT
#ifdef __PARALLEL
       __DEP_MPI
#endif
       __DEP_CONST
!
#ifdef __PARALLEL
       int4mpi :: me, communicator
       int4mpi, optional :: me__
#endif
!
       int :: fid ! input file handle
!
       int :: i
       __IAM(PARSE_CH_PARAM)
!
       int, parameter :: qver=0, qbond=1, qangl=2, qdihe=3, qimpr=4, qnonb=5, qhbon=6, qnbfi=7, qcmap=8
       int :: which
       bool :: qerror
!
       integer :: ioerr
       int4mpi :: ierror
       int :: l=0, oldl=0, newl=0
       character(len=maxlinelen) :: cmdline
       character(len=maxlinelen) :: oldcmd, newcmd ! for line continuation
       character(len=8) :: keyword, atom1, atom2, atom3, atom4
       float :: kb, b0, ktheta, theta0, kub, s0, kchi, delta
       int :: version=-1 
       int :: typeid, mult
       float :: amass, rmino2, rmino214, eps, eps14, fdummy
       character(len=2) :: el ! chemical element
!
!     do work
!
#if __PARALLEL
       if (present(me__)) then ; me=me__  ; else ; call mpi_comm_rank(communicator,me,ierror) ; endif
#endif
!
       which=qver
       qerror=.false.
       oldcmd=''; oldl=0
       if (.not. ch_param_initialized) call ch_param_init()
       call message(whoami, 'Reading CHARMM Parameter/Topology file.')
       do while (.true.)
#ifdef __PARALLEL
        if (me.le.0) read(fid,'(A)',IOSTAT=ioerr) newcmd ! if running in parallel, then only the root node is passed a valid handle
        if (communicator.ne.MPI_COMM_NULL) call MPI_BCAST(ioerr,1,MPI_INT,0,communicator,ierror)
#else
        read(fid,'(A)',IOSTAT=ioerr) newcmd ! if running in parallel, then only the root node is passed a valid handle
#endif
        if (ioerr.eq.0) then
#ifdef __PARALLEL
         if (communicator.ne.MPI_COMM_NULL) call MPI_BCAST(newcmd,len(newcmd),MPI_BYTE,0,communicator,ierror) ! broadcast to all CPUs
#endif
         call adjustleft(newcmd)
         newl=len_trim(newcmd)
! remove comments from line
         i=1
         do while (i.le.newl)
          if (any(comment.eq.newcmd(i:i))) exit
          i=i+1
         enddo
         do while(i.le.newl)
          newcmd(i:i)=' '
          i=i+1
         enddo
         newl=len_trim(newcmd) ! new length
!
         cmdline=oldcmd(1:oldl)//' '//newcmd(1:newl)
         call adjustleft(cmdline)
         l=len_trim(cmdline)
         oldcmd=''; oldl=0;
!
         if (l.eq.0) cycle
!           write(0,*) cmdline(1:l)
!
         if (cmdline(l:l).eq.hyphen) then ! continuation line
          oldcmd=cmdline(1:l-1); oldl=l-1
          cycle
         endif
!
         call toupper(cmdline) ! convert to upper-case
         if (l.ge.3) then
          keyword=cmdline(1:3)
          if (keyword.eq.'END') exit
         endif
!
         if (l.ge.4) then
!    topology file entries: process only 'MASS'
          keyword=cmdline(1:4)
          if (numword(cmdline).gt.1) then
           select case(keyword)
            case('MASS')
             read(cmdline,*) keyword, typeid, atom1, amass, el
             i=atoms_uadd_mass(tpar, atom1, amass, el, typeid)
             which=-1;
             cycle
            case('BOND','DIHE','DECL','DEFA','AUTO','GROU','RESI','ATOM','DOUB','IMPR','DONO','ACCE','PATC','PRES','CMAP','ANGL',&
&                 'DELE','BILD','THET') ! skip these topology entries
             cycle
! in case NONB or HBON are followed by default options
            case('HBON'); which=qhbon; cycle;
            case('NONB'); which=qnonb; cycle;
!
           end select
           if (keyword(1:2).eq.'IC') cycle ! also skip IC entries
          else ! parameter file entries (section headings are 1 per line)
           select case(keyword)
            case('BOND'); which=qbond;
            case('ANGL','THET'); which=qangl;
            case('DIHE','PHI'); which=qdihe;
            case('IMPR','IMPH'); which=qimpr;
            case('NONB'); which=qnonb; ! for now, ignore the rest of the line
            case('HBON'); which=qhbon; ! for now, ignore the rest of the line
            case('NBFI'); which=qnbfi;
            case('CMAP'); which=qcmap;
           end select
           cycle
          endif ! numword.eq.1
         endif ! l>=4
!
         select case(which)
          case(qbond);
           read(cmdline,*) atom1, atom2, kb, b0
           i=bonds_uadd(bpar,atom1, atom2, kb, b0)
          case(qangl);
!V(angle) = Ktheta(Theta - Theta0)**2
!
!V(Urey-Bradley) = Kub(S - S0)**2
!
!Ktheta: kcal/mole/rad**2
!Theta0: degrees
!Kub: kcal/mole/A**2 (Urey-Bradley)
!S0: A
!
!atom types     Ktheta    Theta0   Kub     S0
           theta0=-999.; s0=-999.; kub=-999.
           read(cmdline,*,IOSTAT=ierror) atom1, atom2, atom3, ktheta, theta0, kub, s0 ! convert theta0 to radians below
           if (ierror.lt.0) then
            if (theta0.eq.-999.) then
             call error(whoami, 'ERROR IN ANGLE PARAMETERS. CANNOT CONTINUE.',0)
             call error(whoami, cmdline(1:l),-1)
            endif
!
            if (s0.eq.-999.) then ! no U/B term
             s0=-1.; kub=-1.
            endif
           endif
!
           i=angles_uadd(apar, atom1, atom2, atom3, ktheta, theta0/180.0*pi, kub, s0)
!
          case(qdihe)
           read(cmdline,*) atom1, atom2, atom3, atom4, kchi, mult, delta
           i=dihes_uadd(dpar, atom1, atom2, atom3, atom4, kchi, delta/180.0*pi, mult)
          case(qimpr)
           read(cmdline,*) atom1, atom2, atom3, atom4, kchi, mult, delta
           i=dihes_uadd(ipar, atom1, atom2, atom3, atom4, kchi, delta/180.0*pi, mult)
          case(qnonb)
           eps=-999.; eps14=-999.; rmino214=-999.
           read(cmdline,*,IOSTAT=ierror) atom1, fdummy, eps, rmino2, fdummy, eps14, rmino214
           if (ierror.lt.0) then
            if (eps.eq.-999.) then
             call error(whoami, 'ERROR IN NONBONDED PARAMETERS. CANNOT CONTINUE.',0)
             call error(whoami, cmdline(1:l),-1)
            endif
!
            if (eps14.eq.-999.) then ! no special 1-4 term
             eps14=-1.; rmino214=-1.
            endif
           endif
!
           i=atoms_uadd_nonb(tpar, atom1, rmino2, eps, rmino214, eps14)
!
          case(qhbon)
!
          case(qnbfi)
!
          case(qcmap)
!
          case(qver) ! allow version to be read (present in topology files)
           read(cmdline,*) version; which=-1; ! can read version info only once
          case default
           call error(whoami, 'UNRECOGNIZED LINE IN PARAMETER FILE. CANNOT CONTINUE.',0)
           call error(whoami, cmdline(1:l),-1)
          end select

        else ! end of file
         exit
        endif ! ioerr
       enddo ! over all lines in the file
!
#ifdef PARALLEL
       call MPI_BCAST(error,MPI_BOOL,1,0,communicator,ioerror)
#endif
       if (qerror) then 
         call error(whoami, 'ERROR(S) FOUND IN INPUT. CANNOT CONTINUE.',-1)
       else
         call message(whoami, 'Parameter file read.')
       endif
!
       end subroutine parse_ch_param
!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
       subroutine list_ch_params(              &
#ifdef __PARALLEL
     &                      communicator, me__ &
#endif
     &                                          )
       __DEP_OUTPUT
!
#ifdef __PARALLEL
       __DEP_MPI
#endif
!
#ifdef __PARALLEL
       int4mpi, optional :: me__
       int4mpi :: communicator, me, ierr
#endif
!
       __IAM(LIST_CH_PARAMS)
       int :: i
!
!
#ifdef __PARALLEL
       if (present(me__)) then ; me=me__ ; else ; call mpi_comm_rank(communicator,me,ierr) ; endif
#endif
!
!
       if (.not.ch_param_initialized) call ch_param_init()
!
#ifdef __PARALLEL
       if (me.le.0) then
#endif // __PARALLEL
        call message(whoami,'THE FOLLOWING ATOM PARAMETERS ARE DEFINED')
        call message(whoami,'=========================================')
        do i=1,tpar%last
         if (tpar%rmino214(i).gt.0) then
          write(fout,'(A,I5,A,F10.4,A,F10.4,A,F10.4,A,F10.4,A,F10.4)')tab//'ATOM:  '//tpar%a1(i)(1:len_trim(tpar%a1(i)))&
&          //tab//' ID =',tpar%typeid(i),'  El ='//tpar%el(i)//'  Mass =', tpar%mass(i),','//'  Rmin/2 =',tpar%rmino2(i),&
&          ','//'  eps =',tpar%eps(i),&
&          ','//'  Rmin/2,1-4 =',tpar%rmino214(i),','//'  eps,1-4 =',tpar%eps14(i)
         else
          write(fout,'(A,I5,A,F10.4,A,F10.4,A,F10.4,A,F10.4,A,F10.4)')tab//'ATOM:  '//tpar%a1(i)(1:len_trim(tpar%a1(i)))&
&          //tab//' ID =',tpar%typeid(i),'  El ='//tpar%el(i)//'  Mass =', tpar%mass(i),','//'  Rmin/2 =',tpar%rmino2(i),&
&          ','//'  eps =',tpar%eps(i)
         endif
        enddo
        call message(whoami,'==========================================')
!
        call message(whoami,'THE FOLLOWING BOND PARAMETERS ARE DEFINED')
        call message(whoami,'=========================================')
        do i=1,bpar%last
        write(fout,'(A,F10.4,A,F10.4)')tab//'BOND: '//bpar%a1(i)(1:len_trim(bpar%a1(i)))//'--'//bpar%a2(i)(1:len_trim(bpar%a2(i)))&
&         //tab//': Kb =', bpar%kb(i),','//tab//' b0 =',bpar%b0(i)
        enddo
        call message(whoami,'==========================================')
!
        call message(whoami,'THE FOLLOWING ANGLE PARAMETERS ARE DEFINED')
        call message(whoami,'==========================================')
        do i=1,apar%last
         if (apar%s0(i).gt.0) then
          write(fout,'(4(A,F10.4))')tab//'ANGLE: '//apar%a1(i)(1:len_trim(apar%a1(i)))//'--'&
&                //apar%a2(i)(1:len_trim(apar%a2(i)))//'--'//apar%a3(i)(1:len_trim(apar%a3(i)))&
&                //tab//': Ktheta =', apar%ktheta(i),','//tab//' theta0 =',apar%theta0(i),&
&                ','//tab//' Kub =', apar%kub(i),','//tab//' s0 =',apar%s0(i)
         else
          write(fout,'(3(A,F10.4))')tab//'ANGLE: '//apar%a1(i)(1:len_trim(apar%a1(i)))//'--'&
&                //apar%a2(i)(1:len_trim(apar%a2(i)))//'--'//apar%a3(i)(1:len_trim(apar%a3(i)))&
&                //tab//': Ktheta =', apar%ktheta(i),','//tab//' theta0 =',apar%theta0(i)
         endif
        enddo
        call message(whoami,'=============================================')
!
        call message(whoami,'THE FOLLOWING DIHEDRAL PARAMETERS ARE DEFINED')
        call message(whoami,'=============================================')
        do i=1,dpar%last
          write(fout,'(2(A,F10.4)A,I2)')tab//'DIHEDRAL: '//dpar%a1(i)(1:len_trim(dpar%a1(i)))//'--'&
&                //dpar%a2(i)(1:len_trim(dpar%a2(i)))//'--'//dpar%a3(i)(1:len_trim(dpar%a3(i)))&
&             //'--'//dpar%a4(i)(1:len_trim(dpar%a4(i)))//'  '//tab//': Kchi =', dpar%kchi(i),','//tab//' delta =',dpar%delta(i),&
&                ','//tab//' mult =', dpar%mult(i)
        enddo
        call message(whoami,'=============================================')
#ifdef __PARALLEL
       endif
#endif
       end subroutine list_ch_params
!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
!
end module ch_param
