#define __CTX __STRING(__MOLCTX)
#define __DEFPARFMT __STRING(CHARMM)
module system
 __DEP_CONST
 __DEP_PARSER
 __DEP_OUTPUT
 use ch_param
 __DEP_PSF
 __DEP_FILES
 use datatypes
 use state
#ifdef __PARALLEL
 __DEP_MULTICOM
#endif
#//
#define __FPTR1(__A) __A=>vptr%v(:,1,1);nullify(vptr);
#define __FPTR2(__A) __A=>vptr%v(:,:,1);nullify(vptr);
#//
#define __THISCOMM __SYSCOMM
#include "multicom_def.src"
#//
 __IMPNONE

 private

 int, public, save :: natom =-1
 int, public, parameter :: ndim=3                                          ! dimensionality
!
! array pointers
! type(varray3df), pointer, save :: r_=>NULL(), vr_=>NULL(), fr_=>NULL()    ! positions, velocities, forces
! type(varray3df), pointer, save :: m_=>NULL(), q_=>NULL(), radius_=>NULL() ! mass, charges & radii
! type(varray3df), pointer, save :: bfactor_=>NULL(), occupancy_=>NULL()    ! bfactor, occupancy
!#ifdef __RCOMP
! type(varray3df), pointer, save :: rcomp=>NULL()                           ! auxiliary position set
!#endif
  type(varray3df), pointer :: vptr=>NULL()
! corresponding data arrays
 float, pointer, save, public, dimension(:,:) :: r=>NULL(), vr=>NULL(), fr=>NULL()
#ifdef __RCOMP
 float, pointer, save, public, dimension(:,:) :: rcomp=>NULL()
#endif
 float, pointer, save, public, dimension(:) ::   m=>NULL(), q=>NULL(), radius=>NULL()
 float, pointer, save, public, dimension(:) ::   bfactor=>NULL(), occupancy=>NULL()

 float, public, save :: BondE, AngleE, DiheE, ImprE, KinE(2)! , CmapE, ElecE, VdWE, PotE, KinE, AuxE          ! energy terms

 bool, public :: system_parameters_initialized=.false.
 bool, public :: system_structure_initialized=.false.
 bool, public :: system_coordinates_initialized=.false.
 bool, public :: system_velocities_initialized=.false.
 bool, public :: system_radii_initialized=.false.
 bool, public :: system_charges_initialized=.false.
 bool, public :: system_PDB_initialized=.false. ! poor man`s structure file (insufficient for energy calculations)
 bool, public :: system_ok=.false.
 bool, public :: system_initialized=.false.
!
 public system_read_parameters
 public system_list_parameters
 public system_read_structure
 public system_PDB_init
!
 public system_initialize
 public system_check
 public system_get_vw_radius  ! populate radius array (above) from nonbonded parameters
 public system_printe
 public system_init_mol_scalar_nocase
 public system_init_velocities
 public system_read_coordinates
 public system_read_velocities
 public system_write_coordinates
 public system_write_velocities
 public system_write_dcd
 public system_write_restart
 public system_compute
 public system_getind        ! return the set of atomic indices that match a valid selection
! public system_getind_charmm ! selection routine with charmm-compatible syntax
 public system_done
 public system_exec

 contains
!================================================================================
 subroutine system_initialize()
  __IAM(SYSTEM_INITIALIZE)
!
  character(len=vartaglen) :: struct_type
  character(len=vartaglen) :: filename
  character(len=vartaglen) :: keyword
!
  float, pointer :: p(:)=>NULL() ! auxiliary pointer
  int :: i, l
!================================================================================
  if (system_initialized) then
   call warning(whoami, 'System already initialized. Use "done" to finalize.',0)
   return
  endif
!
! use macros to process input parameters
#define __CONTEXT __CTX
!
#define __VAR	struct_type
#define __NAME	Structure file format
#define __TAG	structype
#define __DEFAULT
#define __DEFAULT_VAL 'CHARMM'
#define __CHAR
#include "parser/parser_macro1.src"
!
#undef __DEFAULT
#define __WARNIFMISSING
#define __VAR	filename
#define __NAME	Structure file
#define __TAG	structure
#include "parser/parser_macro1.src"
!
  select case(struct_type);
   case('CHARMM', 'XPLOR');
    call system_read_structure(filename)
    system_structure_initialized=.true.
    system_charges_initialized=.true.
! other poor man`s structure files
   case('PDB');
    call system_PDB_init(filename,'PDB'); ! last argument specifies whether PDB or PQR format will be used
    system_PDB_initialized=.true.
    system_coordinates_initialized=.true.
   case('PQR');
    call system_PDB_init(filename,'PQR');
    system_PDB_initialized=.true.
    system_coordinates_initialized=.true.
    system_radii_initialized=.true.
    system_charges_initialized=.true.
   case('COR','CRD');
    call system_PDB_init(filename,'CHARMM');
    system_PDB_initialized=.true.
    system_coordinates_initialized=.true.
   case default
    call warning(whoami, 'Unknown structure format. Abort',-1)
    return
  end select
!
! coordinates
!
  if (.not.system_coordinates_initialized.or.existtag_nocase('coordinates',__CTX)) then
   filename=getval_nocase('coordinates',__CTX);
   call system_read_coordinates(filename);
  elseif (.not.(system_coordinates_initialized.or.existtag_nocase('coordinates', __CTX))) then
   call error(whoami, 'Atomic coordinates unspecified. Abort',-1);
  endif
!
! parameters
  if (existtag_nocase('parameters',__CTX)) then 
!============= read parameter file(s); CHARMM topology files are also accepted =====
     filename=getval_nocase('parameters',__CTX)
     call system_read_parameters(filename)
     i=2
     do
      write(keyword,'(I10)') i
      call adjustleft(keyword)
      if (existtag_nocase('parameters'//trim(keyword),&
     &                                                __CTX)) then
        filename=getval_nocase('parameters'//trim(keyword),&
     &                                                         __CTX)
        call system_read_parameters(filename)
        i=i+1
      else
        exit
      endif
     enddo
     system_parameters_initialized=.true.
! initialize radii (make sure arrays are allocated)
     call system_get_vw_radius() ! the radius array is not used in dynamics
     system_radii_initialized=.true.
! initialize velocities
     if (existtag_nocase('velocities',__CTX)) then
      filename=getval_nocase('velocities',__CTX);
      call system_read_velocities(filename);
     endif
!
  endif ! parameters
!
! ==== additional options to override or assign charges and radii
! charges
  if (existtag_nocase('charges',__CTX)) then 
   p=>system_init_mol_scalar_nocase('charges',__CTX)
   if (associated(p)) then 
    q=p ; deallocate(p)
   else
    call warning(whoami, 'Cannot assign charges (null pointer internal error).',-1)
   endif
  endif
! radii
  if (existtag_nocase('radii', __CTX)) then 
   p=>system_init_mol_scalar_nocase('radii',__CTX)
   if (associated(p)) then 
    q=p ; deallocate(p)
   else
    call warning(whoami, 'Cannot assign radii (null pointer internal error).',-1)
   endif
  endif
!======================================================================
  system_initialized=.true.
!
 end subroutine system_initialize
!
!======================================================================
 subroutine system_read_parameters(filename)
 character(len=*) :: filename
 character(len=vartaglen) :: fname
 character(len=vartaglen) :: paramtype
 __IAM(SYSTEM_READ_PARAMETERS)
 int :: flen
 int :: fid=-1
!
 fname=filename
 call adjustleft(fname)
 flen=len_trim(fname)
 if (flen.gt.0) then
   call files_open(fid,fname(1:flen),'FORMATTED','READ')
   if (fid.le.0) then 
    call warning(whoami, 'Cannot open parameter file. Abort.',-1)
    return
   endif
 else
  call warning(whoami, 'Parameter file name not specified. Abort.',-1)
  return
 endif
!
!    call parser
 __GET_OPT_PAR(paramtype, paramtype, __DEFPARFMT, __CTX)
 select case(paramtype)
   case('CHARMM','XPLOR')
    call message(whoami, 'Reading parameters in CHARMM format.')
    call parse_ch_param(fid&
#ifdef __PARALLEL
&  ,MPI_COMM_DMOL &
#endif
&)
   case default
    call warning(whoami, 'Unknown parameter file format. Abort.',-1)
    return
 end select
!
 call files_close(fid)
!
 end subroutine system_read_parameters
!===================================================================
 subroutine system_list_parameters()
 character(len=vartaglen) :: paramtype
 __IAM(SYSTEM_LIST_PARAMETERS)
!
 __GET_OPT_PAR(paramtype, paramtype, __DEFPARFMT, __CTX)
 select case(paramtype)
   case('CHARMM','XPLOR')
    call list_ch_params(&
#ifdef __PARALLEL
&  MPI_COMM_DMOL &
#endif
&    )
   case default
    call warning(whoami, 'Unknown parameter file format. Abort.',-1)
 end select
!
 end subroutine system_list_parameters 
!%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% 
 subroutine system_read_structure(filename)
 __DEP_FILES
 character(len=*), intent(in) :: filename
 character(len=vartaglen) :: fname
 character(len=vartaglen) :: paramtype
 __IAM(SYSTEM_READ_STRUCTURE)
 int :: flen
 int :: fid=-1
!
 fname=filename
 call adjustleft(fname)
 flen=len_trim(fname)
 if (flen.gt.0) then
   call files_open(fid,fname(1:flen),'FORMATTED','READ')
   if (fid.le.0) then 
    call warning(whoami, 'Cannot open structure file. Abort.',-1)
    return
   endif
 else
  call warning(whoami, 'Structure file name not specified. Abort.',-1)
  return
 endif
!    call parser
 __GET_OPT_PAR(structype, paramtype, __DEFPARFMT, __CTX)
 select case(paramtype)
   case('CHARMM');
    call message(whoami, 'Reading structure in CHARMM format (PSF) from file '//fname(1:flen)//'.')
    call psf_read(fid &
#ifdef __PARALLEL
& ,MPI_COMM_DMOL &
#endif
&    )
    call psf_info(&
#ifdef __PARALLEL
&  MPI_COMM_DMOL &
#endif
&    )
   case('XPLOR');
    call message(whoami, 'Reading structure in X-PLOR format (PSF) from file '//fname(1:flen)//'.')
    call psf_read(fid,&
#ifdef __PARALLEL
& MPI_COMM_DMOL, &
#endif
&    XPL=.true.)
    call psf_info(&
#ifdef __PARALLEL
&  MPI_COMM_DMOL &
#endif
&    )
!    call psf_print()
   case default;
    call warning(whoami, 'Unknown structure file format. Abort.',-1)
    return
 end select
!
 call files_close(fid)
!
 end subroutine system_read_structure
!======================================================================
 subroutine system_read_coordinates(filename)
 use charmmio
 use freeio
 use pdbio
 __DEP_FILES
 __DEP_CONST
!
#ifdef __PARALLEL
 __DEP_MULTICOM
#endif
!
#ifdef __PARALLEL
 int :: ierror
#endif
!
 character(len=*), intent(in) :: filename
 character(len=vartaglen) :: fname
 character(len=vartaglen) :: coortype
 int :: flen
 bool :: qinit
 bool :: qnone
 int :: fid=iminusone
 __IAM(SYSTEM_READ_COORDINATES)
!
 fname=filename
 call adjustleft(fname)
 flen=len_trim(fname)
 if (flen.gt.0) then
!
! allow "none"
  coortype=fname; call toupper(coortype); qnone=coortype.eq.'NONE';
!
  if (__ME.le.0) then ! if me=-1, assume valid serial mode 
   if (qnone) then
    call warning(whoami, 'Will try to proceed without coordinates.',0)
   else
    call files_open(fid,fname(1:flen),'FORMATTED','READ')
    if (fid.le.0) then 
     call warning(whoami, 'Cannot open coordinate file. Abort.',-1)
    endif
   endif ! qnone
  endif ! me
 else
  call warning(whoami, 'Coordinate file name not specified. Abort.',-1)
  return
 endif
!
 if (fatal_warning(__COMM)) return
!
 if (.not.(system_structure_initialized.or.system_PDB_initialized)) then
  call warning(whoami, 'Structure not initialized. Cannot proceed.',-1)
 endif
 if (fatal_warning(__COMM)) return
!
!allocate local arrays & copy mass and charge from structure info
!note: variables are stored inside state module
!
 natom=atoms%last
 qinit=.false. ! do not query parser for initialization options
!
 call state_add3df('POSITION' ,'Positions'              , (/ndim,natom/), __COMM _COMMA __CTX, vptr, qinit); __FPTR2(r);
 call state_add3df('VELOCITY' ,'Velocities'             , (/ndim,natom/), __COMM _COMMA __CTX, vptr, qinit); __FPTR2(vr);
 call state_add3df('FORCE'    ,'Forces'                 , (/ndim,natom/), __COMM _COMMA __CTX, vptr, qinit); __FPTR2(fr);
 call state_add3df('MASS'     ,'Masses'                 , (/natom/),      __COMM _COMMA __CTX, vptr, qinit); __FPTR1(m);
 call state_add3df('CHARGE'   ,'Charges'                , (/natom/),      __COMM _COMMA __CTX, vptr, qinit); __FPTR1(q);
 call state_add3df('RADIUS'   ,'Radius'                 , (/natom/),      __COMM _COMMA __CTX, vptr, qinit); __FPTR1(radius);
 call state_add3df('BFACTOR'  ,'Debye-Waller (B) factor', (/natom/),      __COMM _COMMA __CTX, vptr, qinit); __FPTR1(bfactor);
 call state_add3df('OCCUPANCY','Occupancy'              , (/natom/),      __COMM _COMMA __CTX, vptr, qinit); __FPTR1(occupancy);

#ifdef __RCOMP
 call state_add3df('AUXPOS'   ,'Auxiliary coordinates'  , (/ndim,natom/), __COMM _COMMA __CTX, vptr, qinit); __FPTR2(rcomp);
#endif
 m=atoms%mass(1:natom)
 q=atoms%charge(1:natom)
! initialize coordinates
 r=unknownf; vr=unknownf; fr=zero
#ifdef __RCOMP
 rcomp=unknownf
#endif
 occupancy=unknownf;
 bfactor=unknownf;
!
 if (.not.qnone) then
!    call parser
  coortype=getval_nocase_upper('coortype')
  select case(coortype)
   case('CHARMM')
    call message(whoami, 'Reading coordinates in CHARMM format from file "'//fname(1:flen)//'".')
    if (__ME.le.0) call ch_coor_read(fid,r, bfactor)
   case('ATOMID')
    call message(whoami, 'Reading coordinates in free format by atomid from file "'//fname(1:flen)//'".')
    if (__ME.le.0) call atomid_coor_read(fid,r)
   case('PDB')
    call message(whoami, 'Reading coordinates in PDB format from file "'//fname(1:flen)//'".')
    if (__ME.le.0) call PDB_read(fid,r,occupancy,bfactor)
   case('PQR')
    call message(whoami, 'Reading coordinates in PQR format from file "'//fname(1:flen)//'".')
    if (__ME.le.0) call PQR_read(fid,r,q,radius)
    call warning(whoami, 'PQR format lacks SEGID identifier. This may cause coordinate errors.',0)
#ifdef __PARALLEL
    call MPI_BCAST(r, 3*natom, mpifloat, 0, __COMM, ierror)
#endif
!    call coor_check()
   case default
    call warning(whoami, 'Unknown coordinate file format. Abort.',-1)
    return
   end select
!
   __QPRINT(call files_close(fid))
!
 endif ! qnone
!
 system_coordinates_initialized=.true. ! note that if qnone=1, arrays are allocated but set to unknown values
!
 end subroutine system_read_coordinates
!======================================================================
 subroutine system_read_velocities(filename)
 use charmmio
 use freeio
 use pdbio
 __DEP_FILES
 __DEP_CONST
!
#ifdef __PARALLEL
 __DEP_MULTICOM
#endif
!
#ifdef __PARALLEL
 int :: ierror
#endif
!
 character(len=*), intent(in) :: filename
 character(len=vartaglen) :: fname
 character(len=vartaglen) :: coortype
 int :: flen
 int :: fid=iminusone
 __IAM(SYSTEM_READ_VELOCITIES)
!
 fname=filename
 call adjustleft(fname)
 flen=len_trim(fname)
 if (flen.gt.0) then
  if (__ME.le.0) then ! if me=-1, assume valid serial mode 
   call files_open(fid,fname(1:flen),'FORMATTED','READ')
   if (fid.le.0) then 
    call warning(whoami, 'Cannot open velocity file. Abort.',-1)
    return
   endif
  endif
 else
  call warning(whoami, 'Velocity file name not specified. Abort.',-1)
  return
 endif
!
 if (.not.system_coordinates_initialized) then
  call warning(whoami, 'Velocity not initialized. Cannot proceed.',-1)
  return
 endif
!
 coortype=getval_nocase_upper('veltype')
  select case(coortype)
   case('CHARMM')
    call message(whoami, 'Reading velocities in CHARMM format from file "'//fname(1:flen)//'".')
    if (__ME.le.0) call ch_coor_read(fid,vr)
   case('ATOMID')
    call message(whoami, 'Reading velocities in free format by atomid from file "'//fname(1:flen)//'".')
    if (__ME.le.0) call atomid_coor_read(fid,vr)
   case('PDB')
    call message(whoami, 'Reading velocities in PDB format from file "'//fname(1:flen)//'".')
    if (__ME.le.0) call PDB_read(fid,vr)
   case('PQR')
    call message(whoami, 'Reading velocities in PQR format from file "'//fname(1:flen)//'".')
    if (__ME.le.0) call PQR_read(fid,vr)
    call warning(whoami, 'PQR format lacks SEGID identifier. This may cause coordinate errors.',0)
#ifdef __PARALLEL
 call MPI_BCAST(vr, 3*natom, mpifloat, 0, __COMM, ierror)
#endif
!    call coor_check()
   case default
    call warning(whoami, 'Unknown velocity file format. Abort.',-1)
    return
  end select
!
 __QPRINT(call files_close(fid))
!
 system_velocities_initialized=.true.
!
 end subroutine system_read_velocities
!===========================================================================
 subroutine system_write_coordinates(filename, which)
 use corio
#ifdef __PARALLEL
 __DEP_MULTICOM
#endif
!
 character(len=*) :: filename
 character(len=*), optional :: which
 character(len=20) :: which2
 character(len=vartaglen) :: tag
 __IAM(SYSTEM_WRITE_COORDINATES)
 int :: flen
 int :: fid=-1, l
 float, pointer :: rout(:,:)
 bool :: ok=.false.
!
 if (present(which)) then ; which2=which ; else ; which2='COOR' ; endif

 call toupper(which2)
 select case(which2)
  case('COOR','CORD','C','COORDINATES','COORD'); tag='coordinates'; rout=>r
  case('VEL','V','VELO','VELOCITIES'); tag='velocities'; rout=>vr
  case('FC','F','FORCE','FORCES'); tag='forces'; rout=>fr
  case default;
   call warning(whoami, 'Invalid array requested for output. Abort.',-1)
 end select
!
 if (.not.system_structure_initialized) then
  call warning(whoami, 'Structure not initialized. Cannot proceed.',-1)
 endif
!
 if (fatal_warning()) return
 if (__ME.le.0) ok=corio_write(filename,getval_nocase('coortype'),rout)
!
 end subroutine system_write_coordinates
!%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
 subroutine system_write_velocities(f); character(len=*) :: f; call system_write_coordinates(f,'VEL')
 end subroutine system_write_velocities
!%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
 subroutine system_write_forces(f); character(len=*) :: f; call system_write_coordinates(f,'FC')
 end subroutine system_write_forces
!%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
 subroutine system_write_restart(filename)
 character(len=*) :: filename
 character(len=len(filename)) :: fname
 __IAM(SYSTEM_WRITE_RESTART)
 int :: fid=-1, flen
 float, pointer :: rout(:,:)
!
 if (.not.system_parameters_initialized) call warning(whoami, 'Parameters not initialized. Cannot proceed.' ,-1)
 if (.not.system_structure_initialized)  call warning(whoami, 'Structure not initialized. Cannot proceed.'  ,-1)
 if (.not.system_coordinates_initialized)call warning(whoami, 'Coordinates not initialized. Cannot proceed.',-1)
 if (.not.system_velocities_initialized) call warning(whoami, 'Velocities not initialized. Cannot proceed.',-1)
 if (fatal_warning()) return
!
 fname=filename
 call adjustleft(fname)
 flen=len_trim(fname)
 if (flen.gt.0) then
  if (__ME.le.0) then 
   call files_open(fid, name_=fname(1:flen), form_='FORMATTED', action_='WRITE')
   if (fid.le.0) call warning(whoami, 'Cannot open input file. Abort.',-1)
  endif ! me
 else
  call warning(whoami, 'File name not specified. Abort.',-1)
 endif
!
 if (fatal_warning()) return
!
! write restart file :
! (nothing yet)
!
 end subroutine system_write_restart
!%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
 subroutine system_write_dcd(fid,addheader)
 use charmmio
#ifdef __PARALLEL
 __DEP_MULTICOM
#endif
 int :: fid, ioerr
 bool :: addheader
 __IAM(SYSTEM_WRITE_DCD)
!
! in parallel, will need to gather coordinates
!
 if (__ME.le.0) then 
  ioerr=dcd_write_frame(fid,r,addheader)
  if (ioerr.ne.0) then
   call warning(whoami, 'Trajectory write error, IOSTAT='//itoa(ioerr),0);
  endif
 endif
 end subroutine
!============================================================================
 subroutine system_init_velocities() 
 use rng
 __DEP_OUTPUT
 use mol_formats
 __DEP_CONST
 __IAM(SYSTEM_INIT_VELOCITIES)
 character(len=vartaglen) :: keyword
 float :: itemp
 int :: i, l
 int :: c=9 ! random channel
!
 if (.not.system_coordinates_initialized) then ! arrays not allocated
  call warning(whoami, 'Coordinates not initialized. Cannot proceed.',-1)
  return
 endif
!    call parser
 if (existtag_nocase('init_temp')) then ! NOTE : velocities initialization should be done ala variable initialization in ches
  keyword=getval_nocase('init_temp')
 elseif (existtag_nocase('init_temperature')) then
  keyword=getval_nocase('temperature')
 else
  call warning(whoami, 'Initialization temperature not specified. Abort.',0)
  return
 endif
 itemp=atof(keyword)
 l=len_trim(keyword)
! 
 call message(whoami, 'Initializing velocities at temperature '//keyword(1:l)//' Kelvin.')
 call randomg_vector(vr, ndim*natom, c)
 itemp=sqrt(kboltzmann*itemp)
 do i=1,3
  vr(i,:)=vr(i,:)/sqrt(m(:))*itemp
 enddo
!
 system_velocities_initialized=.true.
 end subroutine system_init_velocities 
!==============================================================================
! NOTE: need to take into account generic params (Z)
 subroutine system_check()
 use ivector
 use tlist
 use psfatom, only: unknown
 __DEP_CONST
!
 character(len=8) :: a1, a2, a3, a4
 int :: i, j, i1, i2, i3, i4, j1, j2, j3, k, l
 int, pointer :: jj(:)
 __IAM(SYSTEM_CHECK)
!
 if (.not.system_parameters_initialized) then
   call warning(whoami, 'Parameters not initialized. Cannot proceed.',-1)
  return
 endif
!
 if (.not.system_structure_initialized) then
   call warning(whoami, 'Structure not initialized. Cannot proceed.',-1)
  return
 endif
!
! first, look up the atom type in the topology file and store in the structure
 do i=1,atoms%last ! structure
! see if the atom type is unknown
  if (atoms%type(i).eq.unknown) then
   i1=atoms%typeid(i)
   do j=1, tpar%last ! param
    if (tpar%typeid(j).eq.i1) then
     atoms%type(i)=tpar%a1(j)
     exit
    endif
   enddo
   if (atoms%type(i).eq.unknown) then
    call warning(whoami, 'Invalid type_id '//itoa(i1)//' (Missing parameters?)',0)
    return
   endif
  endif
 enddo
!
! for each bond defined in blist, look for the corresponding parameter entry
 call message(whoami, 'Gathering bond parameters.')
 do i=1, blist%last
  j1=blist%ind(1,i);  j2=blist%ind(2,i) ! bond indices
! find atom types that correspond to the type id`s
  a1='';
  a2='';
  do j=1, atoms%last
   if (atoms%atomid(j).eq.j1) a1=atoms%type(j)
   if (atoms%atomid(j).eq.j2) a2=atoms%type(j)
  enddo
!
  if (a1.eq.'') then
   call warning(whoami, 'NO TYPE FOR ATOM '//itoa(j1)//' (THIS IS STRANGE)',0)
   return
  endif
  if (a2.eq.'') then
   call warning(whoami, 'NO TYPE FOR ATOM '//itoa(j2)//' (THIS IS STRANGE)',0)
   return
  endif
! now look the bond parameter list for a match to a1 -- a2
  j=getbpar_ind(a1,a2)
  if (j.lt.0) return
! set bond parameter index
  blist%ind(3,i)=j
 enddo
! done with bonds
!%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
 call message(whoami, 'Gathering angle parameters.')
 do i=1, alist%last
  j1=alist%ind(1,i);  j2=alist%ind(2,i);  j3=alist%ind(3,i); ! angle indices
! find atom types that correspond to the type id`s
  a1='';
  a2='';
  a3='';
  do j=1, atoms%last
   if ( atoms%atomid(j).eq. j1 ) a1=atoms%type(j)
   if ( atoms%atomid(j).eq. j2 ) a2=atoms%type(j)
   if ( atoms%atomid(j).eq. j3 ) a3=atoms%type(j)
  enddo
!
  if (a1.eq.'') then
   call warning(whoami, 'NO TYPE FOR ATOM '//itoa(j1)//' (THIS IS STRANGE)',0)
   return
  endif
  if (a2.eq.'') then
   call warning(whoami, 'NO TYPE FOR ATOM '//itoa(j2)//' (THIS IS STRANGE)',0)
   return
  endif
  if (a3.eq.'') then
   call warning(whoami, 'NO TYPE FOR ATOM '//itoa(j2)//' (THIS IS STRANGE)',0)
   return
  endif
! now look up the angle parameter list for a match to a1 -- a2 -- a3
  j=getapar_ind(a1,a2,a3)
  if (j.lt.0) return
! set angle parameter index
  alist%ind(4,i)=j
 enddo
! done with angles
!%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
 call message(whoami, 'Gathering dihedral angle parameters.')
 do i=1, dlist%last
  i1=dlist%ind(1,i);  i2=dlist%ind(2,i);  i3=dlist%ind(3,i);   i4=dlist%ind(4,i);! dihedral indices
! find atom types that correspond to the type id`s
  a1='';  a2='';  a3='';  a4='';
  do j=1, atoms%last
   if ( atoms%atomid(j).eq. i1 ) a1=atoms%type(j)
   if ( atoms%atomid(j).eq. i2 ) a2=atoms%type(j)
   if ( atoms%atomid(j).eq. i3 ) a3=atoms%type(j)
   if ( atoms%atomid(j).eq. i4 ) a4=atoms%type(j)
  enddo
!
  if (a1.eq.'') then
   call warning(whoami, 'NO TYPE FOR ATOM '//itoa(i1)//' (THIS IS STRANGE)',0)
   return
  endif
  if (a2.eq.'') then
   call warning(whoami, 'NO TYPE FOR ATOM '//itoa(i2)//' (THIS IS STRANGE)',0)
   return
  endif
  if (a3.eq.'') then
   call warning(whoami, 'NO TYPE FOR ATOM '//itoa(i3)//' (THIS IS STRANGE)',0)
   return
  endif
  if (a4.eq.'') then
   call warning(whoami, 'NO TYPE FOR ATOM '//itoa(i4)//' (THIS IS STRANGE)',0)
   return
  endif
! now look up the dihedral parameter list for a match to a1 -- a2 -- a3 -- a4
! we may have several dihedral parameters with different multiplicities -- get them all in an array:
  jj=>getdpar_ind(a1,a2,a3,a4)
  l=jj(1) ! first element is the number of following dihedral entries
  if (l.lt.1) return
! set dihedral parameter index
  dlist%ind(5,i)=jj(2)
! if additional entries are present, add additional dihedral lines to dlist:
  do k=3,l+1
   j=toplist_add(dlist,ifive,(/ i1, i2, i3, i4, jj(k) /)) ! dihedral entry
  enddo
  deallocate(jj)
 enddo
! done with dihedrals
!%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
 call message(whoami, 'Gathering improper dihedral angle parameters.')
 do i=1, ilist%last
  i1=ilist%ind(1,i);  i2=ilist%ind(2,i);  i3=ilist%ind(3,i);   i4=ilist%ind(4,i);! dihedral indices
! find atom types that correspond to the type id`s
  a1='';  a2='';  a3='';  a4='';
  do j=1, atoms%last
   if ( atoms%atomid(j).eq. i1 ) a1=atoms%type(j)
   if ( atoms%atomid(j).eq. i2 ) a2=atoms%type(j)
   if ( atoms%atomid(j).eq. i3 ) a3=atoms%type(j)
   if ( atoms%atomid(j).eq. i4 ) a4=atoms%type(j)
  enddo
!
  if (a1.eq.'') then
   call warning(whoami, 'NO TYPE FOR ATOM '//itoa(i1)//' (THIS IS STRANGE)',0)
   return
  endif
  if (a2.eq.'') then
   call warning(whoami, 'NO TYPE FOR ATOM '//itoa(i2)//' (THIS IS STRANGE)',0)
   return
  endif
  if (a3.eq.'') then
   call warning(whoami, 'NO TYPE FOR ATOM '//itoa(i3)//' (THIS IS STRANGE)',0)
   return
  endif
  if (a4.eq.'') then
   call warning(whoami, 'NO TYPE FOR ATOM '//itoa(i4)//' (THIS IS STRANGE)',0)
   return
  endif
! now look up the dihedral parameter list for a match to a1 -- a2 -- a3 -- a4
! we may have several dihedral parameters with different multiplicities -- get them all in an array:
  jj=>getipar_ind(a1,a2,a3,a4)
  l=jj(1) ! first element is the number of following dihedral entries
  if (l.lt.1) return
! set dihedral parameter index
  ilist%ind(5,i)=jj(2)
! if additional entries are present, add additional dihedral lines to dlist (note, in CHARMM, multiple impropers are illegal)
  do k=3,l+1
   j=toplist_add(ilist,ifive,(/ i1, i2, i3, i4, jj(k) /)) ! dihedral entry
  enddo
  deallocate(jj)
 enddo
! done with improper dihedrals
!
  system_ok=.true.
 end subroutine system_check
!==================================================================================
 subroutine system_get_vw_radius() ! set radius to the VW radii in parameter file
 use psfatom, only: unknown
 int :: i, j, i1
!
 __IAM(SYSTEM_GET_VW_RADIUS)
!
 if (.not.system_parameters_initialized) call warning(whoami, 'Parameters not initialized. Cannot proceed.' ,-1)
 if (.not.system_structure_initialized)  call warning(whoami, 'Structure not initialized. Cannot proceed.'  ,-1)
 if (.not.system_coordinates_initialized)call warning(whoami, 'Coordinates not initialized. Cannot proceed.',-1)
!
 if (fatal_warning()) return
!
! note code duplication from system_check()
 do i=1,atoms%last ! structure
! see if the atom type is unknown
  if (atoms%type(i).eq.unknown) then
   i1=atoms%typeid(i)
   do j=1, tpar%last ! param
    if (tpar%typeid(j).eq.i1) then
     atoms%type(i)=tpar%a1(j)
     exit
    endif
   enddo
   if (atoms%type(i).eq.unknown) then
    call warning(whoami, 'Invalid type_id '//itoa(i1)//' (Missing parameters?)',0)
    return
   endif
  endif
! now can copy the radius
  radius(i)=tpar%rmino2(j) ! note: rmin_over_two is not necessarily the optimal radius 
 enddo
!
 end subroutine system_get_vw_radius
!%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% 
 subroutine system_compute(forces) 
 bool, optional :: forces
 bool :: f
 __IAM(SYSTEM_COMPUTE)
!
 include 'interface.h'
!
 if (.not.system_ok) then
   call warning(whoami, 'System not initialized. Abort.',0)
  return
 endif
!
 if (present(forces)) then
  f=forces
 else
  f=.true.
 endif
!
 fr=0d0
! (1) -- bonded interactions
 call compute_bonds3(BondE,   blist, bpar, r, fr, f)
 call compute_angles3(AngleE, alist, apar, r, fr, f)
 call compute_dihes3(diheE,   dlist, dpar, r, fr, f)
 call compute_dihes3(imprE,   ilist, ipar, r, fr, f)
! (1i) CMAP
! (2) nonbonded interactions
 end subroutine system_compute
!%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% 
 subroutine system_done()
!
 character(len=vartaglen) :: paramtype
 system_ok=.false.
! 
 if (system_parameters_initialized) then 
  system_parameters_initialized=.false.
!    call parser
  if (existtag('paramtype')) then
   paramtype=getval('paramtype')
   call toupper(paramtype)
   select case(paramtype)
    case('CHARMM','XPLOR')
     call ch_param_done()
   end select
  endif
 endif ! initialized
! structure
 if (system_structure_initialized) then 
  system_structure_initialized=.false.
!    call parser
  if (existtag('paramtype')) then
   paramtype=getval('paramtype')
   call toupper(paramtype)
   select case(paramtype)
    case('CHARMM','XPLOR')
     call psf_done()
   end select
  endif
 endif ! initialized
! coordinates
 natom=-1
!
 system_coordinates_initialized=.false.
 system_velocities_initialized=.false.
!
 end subroutine system_done
!%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% 
 subroutine system_printe() 
 __DEP_OUTPUT
 use parser, only: tab
 use stats
#ifdef __PARALLEL
 __DEP_MULTICOM
#endif
 __DECLARE_MSGBUF
!
 __IAM(SYSTEM_PRINTE)
!
 KinE=calcKE(vr,m)
 if (__ME.eq.0) then
  call message(whoami, '');
  write(_MSGBUF(1),'(A)') tab//'=================== ENERGY =================='
  write(_MSGBUF(2),'(1(A,F10.5))') tab//'TotalE: ', BondE+AngleE+DiheE+ImprE+KinE(1)
  write(_MSGBUF(3),'(2(A,F10.5))') tab//'BondE: ', BondE, tab//'AngleE: ', AngleE
  write(_MSGBUF(4),'(2(A,F10.5))') tab//'DiheE: ', DiheE, tab//' ImprE: ', ImprE
  write(_MSGBUF(5),'(2(A,F10.5))') tab//'KinE: ', KinE(1), tab//'Temp: ', KinE(2)
  write(_MSGBUF(6),'(A)') tab//'============================================='
  __PRINT(_MSGBUF)
 endif
!
 end subroutine system_printe
!=========================================================================
 function system_getind(selection) result(ind)
 __DEP_OUTPUT
 __DEP_PARSER
!
 character(len=*), intent(in) :: selection
 int, pointer :: ind(:)


 end function system_getind
!=========================================================================
 subroutine system_PDB_init(filename, paramtype)
  use psf
  use psfatom
!
  character, parameter :: charmmcomment(1)=(/'*'/)
  character, parameter :: freecomment(4) = (/'*', '#', '%', '!'/)
  character :: comment(4)
  __IAM(SYSTEM_PDB_INIT)
  character(len=maxlinelen) :: cmdline
  character(len=8) :: keyword
!
!  character(len=100, parameter :: pdbfmt='(A6,I5,1X,A4,1X,A3,2X,I4,4X,3F8.3,2F6.2,1X,3X,2X,A4)'
  character(len=100), parameter :: pdbfmt='(A6,I5,1X,A4,1X,A3,2X,A4,4X,3F8.3,2F6.2,1X,3X,2X,A4)' ! resid is a string
  character(len=100), parameter :: pqrfmt='*'
  character(len=100), parameter :: freefmt='*'
  character(len=100), parameter :: charmmextfmt='(I10,10X,2(2X,A8),3F20.10,2X,A8,2X,A8,F20.10)'
  character(len=100), parameter :: charmmfmt='(I5,5X,2(1X,A4),3F10.5,1X,A4,1X,A4,F10.5)'
  character(len=100)            :: fmt
!
  int :: atomid, i, j, n=iminusone
  integer :: ioerr
  float :: x,y,z,occ,bf,d
  character(len=8) :: aname='UNKNOWN', resname='UNKNOWN', segid='UNKNOWN', resid='UNKNOWN'
!
  character(len=*) :: filename
  character(len=len(filename)) :: fname
  character(len=*) :: paramtype
  int :: flen
  int :: fid=100
  int :: pass
  bool :: fext=.false.
  bool :: found=.false.
  bool :: qinit=.false.
!
  fname=filename
  call adjustleft(fname)
  flen=len_trim(fname)
  if (flen.gt.0) then
   call files_open(fid,fname(1:flen),'FORMATTED','READ')
   if (fid.le.0) then 
    call warning(whoami, 'Cannot open structure file. Abort.',-1)
    return
   endif
  else
   call warning(whoami, 'Structure file name not specified. Abort.',-1)
   return
  endif
!
! initialize atom list member in psf
  call atomlist_init(atoms)
!
  select case(paramtype)
   case('ATOMID'); comment=freecomment
   case default; comment=charmmcomment(1)
  end select
!
! read the file in two passes; during the first pass, add atoms to a torn-down PSF;
! in the second pass, populate what data exists in the file
!
  do pass=1,2
!
! remove comments at the beginning, if any
!
  do while (.true.)
   read(fid,'(A)',IOSTAT=ioerr) cmdline
   if (ioerr.eq.0) then 
    if (any(comment.eq.cmdline(1:1))) cycle ! note: this will not get rid of 'REMARK' fields in PDBs
    exit
   else
    call warning(whoami, 'Unexpected end of file.',-1)
    return
   endif
  enddo
!
  if (paramtype.eq.'CHARMM') then 
   if (ioerr.eq.0) then
! guess whether the number of atoms is present
    if ((numword(cmdline)).eq.1) then 
     read(cmdline,*) n
     if (n.gt.100000) fext=.true.
    elseif ((numword(cmdline)).eq.2) then 
     read(cmdline,*) n, keyword
     call adjustleft(keyword)
     if (keyword.eq.'EXT') then
      fext=.true.
     else
      call warning(whoami, 'Unrecognized string in coordinate file.',0)
      call warning(whoami, cmdline,-1)
      return
     endif
    endif
!
    if (fext) then ; fmt=charmmextfmt ; else ; fmt=charmmfmt ; endif
!
   else ! eof
    call warning(whoami, 'Unexpected end of file.',-1)
    return
   endif ! ioerr
!
   if (n.gt.-1) then ! number of atoms not specified in file
    read(fid,'(A)',IOSTAT=ioerr) cmdline 
    if (ioerr.ne.0) then
     call warning(whoami, 'Unexpected end of file.',-1)
     return
    endif
   endif
!
  elseif (paramtype.eq.'PDB') then 
   fmt=pdbfmt
  elseif (paramtype.eq.'PQR') then 
   fmt=pqrfmt
  elseif (paramtype.eq.'ATOMID') then 
   fmt=freefmt
  else
   call warning(whoami, 'Unknown file type "'//paramtype//'". Abort.',-1)
   return
  endif ! paramtype CHARMM
!
  i=1
  do while (ioerr.eq.0)
! process command line
#ifdef DEBUG
  call message(whoami,cmdline(1:80))
#endif
! only lines that begin with 'ATOM'/'HETATM' are processed; 'TER ' or 'END ' indicates end of read
   keyword(1:6)=cmdline(1:6);
   call toupper(keyword)
!***********************************************************************************************
   if (paramtype.eq.'PDB'.or.paramtype.eq.'PQR') then
!
    select case(keyword(1:6))
     case('ATOM  ', 'HETATM');
      if (paramtype.eq.'PDB') read(cmdline,fmt) keyword, atomid, aname, resname, resid, x, y, z, occ, bf, segid
      if (paramtype.eq.'PQR') read(cmdline,fmt) keyword, atomid, aname, resname, resid, x, y, z, occ, bf
     case('TER   ','END   ');
      exit ! loop over lines
     case default ! keyword not recognized; assume that we can continue (we are not enforcing the PDB standard)
! try to read next line
      read(fid,'(A)',IOSTAT=ioerr) cmdline 
      cycle
    end select
! 
   elseif (paramtype.eq.'CHARMM') then 
    read(cmdline,fmt) atomid, resname, aname, x, y, z, segid, resid, bf ! ignoring residue number; weight => B-factor
   elseif (paramtype.eq.'ATOMID') then
    read(cmdline,fmt) atomid, x, y, z
   endif

   call adjustleft(cmdline)
   call adjustleft(segid)
   call adjustleft(resid)
   call adjustleft(resname)
   call adjustleft(aname)
! match atom coordinate entry with structure
   if (atomid.lt.1) then
    call warning(whoami, cmdline(1:len_trim(cmdline)),0)
    call warning(whoami, 'Nonpositive atom ID read. Skipping entry. Some coordinates may be undefined',0)
! try to read next line
    read(fid,'(A)',IOSTAT=ioerr) cmdline 
    cycle
   endif
! find index of the atom in structure
   found=.false.
   do j=atomid, atoms%last ! first, a forward search, assuming ordering; usually atomids will be [1..natom] 
    if (atoms%atomid(j).eq.atomid) then
     found=.true.
     exit
    endif
   enddo
   if (.not.found) then    ! try a reverse search, in case the file is disordered
    do j=min(atomid-1,atoms%last), 1, -1 ! make sure indices stay within bounds
     if (atoms%atomid(j).eq.atomid) then
      found=.true.
      exit
     endif
    enddo
   endif
!
    if (.not.found) then 
! add this atom
     d=-1d0
     j=atomlist_uadd_ch(atoms, atomid, segid, resid, resname, aname, iminusone, d, d) ! uknown parameters are -1
!
    else ! atom already present -- warn and overwrite
     if (pass.eq.1) then 
      call warning(whoami, cmdline(1:len_trim(cmdline)),0)
      call warning(whoami, 'DUPLICATE ATOM ID IN COORDINATE FILE. WILL OVERWRITE ENTRY.',0)
     endif
    endif
!
    if (pass.eq.2) then ! when pass=1, the data structures are not allocated
     r(:,j)=(/x,y,z/);
!
     if (paramtype.eq.'PDB') then
      occupancy(j)=occ; ! occupancy
      bfactor(j)=bf;    ! b-factor
     elseif (paramtype.eq.'PQR') then
      q(j)=occ
      radius(j)=bf
     elseif (paramtype.eq.'CHARMM') then 
      bfactor(j)=bf
     endif
    endif ! pass
!
    i=i+1 ! increment atom count
! try to read next line
    read(fid,'(A)',IOSTAT=ioerr) cmdline 
!**********************************************************************************
!
  enddo ! while
!
! the number of lines processed is i; were all of them valid atom entries?
  if (pass.eq.1) then 
   natom=atoms%last
   if (n.eq.-1) n=i-1
   if (n.ne.atoms%last) call warning(whoami, 'incorrect number of atoms specified in coordinate file.',0)
!
    qinit=.false. ! do not query parser for initialization options
!
    call state_add3df('POSITION' ,'Positions'              , (/ndim,natom/), __COMM _COMMA __CTX, vptr, qinit); __FPTR2(r);
!    call state_add3df('VELOCITY' ,'Velocities'             , (/ndim,natom/), __COMM _COMMA __CTX, vptr, qinit); __FPTR2(vr);
!    call state_add3df('FORCE'    ,'Forces'                 , (/ndim,natom/), __COMM _COMMA __CTX, vptr, qinit); __FPTR2(fr);
    call state_add3df('MASS'     ,'Masses'                 , (/natom/),      __COMM _COMMA __CTX, vptr, qinit); __FPTR1(m);
    call state_add3df('CHARGE'   ,'Charges'                , (/natom/),      __COMM _COMMA __CTX, vptr, qinit); __FPTR1(q);
    call state_add3df('RADIUS'   ,'Radius'                 , (/natom/),      __COMM _COMMA __CTX, vptr, qinit); __FPTR1(radius);
    call state_add3df('BFACTOR'  ,'Debye-Waller (B) factors', (/natom/),     __COMM _COMMA __CTX, vptr, qinit); __FPTR1(bfactor);
    call state_add3df('OCCUPANCY','Occupancy'              , (/natom/),      __COMM _COMMA __CTX, vptr, qinit); __FPTR1(occupancy);
#ifdef __RCOMP
    call state_add3df('AUXPOS'   ,'Auxiliary coordinates'  , (/ndim,natom/), __COMM _COMMA __CTX, vptr, qinit); __FPTR2(rcomp);
#endif
!
   q=atoms%charge(1:natom)
   m=one ! default "mass"
! initialize coordinates
   r=unknownf; occupancy=unknownf; bfactor=unknownf; radius=unknownf
!
   rewind(fid)
  endif ! pass
!
  enddo ! pass
!
  call message(whoami, 'Initialized minimal structure and coordinates from PDB (energy cannot be computed).')
!
 end subroutine system_PDB_init
!===========================================================================
 function system_init_mol_scalar_nocase(tag, ctx_) result(s)
 use mol_formats
 use charmmio
 use pdbio
 use freeio
 __DEP_PARSER
!
 __DEP_CONST
#ifdef __PARALLEL
 __DEP_MULTICOM
#endif
#ifdef __PARALLEL
 int :: ierror
#endif
 float, pointer :: s(:)
 float, pointer :: otemp(:), btemp(:), rtemp(:,:)
 character(len=*), intent(in) :: tag
 character(len=*), intent(in), optional :: ctx_
 character(len=contextnamelen) :: ctx
 character(len=len(tag)) :: tag2
 character(len=vartaglen) :: filename, file_format
 character(len=vartaglen) :: column='NONE'
 __IAM(SYSTEM_INIT_MOL_SCALAR)
 int :: l, flen, j, ifmt, icol=-1, fid
!
!
 tag2=tag; call adjustleft(tag2); l=len_trim(tag2)
!
 nullify(s);
!
 if (.not.(system_structure_initialized.or.system_PDB_initialized)) then
  call warning(whoami, 'Structure not initialized. Cannot proceed.',-1)
  if (fatal_warning()) return
 endif
!
 if (present(ctx_)) then ; ctx = ctx_ ; else ; ctx=maincontext_name ; endif
!%%%%%%%%%% check whether the tag exists %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
 if (existtag_nocase(tag2, ctx)) then
   select case(getval_nocase_upper(tag2))
    case('CONST','CONSTANT')
     if     (existtag_nocase(tag2(1:l)//'constant', ctx)) then
      allocate(s(natom)) ; s=atof(getval_nocase(tag2(1:l)//'constant', ctx))
     elseif (existtag_nocase(tag2(1:l)//'const', ctx)) then
      allocate(s(natom)) ; s=atof(getval_nocase(tag2(1:l)//'const', ctx))
     else
      call warning(whoami, 'Initialization constant for '//tag2(1:l)//' not specified.',-1)
     endif
!-------------------------------------------------------------------------
    case('FILE')
     if (existtag_nocase(tag2(1:l)//'file', ctx)) then
      filename=getval_nocase(tag2(1:l)//'file', ctx)
      call adjustleft(filename)
      flen=len_trim(filename)
      call message(whoami, 'Will initialize variable '//tag2(1:l)//' from file "'//filename(1:flen)//'"')
!
      if (existtag_nocase(tag2(1:l)//'filetype', ctx)) then
        file_format=getval_nocase_upper(tag2(1:l)//'filetype', ctx)
        ifmt=unknowni
        do j=1,num_mol_format
         if (file_format.eq.mol_format_name(j)) then 
          ifmt=j
          exit
         endif
        enddo
      endif
!
      if (ifmt.ne.unknowni) then
       call message(whoami,mol_format_name(ifmt)(1:len_trim(mol_format_name(ifmt)))//' format will be used');
!
!===================== COLUMN SPEC =======================
       icol=-1
       if (existtag_nocase(tag2(1:l)//'column', ctx)) then
        column=getval_nocase_upper(tag2(1:l)//'column', ctx)
       elseif (existtag_nocase(tag2(1:l)//'col', ctx)) then
        column=getval_nocase_upper(tag2(1:l)//'col', ctx)
       endif
!
       select case(column)
!**********************************************************
         case('OCCUPANCY', 'O');
          if ( all(ifmt.ne.(/pdb,pqr/))) then
           call warning(whoami,'Column "'//column(1:len_trim(column))//'" is invalid for this file type',-1)
          else
           icol=ocol
          endif
!**********************************************************
        case('BETA', 'BFACTOR', 'DEBYE','DEBYEWALLER','DEBYE-WALLER','DEBYE_WALLER','TEMPERATURE','TFACTOR','T_FACTOR','T-FACTOR',&
     &'TEMPERATURE-FACTOR','TEMPERATURE_FACTOR','T','TEMPERATUREFACTOR','TFACT','T_FACT','T-FACT','TEMP','TEMPFACTOR','B_FACTOR',&
     &'TEMP-FACTOR','TEMP_FACTOR','TEMP-FACT','TEMP_FACT','TEMPFACT','B','BVAL','BCOL','BFACT','B-FACT','B_FACT','B-FACTOR');
         if ( all(ifmt.ne.(/pdb,pqr/))) then
          call warning(whoami,'Column "'//column(1:len_trim(column))//'" is invalid for this file type',-1)
         else
          icol=bcol
         endif
!**********************************************************
         case('WMAIN', 'W', 'WGT','WEIGHT');
          if ( all(ifmt.ne.(/charmm/) ) ) then
           call warning(whoami,'Column "'//column(1:len_trim(column))//'" is invalid for this file type',-1)
          else
           icol=wcol
          endif
!**********************************************************
         case('X','XCOMP','XCOR','XCOOR','X-COR','X-COOR','X_COR','X_COOR',&
     &        'XCOORDINATE','X-COORDINATE','X_COORDINATE',&
     &        'XCOORD','X-COORD','X_COORD',&
     &        'XCRD','X-CRD','X_CRD',&
     &        'XVAL','X-VAL','X_VAL',&
     &        'XVALUE','X-VALUE','X_VALUE'); icol=xcol
!**********************************************************
         case('Y','YCOMP','YCOR','YCOOR','Y-COR','Y-COOR','Y_COR','Y_COOR',&
     &        'YCOORDINATE','Y-COORDINATE','Y_COORDINATE',&
     &        'YCOORD','Y-COORD','Y_COORD',&
     &        'YCRD','Y-CRD','Y_CRD',&
     &        'YVAL','Y-VAL','Y_VAL',&
     &        'YVALUE','Y-VALUE','Y_VALUE'); icol=ycol
!**********************************************************
         case('Z','ZCOMP','ZCOR','ZCOOR','Z-COR','Z-COOR','Z_COR','Z_COOR',&
     &        'ZCOORDINATE','Z-COORDINATE','Z_COORDINATE',&
     &        'ZCOORD','Z-COORD','Z_COORD',&
     &        'ZCRD','Z-CRD','Z_CRD',&
     &        'ZVAL','Z-VAL','Z_VAL',&
     &        'ZVALUE','Z-VALUE','Z_VALUE'); icol=zcol
!**********************************************************
         case('NONE');
          call warning(whoami,'File column for variable"'//tag2(1:l)//'" not specified',-1)
!**********************************************************
         case default
          call warning(whoami,'Column "'//column(1:len_trim(column))//'" is invalid for this file type',-1)
       end select
!
       if (icol.ge.0) then
!
         if (__ME.le.0) then          ! root only
          column=mol_col_name(icol)
          call message(whoami, &
 &'Reading data for variable "'//tag2(1:l)//'" from column '//column(1:len_trim(column))//' of file '//filename(1:flen))
          call files_open(fid, name_=filename(1:flen), form_='FORMATTED', action_='READ')
          if (fid.ge.0) then
           allocate(rtemp(ndim,natom), otemp(natom), btemp(natom))
           select case(ifmt)
            case(pdb);   call pdb_read(fid, rtemp, otemp, btemp)
            case(pqr);   call pqr_read(fid, rtemp, otemp, btemp)
            case(charmm);call ch_coor_read(fid, rtemp, btemp)
            case(free);  call atomid_coor_read(fid, rtemp)
           end select
!
           if (.not.fatal_warning()) then
            call files_close(fid)
            allocate(s(natom))
            select case(icol)
             case(bcol);   s=btemp
             case(ocol);   s=otemp
             case(wcol);   s=btemp
             case(xcol);   s=rtemp(1,:)
             case(ycol);   s=rtemp(2,:)
             case(zcol);   s=rtemp(3,:)
            end select
!
           endif ! fatal_warning
           deallocate(otemp,btemp,rtemp)
!
          else ! problem opening file
           call warning(whoami, 'Cannot open file. Abort.',-1)
          endif
          if (associated(s)) then ; j=size(s) ; else ; j=0 ; endif
         endif ! __ME=0
! broadcast data *****************************************************************
#ifdef __PARALLEL 
         call mpi_bcast(j, 1, mpiint, 0, __COMM, ierror)
         if (j.gt.0) then 
          if (__ME.ne.0) allocate(s(j))
          call mpi_bcast(s, j, mpifloat, 0, __COMM, ierror)
         endif
! broadcast data *****************************************************************
#endif
!
       endif ! icol<0 : invalid column
      else ! unknown format
       call warning(whoami,'Format "'//file_format(1:len_trim(file_format))//'" is not recognized',-1)
      endif
     else ! invalid initialization file
      call warning(whoami, 'Initialization file for variable "'//tag2(1:l)//'" not specified',-1)
     endif
!=================================================================================
    case default
     call warning(whoami, 'No valid initialization option for variable "'//tag2(1:l)//'" found',-1)
   end select
 else ! tag was not found
  call warning(whoami, 'Parameter "'//tag2(1:l)//'" not found',-1)
 endif
!
 end function system_init_mol_scalar_nocase

!=================================================================================
       subroutine system_exec()
       __IAM(SYSTEM_EXEC)
       character(len=maxlinelen), pointer :: command
       int :: l
!
       if (noexec(__CTX)) return
!
__NULL_COMM_STOP
       call message(whoami,'Executing commands within context "'//&
     &                                                            trim(__CTX)//'"')
       do
        command=>get_next_command(__CTX)
        if (.not.associated(command)) exit
        call toupper(command)
        l=len_trim(command)
!
        call message(whoami, ' =====> "'//command(1:l)//'"');
!
        select case(command(1:l))
         case('INIT','INITIALIZE') ; call system_initialize()
         case('ENERGY') ; call system_compute(.false.) ; call system_printe();
!         case('OUTPUT') ; call system_output()
         case('DONE','STOP','END') ; call system_done()
         case('LSPARAM','LISTPARAM','LIST_PARAM','LS_PARAM', 'LIST_PARAMETERS', 'LIST PARAMETERS') ; call system_list_parameters()
         case default; call warning(whoami, 'Unknown command. Skipping.',-1)
        end select
!
        if (fatal_warning(__COMM)) return
!
        deallocate(command)
       enddo
!
       end subroutine system_exec
!=================================================================================

end module system
