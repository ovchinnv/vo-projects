
#======================================================
continuum {
#Size
nx=258; ny=258

#Grid
 xgrid=exp; xstretch=1.0; x0=0; x1=1
 ygrid=exp; ystretch=1.0; y0=0; y1=2

# should also allow init below; (this means that grid depends on object, and object should/can NOT depend on grid, which makes some sense)
# XGRID=object; dxmin=2 ; xstretch=1. ; xstretchfix=y
# YGRID=object; dymin=2 ; ystretch=1. ; ystretchfix=y
# ZGRID=object; dzmin=2 ; zstretch=1. ; zstretchfix=y

#Output options
 output_format=chest
 output_mode=text
 gridoutput=xy_test.xyz

# exec:output
}

object {
 object=molecule
 object_center=(0,0,0) # vector parameter: means bring object COM to this position
 object_align=yes               ! align ( along principal components for molecule; in principle depends on object)OR
 object_massw=true              ! will use mass weighing in computation of COM/alignments
}

#======================================================
#Communicators
multicom {
 exec:set ches 1
 exec:set dmol 1
}
#======================================================


# molecule
molecule {

 paramtype = xplor ;# should allow "none" for non-md calculations
 parameters = test/par_all22_prot_cmap.inp
# parameters2 = test/top_all22_prot_cmap.inp

 structure = test/rig22vcx.psf ;# should allow "none" for non-md calculations; however, radii still need to be defined for chest, etc.

 coordinates=test/rig_4.cor
 coortype=charmm
# coortype=atomid

 exec:init

}


#======================================================
# now, there should be a separate section for MD simulation parameters, ie, something like this
# also might be good to allow reading multiple files (though one culd do cat *inp | dynamol , no ? yes , so forget about it then! 
dmol {

# initial temperature (if assigning; if not specified, will use temperature)
    init_temp=298.0

# verlet integrator section

  iterations = 100000
  temperature =  298 ! K
  langevin=on
  dt=1                  ! fs
  langevin_gamma=1      ! ps^-1
# output
  outputname=dynamo
  outputfreq=1
  printfreq=1000

  exec: init
  exec: run
}



# what to do with pars below is unclear (this is redundant w/ PDB class; I suppose I did not originally take dynamol into account ...
 structure_format=PSF ; structure=tests/structure/exr_dry22c.psf ; 
 paramtype=CHARMM
 coordinates=tests/structure/exr_1.pdb ; coortype=pdb
 
 radiitype=param; 
 parameters=tests/structure/par_all27_prot_na.prm ! param file
 parameters2=tests/structure/top_all27_prot_na.rtf ! topology file that has the atom types
 
 eps_solute=1;  eps_solvent=1; kappa_solvent=0
% smoothing parameters
  stdev_charge=5.0
% cutoff_surf_stdev=10




ches {
#Initial 3D data
 epsinit=constant   ; epsconst=1.
 kappainit=constant ; kappaconst=0.
 rhsinit=file       ; rhsfile=rhs_test.dat ;  rhs_mode=text ; rhs_format=chest
 phiinit=constant   ; phiconst=0. % initial solution

# here we should allow something like
 epsinit=object
 kappainit=object
 rhsinit=file       ; rhsfile=rhs_test.dat ;  rhs_mode=text ; rhs_format=chest
 phiinit=none ! this should be the same as const zero, no?


#Boundary conditions
 phi_bcx0=dirichlet; phi_bcx0_file=xbc0_test.dat
 phi_bcx1=dirichlet; phi_bcx1_file=xbc1_test.dat
 phi_bcy0=dirichlet; phi_bcy0_file=ybc0_test.dat
 phi_bcy1=dirichlet; phi_bcy1_file=ybc1_test.dat

#Solver
 solver=multigrid

#Output options
# output_format=plot3d
 output_format=chest
 output_mode=text
 gridoutput=xy_test.xyz
 phioutput=solution.dat

#Execution
# exec: init
# exec: run
# exec: output
# exec: done
}

#======================================================
# multigrid parameters
multigrid {
 multigrid_maximum_cycles=50
 multigrid_smooth_iterations=3
 multigrid_maximum_levels=20
 multigrid_smoother=Gauss-Seidel
 multigrid_compute_ini_residual=yes
 multigrid_skip_convergence_test=10
 #multigrid_smoother_unroll=-1
}


