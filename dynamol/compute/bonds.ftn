      subroutine compute_bonds3(e,blist,bpar,r,fr,deriv) ! 3D
       use tlist
       use bondpar
       __IMPNONE
!
       type (toplist) :: blist
       type (bonds) :: bpar
       float :: e
       float :: r(:,:), fr(:,:)
       bool :: deriv
!
       float, parameter :: tol=1.0d-6
!
       float :: theta,&
&                x1, x2, y1, y2, z1, z2,&
&                dx12, dy12, dz12,&
&                fx12, fy12, fz12,&
&                f1x, f1y, f1z, f2x, f2y, f2z, f
!
       int :: ind(3), i1, i2, i3, i
       float :: kb, b0
!do work:    
       e=0d0
!      
       do i=1, blist%last ! over all angles
!
        ind=blist%ind(:,i); i1=ind(1);  i2=ind(2);  i3=ind(3); 
!
        x1=r(1,i1); x2=r(1,i2);
        y1=r(2,i1); y2=r(2,i2);
        z1=r(3,i1); z2=r(3,i2);
!
        dx12=x2-x1;  dy12=y2-y1;  dz12=z2-z1;
        theta=sqrt(dx12*dx12 + dy12*dy12 + dz12*dz12)
!     add energy term
        kb=bpar%kb(i3)
        b0=bpar%b0(i3)
        f=2.d0*kb*(theta-b0) ! force prefactor
        e=e+kb*(theta-b0)**2 
!cccccccccccccccccc now compute derivative
        if (deriv) then
         if (theta.gt.tol) then 
          f=f/theta
         else
! nothing : avoid singularity at near zero separation
         endif
         fx12=f*dx12; fy12=f*dy12; fz12=f*dz12
!     compute derivatives w.r.t components
         f1x=-fx12; f1y=-fy12; f1z=-fz12;
         f2x= fx12; f2y= fy12; f2z= fz12;
!     add angle forces
         fr(1,i1)=fr(1,i1)-f1x;   fr(2,i1)=fr(2,i1)-f1y;   fr(3,i1)=fr(3,i1)-f1z
         fr(1,i2)=fr(1,i2)-f2x;   fr(2,i2)=fr(2,i2)-f2y;   fr(3,i2)=fr(3,i2)-f2z
!
        endif ! deriv
       enddo ! all angles       
      end subroutine compute_bonds3
!ccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccc
