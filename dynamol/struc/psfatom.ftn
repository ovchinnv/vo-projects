      module psfatom
      __DEP_CONST
      __IMPNONE
!    define a derived aname to store atom parameters (for PSF)
      type atomlist
       character(len=8), dimension(:), pointer :: segid, resid, resname, aname 
       float, dimension(:), pointer :: charge, mass
       int, dimension(:), pointer :: atomid ! psf ID (unique) 
       int, dimension(:), pointer :: typeid ! this is the numerical ID number that appears in the topology file (and CHARMM psf)
       character(len=8), dimension(:), pointer :: type ! this is the atom type (same as appears in the topology file); 
       int :: length=0 ! length of the vector
       int :: last=0 ! index of last element
       bool :: initialized=.false. ! has the vector been initialized
      end type atomlist
!
      int, parameter, private :: expand_incr=200
      character(len=8), parameter :: unknown='unknown?'
!
      contains
!=====================================================================================
       subroutine atomlist_init( v )
       type (atomlist) :: v
!       if (associated(v%...)) deallocate(v%...) ! testing unassigned pointer is an error!
       allocate(v%segid(expand_incr),v%resid(expand_incr),v%resname(expand_incr), &
&                v%aname(expand_incr), v%charge(expand_incr), v%mass(expand_incr),&
&                v%typeid(expand_incr),v%type(expand_incr), v%atomid(expand_incr) )
!
       v%segid=''; v%resid=''; v%resname=''; v%aname=''; v%charge=0d0; v%type=unknown;
       v%mass=-1d0; v%typeid=-1; v%atomid=-1
       v%length=expand_incr
       v%last=0
       v%initialized=.true.
       end subroutine atomlist_init
!=====================================================================================
       subroutine atomlist_done( v )
       type (atomlist) :: v
       if (associated(v%segid)) deallocate(v%segid)
       if (associated(v%resid)) deallocate(v%resid)
       if (associated(v%resname)) deallocate(v%resname)
       if (associated(v%aname)) deallocate(v%aname)
       if (associated(v%charge)) deallocate(v%charge)
       if (associated(v%mass)) deallocate(v%mass)
       if (associated(v%typeid)) deallocate(v%typeid)
       if (associated(v%type)) deallocate(v%type)
       if (associated(v%atomid)) deallocate(v%atomid)
       v%length=0
       v%last=0
       v%initialized=.false.
       end subroutine atomlist_done
!=====================================================================================
       subroutine atomlist_expand( v )
       type (atomlist) :: v
       int :: newlength
       character(len=8), dimension(:), pointer :: segid, resid, aname, resname, type
       float, dimension(:), pointer :: charge, mass
       int, dimension(:), pointer :: typeid, atomid
!
       if (.not.v%initialized) then
        call atomlist_init(v)
       else
!    assume length is valid
        newlength=v%length+expand_incr ! temporary storage space
        allocate(segid(newlength),resid(newlength),aname(newlength),resname(newlength), charge(newlength),&
&              typeid(newlength), mass(newlength), atomid(newlength), type(newlength))
        type=unknown
        segid(1:v%length)=v%segid; resid(1:v%length)=v%resid; aname(1:v%length)=v%aname; resname(1:v%length)=v%resname 
        charge(1:v%length)=v%charge; typeid(1:v%length)=v%typeid; mass(1:v%length)=v%mass; atomid(1:v%length)=v%atomid
        type(1:v%length)=v%type
        deallocate(v%segid,v%resid,v%aname,v%resname,v%charge,v%mass,v%atomid,v%typeid,v%type)
        v%segid=>segid; v%resid=>resid; v%aname=>aname; v%resname=>resname; v%charge=>charge; v%mass=>mass; v%typeid=>typeid; 
        v%atomid=>atomid; v%type=>type
        v%length=newlength
       endif 
       end subroutine atomlist_expand
!=====================================================================================
       function atomlist_add(v, atomid, segid, resid, resname, aname, type, typeid, charge, mass)
!    note that I am ignoring the last three entries from PSF: imove, ECH, EHA
       type (atomlist) :: v
       int :: atomlist_add
       float :: mass, charge
       int :: atomid, typeid
       character(len=*) :: segid, resid, resname, aname, type
       int :: j
!
       if (.not.v%initialized) call atomlist_init(v)
!    add element to the list
       if (v%last.eq.v%length) call atomlist_expand(v)
       j=v%last+1
       v%segid(j)=segid; v%resid(j)=resid; v%resname(j)=resname; 
       v%aname(j)=aname; v%mass(j)=mass; v%charge(j)=charge; 
       v%typeid(j)=typeid; v%type(j)=type; v%atomid(j)=atomid
       v%last=j
       atomlist_add=j
       end function atomlist_add
!=====================================================================================
       function atomlist_uadd_ch(v, atomid, segid, resid, resname, aname, typeid, charge, mass)
       use output, only: fout, error
       type (atomlist) :: v
       int :: atomlist_uadd_ch
       float :: mass, charge
       int :: atomid, typeid
       character(len=8), parameter :: type=unknown
       character(len=*) :: segid, resid, resname, aname
       int :: j
!
       if (.not.v%initialized) call atomlist_init(v) 
       do j=1,v%last
        if ( v%atomid(j).eq.atomid ) then
!       found atom
         write(fout,'(2A,I5,A)')  ' ERROR(ATOMLIST_UADD): ','ATOM INDEX ',v%atomid(j),' ALREADY PRESENT. ABORT.'
         atomlist_uadd_ch=unknowni
         call error('ATOMLIST_UADD','',-1)
         return
        endif
       enddo
!    add element to the list: use regular routine
       atomlist_uadd_ch=atomlist_add(v, atomid, segid, resid, resname, aname, type, typeid, charge, mass)
!
       end function atomlist_uadd_ch
!=====================================================================================
       function atomlist_uadd_xp(v, atomid, segid, resid, resname, aname, type, charge, mass)
       use output, only: fout, error
       type (atomlist) :: v
       int :: atomlist_uadd_xp
       float :: mass, charge
       int :: atomid
       int, parameter :: typeid=-1
       character(len=*) :: segid, resid, resname, aname, type
       int :: j
!
       if (.not.v%initialized) call atomlist_init(v) 
       do j=1,v%last
        if ( v%atomid(j).eq.atomid ) then
!       found atom
         write(fout,'(2A,I5,A)')  ' ERROR(ATOMLIST_UADD): ','ATOM INDEX ',v%atomid(j),' ALREADY PRESENT. ABORT.'
         atomlist_uadd_xp=unknowni
         call error('ATOMLIST_UADD','',-1)
         return
        endif
       enddo
!    add element to the list: use regular routine
       atomlist_uadd_xp=atomlist_add(v, atomid, segid, resid, resname, aname, type, typeid, charge, mass)
!
       end function atomlist_uadd_xp
!
      end module psfatom
