      module tlist
      __IMPNONE
!    define a derived type to store topology lists (atom, bond, angle, dihe)
      type toplist
       int, dimension(:,:), pointer :: ind
       int :: length ! length of the vector
       int :: last ! index of last element
       bool :: initialized=.false. ! has the vector been initialized
      end type toplist
!
      int, parameter, private :: expand_incr=200
!
      contains
!===============================================================================
       subroutine toplist_init( v, d )
       type (toplist) :: v
       int :: d
!       if (associated(v%...)) deallocate(v%...) ! testing unassigned pointer is an error!
       allocate(v%ind(d,expand_incr))
       v%ind=-1;
       v%length=expand_incr
       v%last=0
       v%initialized=.true.
       end subroutine toplist_init
!===============================================================================
       subroutine toplist_done( v )
       type (toplist) :: v
       if (associated(v%ind)) deallocate(v%ind)
       v%length=0
       v%last=0
       v%initialized=.false.
       end subroutine toplist_done
!===============================================================================
       subroutine toplist_expand( v,d )
       type (toplist) :: v
       int :: d, newlength
       int, dimension(:,:), pointer :: ind
!
       if (.not.v%initialized) then 
        call toplist_init(v,d)
       else
!    assume length is valid
        newlength=v%length+expand_incr
        allocate(ind(d,newlength))
        ind(:,1:v%length)=v%ind; 
        deallocate(v%ind)
        v%ind=>ind
        v%length=newlength
       endif 
       end subroutine toplist_expand
!===============================================================================
       function toplist_add(v,d,ind)
       type (toplist) :: v
       int :: toplist_add
       int :: d
       int :: ind(d)
       int :: j
!
       if (.not.v%initialized) call toplist_init(v,d) 
!    add element to the list
       if (v%last.eq.v%length) call toplist_expand(v,d)       
       j=v%last+1
       v%ind(:,j)=ind;
       v%last=j
       toplist_add=j
       end function toplist_add
!===============================================================================
       function toplist_uadd(v,d,ind) 
       use output, only: fout
       type (toplist) :: v
       int :: toplist_uadd
       int :: d
       int :: ind(d)
       int :: j
       character(len=10) :: fmt
!
       if (.not.v%initialized) call toplist_init(v,d) 
       do j=1,v%last
        if (all(v%ind(1:d,j).eq.ind).or.all(v%ind(1:d,j).eq.ind(d:1:-1))) then ! assuming that reversing order generates an equivalent entry
!       found element
         write(fmt,'(I10)') d
         write(fout,'(2A,'//fmt//'I5,A)') ' NONFATAL WARNING (TOPLIST_UADD)','Topology entry ',ind,'already present.' ! this can be OK -- just warn
         exit
        endif
       enddo
!    add element to the list: use regular routine
       toplist_uadd=toplist_add(v,d,ind)
!
       end function toplist_uadd
      end module tlist
