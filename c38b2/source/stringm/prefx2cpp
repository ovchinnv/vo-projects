#!/bin/bash
:<<COMMENT
VO 5.2014: this is a script to replace preflx proprocessor directives in
older CHARMM source files with equivalent GNU preprocessor directives
yes, you _can_ break it (if you put your mind to it) so check to make
sure the output is what you want; usage : prefx2cpp infile
\
COMMENT
#begin
if [ -z $1 ]; then
 echo "USAGE: prefx2cpp input.src"
 exit 1
fi
if [ ! -z $2 ]; then
 if [ "$2" -eq "0" ] ; then
  opar="" ;# opening parenthesis
  cpar="" ;# closing parenthesis
 else
  opar="("
  cpar=")"
 fi
else
 opar="("
 cpar=")"
fi
#
if [ ! -z $3 ]; then
 if [ "$3" -eq "1" ] ; then
  modop=1 ; # whether to modify the relational operator or the tag value
 else
  modop=0
 fi
else
  modop=0
fi
#
gawk -v opar=$opar -v cpar=$cpar -v modop=$modop ' {
##IF : ============================================
 newline="";
 comment="";
 if ( $1 == "##IF" ) {
  for (i=2;i<=NF;i++) {
   icomm=index($i,"!")
   ipar=index($i,"(")
   if ( icomm>0 ) {
    comment=" /* "substr($0,index($0,$i)+icomm)" */";
    if ( icomm>1 ) { arg[i++]=substr($i,1,icomm-1) }
    break;
   } else if ( ipar >0 ) {
    comment=" /* "substr($0,index($0,$i)+ipar-1)" */";
    if ( ipar>1 ) { arg[i++]=substr($i,1,ipar-1) }
    break;
   }
   arg[i]=$i
  }
  numfield=i;
  operator="==" ; tag=1
  inot = match(arg[2],".[Nn][Oo][Tt].")
  if (inot>0) {
   if (modop) { operator="!=" ; } else { tag=0 } ;
   arg[2]=substr(arg[2],inot+5)
  }
  newline="#if "opar"KEY_"arg[2]""operator""tag""cpar ;
  for (j=3;j<numfield;j++) {
   operator="==" ; tag=1
   inot = match(arg[j],".[Nn][Oo][Tt].")
   if (inot>0) {
    if (modop) { operator="!=" ; } else { tag=0 } ;
    arg[j]=substr(arg[j],inot+5)
   }
   newline=newline" || "opar"KEY_"arg[j]""operator""tag""cpar;
  }
##IFN : ============================================
 } else if ( $1 == "##IFN" ) {
  for (i=2;i<=NF;i++) {
   icomm=index($i,"!")
   ipar=index($i,"(")
   if ( icomm>0 ) {
    comment=" /* "substr($0,index($0,$i)+icomm)" */";
    if ( icomm>1 ) { arg[i++]=substr($i,1,icomm-1) }
    break;
   } else if ( ipar >0 ) {
    comment=" /* "substr($0,index($0,$i)+ipar-1)" */";
    if ( ipar>1 ) { arg[i++]=substr($i,1,ipar-1) }
    break;
   }
   arg[i]=$i
  }
  numfield=i;
  if (modop) { operator="!=" ; tag=1 } else { operator="=="; tag=0 }
  inot = match(arg[2],".[Nn][Oo][Tt].")
  if (inot>0) {
   operator="=="; tag=1
   arg[2]=substr(arg[2],inot+5)
  }
  newline="#if "opar"KEY_"arg[2]""operator""tag""cpar ;
  for (j=3;j<numfield;j++) {
   if (modop) { operator="!=" ; tag=1 } else { operator="=="; tag=0 }
   inot = match(arg[j],".[Nn][Oo][Tt].")
   if (inot>0) {
    operator="==" ; tag=1
    arg[j]=substr(arg[j],inot+5)
   }
   newline=newline" && "opar"KEY_"arg[j]""operator""tag""cpar;
  }
##ELSEIF : ==========================================
 } else if ( ( $1 == "##ELSEIF" ) || ( $1 == "##ELIF" ) ) {
  for (i=2;i<=NF;i++) {
   icomm=index($i,"!")
   ipar=index($i,"(")
   if ( icomm>0 ) {
    comment=" /* "substr($0,index($0,$i)+icomm)" */";
    if ( icomm>1 ) { arg[i++]=substr($i,1,icomm-1) }
    break;
   } else if ( ipar >0 ) {
    comment=" /* "substr($0,index($0,$i)+ipar-1)" */";
    if ( ipar>1 ) { arg[i++]=substr($i,1,ipar-1) }
    break;
   }
   arg[i]=$i
  }
  numfield=i;
  operator="==" ; tag=1
  inot = match(arg[2],".[Nn][Oo][Tt].")
  if (inot>0) {
   if (modop) { operator="!=" ; } else { tag=0 } ;
   arg[2]=substr(arg[2],inot+5)
  }
  newline="#elif "opar"KEY_"arg[2]""operator""tag""cpar ;
  for (j=3;j<numfield;j++) {
   operator="==" ; tag=1
   inot = match(arg[j],".[Nn][Oo][Tt].")
   if (inot>0) {
    if (modop) { operator="!=" ; } else { tag=0 } ;
    arg[j]=substr(arg[j],inot+5)
   }
   newline=newline" || "opar"KEY_"arg[j]""operator""tag""cpar;
  }
##ELSE : ==========================================
 } else if( $1 == "##ELSE" ) {
  newline="#else"
  if (NF>1) {
   comment=substr($0,index($0,$2));
   if (length(comment)>0) { comment=" /* "comment" */" }
  }
##ENDIF : ==========================================
 } else if( $1 == "##ENDIF" ) {
  newline="#endif"
  if (NF>1) {
   comment=substr($0,index($0,$2));
   if (length(comment)>0) { comment=" /*"comment" */" }
  }
##ERROR : ==========================================
 } else if( $1 == "##ERROR" ) {
  newline="#error"
  if (NF>1) {
   comment=" "substr($0,index($0,$2));
  }
# now take of preflx commands to the right of line:
# =================================================
 } else {
# replace all occurrences of "!##" by "#12345"
  otag="!##"
  ntag="#12345"
  gsub(otag, ntag, $0)
#
  ipound=index($0,ntag);
  if ((ipound>1) && ((substr($0,ipound+length(ntag),1) ~ /[A-Z]|[a-z]/) || (substr($0,ipound+length(ntag),5) ~ /[\.][Nn][Oo][Tt][\.]/ )))  {
   command=substr($0,0,ipound-1)
# determine if "command" has a comment character, or is blank, in which case the directives will be ignored
# print "cmd: "command, match(command,"[^[:space:]]")
   if (index(command,"!")>0 || match(command,"[^[:space:]]")==0 ) {
    gsub(ntag, otag, $0)
    newline=$0 # do nothing
   } else {
#
     remainder=substr($0,ipound+length(ntag))
     $0=remainder
# note: code below repeated from above
     for (i=1;i<=NF;i++) {
      if ( substr($i,1,1) == "!" ) {
       comment=" /* "substr($0,index($0,$i)+1)" */";
       break;
      }
     arg[i]=$i
     }
     numfield=i;
#
     relop="==" ; tag=1
     inot = match(arg[1],".[Nn][Oo][Tt].")
     if (inot>0) {
      if (modop) {relop="!=" ;} else { tag=0 }
      arg[1]=substr(arg[1],inot+5)
     }
#
     newline="#if "opar"KEY_"arg[1]""relop""tag""cpar ; # relational operator
     for (j=2;j<numfield;j++) {
      operator="||"
      ipound=index(arg[j], ntag)
      if (ipound>0) {
       operator="&&"
       arg[j]=substr(arg[j],ipound+length(ntag))
      }
      relop="==" ; tag=1
      inot = match(arg[j],".[Nn][Oo][Tt].")
      if (inot>0) {
       if (modop) {relop="!=" ;} else { tag=0 }
       arg[j]=substr(arg[j],inot+5)
      }
      newline=newline" "operator" "opar"KEY_"arg[j]""relop""tag""cpar;
     }
     gsub(ntag, otag, comment)
# replace "!" by another character in the comment ; otherwise, the prefx preprocessor will truncate comments beyond "!"
     gsub("!","",comment)
     newline=newline""comment
     comment=""
     print newline
     print command
     newline="#endif"
     comment=""
    }
#
# normal code lines ===============================
  } else {
   newline=$0
   gsub(ntag, otag, newline) ;# in case otag was replaced with ntag before we decided that otag was actually a comment
  }
 }
# replace "!" by another character in the comment ; otherwise, the prefx preprocessor will truncate comments beyond "!"
    gsub("!","",comment)
 print newline""comment
}  ' < $1
