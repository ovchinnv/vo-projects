program test

 use parser
 use ppoly1
 use output
 use files

 int :: fid
 
 int :: nz, nk, pdeg
 int :: nfine
 int :: k(1)
 float, pointer :: z(:), kave(:), coefs(:,:,:)
 float, pointer :: zfine(:), spl(:), splint(:)
 int, pointer :: inds(:)
 float :: d
 float :: ktest(13)=(/( 0.05d0*i,  i=-6,6)/) ! to match matlab
 type(pp1data), pointer :: pp1s(:)
 type(pp1data), pointer :: pp1ints(:) ! integrals
 
 character(len=100) :: restart_file = 'sbf-rcut12.dat'

 fid=-1
 call files_open(fid, restart_file, 'FORMATTED', 'READ')
 read(fid,*) nz
 allocate(z(nz)) ;
 read(fid,*) z
 read(fid,*) nk
 allocate(kave(nk)) ;
 read(fid,*) kave
 read(fid,*) pdeg
 allocate(coefs(pdeg+1,nz-1,nk)) ;
 read(fid,*) coefs
 call files_close(fid)

 write(0,*) 'grid size: ' , nz
 write(0,*) 'grid:', z

 write(0,*) 'curvature array size: ' , nk
 write(0,*) 'average curvatures:', kave

 write(0,*) 'polynomial interpolant degree: ', degree
! do not write coeffs
! initialize 1 D cubic spline structures :

 call set_minwarnlev(-1)

 __MESG('test','init spline arrays')
 allocate(pp1s(nk))
 allocate(pp1ints(nk))
 do i=1,nk
  call ppoly1_init(pp1s(i), pdeg, nz, z, coefs(:,:,i))
! manual check :
  call ppoly1_check(pp1s(i))
! compute integral :
  pp1ints(i)=ppoly1_integral(pp1s(i))
! check the integral polynomial :
  call ppoly1_check(pp1ints(i))
!  write(0,*) pp1ints(i)%grid
!  write(0,*) pp1ints(i)%degree
!  write(0,*) pp1ints(i)%coefs
!write(0,'(4F20.15)') coefs(:,:,i) ! dbg
 enddo 
!return
! evaluate splines for a set of points to compare with matlab data :
 nfine=2 * (nz-1 ) ! to match matlab
 allocate(zfine(nfine), spl(nfine), inds(nfine), splint(nfine))
 zfine = (/(i,i=0,nfine-1)/) * (z(nz)-z(2)+one) / (nfine-1) + z(2)-one
! write(0,*) zfine

 call files_open(fid,'pp1test.dat', 'FORMATTED','WRITE')
 do i=1, size(ktest)
  k  = minloc ( abs ( kave - ktest(i) ) )
  write(0,*) k, ktest(i)
  do j=1, nfine
   inds(j)=ppoly1_getind(pp1s(k(1)), zfine(j))
!  spl(j)=ppoly1_compute(pp1s(k(1)),zfine(j))
   spl(j)=ppoly1_compute_igrid(pp1s(k(1)),zfine(j), inds(j))
   splint(j)=ppoly1_compute_igrid(pp1ints(k(1)),zfine(j), inds(j)) ! value of the integral
  enddo
!  write(fid,*) inds
  write(fid,*) spl
  write(fid,*) splint-splint(nfine) ! integral -- assume that the zero os at infinity
 enddo

 do i=1,nk
  call ppoly1_done(pp1s(i))
  call ppoly1_done(pp1ints(i))
 enddo
 call files_close(fid)
 
 __FREE(pp1s)
 __FREE(pp1ints)

 __FREE(z)
 __FREE(kave)
 __FREE(coefs)
 __FREE(zfine)
end

