program test
 use parser
 use ppoly1
 use ppoly2
 use output
 use files

 __IMPNONE

 int :: fid, i, j
!
 int :: nz, nk, kpdeg, zpdeg
 int :: nfine
 int :: k(1) ! for minloc
 float, pointer :: z(:), kave(:), coefs(:,:,:), coefs2d(:,:,:,:)
 float, pointer :: zfine(:), spl(:), splint(:), spl2d(:,:), spl2dintz(:,:)
 int, pointer :: inds(:)
 float :: d
 float :: ktest(13)=(/( 0.05d0*i,  i=-6,6)/) ! average curvatures, to match matlab calculation
 type(pp1data), pointer :: pp1s(:)
 type(pp1data) :: pp1, pp1int
 type(pp1data), pointer :: pp1ints(:) ! integrals
!
 type(pp2data) :: pp2, pp2int ! 2D test
!
 character(len=100) :: splines_file
!
! for simple 1D spline test (0 curvature) :
 float, pointer :: coefs0(:,:)
 int :: nz0, deg
!
! 1D tests :
! simplest case of one spline (no curvature)
 splines_file = 'sbf-rcut12spl1dzk0.dat'
 fid=-1
 call files_open(fid, splines_file, 'FORMATTED', 'READ')
 read(fid,*) nz0
 allocate(z(nz0)) ;
 read(fid,*) z
 read(fid,*) deg
 allocate(coefs0(deg+1,nz0-1)) ;
 read(fid,*) coefs0
 call files_close(fid)
 write(0,*) 'grid size: ' , nz0
 write(0,*) 'grid:', z
 write(0,*) 'polynomial interpolant degree: ', deg
! initialize 1 D cubic spline structures :
 call set_minwarnlev(-1)

 call ppoly1_init(pp1, deg, nz0, z, coefs0(:,:), .true.)
 pp1int=ppoly1_integral(pp1)
 call ppoly1_check(pp1int)

!
 write(0,*) '1D splines test ============================================  '
 splines_file = 'sbf-rcut12spl1dz.dat'
 fid=-1
 call files_open(fid, splines_file, 'FORMATTED', 'READ')
 read(fid,*) nz
 allocate(z(nz)) ;
 read(fid,*) z
 read(fid,*) nk
 allocate(kave(nk)) ;
 read(fid,*) kave
 read(fid,*) zpdeg
 allocate(coefs(zpdeg+1,nz-1,nk)) ;
 read(fid,*) coefs
 call files_close(fid)

 write(0,*) 'grid size: ' , nz
 write(0,*) 'grid:', z

 write(0,*) 'curvature array size: ' , nk
 write(0,*) 'average curvatures:', kave

 write(0,*) 'polynomial interpolant degree: ', zpdeg
! do not write coeffs

 call set_minwarnlev(-1)

 __MESG('test','init spline arrays')
 allocate(pp1s(nk))
 allocate(pp1ints(nk))
 do i=1,nk
  call ppoly1_init(pp1s(i), zpdeg, nz, z, coefs(:,:,i),.false.)
! manual check :
!  call ppoly1_check(pp1s(i))
! compute integral :
  pp1ints(i)=ppoly1_integral(pp1s(i))
! to check the integral polynomial manually :
!  call ppoly1_check(pp1ints(i))
!  write(0,*) pp1ints(i)%grid
!  write(0,*) pp1ints(i)%degree
!  write(0,*) pp1ints(i)%coefs
!write(0,'(4F20.15)') coefs(:,:,i) ! dbg
 enddo 
!return
! evaluate splines for a set of points to compare with matlab data :
 nfine=2 * (nz-1 ) ! to match matlab
 allocate(zfine(nfine), spl(nfine), inds(nfine), splint(nfine))
 zfine = (/(i,i=0,nfine-1)/) * (z(nz)-z(2)+one) / (nfine-1) + z(2)-one
! write(0,*) zfine

 call files_open(fid,'pp1test.dat', 'FORMATTED','WRITE')
 do i=1, size(ktest)
  k  = minloc ( abs ( kave - ktest(i) ) )
  write(0,*) k, ktest(i)
  do j=1, nfine
   inds(j)=ppoly1_getind(pp1s(k(1)), zfine(j))
!  spl(j)=ppoly1_compute(pp1s(k(1)),zfine(j))
   spl(j)=ppoly1_compute_igrid(pp1s(k(1)),zfine(j), inds(j))
   splint(j)=ppoly1_compute_igrid(pp1ints(k(1)),zfine(j), inds(j)) ! value of the integral
  enddo
!  write(fid,*) inds
  write(fid,*) spl
  write(fid,*) splint-splint(nfine) ! integral -- assume that the zero os at infinity
 enddo
!
 do i=1,nk
  call ppoly1_done(pp1s(i))
  call ppoly1_done(pp1ints(i))
 enddo
 call files_close(fid)
!
 __FREE(pp1s)
 __FREE(pp1ints)

 __FREE(z)
 __FREE(kave)
 __FREE(coefs)
 __FREE(splint)
 __FREE(spl)
 __FREE(inds)

! 2D test :
 write(0,*) '2D splines test ============================================  '

 splines_file = 'sbf-rcut12spl2dkz.dat'
! 1D test :
 write(0,*) '2D splines test ============================================  '
!
 fid=-1
 call files_open(fid, splines_file, 'FORMATTED', 'READ')
 read(fid,*) nk
 allocate(kave(nk)) ;
 read(fid,*) kave
 write(0,*)
 read(fid,*) nz
 allocate(z(nz)) ;
 read(fid,*) z
 read(fid,*) kpdeg
 read(fid,*) zpdeg
 allocate(coefs2d(kpdeg+1,zpdeg+1,nk-1,nz-1)) ;
 read(fid,*) coefs2d
 call files_close(fid)

 write(0,*) 'curvature (k) grid size: ' , nk
 write(0,*) 'average curvature grid:', kave

 write(0,*) 'distance (z) grid size: ' , nz
 write(0,*) 'z-grid:', z

 write(0,*) 'polynomial interpolant degree (k,z): ', kpdeg, zpdeg
! do not write coeffs
! initialize 2 D cubic spline structures :

 __MESG('test','init 2D spline array')
 call ppoly2_init(pp2, kpdeg, zpdeg, nk, nz, kave, z, coefs2d(1:kpdeg+1, 1:zpdeg+1, 1:nk-1, 1:nz-1) ,.false.) ! last argument is for continuity checking
! compute integral in z :
 pp2int=ppoly2_integral_y(pp2)

 call files_open(fid,'pp2test.dat', 'FORMATTED','WRITE')
 allocate(spl2d(nfine,size(ktest)),spl2dintz(nfine,size(ktest)))
 allocate(inds(2))
 do i=1, size(ktest)
  do j=1, nfine
   inds=ppoly2_getind(pp2,ktest(i),zfine(j))
   spl2d(j,i)=ppoly2_compute_igrid(pp2,ktest(i),zfine(j),inds)
   spl2dintz(j,i)=ppoly2_compute_igrid(pp2int,ktest(i),zfine(j),inds)
!   spl2d(j,i)=ppoly2_compute(pp2,ktest(i),zfine(j))
!   spl2dintz(j,i)=ppoly2_compute(pp2int,ktest(i),zfine(j))
  enddo
  write(fid,*) spl2d(:,i)
  write(fid,*) spl2dintz(:,i)-spl2dintz(nfine,i)
 enddo
!  write(fid,*) inds
!  write(fid,*) splint-splint(nfine) ! integral -- assume that the zero os at infinity
!
! evaluate 2D spline at particular curvature, returning 1D splines in x :
 i=7;
 write(0,*) ' compute 1D-spline coefficients at k=',ktest(i),':'
 pp1 = ppoly2_compute_x(pp2, ktest(i))
 write(0,'(4F20.15)') pp1%coefs


 call files_close(fid)
 __FREE(zfine)
 __FREE(coefs2d)
 __FREE(inds)
 __FREE(spl2d)
 __FREE(spl2dintz)
 call ppoly2_done(pp2);

end


