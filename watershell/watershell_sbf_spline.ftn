#include "rho.src"
#undef _N
#define _N watershell_sbf_spline

module _N
 use ppoly1
 use ppoly2
! __DEP_CONST
 __DEP_FILES
 __DEP_CONSTANTS
 __IMPNONE
! this is a wrapper around splines to compute solvent boundary force and potential

 type(pp1data) :: pp1, pp1int ! 1st order spline in the distance to boundary and integral
 type(pp2data) :: pp2, pp2intd ! 2nd order spline in average/gaussian curvature & distance, and distance integral
#ifdef __GRADCURV
 type(pp2data) :: pp2diffkintd ! 2nd order spline that gives the derivative of the potential w.r.t. curvature
#endif
 float :: pp1int_offset ! 0-curvature energy offset
 type (pp1data) :: pp2intd_offsets
#ifdef __GRADCURV
 type(pp1data) :: pp2diffkintd_offsets ! differentiated energy offset curve above
#endif
 float :: maxd ! distance beyond which the force and potential energy is zero
 float :: mink, maxk ! curvature interval limits outside of which the curvature does not change (neumann) ; spline file should have 0 slope at epts
#ifdef __CURVSMOOTH
 float :: ksig = 0.03d0 ! the gaussian filter width to smoothen curvature kinks
 float :: oossq2 = one/(0.03d0*sqrt2) ! must be computed from ksig
 float :: midk ! average of mink and maxk
! 12/24 : will add a mechanism to change ksig at runtime, if needed
#endif
 bool :: __NM(initialized)=.false.
!
 __PAR(datafile, character(len=vartaglen),'sbf-rcut12spl2dkz.dat')
 private datafile
 private default_datafile
 public __NM(init)
 contains
!=============================================
 __SUB(init)(datafile_)
 __IAM(__SUB(init))
 character(*), optional :: datafile_
 int :: fid=-1
 int :: nk, nz, kpdeg, zpdeg
 float, pointer :: z(:), kave(:), coefs(:,:,:,:) ! distance to boundary, average curvature, spline coeffs
 __PRESENT(datafile,default_datafile)
 call files_open(fid, datafile, 'FORMATTED', 'READ')
 read(fid,*) nk
 allocate(kave(nk)) ;
 read(fid,*) kave ! average curvature (the current version assumes the forces do not vary significantly if the average/gaussian curvature is constant)
 read(fid,*) nz
 allocate(z(nz)) ;
 read(fid,*) z
 read(fid,*) kpdeg
 read(fid,*) zpdeg
 allocate(coefs(kpdeg+1,zpdeg+1,nk-1,nz-1)) ;
 read(fid,*) coefs
 call files_close(fid)

#ifdef __DEBUG
 __MESG(whoami,'Curvature (k) grid size: ', nk)
 __MESG(whoami,'average curvature grid:', kave)
 __MESG(whoami,'distance (z) grid size: ', nz)
 __MESG(whoami,'z-grid:', z)
 __MESG(whoami,'polynomial interpolant degree (k,z): ', kpdeg, zpdeg)
#endif
! do not write coeffs
! initialize 2D bi-cubic spline structures :
 if (present(datafile_)) then
  __MESG(whoami,'Initializing 2D (curvature,distance) force spline array from file '//trim(datafile))
 else
  __MESG(whoami,'Initializing 2D (curvature,distance) force spline array')
 endif
#ifdef __DEBUG
 call ppoly2_init(pp2, kpdeg, zpdeg, nk, nz, kave, z, coefs(1:kpdeg+1, 1:zpdeg+1, 1:nk-1, 1:nz-1) ,.true.) ! last argument is for continuity checking
#else
 call ppoly2_init(pp2, kpdeg, zpdeg, nk, nz, kave, z, coefs(1:kpdeg+1, 1:zpdeg+1, 1:nk-1, 1:nz-1) ,.false.) ! last argument is for continuity checking
#endif
! compute integral in z (also distance, d) :
#ifdef __DEBUG
 __MESG(whoami,'Integrating 2D spline in d-dimension')
#endif
 pp2intd=ppoly2_integral_y(pp2) ! note that we are integrating from the wall (low d) into the interior (high d), beware of sign
! compute 1D spline corresponding to 0 curvature :
#ifdef __DEBUG
 __MESG(whoami,'Computing 1D spline for 0-curvature')
#endif
 pp1=ppoly2_compute_x(pp2,zero)
! compute the distance integral of the 1D spline :
#ifdef __DEBUG
 __MESG(whoami,'Integrating 1D spline for 0-curvature')
#endif
 pp1int=ppoly1_integral(pp1)
! compute offsets for energy
 maxd = z(nz) ! set distance beyond which will not apply force (or force is zero)
 pp1int_offset=ppoly1_compute(pp1int,maxd) ! this is a number, which is the energy offset for the zero curvature distance potential
 pp2intd_offsets=ppoly2_compute_y(pp2intd,maxd) ! this is a 1D spline through the curvature, at the maximum distance from the surface location
#ifdef __DEBUG
 __MESG(whoami,'1D potential offset for 0-curvature energy is', pp1int_offset )
#endif
! set curvature caps : (curvature is capped at these values beyond the corresponding boundary)
 mink=kave(1)
 maxk=kave(nk)
#ifdef __CURVSMOOTH
 midk=half*(mink+maxk)
#endif
#ifdef __GRADCURV
! compute derivative of the distance integral w.r.t. curvature:
#ifdef __DEBUG
 __MESG(whoami,'Differentiating 2D (potential) spline in curvature dimension')
#endif
 pp2diffkintd = ppoly2_derivative_x(pp2intd) ! this spline will provides the energy derivative w.r.t curvature (inherits sign from pp2intd)
! also compute the derivative of the energy offset k-curve:
 pp2diffkintd_offsets = ppoly1_derivative(pp2intd_offsets) ! also inherits sign from pp2intd
#endif
!
 __FREE(coefs)
 __FREE(z)
 __FREE(kave)
 __NM(initialized)=.true.
#ifdef __DEBUGDUMP
 call __NM(print2dmaps)
#endif
 end __SUB(init)
!===========================
 __SUB(done)
 __IAM(__SUB(done))
 __MESG(whoami,'Destroying 2D (curvature,distance) spline array')
 call ppoly1_done(pp1)
 call ppoly1_done(pp1int)
 call ppoly2_done(pp2)
 call ppoly2_done(pp2intd)
 call ppoly1_done(pp2intd_offsets)
#ifdef __GRADCURV
 call ppoly2_done(pp2diffkintd)
 call ppoly1_done(pp2diffkintd_offsets)
#endif
 __NM(initialized)=.false.
 end __SUB(done)
!===========================
#ifdef _ME
#undef _ME
#endif
#define _ME __NM(compute)
 function __NM(compute)(k,d,qpe,qdcurv_)
 bool, intent(in) :: qpe ! whether to compute potential energies in addition to forces
 __OPAR(qdcurv,bool)
 float, intent(in) :: k, d
#ifdef __GRADCURV
 float :: _ME(5) ! put curvature dervative in the last position
#else
 float :: _ME(4)
#endif
 float :: kcapped ! curvature capped at endpoints
#ifdef __CURVSMOOTH
 float :: kmax, kmin, ekmax, ekmin
#endif
 int :: igrid(2)
!
 __IAM(_ME)
 __ASSERT(__NM(initialized),.eqv.,.true.)
 __PRESENT(qdcurv,.true.)
!
 if (d.gt.maxd) then
  _ME = zero ! assume that the force beyond the largest support point is zero (this corresponds to being inside and far away from the boundary)
! construct the potential to be continuous (=0) at maxd
 else
#ifdef __CURVSMOOTH
  kmin=oossq2 * ( mink - k )
  kmax=oossq2 * ( maxk - k )
  ekmin=__erf(kmin)
  ekmax=__erf(kmax)
  kcapped = midk + ksig * osq2 * ( kmin*ekmin-kmax*ekmax + opi*(exp(-kmin**2)-exp(-kmax**2)))
#else
  if (k.gt.maxk) then ; kcapped=maxk ; elseif (k.lt.mink) then ; kcapped=mink ; else ; kcapped=k ; endif
#endif
! note : positive force means pushing molecule toward the boundary
  igrid=ppoly2_getind(pp2,kcapped,d)
  _ME(1)=ppoly1_compute_igrid(pp1,d,igrid(2)) ! 0-k force
!  _ME(1)=ppoly2_compute(pp2,0d0,d) ! 0-k force DBG
  _ME(2)=ppoly2_compute_igrid(pp2,kcapped,d,igrid) - _ME(1) ! remaining force
  if (qpe) then ! also compute integrals (energies)
! 1/25/25 : as noted above, the integrals were computed in the negative direction (away from bdry); thus need to flip sign :
   _ME(3)=-( ppoly1_compute_igrid(pp1int,d,igrid(2)) - pp1int_offset ) ! 0-k potential
   _ME(4)=-( ppoly2_compute_igrid(pp2intd,kcapped,d,igrid) - ppoly1_compute_igrid(pp2intd_offsets,kcapped,igrid(1)) ) - _ME(3) ! remaining potential
! note that the above two are energies for information, so they do not impact dynamics
  else
   _ME(3)=0d0 ; _ME(4)=0d0
  endif
! 12/24 : derivative w.r.t. curvature
#ifdef __GRADCURV
  if (qdcurv) then ! otherwise zero
#ifndef __CURVSMOOTH
   if (k.le.maxk.and.k.ge.mink) then ! otherwise zero
#endif
! 1/25/25 : also flip sign for ME(5) because it derives from the integral in d in the negative direction
    _ME(5)=-(ppoly2_compute_igrid(pp2diffkintd,kcapped,d,igrid) - ppoly1_compute_igrid(pp2diffkintd_offsets,kcapped,igrid(1))) ! note sign inherited from int(pp2)
#ifdef __CURVSMOOTH
    _ME(5) = _ME(5) * half * (ekmax-ekmin) ! curvature derivative modification from smoothing kernel
#else
   else
    _ME(5)=zero
   endif
#endif
  else
   _ME(5)=zero
  endif
#endif
 endif
!
 end __FUN(compute)
!=============================
#define _ME __NM(set_minmaxk)
 subroutine _ME(k,qmin)
 float :: k
 bool :: qmin ! whether to set minimum (otherwise, set maximum)
 __IAM(_ME)
 __ASSERT(__NM(initialized),.eqv.,.true.)
! change to any value, and print information:
 if (qmin) then ! set minimum
  __MESG(whoami, 'Changing minimum allowed curvature value from "'//trim(ftoa(mink))//'" to "'//trim(ftoa(k))//'"')
  mink=k
  if (mink.gt.maxk) then
   __WRN(whoami, 'Minimum allowed curvature ('//trim(ftoa(mink))//') > maximum ('//trim(ftoa(maxk))//'). Will set maxk=mink.');
   maxk=mink
  endif
 else ! set maximum
  __MESG(whoami, 'Changing maximum allowed curvature value from "'//trim(ftoa(maxk))//'" to "'//trim(ftoa(k))//'"')
  maxk=k
  if (mink.gt.maxk) then
   __WRN(whoami, 'Minimum allowed curvature ('//trim(ftoa(mink))//') > maximum ('//trim(ftoa(maxk))//'). Will set mink=maxk.');
   maxk=mink
  endif
 endif
#ifdef __CURVSMOOTH
 midk=half*(mink+maxk)
#endif
! check curvature grid support
 if (pp2%xgrid(1).gt.mink) then
  __WRN(whoami, 'Minimum allowed curvature ('//trim(ftoa(mink))//') below grid support ('//trim(ftoa(pp2%xgrid(1)))//'). Extrapolation possible.')
 endif
 if (pp2%xgrid(pp2%nxgrid).lt.maxk) then
  __WRN(whoami, 'Maximum allowed curvature ('//trim(ftoa(maxk))//') above grid support ('//trim(ftoa(pp2%xgrid(pp2%nxgrid)))//'). Extrapolation possible.')
 endif

 end subroutine _ME
!=============================
! for debugging
 __SUB(print2dmaps)
 __DEP_FILES
 __IMPNONE
 int, parameter :: np=100 , nk=np-1, nz=np+1 ! map resolution (diffferent to avoid accidental mixing of dimensions)
 float :: kk(nk), zz(nz)
 float, dimension(nk,nz) :: Ucurv, dUcurvdz, dUdk
 float, dimension(nz) :: Usurf, dUsurfdz ! 0-curvature part ; add to Ucurv to get the full potential
 float, parameter :: mind=-2 ! farthest point outside the boundary (we have an extrapolant, so this is arbitrary)
 int :: ik,iz
 float :: dk, dz
#ifdef __GRADCURV
 float :: sbfe(5)
#else
 float :: sbfe(4)
#endif
 int :: fout
 __IAM(__NM(print2dmaps))
 __ASSERT(__NM(initialized),.eqv.,.true.)
! compute grids
 dk=(maxk-mink)/(nk-1)
 dz=(maxd-mind)/(nz-1)
 do ik=1,nk
  kk(ik)=mink+(ik-1)*dk
 enddo
 do iz=1,nz
  zz(iz)=mind+(iz-1)*dz
 enddo
! compute function values
 do iz=1,nz
  do ik=1,nk
   sbfe=__NM(compute)(kk(ik),zz(iz),.true.,.true.)
   dUcurvdz(ik,iz)=sbfe(2)
   Ucurv(ik,iz)=sbfe(4)
#ifdef __GRADCURV)
   dUdk(ik,iz)=sbfe(5)
#endif
  enddo
  dUsurfdz(iz)=sbfe(1)
  Usurf(iz)=sbfe(3)
 enddo
! write out map files for visualization
#define __TXTDUMP(_W) \
 fout=-1 ; call files_open(fout, __STRING(_W)//'.dat', 'FORMATTED','WRITE');\
 write(fout,*) _W;\
 close(fout);
 __TXTDUMP(kk)
 __TXTDUMP(zz)
 __TXTDUMP(Ucurv)
 __TXTDUMP(dUcurvdz)
 __TXTDUMP(Usurf)
 __TXTDUMP(dUsurfdz)
 __TXTDUMP(dUdk)
 end __SUB(print2dmaps)
end module
