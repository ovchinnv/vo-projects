!various density definitions
#// note that the number below should not be used with the erf approximation, which is at most accurate to within O(-7)
#define  __RHO_MIN ERRTOL()
! error function definition
#ifndef __erf
#define __erfs __erfo7s
#define __erf __erfo7
#// single precision small number :
#undef __RHO_MIN
#define  __RHO_MIN FERRTOL()
#endif
! to "regularize" variation of applied forces with the contour value,
! use a rough approximation to the inverse of the filter CDF;
! NB:the approximation is the exact inverse with _SIMPLERHO
! to avoid divide overflow, define minimum density
! I initially set this to 0.5, perhaps because the logistic inverse was inaccurate
! However, with that option gone, do not see any reason not to approach -> 1 :
#//define  __RHO_MAX half
#ifdef __SINGLE
#define  __RHO_MAX 0.9999e0
#else
#define  __RHO_MAX 0.99999d0
#//define  __RHO_MAX 0.9d0
#endif
#define  __RHOSAFE(_X) (min(__RHO_MAX, __RHO(_X)))
#//-////////////////////// DISTANCE FUNCTION FROM DENSITY :
#// density function & inverse
#ifdef __ADD_PADDING_RHOINV
#define __SURF_PADDING surf_padding
#else
#define __SURF_PADDING 0d0
#endif
#// note that the inverse produces a negative distance, per our convention, and __rho takes a negative distance
#define __RHO(_X) half*(one + __erf( ((_X)+(__SURF_PADDING)) *osq2*oo_surf_stdev))
#define __Q(_R) ierfo7(two*(_R)-one)
#define __QSAFE(_R) ierfo7(two * min(__RHO_MAX, max(_R,__RHO_MIN)) - one)
#define __RHO_INVERSE(_R) (sqrt2*surf_stdev*__Q(_R) - (__SURF_PADDING))
#// if already computed erf inverse _Q
#define __RHO_INVERSE2(_Q) (sqrt2*surf_stdev*_Q - (__SURF_PADDING))
#define __RHO_INVSAFE(_R) (sqrt2*surf_stdev*__QSAFE(_R) - (__SURF_PADDING))
#// with __RHO_MIN specified, we also have the largest possible shell that can be defined ; note the (-) sign convention
#// this value should be considered when evolving the shell distance
#define  __MINSURFDIST __RHO_INVERSE(__RHO_MIN)
