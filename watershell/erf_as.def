#//adapted from Abramowitz & Stegun, and erfun directory in projects
#// appears to be the fastest algorithm
#define _a1 0.0705230784d0
#define _a2 0.0422820123d0
#define _a3 0.0092705272d0
#define _a4 0.0001520143d0
#define _a5 0.0002765672d0
#define _a6 0.0000430638d0
#define _one 1d0
#define _zero 0d0
#define _isgn(_Y) (INT(sign(_one,_Y)))
#define _x(_Y) (_isgn(_Y)*_Y)
#define _x2(_Y) (_x(_Y)*_x(_Y))
#define _x3(_Y) (_x2(_Y)*_x(_Y))
#define __erfo7(_Y) _isgn(_Y)*(_one - _one/(_one+_a1*_x(_Y)+_a2*_x2(_Y)+_a3*_x3(_Y)+_a4*_x2(_Y)*_x2(_Y)+_a5*_x2(_Y)*_x3(_Y)+_a6*_x3(_Y)*_x3(_Y))**16)
#//define __erfo7(_Y) _isgn(_Y)*(_one - (_one/sqrt(_one+_a1*_x(_Y)+_a2*_x2(_Y)+_a3*_x3(_Y)+_a4*_x2(_Y)*_x2(_Y)+_a5*_x2(_Y)*_x3(_Y)+_a6*_x3(_Y)*_x3(_Y)))**32)


#//mixture of defines and variables :
#//define __ERFHYBRID
#ifdef __ERFHYBRID
#define __x2 (x_*x_)
#define __x3 (__x2*x_)
#define  __erfo7i(_Y,_VAL) \
         isgn_=(INT(sign(_one,_Y)));\
         x_=isgn_*_Y;\
         _VAL=isgn_*(_one - _one/(_one+_a1*x_+_a2*__x2+_a3*__x3+_a4*__x2*__x2+_a5*__x2*__x3+_a6*__x3*__x3)**16)
#endif


#// single prec :
#define _as1 0.0705230784e0
#define _as2 0.0422820123e0
#define _as3 0.0092705272e0
#define _as4 0.0001520143e0
#define _as5 0.0002765672e0
#define _as6 0.0000430638e0
#define _ones 1e0
#define _zeros 0e0
#define _isgns(_Y) (INT(sign(_ones,_Y)))
#define _xs(_Y) (_isgns(_Y)*_Y)
#define _xs2(_Y) (_xs(_Y)*_xs(_Y))
#define _xs3(_Y) (_xs2(_Y)*_xs(_Y))
#define __erfo7s(_Y) _isgns(_Y)*(_ones - _ones/(_ones+_as1*_xs(_Y)+_as2*_xs2(_Y)+_as3*_xs3(_Y)+_as4*_xs2(_Y)*_xs2(_Y)+_as5*_xs2(_Y)*_xs3(_Y)+_as6*_xs3(_Y)*_xs3(_Y))**16)

