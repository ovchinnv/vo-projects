#define __DASYSTAT
#define __BULK_DISTANCE_SCALE 0.75d0
#//define __BAROSTAT
#define __PERTURB_GRID
#define __SORT_LIST
#define __NEIGHBOR_LIST
#define __RMFT
#//define __DEBUG
#define _DBGLEV 1
#ifndef __OMP
#define __OMP
#endif

#// NOTE : the problem with the force/torque removal algorithm is the force, not the torque
#// below are two mutually conflicting options
#//define __SIMPLE_NET_FORCE_SOLVENT
#define __SIMPLE_NET_FORCE_SURFACE
#define __TORQUE_FROM_FREE_SOLVENT
#define __TORQUE_FROM_FORCED_SOLVENT
#//define __TORQUE_COM_SURFACE
#define __TORQUE_COM_SOLVENT

#//to force 6x6 matrix computation :
#//define __F_T_COUPLED

#//define __SHOW_TORQUE

#//undef __OMP

#//define _N WATERSHELL
#define _N watershell

#if defined(__BINDC)
#define __FCFLOAT c_double 
#define __CFLOAT double 
#define __CFLOATFMT "%lf"
#define __FCINT c_int
#define __CINT int
#define __CINTFMT "%d"
#define __FCBOOL c_bool
#define __CBOOL _Bool
#define __FCCHAR c_char
#define __CCHAR char
#endif

#define __NM(_S) __CONCAT3(_N,_,_S)
#define __SUB(_S) subroutine __NM(_S)
#define __FUN(_S) function __NM(_S)

#ifdef __DBGOUT
#undef __DBGOUT
#endif

#ifdef __DEBUG
#define __DBGOUT(...) __MESG(whoami, 'DEBUG:', __VA_ARGS__)
#define __DBGVAR(_V,_LEV) if (_LEV <=_DBGLEV) then ;  __DBGOUT(__STRING(_V),':=',_V) ; endif
#else
#define __DBGOUT(...)
#define __DBGVAR(...)
#endif
#//define __DBGOUT(...)
#//define __DBGVAR(...)


#//sanity checks :

#if defined(__SIMPLE_NET_FORCE_SOLVENT) && defined(__SIMPLE_NET_FORCE_SURFACE)
#error(CANNOT SET BOTH __SIMPLE_NET_FORCE_SOLVENT AND __SIMPLE_NET_FORCE_SURFACE. STOPPING)
#endif

#if defined(__TORQUE_COM_SOLVENT) && defined(__TORQUE_COM_SURFACE)
#error(CANNOT SET BOTH __TORQUE_COM_SOLVENT AND __TORQUE_COM_SURFACE. STOPPING)
#elif !(defined(__TORQUE_COM_SOLVENT) || defined(__TORQUE_COM_SURFACE))
#error(MUST SET ONE EITHER __TORQUE_COM_SOLVENT OR __TORQUE_COM_SURFACE. STOPPING)
#endif

#if defined(__TORQUE_FROM_FORCED_SOLVENT) && defined(__TORQUE_FROM_FREE_SOLVENT)
#define __TORQUE_FROM_ALL_SOLVENT
#else
#undef __TORQUE_FROM_ALL_SOLVENT
#endif

#ifdef __RMFT
#if !(defined(__TORQUE_FROM_FORCED_SOLVENT) || defined(__TORQUE_FROM_FREE_SOLVENT))
#error(TORQUE REMOVAL NEEDS AT LEAST ONE OF __TORQUE_FROM_FORCED_SOLVENT or __TORQUE_FROM_FREE_SOLVENT TO BE SET)
#endif
#endif

#ifndef __TORQUE_COM_SOLVENT
#define __F_T_COUPLED
#endif

#define __CLASS // to bind OOP style procedure pointers in type
