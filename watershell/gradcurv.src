! NB that fortran is case -insensitive
   Lap=d2rho_solv(1,i) + d2rho_solv(4,i) + d2rho_solv(6,i) ! laplacian
   HoG(1) = d2rho_solv(1,i)*drho_solv(1,i) + d2rho_solv(2,i)*drho_solv(2,i) + d2rho_solv(3,i)*drho_solv(3,i)
   HoG(2) = d2rho_solv(2,i)*drho_solv(1,i) + d2rho_solv(4,i)*drho_solv(2,i) + d2rho_solv(5,i)*drho_solv(3,i)
   HoG(3) = d2rho_solv(3,i)*drho_solv(1,i) + d2rho_solv(5,i)*drho_solv(2,i) + d2rho_solv(6,i)*drho_solv(3,i)
   pre = ( HoG(1)*drho_solv(1,i) + HoG(2)*drho_solv(2,i) + HoG(3)*drho_solv(3,i) )*(_D0)**2 ! Hessian quadratic w/ unit normal
! NOTE THAT USING D0 rather than d0 is an _intentional_ preprocessor hack ;)
   Lap = Lap - pre ! L - G.H.G/|G|^2
   acurv_solv(i) = half * d0 * (Lap) ! average curvature
   Lap = half * Lap  - pre ! precomputed for derivative below (1/2 * ( lap - 3GHGn )/|G| )
! assemble curvature gradient piecemeal :
!  T21-23 in Matlab prototype
! 12/24 : note that the below get scaled difderently depending on whether the grad (drho_solv) is nornalized to unity or not
! this file works in both cases through the normalization constants d0 (actual gradient norm) and _D0 (either =d0 or =1) depending on whether grad is scaled
   dCurv(1) = two * ( (Lap + d2rho_solv(1,i))*HoG(1) +        d2rho_solv(2,i) *HoG(2)  +        d2rho_solv(3,i)*HoG(3) )
   dCurv(2) = two * (         d2rho_solv(2,i)*HoG(1) + (Lap + d2rho_solv(4,i))*HoG(2)  +        d2rho_solv(5,i)*HoG(3) )
   dCurv(3) = two * (         d2rho_solv(3,i)*HoG(1) +        d2rho_solv(5,i) *HoG(2)  + (Lap + d2rho_solv(6,i))*HoG(3))
! can now reuse HoG:
! grad of hessian quadratics :
! T31-33 in Matlab prototype
! wrt x:
! HoG1 = drhoxxx.*drhox + drhoxxy.*drhoy + drhoxxz.*drhoz ;
 HoG(1) = d3rho_solv(1,i)*drho_solv(1,i) + d3rho_solv(2,i)*drho_solv(2,i) + d3rho_solv(3,i)*drho_solv(3,i)
! HoG2 = drhoxxy.*drhox + drhoxyy.*drhoy + drhoxyz.*drhoz ;
 HoG(2) = d3rho_solv(2,i)*drho_solv(1,i) + d3rho_solv(4,i)*drho_solv(2,i) + d3rho_solv(5,i)*drho_solv(3,i)
! HoG3 = drhoxxz.*drhox + drhoxyz.*drhoy + drhoxzz.*drhoz ;
 HoG(3) = d3rho_solv(3,i)*drho_solv(1,i) + d3rho_solv(5,i)*drho_solv(2,i) + d3rho_solv(6,i)*drho_solv(3,i)
 dCurv(1) = d0*dCurv(1) + (_D0)*( HoG(1)*drho_solv(1,i) + HoG(2)*drho_solv(2,i) + HoG(3)*drho_solv(3,i) )
! wrt y:
! HoG1 = drhoxxy.*drhox + drhoxyy.*drhoy + drhoxyz.*drhoz ;
 HoG(1) = d3rho_solv(2,i)*drho_solv(1,i) + d3rho_solv(4,i)*drho_solv(2,i) + d3rho_solv(5,i)*drho_solv(3,i)
! HoG2 = drhoxyy.*drhox + drhoyyy.*drhoy + drhoyyz.*drhoz ;
 HoG(2) = d3rho_solv(4,i)*drho_solv(1,i) + d3rho_solv(7,i)*drho_solv(2,i) + d3rho_solv(8,i)*drho_solv(3,i)
! HoG3 = drhoxyz.*drhox + drhoyyz.*drhoy + drhoyzz.*drhoz ;
 HoG(3) = d3rho_solv(5,i)*drho_solv(1,i) + d3rho_solv(8,i)*drho_solv(2,i) + d3rho_solv(9,i)*drho_solv(3,i)
 dCurv(2) = d0*dCurv(2) + (_D0)*( HoG(1)*drho_solv(1,i) + HoG(2)*drho_solv(2,i) + HoG(3)*drho_solv(3,i) )
!
! HoG1 = drhoxxz.*drhox + drhoxyz.*drhoy + drhoxzz.*drhoz ;
 HoG(1) = d3rho_solv(3,i)*drho_solv(1,i) + d3rho_solv(5,i)*drho_solv(2,i) + d3rho_solv(6,i)*drho_solv(3,i)
! HoG2 = drhoxyz.*drhox + drhoyyz.*drhoy + drhoyzz.*drhoz ;
 HoG(2) = d3rho_solv(5,i)*drho_solv(1,i) + d3rho_solv(8,i)*drho_solv(2,i) + d3rho_solv(9,i)*drho_solv(3,i)
! HoG3 = drhoxzz.*drhox + drhoyzz.*drhoy + drhozzz.*drhoz ;
 HoG(3) = d3rho_solv(6,i)*drho_solv(1,i) + d3rho_solv(9,i)*drho_solv(2,i) + d3rho_solv(10,i)*drho_solv(3,i)
 dCurv(3) = d0*dCurv(3) + (_D0)*( HoG(1)*drho_solv(1,i) + HoG(2)*drho_solv(2,i) + HoG(3)*drho_solv(3,i) )
!
! curvature :
! divergence of Hessian:
! divH1 = drhoxxx+drhoxyy+drhoxzz; % to be scaled by 1/g
! divH2 = drhoxxy+drhoyyy+drhoyzz;
! divH3 = drhoxxz+drhoyyz+drhozzz;
 dCurv(1) = d0 * ( d3rho_solv(1,i)+d3rho_solv(4,i)+d3rho_solv(6,i)  - (_D0) * dCurv(1) );
 dCurv(2) = d0 * ( d3rho_solv(2,i)+d3rho_solv(7,i)+d3rho_solv(9,i)  - (_D0) * dCurv(2) );
 dCurv(3) = d0 * ( d3rho_solv(3,i)+d3rho_solv(8,i)+d3rho_solv(10,i) - (_D0) * dCurv(3) );
