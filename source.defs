#ifdef __CHARMM

#ifndef __CHARMM_ONLY
#define __CHARMM_ONLY
#define __WRN(__WHO,__MSG) call wrndie(0 , __WHO , __MSG)
#define __PRINT(__MSG) do i_=1,size(__MSG);if(__MSG(i_)==''.and.i_>1)exit;write(OUTU,'(A)')__MSG(i_)(1:len_trim(__MSG(i_)));enddo;__MSG=''
#define __PRINTL(__MSG,__LEVEL) if(prnlev.ge. __LEVEL )then;do i_=1,size(__MSG);if(__MSG(i_)=='')exit;write(OUTU,'(A)')__MSG(i_);enddo;__MSG='';endif
#define __MESSAGE(__WHO, __MSG) write(OUTU,'(3A)') __WHO(1:len_trim(__WHO)),' ',__MSG(1)(1:len_trim(__MSG()));\
  enddo;__MSG=''
#endif

#define float real(chm_real)
#define int integer
#define bool logical
#define int4mpi integer*4

#define __DEP_KINDS       use chm_kinds
#define __DEP_OUTPUT      use stream
#define __DEP_PARSER      use string
#define __DEP_CONST       use consta
#define __DEP_NUMBER      use number
#define __DEP_RANDOM      use clcg_mod, only: random; use reawri, only: iseed
#define __DEP_SELECT      use select, only : selrpn, nselct; use psf
#define __DEP_COORDINATES use coord; use coordc
#define __DEP_SIZE        use dimens_fcm
#define __DEP_COORIO      use cvio, only : writcv, readcv; use coorio_mod, only : cwrite, cread; use ctitla
#define __DEP_PSF         use psf

#define __RANDOMU(__I) random(__I)
#define __SEED iseed
#define __NAN anum

#define __XCOMP xcomp /*COORDINATES AND MASSES:*/
#define __YCOMP ycomp
#define __ZCOMP zcomp
#define __X x
#define __Y y
#define __Z z
#define __XXCOMP(__IND) xcomp(__IND)
#define __YYCOMP(__IND) ycomp(__IND)
#define __ZZCOMP(__IND) zcomp(__IND)
#define __XX(__IND) x(__IND)
#define __YY(__IND) y(__IND)
#define __ZZ(__IND) z(__IND)
#define __MASS amass
#define __WMAIN wmain
#define __WCOMP wcomp

#define __NEXTA(__STR, __STRLEN) nexta8(__STR,__STRLEN)
#define __ATOI(__STR, __STRLEN) decodi(__STR, __STRLEN)
#define __TRIMA(__STR, __STRLEN) call trima(__STR, __STRLEN)
#define __INDX(__STR, __STRLEN, __TEST, __TESTLEN) indx(__STR, __STRLEN, __TEST, __TESTLEN)
#define __INDX_RM(__STR, __STRLEN, __TEST) indxa(__STR, __STRLEN, __TEST)
#define __NEXTI(__STR, __STRLEN) nexti(__STR, __STRLEN)
#define __NEXTF(__STR, __STRLEN) nextf(__STR, __STRLEN)
#define __GET_RM_I(__STR, __STRLEN, __TEST, __DEFAULT) gtrmi(__STR, __STRLEN, __TEST, __DEFAULT)
#define __GET_RM_F(__STR, __STRLEN, __TEST, __DEFAULT) gtrmf(__STR, __STRLEN, __TEST, __DEFAULT)
#define __GET_RM_A(__STR, __STRLEN, __TEST, __I, __NAME, __MXLEN, __LEN) call gtrmwa(__STR, __STRLEN, __TEST, __I, __NAME, __MXLEN, __LEN)
#define __GET_RM_AFUN(__STR, __STRLEN, __TEST) gtrma(__STR, __STRLEN, __TEST)
#define __DEBUG .false.
#define __OSTREAM outu
#define __ISTREAM istrm
#define __ERRTOL RSMALL

#define __BROADCAST_LOCAL_C(__WHAT, __HOWMANY)  call PSNDC(__WHAT,__HOWMANY)
#define __BROADCAST_LOCAL_8B(__WHAT, __HOWMANY) call PSND8(__WHAT,__HOWMANY)
#define __BROADCAST_LOCAL_4B(__WHAT, __HOWMANY) call PSND4(__WHAT,__HOWMANY)

#else

#define __CHARMM_ONLY !**CHARMM_ONLY**!
/*#define __WRN(__WHO,__MSG) write(0,*) 'WARNING FROM: ',__WHO,': ',__MSG*/
/*#define __PRINT(__MSG) write(0,'(A)') __MSG*/
#define __WRN(__WHO,__MSG) call warning(__WHO, __MSG, 0)
#define __MESSAGE(__WHO,__MSG) call message(__WHO, __MSG)
/*#define __PRINT(__MSG) call plainmessage(__MSG)*/
#define __PRINT(__MSG) do i_=1,size(__MSG);if(__MSG(i_)=='')exit;call plainmessage(__MSG(i_));enddo;__MSG=''
/*#define __PRINTL(__MSG,__LEVEL) call plainmessage(__MSG,__LEVEL)*/
#define __PRINTL(__MSG,__LEVEL) do i_=1,size(__MSG);if(__MSG(i_)=='')exit;call plainmessage(__MSG(i_),__LEVEL);enddo;__MSG=''

#define __DEP_OUTPUT      use output
#define __DEP_PARSER      use parser
#define __DEP_CONST       use constants
#define __DEP_NUMBER      use constants
#define __DEP_RANDOM      use rng
#define __DEP_SELECT      use system, only : system_getind
#define __DEP_SIZE        use psf
#define __DEP_COORIO      use charmmio; use pdbio; use mol_formats
#define __DEP_PSF         use psf

#ifdef __RCOMP
#define __DEP_COORDINATES use system, only : r, rcomp, m, bfactor, occupancy
#else
#define __DEP_COORDINATES use system, only : r, m, bfactor, occupancy
#endif

#define __RANDOMU(__I) randomu(__I)
#define __SEED
#define __NAN unknownf

/*COORDINATES AND MASSES:*/
#define __XCOMP rcomp(1,:)
#define __YCOMP rcomp(2,:)
#define __ZCOMP rcomp(3,:)
#define __X r(1,:)
#define __Y r(2,:)
#define __Z r(3,:)
#define __XXCOMP(__IND) rcomp(1,__IND)
#define __YYCOMP(__IND) rcomp(2,__IND)
#define __ZZCOMP(__IND) rcomp(3,__IND)
#define __XX(__IND) r(1,__IND)
#define __YY(__IND) r(2,__IND)
#define __ZZ(__IND) r(3,__IND)
#define __MASS m
#define __WMAIN bfactor
#define __WCOMP occupancy

#define __TRIMA(__STR, __STRLEN) __STRLEN=min(max(0,__STRLEN),len(__STR));__STR(__STRLEN+1:)='';call adjustleft(__STR,(/' ',tab/));__STRLEN=len_trim(__STR)
#define __INDX(__STR, __STRLEN, __TEST, __TESTLEN) find_tag(__STR, __TEST, __STRLEN)
#define __INDX_RM(__STR, __STRLEN, __TEST) remove_tag(__STR,__TEST,__STRLEN)
#define __NEXTA(__STR,__STRLEN) pop_string(__STR,__STRLEN) ; __STRLEN=len_trim(__STR)
#define __NEXTI(__STR,__STRLEN) atoi(pop_string(__STR,__STRLEN)) ; __STRLEN=len_trim(__STR)
#define __NEXTF(__STR,__STRLEN) atof(pop_string(__STR,__STRLEN)) ; __STRLEN=len_trim(__STR)
#define __GET_RM_I(__STR, __STRLEN, __TEST, __DEFAULT) atoi(get_remove_parameter(__STR, __TEST, __STRLEN), __DEFAULT)
#define __GET_RM_F(__STR, __STRLEN, __TEST, __DEFAULT) atof(get_remove_parameter(__STR, __TEST, __STRLEN), __DEFAULT)
#define __GET_RM_A(__STR, __STRLEN, __TEST, __I, __NAME, __MXLEN, __LEN) \
        __NAME=get_remove_parameter(__STR,__TEST,__STRLEN); __LEN=len_trim(__NAME)
#define __GET_RM_AFUN(__STR, __STRLEN, __TEST) get_remove_parameter(__STR,__TEST,__STRLEN)

/*#define __INDX(__STR, __STRLEN, __TEST, __TESTLEN) \
 index(__STR(1:min(__STRLEN,len(__STR))),__TEST(1:min(__TESTLEN,len(__TEST))))*/


#define __ATOI(__STR, __STRLEN) atoi(__STR(1:__STRLEN)) 

#define __OSTREAM fout
#define __ISTREAM 5

#define __ERRTOL errtol()

#endif

#define __IMPNONE implicit none
#define __DEP_MPI         use mpi
#define __DEP_MULTICOM    use multicom_aux
#define __DEP_BESTFIT     use bestfit, only : eig3s, RMSBestFit, rmsd, norm3, veccross3
#define __DEP_MULTIDIAG   use multidiag

#define _MSGBUF msg___
#define __DECL_MSGBUF __DECLARE_MSGBUF
#define __DECLARE_MSGBUF character(len=200) :: _MSGBUF(21)=(/'','','','','','','','','','','','','','','','','','','','',''/); int :: i_
#define __WARN(__WHO,...) write(_MSGBUF,*)__VA_ARGS__;__WRN(__WHO,_MSGBUF(1)) 
#define __MESG(__WHO,...) write(_MSGBUF,*)__VA_ARGS__;__MESSAGE(__WHO,_MSGBUF(1)) 
#define __PMSG(...) write(_MSGBUF,*)__VA_ARGS__;__PRINTL(_MSGBUF,0) 

#define __STRNCMP(__S1, __S2, __LEN) ( __S1(1:__LEN).eq.__S2(1:__LEN) )

#define __BROADCAST_LOCAL(__WHAT, __HOWMANY, __TYPE) call mpi_bcast(__WHAT,__HOWMANY,__TYPE,0,MPI_COMM_LOCAL,ierror)

