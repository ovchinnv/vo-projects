#ifdef __CHARMM

#ifndef __CHARMM_ONLY
#define __CHARMM_ONLY
#define __WRN(__WHO,__MSG) call wrndie(0 , __WHO , __MSG)
#define __PRINTL(__MSG,__LEVEL) if (prnlev.ge. __LEVEL ) write (OUTU,'(A)') __MSG
#define __PRINT(__MSG) write (OUTU,'(A)') __MSG
#endif

#define float real(chm_real)
#define int integer
#define bool logical
#define int4mpi integer*4

#define __DEP_OUTPUT      use stream
#define __DEP_PARSER      use string
#define __DEP_CONST       use consta
#define __DEP_NUMBER      use number
#define __DEP_RANDOM      use clcg, only: random; use reawri, only: iseed
#define __DEP_SELECT      use select, only : selrpn, nselct; use psf
#define __DEP_COORDINATES use coord; use coordc

#define __RANDOMU(__I) random(__I)
#define __SEED iseed
#define __NAN anum

#define __NEXTA(__STR, __STRLEN) nexta8(__STR,__STRLEN)
#define __ATOI(__STR, __STRLEN) decodi(__STR, __STRLEN)
#define __TRIMA(__STR, __STRLEN) call trima(__STR, __STRLEN)
#define __INDX(__STR, __STRLEN, __TEST, __TESTLEN) indx(__STR, __STRLEN, __TEST, __TESTLEN)
#define __INDX_RM(__STR, __STRLEN, __TEST) indxa(__STR, __STRLEN, __TEST)
#define __NEXTI(__STR, __STRLEN) nexti(__STR, __STRLEN)
#define __GET_RM_I(__STR, __STRLEN, __TEST, __DEFAULT) gtrmi(__STR, __STRLEN, __TEST, __DEFAULT)
#define __GET_RM_F(__STR, __STRLEN, __TEST, __DEFAULT) gtrmf(__STR, __STRLEN, __TEST, __DEFAULT)
#define __DEBUG .false.

#else

#define __CHARMM_ONLY !**CHARMM_ONLY**!
#define __WRN(__WHO,__MSG) write(0,*) 'WARNING FROM: ',__WHO,': ',__MSG
#define __PRINT(__MSG) write(0,'(A)') __MSG
#define __PRINTL(__MSG,__LEVEL) call plainmessage(__MSG,__LEVEL)

#define __DEP_OUTPUT      use output
#define __DEP_PARSER      use parser
#define __DEP_CONST       use constants
#define __DEP_NUMBER      use constants
#define __DEP_RANDOM      use rng
#define __DEP_SELECT      use system, only : system_getind

#ifdef __RCOMP
#define __DEP_COORDINATES use system, only : r, rcomp
#else
#define __DEP_COORDINATES use system, only : r
#endif

#define __RANDOMU(__I) randomu(__I)
#define __SEED
#define __NAN unknownf

#define __TRIMA(__STR, __STRLEN) __STRLEN=min(max(0,__STRLEN),len(__STR));__STR(__STRLEN+1:)='';call adjustleft(__STR,(/' ',tab/));__STRLEN=len_trim(__STR)
#define __INDX(__STR, __STRLEN, __TEST, __TESTLEN) index(__STR(1:min(__STRLEN,len(__STR))),__TEST(1:min(__TESTLEN,len(__TEST))))
#define __INDX_RM(__STR, __STRLEN, __TEST) remove_tag(__STR,__TEST,__STRLEN)

#define __NEXTA(__STR,__STRLEN) pop_string(__STR,__STRLEN) ; __STRLEN=len_trim(__STR)
#define __NEXTI(__STR,__STRLEN) atoi(pop_string(__STR,__STRLEN)) ; __STRLEN=len_trim(__STR)
#define __GET_RM_I(__STR, __STRLEN, __TEST, __DEFAULT) atoi(get_remove_parameter(__STR, __TEST, __STRLEN), __DEFAULT)
#define __GET_RM_F(__STR, __STRLEN, __TEST, __DEFAULT) atof(get_remove_parameter(__STR, __TEST, __STRLEN), __DEFAULT)

#define __ATOI(__STR, __STRLEN) atoi(__STR(1:__STRLEN)) 

#endif

#define __IMPNONE implicit none
#define __DEP_MPI         use mpi
#define __DEP_MULTICOM    use multicom_aux
#define __DEP_BESTFIT     use bestfit
#define __DEP_MULTIDIAG   use multidiag

#define _MSGBUF msg___
#define __DECL_MSGBUF __DECLARE_MSGBUF
#define __DECLARE_MSGBUF character(len=80) :: _MSGBUF
#define __WARN(__WHO,...)write(_MSGBUF,*)__VA_ARGS__;__WRN(__WHO,_MSGBUF) 

#define __STRNCMP(__S1, __S2, __LEN) ( __S1(1:__LEN).eq.__S2(1:__LEN) )

