! data structures and subroutines to store scalar data on a grid

#define _N gridscalartype

module _N
!
 __DEP_OUTPUT

 __IMPNONE
 public

 type gscalar
  int :: size=0                          ! number of points
  int :: dim=0                           ! dimensionality
  bool :: initialized=.false.            ! whether an initialization call has been made (must be set before data is used)
  float, dimension(:), pointer :: data   ! pointer to data; note that this is to be used in any dimensions
 end type gscalar
!
 contains
!===============
  __SUB(init) (scalar,n,dim,data)
  __IAM(__NM(init))
  type (gscalar) :: scalar
  int, intent(in) :: n, dim
  float, intent(in) :: data(n*dim)
  __ASSERT(n,>,0)
  __ASSERT(dim,>,0)
  if (scalar%initialized) call __NM(done) (scalar)
  scalar%size=n
  scalar%dim=dim
  __DBGOUT('allocating gscalar%data with size ', n*dim)
  allocate(scalar%data(n*dim))
  scalar%data=data
  scalar%initialized=.true.
!
  end __SUB(init)
!================
  __SUB(done) (scalar)
  type (gscalar) :: scalar
  if (scalar%initialized) then
   deallocate(scalar%data)
  else
   nullify(scalar%data)
  endif
  scalar%size=0
  scalar%dim=0
  scalar%initialized=.false.
  end __SUB(done)

end module _N
