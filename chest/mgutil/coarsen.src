 subroutine coarsen(f,c,nx,ny,nz,i2d)
 implicit none
! note that nx,ny,nz correspond to the number of inner points (in 2D, nnz = 1)
 int :: i2d
 int :: nx, ny, nz
 float :: f(nx,ny,nz), c(nx/2,ny/2,nz/(2-i2d))
#ifndef __CVEC
 int :: i,j,k,im,jm,km
 float :: coef
#endif
!
 if (i2d.eq.0) then
#ifndef __CVEC
!############################ serial calculation ###########################
 coef=0.125d0
 km=1
 do k=1,nz/2 ; jm=1 ; 
!
  do j=1,ny/2 ; im=1 ; 
!
   do i=1,nx/2;
    c(i,j,k)=coef * ( f(im,jm,km)  +f(im+1,jm,km)  +f(im+1,jm+1,km)  +f(im,jm+1,km) + &
&                     f(im,jm,km+1)+f(im+1,jm,km+1)+f(im+1,jm+1,km+1)+f(im,jm+1,km+1) )
    im=im+2
   enddo ! i 
   jm=jm+2
  enddo ! j
  km=km+2
 enddo ! k
#else
  c=0.125d0*(&
   f(1::2,1::2,1::2)+&
   f(2::2,1::2,1::2)+&
   f(1::2,2::2,1::2)+&
   f(2::2,2::2,1::2)+&
   f(1::2,1::2,2::2)+&
   f(2::2,1::2,2::2)+&
   f(1::2,2::2,2::2)+&
   f(2::2,2::2,2::2)&
  )
#endif
 else
#ifndef __CVEC
!################################### serial calculation ################################
 coef=0.25d0
 jm=1;
 do j=1,ny/2 ; im=1 ; 
!
  do i=1,nx/2;
   c(i,j,1)=coef * ( f(im,jm,1)+f(im+1,jm,1)+f(im+1,jm+1,1)+f(im,jm+1,1) )
   im=im+2
  enddo 
  jm=jm+2
 enddo
! 
#else
!################################### vector calculation ################################
  c=0.25d0*(&
   f(1::2,1::2,1::2)+&
   f(2::2,1::2,1::2)+&
   f(1::2,2::2,1::2)+&
   f(2::2,2::2,1::2)&
  )
#endif
 endif
!
 end subroutine coarsen
!*****************************************************************************************!
 subroutine coarsen2d_vec(fine,coarse,nx,ny)
! used for coarsening the residual 
! note that nx,ny correspond to the number of inner points
 implicit none
 int :: nx, ny
 float :: fine(nx,ny), coarse(nx/2,ny/2)
 coarse=0.25d0*(&
   fine(1::2,1::2)+&
   fine(2::2,1::2)+&
   fine(1::2,2::2)+&
   fine(2::2,2::2)&
  )
 end subroutine coarsen2d_vec
