      module SIZE ! must be upper-case for the preprocessor to recognize
!     contains basic information about the size of the calculation      
       private ! keep mpif.h hidden here
#ifdef PARALLEL
       __DEP_MPI
#endif
!
       public size_initialize
       int, save, public ::  nx=0, ny=0, nz=0
!
       int4mpi, save, public ::  communicator, ncpu=-1, me=-1
       bool, save, public ::  size_initialized, q2D
!
      contains
       subroutine size_initialize(mx, my, mz, comm)
       use output, only: error, message, qprint
       implicit none
       int :: mx, my, mz
       integer*4, optional :: comm
       int :: bug
       character(len=8), parameter :: whoami='SET_SIZE'
!
       size_initialized=.false.
       q2D=.false.
!
#ifdef PARALLEL
!
       communicator=MPI_COMM_NULL
!
       if (present(comm)) then 
        if (comm.ne.MPI_COMM_NULL) then
         call MPI_SIZE(comm, ncpu, bug)
         call MPI_RANK(comm, me, bug)
         communicator=comm
        endif
       endif
#else
       me=0
       ncpu=1
       communicator=-1
#endif
!      note: qprint lives in output module
       if (me.eq.0) then ; qprint=.true. ; else ; qprint=.false.; endif
!
       if (mx.lt.4) then
        call error(whoami, 'NX less than 4. Aborting.',-1)
        return
       else
        nx=mx
       endif
!       
       if (my.lt.4) then
        call error(whoami, 'NY less than 4. Aborting.',-1)
        return
       else
        ny=my
       endif
!       
       if (mz.lt.4) then
        call message(whoami, 'NZ less than 4. Assuming 2D configuration (NZ = 3).')
        q2D=.true.
        nz=3
       else
        nz=mz
        q2D=.false.
       endif
!
       size_initialized=.true.
!
       end subroutine size_initialize
      end module SIZE
