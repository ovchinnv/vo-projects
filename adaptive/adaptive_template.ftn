#define __CTX __CONCAT3(adaptive,_,_NAME)
#define __RESTARTCTX __CONCAT(__CTX,_restart)
#define _N __CTX
#//define __CHKUPDATE(_WHAT)   ( (mod(iteration, _WHAT) .eq. ione) .or. _WHAT.eq.ione )
#define __CHKUPDATE(_WHAT)   (mod(iteration, _WHAT) .eq. izero)

module _N

 __DEP_PARSER
 __DEP_OUTPUT
 __DEP_CONST
 __DEP_FILES
 __DEP_RANDOM
 __DEP_MPI
 use __CONCAT(gridscalar,_MAPTYPE)

 __IMPNONE

 private

 public __NM(initialize)
 public __NM(initialized)
 public __NM(done)
 public __NM(main)

 bool, save :: __NM(initialized)=.false.
!
! macro for parameter definition
#define __PAR(_PAR,_TYPE,_DEF) _TYPE, save :: _PAR ; _TYPE, parameter :: __CONCAT(default_,_PAR)=_DEF;

 __PAR(__CONCAT(min,_NAME),float,0.01d0)
 __PAR(__CONCAT(max,_NAME),float,100d0)
 __PAR(_NAME,float,__CONCAT(default_min,_NAME))       ! current value
 __PAR(timestep,float,1.0d-4) ! integration step
 __PAR(iteration,int*8,izero)   ! iteration
 __PAR(gridsize,int,1000)     ! size for grid (note that this is the number of points ; number of bins would be gridsize-1 )
!
 __PAR(dgrid,float,abs(__XMAP(__CONCAT(default_max,_NAME))-__XMAP(__CONCAT(default_min,_NAME)))/(default_gridsize-1))
!                                                                                           ! ( note that it is easier to set the gridsize )
 __PAR(damping_average,float,one/ten) ! damping constant for computing averages (C_\gamma in Zhang & Ma)
!
 __PAR(dist, character(len=vartaglen), 'POWERLAW') ! prescribed distribution of (untransformed) _NAME
 __PAR(dist_exp, float, zero) ! powerlaw coefficent in the distribution of (untransformed) _NAME
 __PAR(interp_width, int, 10)  ! number of bins over which the linear fit of average conjugate/dual
 __PAR(average_update_freq, int, 1)   ! frequency of updating average of dual
 __PAR(__CONCAT(_NAME,_update_freq), int, 1)   ! frequency of evolution
 __PAR(output_file_freq, int, 1000)   ! frequency of writing tempering output file
!
 __PAR(restart_file, character(len=vartaglen), 'NONE') ! restart file
 __PAR(output_file, character(len=vartaglen), 'adaptive.restart.txt') ! output file
!
 __PAR(random_seeds(4), int, (/ione, itwo, ithree, ifour/))
! grid data array:
 float, pointer, dimension(:) :: restart_grid_data=>NULL() ! energy grid data for reading/writing restart/output files

!
 int :: mapdist ! distribution type flag
 int, parameter :: constant=1, powerlaw=2
!
 int :: fid, i, ierr
 bool :: qrestart=.false. ! whether we are restarting from a restart file
!
! for storing random numbers
 int, parameter :: nrandmax = 100000 ! maximum random number array size (many numbers precomputed for speed)
 int :: nrand = 0 !actual size of random number array size
 int :: irand=0 ! pointer into random number array eta
 float :: eta(0:nrandmax-1)
 float :: sqrt2dt  = sqrt(two * default_timestep) ! precomputed sqrt(2 x dt) for BD integrator
!
! for time series (history) output
 int, parameter :: maxhist = 100000 ! size of history array ; this is the largest size that can be stored between outputs 
 int, parameter :: numhistvar  = 5      ! for now, plugin iteration, adaptive variable and its instantaneous dual, mditeration
 float :: hist(numhistvar,0:maxhist-1)
 int, parameter :: istep=1, ivar=2, imapvar=3, idual=4, imdstep=5  ! indices into hist
 int :: bhist=0, ehist=-1 ! beginning and final indices into history array
 __PAR(stat_add_freq, int, 10)     ! frequency of storing time series
 __PAR(stat_output_freq, int, 1000)   ! frequency of time series output
 __PAR(stat_output_file, character(len=vartaglen), 'adaptive.series.txt') ! time series file
 character(len=7) :: stat_acc='WRITE' ! access mode for series file ('WRITE'/'READ'/'APPEND')
 character(len=vartaglen) :: line ! for reading grid data from restart file
!
 contains
!====================================================================================
 __SUB(initialize) (param)
 float, intent(out), optional :: param ! if requested, pass the value of param = (__NAME) at initialization
 character(len=vartaglen) :: keyword, context
 int :: l
 __IAM(__NM(initialize))
!
#define __CONTEXT __STRING(__CTX)
 context=__CONTEXT ;
! first, check if we have the watershell context present
 if (parser_find_context(__CONTEXT).le.0) then
  __MESSAGE(whoami, trim(ftoupper(__STRING(_N)))//' CONFIGURATION OPTIONS NOT PROVIDED. WILL NOT INITIALIZE.');
   return
 endif
! next, check for restart file
! if present, read it and skip initialization options
! read restart file
#define __CHAR
#define __VAR	restart_file
#define __TAG	restart_file
#define __NAME	restart file
#include "parser/parser_macro2.src"
#undef __CHAR
!
 qrestart = ( existtag_nocase('restart_file', context) .and. trim(ftoupper(restart_file)).ne.'NONE')
!
 if (qrestart) then
  __MESSAGE(whoami,' READING RESTART FILE. INPUT FILE '//trim(ftoupper(__STRING(_NAME)))//' AND GRID SIZE PARAMETERS ARE IGNORED.')
! read and parse restart file
  fid=-1
  call files_open(fid, restart_file, 'FORMATTED', 'READ')
  call parse_file(fid, &
#ifdef __PARALLEL
 &  MPI_COMM_NULL, &
#endif
 &  quiet_=.false.)
  call files_close(fid)
! now comes a trick : change context name temporarily to process the restart file using the same calls
  context= __STRING(__RESTARTCTX)
 else ! only read below if no restart file provided
!
#define __LEZEROERR
#define __VAR	dgrid
#define __TAG	__CONCAT(_NAME,_grid_spacing)
#define __NAME	mapped _NAME grid resolution
#define __DOIFOK gridsize = INT(one + abs(__XMAP(__CONCAT(max,_NAME))-__XMAP(__CONCAT(min,_NAME)))/dgrid )
#include "parser/parser_macro2.src"

! warn if both dgrid and gridsize provided
  if (existtag_nocase(__STRING(__CONCAT(_NAME,_grid_spacing)), context).and.existtag_nocase(__STRING(__CONCAT3(mapped_,_NAME,_gridsize)), context)) then
   __WRN(whoami, ' GRID SIZE AND GRID SPACING CANNOT BOTH BE SPECIFIED.')
  endif
!
 endif ! qrestart
!
! check for random seeds
 if (existtag_nocase('random_seeds', context)) then ;
  random_seeds=atoiv(getval_nocase('random_seeds', context),4);
 else
  __WARN('RANDOM_INIT','SEEDS NOT SPECIFIED, USING [',default_random_seeds,']')
  random_seeds=default_random_seeds
 endif

!
#undef __LEZEROERR
#define __WARNIFMISSING
#define __DEFAULT
#define __VAR	damping_average
#define __TAG	average_damping_constant
#define __NAME	damping constant for weighted average
#include "parser/parser_macro2.src"
!
#define __INT
#define __VAR	iteration
#define __TAG	__VAR
#define __NAME	starting iteration
#include "parser/parser_macro2.src"
!
!
#define __LEZEROERR
#undef __INT
#define __VAR	_NAME
#define __TAG	_NAME
#define __NAME	initial _NAME value
#include "parser/parser_macro2.src"
!
#define __WARNIFMISSING
#define __VAR	__CONCAT(min,_NAME)
#define __TAG	__CONCAT(minimum_,_NAME)
#define __NAME	minimum _NAME
#include "parser/parser_macro2.src"
!
#define __VAR	__CONCAT(max,_NAME)
#define __TAG	__CONCAT(maximum_,_NAME)
#define __NAME	maximum _NAME
#include "parser/parser_macro2.src"
!
#define __INT
#define __VAR	gridsize
#define __TAG	__CONCAT(_NAME,_gridsize)
#define __NAME	size of mapped _NAME grid
#define __DOIFOK dgrid=abs(__XMAP(__CONCAT(max,_NAME))-__XMAP(__CONCAT(min,_NAME)))/(gridsize-1)
#include "parser/parser_macro2.src"
! read grid data (ndim is public in energy_grid)
 allocate(restart_grid_data(ndim*gridsize))
! check for grid data if restart_file present
 if (qrestart) then
  do i=1, gridsize
   line=getval_nocase('gdata_'//trim(itoa(i)),context)
   if (len_trim(line).gt.0) then
    read(line,*,iostat=ierr) restart_grid_data(i::gridsize)
    if (ierr.ne.0) then
     __WRN(whoami, 'ERROR READING GRID DATA FROM LINE "'//trim(line)//'"')
     cycle
    endif
   else
    __WRN(whoami, 'ERROR READING GRID DATA FROM LINE "'//trim(line)//'"')
   endif ! line
  enddo ! grid size
 endif ! restart_file

! distribution parameters
#undef __INT
#define __CHAR
#define __VAR	dist
#define __TAG	__CONCAT(_NAME,_distribution)
#define __NAME	_NAME distribution
#include "parser/parser_macro2.src"
!
 call toupper(dist)
 select case(dist)
  case('CONSTANT', 'CONST','UNIFORM', 'UNIF') ; mapdist=constant; 
  case('PLAW','POWER','POWERLAW') ; mapdist=powerlaw;
  case default;
   __WRN(whoami, ' UNKNOWN DISTRIBUTION SPECIFIED ('//trim(dist)//')')
 end select
!
#undef __CHAR

#define __MINUSERR
#define __INT
#define __VAR	interp_width
#define __TAG	__VAR
#define __NAME	number of bins for interpolation
#include "parser/parser_macro2.src"
!
#undef __MINUSERR
#undef __LEZEROERR
#undef __INT
#define __VAR	dist_exp
#define __TAG	__CONCAT(_NAME,_distribution_exponent)
#define __NAME	exponent for _NAME distribution
#include "parser/parser_macro2.src"
!
 if (mapdist.eq.constant) then
  if (existtag_nocase(__STRING(__CONCAT(_NAME,_distribution_exponent)), context)) then
   __WRN(whoami, ' FOR UNIFORM DISTRIBUTION EXPONENT IS SET TO ZERO.')
   dist_exp=zero
  endif
 endif
!
 if (fatal_warning()) return
! ====== done with (possible) restart file data
 context=__CONTEXT ! reset context if changed
!
! other parameters
#define __MINUSERR
#define __INT
#define __VAR	average_update_freq
#define __TAG	__VAR
#define __NAME	frequency of updating averages of conjugate/dual
#define __DOIFOK if (__VAR.eq.izero) __MESSAGE(whoami, ' UPDATE OF AVERAGE DUAL IS OFF.')
#include "parser/parser_macro2.src"
!
#define __VAR	__CONCAT(_NAME,_update_freq)
#define __TAG	__VAR
#define __NAME	frequency of updating _NAME
#define __DOIFOK if (__VAR.eq.izero) __MESSAGE(whoami, __STRING(_NAME UPDATE IS OFF.))
#include "parser/parser_macro2.src"
!
#define __VAR	stat_add_freq
#define __TAG	__VAR
#define __NAME	frequency of saving temperature/energy time series
#define __DOIFOK if (__VAR.eq.izero) __WRN(whoami, ' WILL NOT SAVE TIME SERIES.')
#include "parser/parser_macro2.src"
!
#define __VAR	stat_output_freq
#define __TAG	__VAR
#define __NAME	frequency of writing time series file
#define __DOIFOK if (__VAR.eq.izero) then ; stat_add_freq=izero ; __MESSAGE(whoami, ' WILL NOT WRITE TIME SERIES.') ; endif
#include "parser/parser_macro2.src"
!
! statistics
#undef __INT
#define __CHAR
#define __VAR	stat_output_file
#define __TAG	__VAR
#define __NAME	time series file name
#include "parser/parser_macro2.src"
!
! output
#define __CHAR
#define __VAR	output_file
#define __TAG	__VAR
#define __NAME	restart/output file
#include "parser/parser_macro2.src"
!
#undef __CHAR
#define __INT
#define __VAR	output_file_freq
#define __TAG	__VAR
#define __NAME	frequency for writing adaptive _NAME output/restart file
#include "parser/parser_macro2.src"
!
 if (output_file_freq.le.zero) then
  __WRN(whoami, ' RESTART FILE WILL BE WRITTEN AT THE END ONLY')
  nrand=nrandmax ;
 else
  nrand=output_file_freq ! this is to ensure that the random deviates are a continuous sequence
 endif

#undef __MINUSERR
#define __LEZEROERR
!
! timestep
!
#undef __INT
#define __VAR	timestep
#define __TAG	timestep
#define __NAME	integration step
#define __DOIFOK  sqrt2dt=sqrt(two*timestep) ! precompute sqrt(2dt)
#include "parser/parser_macro2.src"
 __DBGOUT(' integration step =',timestep)
!======================================
! call lower-level initialization

! initialize RNG
 call random_init(seeds=random_seeds)
 irand=0 ! make sure that we are pointing to the beginning of random number array
! make sure nrand=0 is not allowed
 __ASSERT(nrand,>,0)
! make sure we do not overflow eta array
 __ASSERT(nrand,<=,nrandmax)
 if (fatal_warning()) return
! initialize grid data

 if (qrestart) then
  call __CONCAT3(gridscalar,_MAPTYPE,_init)(__CONCAT(min,_NAME), __CONCAT(max,_NAME), gridsize, damping_average, interp_width, restart_grid_data)
 else
  call __CONCAT3(gridscalar,_MAPTYPE,_init)(__CONCAT(min,_NAME), __CONCAT(max,_NAME), gridsize, damping_average, interp_width) ! no restart data
 endif

! statistics
! for now, make sure history array does not overflow during dynamics
 __ASSERT(stat_output_freq/stat_add_freq,<=,maxhist)
 bhist=0
 ehist=-1
!
 if (present(param)) param=_NAME
 __NM(initialized=).true.
!
 end __SUB(initialize)

!======================================
 __SUB(main) (dual, param, mditeration_)
 float, intent(in) :: dual
 float, intent(inout) :: param ! new value of _NAME (if requested) will be returned in the same variable
 float :: dpar, xmap
 __OPAR(mditeration,int*8)
 __IAM(__NM(compute))

! check initialization :
 if (.not. __NM(initialized)) then
  __WRN(whoami, ftoupper(__STRING(_N NOT INITIALIZED. NOTHING DONE)))
  return
 endif
!
 __INC(iteration)
 __DBGOUT('iteration = ', iteration)
! check that parameter value is consistent
 if ( abs(param - _NAME) .gt. __FERRTOL ) then
  __WRN(whoami, ftoupper(__STRING(_NAME))//' MISMATCH: '//ftoa(param)//'(SIMULATION) vs.'//ftoa(_NAME)//'(THIS MODULE)')
! not clear what to next; for now, adopt the most permissive behaviour, assuming that MD is has the desired value
  _NAME=param
 endif
!
!========================================== update averages
 if (average_update_freq.gt.izero) then
  if __CHKUPDATE(average_update_freq) &
  & call __CONCAT3(gridscalar,_MAPTYPE,_update_averages)(param,dual)
 endif
!========================================== compute new _NAME
 if (__CONCAT3(_NAME,_,update_freq).gt.izero) then
  if __CHKUPDATE(__CONCAT3(_NAME,_,update_freq)) then
! determine whether we need to generate random numbers:
   if (irand.eq.0) call randomg_vector(eta, nrand) ! draw nrand normal deviates
! compute new _NAME

 __DBGOUT('old '//__STRING(_NAME=), _NAME)
 __DBGOUT('current dual = ', dual)
 __DBGOUT('interpolated dual = ', __CONCAT3(gridscalar,_MAPTYPE,_lookup_average_value(_NAME)))
 __DBGOUT('timestep=',timestep)

#ifdef __EVOLVE_MAPPED
! integrate in transformed (mapped) coordinates using euler integrator of SDE
! I do not recommend integrating in transformed coordinates
! compute increment :
   dpar = __DXMAP(param) * (timestep * ( __D(param) * ( __FORCE(dual, param) + (dist_exp - one)/ param ) + __DP(param) ) & ! drift
 &                         + sqrt2dt * sqrt(__D(param)) * eta(irand)) ! diffusion
!
 __DBGOUT('dpar : ', dpar)
! transform, add evolve, and transform back
   xmap=__XMAP(_NAME) ! transform
   __INCR(xmap, dpar) ! evolve
   _NAME = __XIMAP(xmap) ! transform back
#else
! integrate in direct space here
   __INCR(_NAME , timestep * ( __D(param) * ( __FORCE(dual, param) + dist_exp / param ) + __DP(param) ) + sqrt2dt * sqrt ( __D(param) ) * eta(irand))
#endif
!
 __DBGOUT('new '//__STRING(_NAME=), _NAME)
!
! increment random number pointer
   __INC(irand); if (irand.eq.nrand) irand=izero
! apply boundary conditions to _NAME (essentially ensuring that we stay inside the prescribed support )
#ifdef __EVOLVE_MAPPED
!   call __CONCAT3(gridscalar, _MAPTYPE, _apply_bc_mapped)(_NAME)
   call __CONCAT3(gridscalar, _MAPTYPE, _apply_bc_raw)(_NAME) ! inconsistent but numerically safer
#else
   call __CONCAT3(gridscalar, _MAPTYPE, _apply_bc_raw)(_NAME)
#endif
 __DBGOUT('corrected '//__STRING(_NAME=), _NAME)
! update value of _NAME for output
   param=_NAME
  endif
 endif
!
!============================================= save _NAME time series
 if (stat_add_freq.gt.izero) then
  if __CHKUPDATE(stat_add_freq) then

   __INC(ehist)
   if (ehist.gt.0) then ! true for all samples except the first
    ehist=mod(ehist,maxhist) ! increment and wrap
!  if the history array is full (i.e. of length maxhist) ehist now is the same as bhist (i.e. we overwrite the oldest element) ; thus, increment bhist as well
    if (ehist.eq.bhist) bhist=mod(bhist+1,maxhist)
   endif
! update history
   hist(istep,ehist) = iteration
   hist(ivar,ehist) = _NAME
   hist(imapvar, ehist) = __XMAP(_NAME)
   hist(idual,ehist) = dual
!
 __PRESENT(mditeration,izero)
!
   hist(imdstep,ehist) = mditeration
  endif
 endif
!
!============================================= output _NAME time series
 if (stat_output_freq.gt.izero) then
  if __CHKUPDATE(stat_output_freq) then
!
   __MESSAGE(whoami, ' WRITING TIME SERIES TO FILE ("'//trim(stat_output_file)//'")')
   call __NM(write_history)(present(mditeration_))

  endif
 endif
!
!============================================= output restart file
 if (output_file_freq.gt.izero) then
  if __CHKUPDATE(output_file_freq) then
!
   __MESSAGE(whoami, ' WRITING OUTPUT/RESTART FILE TO ("'//trim(output_file)//'")')
   call __NM(write_restart_file)()
!
  endif
 endif

 end __SUB(main)
!======================================
 __SUB(done)
 __IAM(__NM(done))
! a possible future modification is to process content in __DONECTX
!
! write restart file
 if (__NM(initialized)) then
! write remaining history
  if ( stat_output_freq.gt.izero) then
   __MESSAGE(whoami, ' WRITING REMAINING TIME SERIES TO FILE ("'//trim(stat_output_file)//'")')
   call __NM(write_history)()
  endif
!
  __MESSAGE(whoami, ' WRITING OUTPUT FILE')
  call __NM(write_restart_file)()
 endif
!
 call __CONCAT3(gridscalar,_MAPTYPE,_done)()
 call parser_done()
 __FREE(restart_grid_data)
 __NM(initialized)=.false.
!
 end __SUB(done)
!======================================
 __SUB(write_history) (qmdstep_)
 __IAM(_NM(write_history))
 __OPAR(qmdstep,bool)
 int::i, numvar
 character(len=vartaglen) :: fmt
!
 __PRESENT(qmdstep, .true.)
 __DBGOUT('beginning history index : ', bhist)
 __DBGOUT('ending history index    : ', ehist)
!
 if (ehist.ge.0) then
!
  fid=-1
  call files_open(fid, stat_output_file, 'FORMATTED', stat_acc)
  i=bhist
!
  numvar=numhistvar
  if (.not.qmdstep) __DEC(numvar) ! md iterations not supplied so skip this field
!
  fmt='('//itoa(numvar)//realfmt//')'
  do
   write(fid,fmt)  hist(1:numvar,i)
   if (i.eq.ehist) exit
   __INC(i); if(i.eq.maxhist) i=izero
  enddo
! reset history counter
  bhist=0;
  ehist=-1;
!
  call files_close(fid)
  stat_acc='APPEND' ! make sure that we append to existing file on future output
!
 else
  __WRN(whoami, ' HISTORY ARRAY DOES NOT CONTAIN ANY SAMPLES. ABORT.')
 endif
!
 end __SUB(write_history)
!======================================
 __SUB(write_restart_file) ()
 __IAM(__NM(write_restart_file))
 int :: ifile, j
 ifile=-1 ! make sure files_open determines the handle automatically
 call files_open(ifile, output_file, 'FORMATTED','WRITE')
!
#define _W write(ifile,*)
 _W __STRING(#adaptive _NAME restart file)
 _W __STRING(__RESTARTCTX)//' {'
 _W 'iteration=',iteration
 _W __STRING(_NAME=),_NAME,' # current value'
 _W __STRING(__CONCAT(minimum_,_NAME)=),__CONCAT(min,_NAME)
 _W __STRING(__CONCAT(maximum_,_NAME)=),__CONCAT(max,_NAME)
 _W __STRING(__CONCAT(_NAME,_distribution)=),trim(dist),' # note that this is the distribution of the actual '//__STRING(_NAME)//', i.e. not mapped'
 _W __STRING(__CONCAT(_NAME,_distribution_exponent)=),dist_exp, ' # exponent for power-law distribution'
 _W __STRING(__CONCAT3(mapped_,_NAME,_gridsize)=),gridsize,' # number of points used for grid discretization'
 _W 'average_damping_constant=',damping_average,' # constant used in adaptive averaging (Cg)'
 _W 'interp_width=',interp_width,' # number of bins on either side of current bin for interpolation'
 _W 'random_seeds=(',random_get_seeds(),') # current seeds from RNG for seamless restart'
!
! retrieve dual grid :
 restart_grid_data=__CONCAT3(gridscalar,_MAPTYPE,_griddata_ptr)()
! write the dual grid :
 _W '# gdata_i (i=1, gridsize) ; for ith bin write : '//__STRING(__XMAP(_NAME (i)))//', SUM S(i), SUM S(i)^2, AVG S(i), AVG S(i)^2, WGT(i), NUM_SAMPLES(i) '
 do j=1, gridsize
  _W 'gdata_'//trim(itoa(j)),'=(',restart_grid_data(j::gridsize),')'
 enddo ! forced atoms
 _W '}'
! close file
 call files_close(ifile)
!
 end __SUB(write_restart_file)
!======================================
end module _N
