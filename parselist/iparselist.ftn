      module parser
!
      contains

       subroutine parse_list(list, str)
!      parses a _unique_ list of ints stored in a character string
        use ivector
        __DEP_PARSER
!
        implicit none
!
        int :: imin, imax
        character(len=*) :: str
        type (int_vector) :: list
!       locals
        int :: i, j, k, strl, inode, jnode, kstep
        int, parameter :: missing=-99999999
        __IAM(PARSE_LIST)
!
        call int_vector_init(list)
!
        inode=missing; jnode=missing;
        strl=len(str)
!
        do
         __TRIMA(str, strl)
         i=__INDX(str, strl, 'THRU', 4)
         if (i.gt.1.or.i.eq.0) then
!       first, add previous node number (no error if invalid)
            if (inode.ne.missing) j=int_vector_uadd(list,inode)
         elseif (i.eq.1) then ! have to deal with THRU
            jnode=gtrmi(str, strl, 'THRU',missing)
!    check for 'STEP' keyword
            call trima(str, strl)
            i=__INDX(str, strl, 'STEP', 4)
            if (i.eq.1) then ! STEP keyword present
             kstep=gtrmi(str, strl, 'STEP',missing)
!!     allow (almost) any value of STEP for flexibility
             if (kstep.eq.missing) then
              __WRN(whoami,' INVALID STEP VALUE SPECIFIED. USING STEP=1.')
              kstep=1
             endif
            else ! STEP not specified -- using 1
             kstep=1
            endif
!
            if (inode.ne.missing.and.jnode.ne.missing) then
             do k=inode, jnode, kstep
               j=int_vector_uadd(list,k)
             enddo
            else
              __WRN(whoami,' INVALID RANGE SPECIFIED. SKIPPING ENTRY.')
            endif
         endif ! i
!     read the next number
         if (strl.lt.1) exit
!
         inode=nexti(str, strl)
        enddo
!
       end subroutine parse_list

      end module parser

