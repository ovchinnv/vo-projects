! adapted from driver.ftn
#ifdef __PARALLEL
#define __MAINCOMM PARSER
#//
#define __COMM __CONCAT(MPI_COMM_,__MAINCOMM )
#define __ME   __CONCAT(ME_,__MAINCOMM )
#define __NCPU __CONCAT(SIZE_,__MAINCOMM )
#define _COMMA ,
#else
#define __COMM
#define __ME 0
#define _COMMA
#endif
#ifdef __QPRINT
#undef __QPRINT
#endif
#define __QPRINT qprint=(__ME.eq.0)

#define _ME setup_elec
 subroutine _ME
  use vars
  __DEP_CONST
  __DEP_PARSER
  __DEP_FILES
  __DEP_OUTPUT
  __IMPNONE
  int :: iostatus=0
  int i, lines
  __IAM(_ME)

  int :: numarg, flen, fid=-1
  character(len=vartaglen) :: filename, fname, chargefile, xclfile, keyword


  if (__ME.le.0) then 
#ifdef __NEED_IARGC
  numarg=iargc() ! number of arguments
#else
  numarg=command_argument_count() ! number of arguments
#endif
   if (numarg.ge.1) then 
    call getarg(1, filename)
    fname=filename
   call adjustleft(fname)
    flen=len_trim(fname)
    call files_open(handle_=fid, name_=filename(1:flen), form_='FORMATTED', action_='READ')
    if (fid.lt.0) call error(whoami,'Could not open file',-1)
   else
   fid=5 ! if file name missing, read from standard input
   endif
  endif ! me
!    call parser (only the root will receive a valid file handle (see above); all nodes still call parse_file)
  call parse_file(fid _COMMA __COMM)
!
!========= query parser for parameters =======
  if (__ME.le.0) call files_close(fid)
!
  if (__ME.le.0) then
   chargefile=getval_nocase('chargefile')
!
   fid=-1; ! to assign handle
   call files_open(fid, chargefile, 'FORMATTED', 'READ')
   if (fatal_warning(__COMM)) call terminate(whoami)
! read to the end of file to determine number of particles
!
   lines=0
   do while (iostatus==0)
    read(fid,*,iostat=iostatus)
    __INC(lines)
   enddo
   __INCR(lines,-1)
   __OUT('file "', trim(chargefile), '" contains ',lines,'lines' )
! now read data
   allocate(x(lines), y(lines), z(lines), q(lines))
   if (lines>0) rewind(fid)
   do i=1, lines
    read(fid,*,iostat=iostatus) x(i), y(i), z(i), q(i)
   enddo
   call files_close(fid)
   npt=lines
   __OUT('Read ', npt, ' coordinates and charges')
! == deal with nonbonded exclusions
! pointers into exslusion list, wich also determine the list size
   __ALLOC(nbx(npt))
   __ALLOC(nex(npt))
! == check for exclusions file
   if (existtag_nocase('exclusionfile')) then
    xclfile=getval_nocase('exclusionfile')
!
    fid=-1; ! to assign handle
    call files_open(fid, xclfile, 'FORMATTED', 'READ')
    if (fatal_warning(__COMM)) call terminate(whoami)
    read(fid,*,iostat=iostatus) nex
    if (iostatus.ne.0) then ; __ERR('Could not read nonbonded exclusion index list'); __DIE ; endif
    nbx(1)=1;
    do i=2, npt ; nbx(i)=nex(i-1)+1; enddo ! note that we are assuming a concatenated sorted list of atom exclusion lists
    __ALLOC(xcl(nex(npt))) ! last element in the list is also the list size
    read(fid,*,iostat=iostatus) xcl
    if (iostatus.ne.0) then 
     __ERR('Could not read nonbonded exclusion list'); 
     __DIE
    else
     __OUT('Read ', nex(npt), 'nonbonded exclusions');
#ifdef __DEBUG
     __OUT('The exclusion list is:')
     do i=1,npt
      if(nbx(i)<=nex(i)) then ;  __OUT('Exclusions for atom #',i,':',xcl(nbx(i):nex(i))) ; endif
     enddo
#endif
    endif
!
   else ! set safe defaults
    nbx=1
    nex=0
   endif ! exclusion file exists
  endif ! __ME==0
! ===== grid dimensions
  nx=atoi(getval_nocase('nx'))
  ny=atoi(getval_nocase('ny'))
  nz=atoi(getval_nocase('nx'))
  __OUT('grid dimensions are ', nx, ny, nz)
  allocate(xx(nx), yy(ny), zz(nz)) ! predetermined grid sizes
! ==== domain size
  x0=atof(getval_nocase('x0'))
  x1=atof(getval_nocase('x1'))
!
  y0=atof(getval_nocase('y0'))
  y1=atof(getval_nocase('y1'))
!
  z0=atof(getval_nocase('z0'))
  z1=atof(getval_nocase('z1'))
!
! compute grids :
  Lx=x1-x0 ; oLx=one/Lx
  dxx=Lx/(nx-1);
  do i=1,nx
   xx(i)=x0+(i-1)*dxx
  enddo
!
  Ly=y1-y0 ; oLy=one/Ly
  dyy=Ly/(ny-1);
  do i=1,ny
   yy(i)=y0+(i-1)*dyy
  enddo
!
  Lz=z1-z0 ; oLz=one/Lz
  dzz=Lz/(nz-1);
  do i=1,nz
   zz(i)=z0+(i-1)*dzz
  enddo
!
  oV=oLx*oLy*oLz
! write grids : 
  call write_field(xx, 'xx.txt',ascii,nx)
  call write_field(yy, 'yy.txt',ascii,ny)
  call write_field(zz, 'zz.txt',ascii,nz)
!
  __ALLOC(rho(nx,ny,nz));   ! smoothed density
  __ALLOC(phisr_q(npt));    ! short range potential and gradienst below
  __ALLOC(phisr_dx_q(npt));
  __ALLOC(phisr_dy_q(npt));
  __ALLOC(phisr_dz_q(npt));
! l/r potential
  __ALLOC(grad_el(npt,3));
  el_dx=>grad_el(:,1)
  el_dy=>grad_el(:,2)
  el_dz=>grad_el(:,3)
! s/r potential
  __ALLOC(grad_elsr(npt,3));
  elsr_dx=>grad_elsr(:,1)
  elsr_dy=>grad_elsr(:,2)
  elsr_dz=>grad_elsr(:,3)
! excluded potential
  __ALLOC(grad_elxl(npt,3));
  elxl_dx=>grad_elxl(:,1)
  elxl_dy=>grad_elxl(:,2)
  elxl_dz=>grad_elxl(:,3)
!
  __ALLOC(lap(nx,ny,nz)); ! laplacian for FD Poisson
!
  spt=atof(getval_nocase('support'))
  __OUT('Filter support is ', spt)
!
! note the differing definitions of 1/support (oos) for Gauss vs poly filters :
#if _FILTER==_GAUSS
  if (existtag_nocase('ewaldkappa')) then
   ewaldkappa=atof(getval_nocase('ewaldkappa'))
  else
   ewaldkappa=ewaldkappa_default
  endif
  oos=(two*ewaldkappa)
  __OUT('Ewald kappa set to', ewaldkappa, 'which corresponds to a StdDev of',1./oos)
  __OUT('Gaussian truncation is at', spt*oos, 'supports');
#else
  oos=one/spt
#endif
!
! get electrostatic permittivity :
  if (existtag_nocase('epsilon')) then
   keyword=getval_nocase('epsilon')
  else
   __OUT('Dielectric permittivity not specified. Assuming CHARMM value')
   keyword='CHARMM'
  endif
  call toupper(keyword)
  select case(keyword)
   case('CHARMM','CHM','CHRM','CHARM') ; eps=one/(CCELEC_charmm*four*pi)   ; __OUT('Using CHARMM permittivity.');
   case('NAMD','NAMD2')                ; eps=four*pi/CCELEC_namd     ; __OUT('Using NAMD permittivity.');
   case('AMBER','AMB') ;               ; eps=four*pi/CCELEC_amber    ; __OUT('Using AMBER permittivity.');
   case('DISCOVER','DISC') ;           ; eps=four*pi/CCELEC_discover ; __OUT('Using DISCOVER permittivity.');
   case default ; eps=atof(keyword)
  end select
!
  oeps=one/eps
!
! self energy part of l/r energy can be computed right away
! note that is does not contribute to any gradients
  el_self = 0.5d0 * philr_selfc * sum(q**2) * oos * oeps;
!
! wavenumber range
  nwave=atoi(getval_nocase('ewaldkmax'))
!
  if (fatal_warning(__COMM)) call terminate(whoami)
!
 end subroutine _ME
