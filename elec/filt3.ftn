subroutine filt3()
 __DEP_CONST
 use vars
 __IMPNONE

 int :: nimg=-1, njmg=-1, nkmg=-1
 float :: spt2
 float :: oos3
#ifdef _NORMALIZE_FILTER
 float :: temp(nx,ny,nz)
 float :: fnorm ! discrete filter norm
 float :: f ! instantaneous filter value
#endif
 float xmin, xmax, ymin, ymax, zmin, zmax
 int imin, imax, jmin, jmax, kmin, kmax
 int ii, jj, kk, im, jm, km
 int img, jmg, kmg
 int i, j
 float r
 float dx2, dy2, dz2, odx, ody, odz
 float dxq, dyq, dzq, dxmin, dymin, dzmin, pre

#define support spt
#define support2 spt2
!
 support2=support**2
!
 oos3=oos**3
 nimg=INT(2d0*support/Lx) ! ratio of support sphere diameter to domain size
 njmg=INT(2d0*support/Ly)
 nkmg=INT(2d0*support/Lz)
!
#ifdef __DEBUG
 __DBG(' Filter support is', support);
 __DBG(' Will search', nimg,'neighbor images in x-direction');
 __DBG(' Will search', njmg,'neighbor images in y-direction');
 __DBG(' Will search', nkmg,'neighbor images in z-direction');
#endif
!
 odx=1d0/dxx
 ody=1d0/dyy
 odz=1d0/dzz
!
 rho=0d0 ! initialize
 elsr=0d0
 grad_elsr=0d0
 elxl=0d0
 grad_elxl=0d0
!
#ifdef _NORMALIZE_FILTER
 temp=0d0
#endif
!
 __OUT('Gridding charges and computing short-range forces');
 quiet=.true.
 do i=1,npt ! charges
  if (.not.quiet) __OUT(' Gridding charge #', i,' of ', npt);
! determine limit indices on the (periodic) grid
  xmin = x(i) - support
  xmax = x(i) + support
!
  imin = INT( (xmin-x0)*odx ) + 1 ! could be negative (i.e. off-the-grid), but the indices are consistent with the 1-based offset
  imax = INT( (xmax-x0)*odx ) + 2
!
  ymin = y(i) - support
  ymax = y(i) + support
!
  jmin = INT( (ymin-y0)*ody ) + 1
  jmax = INT( (ymax-y0)*ody ) + 2
!
  zmin = z(i) - support
  zmax = z(i) + support
!
  kmin = INT( (zmin-z0)*odz ) + 1
  kmax = INT( (zmax-z0)*odz ) + 2
!
#ifdef __DEBUG
  __DBG(' X-grid virtual limits are',imin,imax);
  __DBG(' Y-grid virtual limits are',jmin,jmax);
  __DBG(' Z-grid virtual limits are',kmin,kmax);
#endif
!
#ifdef _NORMALIZE_FILTER
  fnorm=0d0
#endif
! spread charge into temporary array and compute normalization
  do ii=imin,imax
   dx2=(dxx*(ii-1) - (x(i) - x0) )**2; ! actual x-distance between gridpoint and charge
   im=modulo(ii-1,nx-1)+1 ! x-grid index in the primary cell
   do jj=jmin,jmax
    dy2=dx2+(dyy*(jj-1) - (y(i) - y0) )**2;
    if (dy2>support2) cycle
    jm=modulo(jj-1,ny-1)+1
    do kk=kmin,kmax
     dz2=dy2+(dzz*(kk-1) - (z(i) - z0) )**2;
     if (dz2>support2) cycle
     km=modulo(kk-1,nz-1)+1
     r=sqrt(dz2)*oos; ! normalize by support (or StdDev in the case of Gaussian)
#ifdef __NORMALIZE_FILTER
     f=filter(r);
     temp(im,jm,km) = q(i) * f
     __INCR(fnorm,f)
#else
     __INCR(rho(im,jm,km), q(i) * filter(r))
#endif
    enddo !kk
   enddo !jj
  enddo !ii
!
#ifdef _NORMALIZE_FILTER
  if (fnorm>kzero) then ; fnorm=1d0/(dxx*dyy*dzz*fnorm*oos3) ; else ; fnorm=1d0 ; endif ! remember that the filter f is nondimensional; must be scaled by 1/s^3
  do ii=imin,imax
   im=modulo(ii-1,nx-1)+1 ! x-grid index in the primary cell
   do jj=jmin,jmax
    jm=modulo(jj-1,ny-1)+1
    do kk=kmin,kmax
     km=modulo(kk-1,nz-1)+1
     __INCR(rho(im,jm,km), temp(im,jm,km) * fnorm)
     temp(im,jm,km)=0d0
    enddo !kk
   enddo !jj
  enddo !ii
#endif
!
! also need to compute short-range potential energy at grid points
! do this in a primitive O(n^2) loop
#define __DPBC(_ANS,_X1,_X2,_LX) _ANS=modulo( (_X1)-(_X2), (_LX) ) ; if(_ANS>half*_LX) __INCR(_ANS,-_LX);
  do j=i+1,npt
! NOTE : in this implementation, go over several images, rather than computing minimal image(s) ; should be changed ?
! I think we compute the number of images in each direction as INT(spt/Lx), etc ; then we find the minimum distance and
! consider the neighboring images
! in addition, we might make the image search asymmetric, depending on the direction of the distance vector
! determine minimum-image displacements :
   __DPBC(dxmin,x(i),x(j),Lx) ; if (abs(dxmin)>support) cycle
   __DPBC(dymin,y(i),y(j),Ly) ; if (abs(dymin)>support) cycle
   __DPBC(dzmin,z(i),z(j),Lz) ; if (abs(dzmin)>support) cycle

   do img=-nimg,nimg
    dxq = dxmin + Lx*img
    if (img.ne.0 .and. abs(dxq)>support) cycle ! 0 case already considered
    do jmg=-njmg,njmg
     dyq = dymin + Ly*jmg
     if (jmg.ne.0 .and. abs(dyq)>support) cycle
     dy2=dxq**2 + dyq**2
     if (dy2>support2) cycle
     do kmg=-nkmg,nkmg
      dzq = dzmin + Lz*kmg
      if (kmg.ne.0 .and. abs(dzq)>support) cycle
      dz2=dy2 + dzq**2
!      if (dz2 > support2 .or. dz2 < kzero) cycle
      if (dz2 > support2) cycle ! here dz2 cannot be zero, because i=/=j
      r=sqrt(dz2)*oos
! short-range potential
      __INCR( elsr , q(i) * q(j) * fshort(r) ) ; ! might have contributions from multiple images ; need to x oos, because r has been scaled above

! short-range potential gradients
      pre = q(i) * q(j) * fshortp(r) ; ! double check normalization by support : need to x oos^3
!
      __INCR(elsr_dx(i) , pre*dxq)
      __INCR(elsr_dy(i) , pre*dyq)
      __INCR(elsr_dz(i) , pre*dzq)
! equal and opposite force for other atom in pair
      __INCR(elsr_dx(j) , -pre*dxq)
      __INCR(elsr_dy(j) , -pre*dyq)
      __INCR(elsr_dz(j) , -pre*dzq)
     enddo !kmg
    enddo !jmg
   enddo !img
  enddo ! j/npt
! separate treatment of i=j case for large filter supports (recall that we are only excluding self-interactions in the primary image)
  if (nimg+njmg+nkmg > 0) then
   pre = half * q(i)**2
   do img=-nimg,nimg
    dxq = Lx*img
    if (abs(dxq)>support) cycle
    do jmg=-njmg,njmg
     dyq = Ly*jmg
     if (abs(dyq)>support) cycle
     dy2=dxq**2 + dyq**2
     if (dy2>support2) cycle
     do kmg=-nkmg,nkmg
      dzq = Lz*kmg
      if (abs(dzq)>support) cycle
      dz2=dy2 + dzq**2
      if (dz2 > support2 .or. dz2 < kzero) cycle
      r=sqrt(dz2)*oos
! short-range potential
      __INCR( elsr , pre * fshort(r) )
!
! short-range potential gradients should cancel out, so we end up only with a modification to self-energy
!
!      pre = pre * fshortp(r) ; ! double check normalization by support : need to x oos^3
!
!      __INCR(elsr_dx(i) , pre*dxq)
!      __INCR(elsr_dy(i) , pre*dyq)
!      __INCR(elsr_dz(i) , pre*dzq)
     enddo !kmg
    enddo !jmg
   enddo !img
  endif
!
#ifdef __NAIVE_EXCLUSIONS
! process electrostatic exclusions in an unsophisticated way
! Note that they are independent of the splitting in principle ; in practive one could envision more or less efficient ways of computing them
! for example, if one knows that exclusions do not span nore than a filter support, you could include them in a short-range sum
! for this to work, you have to go over all charge points included in the support of point i (assuming that i has a neighbor list N(i) := Spt(i)
 do jj=nbx(i),nex(i) ! over segment of exclusion list that corresponds to particle i
  j=xcl(jj)          ! index of excluded particle
  __DPBC(dxq,x(i),x(j),Lx) ! determine minimum-image displacement
  __DPBC(dyq,y(i),y(j),Ly)
  __DPBC(dzq,z(i),z(j),Lz)
  dz2 = dxq**2 + dyq**2 + dzq**2
  pre=q(i)*q(j)/sqrt(dz2)
  __INCR( elxl , pre  )
  pre=-pre/dz2
  __INCR(elxl_dx(i) ,  pre*dxq)
! equal and opposite force for other atom in pair
  __INCR(elxl_dx(j) , -pre*dxq)
!
  __INCR(elxl_dy(i) ,  pre*dyq)
  __INCR(elxl_dy(j) , -pre*dxq)

  __INCR(elxl_dz(i) ,  pre*dzq)
  __INCR(elxl_dz(j) , -pre*dzq)
!
 enddo ! exclusion list of particle i
#endif
!
 enddo ! i/npt

! normalization
 __SCALE(rho, oos3)
! apply periodic BC to rho :
 rho(nx,:,:)=rho(1,:,:)
 rho(:,ny,:)=rho(:,1,:)
 rho(:,:,nz)=rho(:,:,1)
!
 pre=1d0/(fourpi*eps); ! for normalization
!
 __SCALE(elxl, pre) ! excluded energy
 __SCALE(elxl_dx, pre)
 __SCALE(elxl_dy, pre)
 __SCALE(elxl_dz, pre)
!
 __SCALE(elsr, oos*pre) ! no division by 2 because loop does not double count
 __SCALE(pre,oos3)
 __SCALE(elsr_dx, pre) ! these normalizations are needed because the filter is normalized by support, but units must be physical
 __SCALE(elsr_dy, pre)
 __SCALE(elsr_dz, pre)

end subroutine filt3
