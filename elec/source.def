#define float real*8
#define int integer
#define bool logical

#define __PAR(_i,_t,_v) _t, parameter :: _i=_v
#define __IPAR(_i,_v) __PAR(_i, int, _v)
#define __FPAR(_f,_v) __PAR(_f, float, _v)

#define __FARR(_a, ...) float, pointer :: _a(__VA_ARGS__)=>NULL()

#define __INCR(_i,_v) _i=(_i)+(_v)
#define __INC(_i) __INCR(_i,1)
#define __SCALE(_v,_s) _v=(_v)*(_s)

#define _MSGHEAD " ===> "
#define _ERRHEAD " ERR: "
#define __OUT(...) write(0,*) _MSGHEAD, __VA_ARGS__
#define __ERR(...) write(0,*) _ERRHEAD, __VA_ARGS__
#define __DIE write(0,*) _MSGHEAD, ' Stop.'

#define _POLY3 1
#define _GAUSS 2

#if _FILTER==_POLY3
#// 3rd order polynomial filter function
#define fpo 3
#define fpoly(_X) ( 1.193662073189215d0 * ((_X)-1d0)**2 * (2d0*(_X)+1d0) )
#define fscrn(_X) 1d0 + 0.25d0 * (_X) * ( (_X)**2 * ( (_X)**2 * ( 4d0*(_X) - 9d0 ) + 10d0 ) - 9d0)
#define fshort(_X) 1d0/(_X) + 0.25d0 *  ( (_X)**2 * ( (_X)**2 * ( 4d0*(_X) - 9d0 ) + 10d0 ) - 9d0)
#define fshortp(_X) -( 0.25d0 * (_X) * (10d0*(_X)**2 + 4d0*(_X)**5 - 9d0*((_X)**4 + 1d0) + 3d0*((_X) - 1)**3*(8d0*(_X)**2 + 9d0*(_X) + 3d0)) + 1d0)/(_X)**3
#define philr_selfc 0.179049310978382d0
#// Fourier coefficients :
#define ft(_k) -90d0 * (8d0*(cos(_k)-1d0) + (_k) * ( 5d0*sin(_k) - (_k)*cos(_k)))/(_k)**6
#// Taylor expansion for small _k
#define ftt(_k) 1d0-0.053571428571429*(_k)**2
#endif


#define ascii 1
#define binary 2

#define __ALLOC(_WHAT) allocate(_WHAT)
#define __FREE(_WHAT) if (associated(_WHAT)) deallocate(_WHAT)


