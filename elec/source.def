#//define __DEBUG

#define __NAIVE_EXCLUSIONS
#define _FILTER _POLY3
#//define _FILTER _POLY5
#//define _FILTER _GAUSS
#//define _NORMALIZE_FILTER

#ifndef float
#define float real*8
#endif
#ifndef int
#define int integer
#endif
#ifndef bool
#define bool logical
#endif

#define __PAR(_i,_t,_v) _t, parameter :: _i=_v
#define __IPAR(_i,_v) __PAR(_i, int, _v)
#define __FPAR(_f,_v) __PAR(_f, float, _v)

#define __ARR(_a,__TYPE, ...) __TYPE, pointer :: _a(__VA_ARGS__)=>NULL()
#define __FARR(_a, ...) __ARR(_a,float, __VA_ARGS__)
#define __IARR(_a, ...) __ARR(_a,int, __VA_ARGS__)

#ifndef __INCR
#define __INCR(_i,_v) _i=(_i)+(_v)
#endif
#ifndef __INC
#define __INC(_i) __INCR(_i,1)
#endif
#ifndef __SCALE
#define __SCALE(_v,_s) _v=(_v)*(_s)
#endif

#define _MSGHEAD " ====> "
#define _ERRHEAD " !!!ERR: "
#define _DBGHEAD " !!!DBG: "
#define __DBG(...) write(0,*) _DBGHEAD, __VA_ARGS__
#define __OUT(...) write(0,*) _MSGHEAD, __VA_ARGS__
#define __ERR(...) write(0,*) _ERRHEAD, __VA_ARGS__
#define __DIE call terminate(whoami)

#define _POLY3 1
#define _GAUSS 2
#//define _NORMALIZE_FILTER // whether to normalize filter discretly

#if _FILTER==_POLY3
#// 3rd order polynomial filter function
#define fpo 3
#define filter(_X) fpoly3(_X)
#define fscrn(_X) fscrn3(_X)
#define fshort(_X) fshort3(_X)
#define fshortp(_X) fshortp3(_X)

#define philr_selfc philr_selfc3
#// Fourier coefficients :
#define ft(_k) ft3(_k)
#// Taylor expansion for small _k
#define ftt(_k) ftt3(_k)

#elif _FILTER==_POLY5
#// 3rd order polynomial filter function
#define fpo 5
#define filter(_X) fpoly5(_X)
#define fscrn(_X) fscrn5(_X)
#define fshort(_X) fshort5(_X)
#define fshortp(_X) fshortp5(_X)

#define philr_selfc philr_selfc5
#// Fourier coefficients :
#define ft(_k) ft5(_k)
#// Taylor expansion for small _k
#define ftt(_k) ftt5(_k)

#elif _FILTER==_GAUSS
#define filter(_X) fgauss(_X)
#define fscrn(_X) fscrng(_X)
#define fshort(_X) fshortg(_X)
#define fshortp(_X) fshortpg(_X)
#define philr_selfc philr_selfcg
#define ft(_k) ftg(_k)
#define ftt(_k) fttg(_k)
#endif


#define ascii 1
#define binary 2

#ifndef __ALLOC
#define __ALLOC(_WHAT) allocate(_WHAT)
#endif
#ifndef __FREE
#define __FREE(_WHAT) if (associated(_WHAT)) deallocate(_WHAT)
#endif
