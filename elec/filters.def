#//#########################################
#// 3rd order polynomial filter function
#define fpoly3(_X) ( 1.193662073189215d0 * ((_X)-1d0)**2 * (2d0*(_X)+1d0) )
#define fscrn3(_X) ( 1d0 + 0.25d0 * (_X) * ( (_X)**2 * ( (_X)**2 * ( 4d0*(_X) - 9d0 ) + 10d0 ) - 9d0) )
#define fshort3(_X) ( 1d0/(_X) + 0.25d0 *  ( (_X)**2 * ( (_X)**2 * ( 4d0*(_X) - 9d0 ) + 10d0 ) - 9d0) )
#define fshortp3(_X) ( -( 0.25d0 * (_X) * (10d0*(_X)**2 + 4d0*(_X)**5 - 9d0*((_X)**4 + 1d0) - 3d0*((_X) - 1)**3*(8d0*(_X)**2 + 9d0*(_X) + 3d0)) + 1d0)/(_X)**3)

#define philr_selfc3 (0.179049310978382d0)
#// Fourier coefficients :
#define ft3(_k) ( -90d0 * (8d0*(cos(_k)-1d0) + (_k) * ( 5d0*sin(_k) - (_k)*cos(_k)))/(_k)**6 )
#// Taylor expansion for small _k
#define ftt3(_k) ( 1d0-0.053571428571429d0*(_k)**2 )
#define _POLY_SUPPORT (1d0)

#//#########################################
#// Gaussian filter function (standard Ewald)
#define fgauss(_X) (0.063493635934241d0 * exp(-0.5d0*(_X)**2))
#define fscrng(_X) (1d0-erf((_X)*0.707106781186547d0))
#define fshortg(_X) (1d0-erf((_X)*0.707106781186547d0))/(_X)
#define fshortpg(_X) ((-0.797884560802865d0*exp(-0.5d0*(_X)**2 )*(_X) - (1d0-erf((_X)*0.707106781186547d0)))/(_X)**3)
#//from MATLAB code :     -(osq2sig/sqrt(pi)*exp(-r2.*halfos2 ).*r + erfc(r*osq2sig) )/r^3 ;

#define philr_selfcg (0.063493635934241d0)
#// Fourier coefficients :
#define ftg(_k) (exp(-0.5d0*(_k)**2))
#// Taylor expansion for small _k (not necessary here)
#define fttg(_k) (1d0-0.5d0*(_k)**2)
#// note that for Gaussian above, we are not specifying a variance (as in the poly case) scaling it to one;
#// in the code, however, the support size (spt) is used for scaling, but also for deciding when to 
#// neglect distance-based interactions ; this is problematic when we use the as the std. of the Gaussian filter, because
#// the filter is far above machine precision beyond the filter ; therefore, we will modify the code to neglect
#// interactions not beyond s, but beyond a * s, with a about 5, which gives a truncation value of 1.4e-6 ; only for Gaussian
#define _GAUSS_SUPPORT (5d0)
