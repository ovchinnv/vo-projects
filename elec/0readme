4/18 : trying fortran to see what kind of speedup is possible over MATLAB ; thus far, much faster, but not computing grid values,
since we technically do not need them in the production code

(1) machine for rho
(2) elec potential energy matches, but not gradients ; there is a mismatched factor of -2 in one of the codes
(3) the fortran version is actually correct; the x2 factor is real ; confirmed by FD and also theory ; fixed matlab
(4) works ! The problem now is that the electrostatic energy computed my FD in matlab does not converge to the "corect one" computed using Ewald mod... sad (


(5) note that with increasing filter order, it seems we need to go to higher order in inverse expansion
(6) the previous trend seems to hold : increasing poly order beyond 3 leads to greater FD errors ; still the question remains :
can we do better, which might push the 2nd order FD code into acceptable accuracy range ?

to do : try interpolating gradients from poly in elinterp ; Works ! get an accuracy improvement of x1.5

NOTE : for filter supports larger than domain size get different energies -- why ? FD test looks to pass, but that may not say
anything because the gradients and energy could be consistently wrong
However, I am not completely sure that having supports larger than the domain size is consistent with the splitting equations;
should investigate;  what is happening is that, as the support increases, the short range energy becomes larger in magnitude and with
the correct sign, dwarfing both the self energy (which is always of the opposite sign and therefore cannot offset the former)
and the long-range energy, which essentially goes to zero, since we are filtering over a huge region with each domain being neutral;
so it would naively appear that the short-range energy is overestimated ; put simply, it looks like the short range energy
increases without bound -- is this reasonable ?

however, the problem might be more subtle, having to do
with the splitting ? Note, that cannot reproduce this in MATLAB ; reverted to old filt3.ftn, but get the same result,
differing from MATLAB ; 
the problem could be because here I am excluding all self interactions including between images ; in the MATLAB code, I am not

not sure how to make consistent -- include self interactions in the Fortran loops (halved?) This fixes the problem!

check an actual psf/pdb system