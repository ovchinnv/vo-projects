 module vars
 __IMPNONE
 public
!
! domain size
 float x0,x1,y0,y1,z0,z1
 float Lx,Ly,Lz,oLx,oLy,oLz,oV
 float eps, oeps
 float spt, oos

! grid
 int :: nx=0, ny=0, nz=0
 __FARR(xx,:)
 __FARR(yy,:)
 __FARR(zz,:)
 float dxx, dyy, dzz

! positions and charges
 int :: npt=0
 __FARR(x,:);
 __FARR(y,:);
 __FARR(z,:);
 __FARR(q,:);
! electrostatic potential variables
 __FARR(rho,:,:,:);   ! smoothed density
 __FARR(phi,:,:,:);   ! L/R potential by ewald summation
 __FARR(lap,:,:,:);   ! laplacian for Finite Difference solution
 __FARR(phisr_q,:);   ! short range potential and gradients below
 __FARR(phisr_dx_q,:);
 __FARR(phisr_dy_q,:);
 __FARR(phisr_dz_q,:);
 
 float, target :: ene(3)=0d0
 float, pointer :: el=>ene(1) ! long-range electrostatic potential
 float, pointer :: elsr=>ene(2) ! short-range electrostatic potential
 float, pointer :: el_self=>ene(3) ! self-interaction part of long-range energy
!
 __FARR(grad_el,:,:)
 __FARR(el_dx,:) ; ! gradient of l/r electrostatic potential; will be bound to grad_el
 __FARR(el_dy,:) ; !
 __FARR(el_dz,:) ; !
!
 __FARR(grad_elsr,:,:)
 __FARR(elsr_dx,:) ; ! gradient of s/r electrostatic potential; will be bound to grad_elsr
 __FARR(elsr_dy,:) ; !
 __FARR(elsr_dz,:) ; !

! for long-range ewald
  __IPAR(nwave,20) ! wavenumber range
#if _FILTER==_GAUSS
 __FPAR(ktol,1d-5)
#else
 __FPAR(ktol, 0.5d0*0.9d0**fpo) ! empirical error tolerance for when to switch to taylor expansion
#endif
! __FPAR(ktol, 0.2d0) ! empirical error tolerance for when to switch to taylor expansion
 __FPAR(kzero, 1d-10);
!
 bool :: quiet=.false. ! flag to generate minimal output

 end module vars
