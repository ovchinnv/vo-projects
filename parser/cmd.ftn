      module cmd
!
      __CHARMM_ONLY __DEP_KINDS
      __IMPNONE
!
      public
!
      int, parameter, public :: maxlinelen=200
      int, parameter, private :: expand_incr=10
!
!    define a derived type to store execution instructions
!
      type commands
       character(len=maxlinelen), dimension(:), pointer :: command
       int, dimension(:), pointer :: clen
       int :: length=0 ! length of the command vector
       int :: last ! index of last command element
       int :: current ! index of the current command
       bool :: initialized=.false.
      end type commands
      contains
!********************************************************************************************
       subroutine commands_init( c )
       type (commands) :: c
!       if (associated(c%...)) deallocate(c%...) ! testing unassigned pointer is an error!
       allocate(c%command(expand_incr),c%clen(expand_incr))
!
       c%command=''; c%clen=0
       c%length=expand_incr
       c%last=0
       c%current=1
       c%initialized=.true.
       end subroutine commands_init
!********************************************************************************************
       subroutine commands_done( c )
       type (commands) :: c
       if (associated(c%command)) deallocate(c%command)
       if (associated(c%clen)) deallocate(c%clen)
       c%length=0
       c%last=0
       c%current=1
       c%initialized=.false.
       end subroutine commands_done
!********************************************************************************************
       subroutine commands_expand( c )
       type (commands) :: c
       int :: newlength
       character(len=maxlinelen), dimension(:), pointer :: ncommand
       int, dimension(:), pointer :: nclen
!
       if (.not.c%initialized) then 
        call commands_init(c) 
       else
!    assume length is valid
        newlength=c%length+expand_incr
        allocate(ncommand(newlength),nclen(newlength))
        ncommand(1:c%length)=c%command; nclen(1:c%length)=c%clen
        deallocate(c%command,c%clen)
        c%command=>ncommand; c%clen=>nclen
        c%length=newlength
       endif 
       end subroutine commands_expand
!********************************************************************************************
       function commands_add(c,newcommand,lcommand) ! add a new command to the list and return its index
       type (commands) :: c
       int :: commands_add, lcommand
       character(len=*) :: newcommand
       int :: j
!
       if (.not.c%initialized) call commands_init(c)
       if (c%last.eq.c%length) call commands_expand(c)
       j=c%last+1
       c%command(j)=newcommand(1:lcommand); c%clen(j)=lcommand
       c%last=j
       commands_add=j
       end function commands_add
!
      end module cmd
