#!/bin/bash
# VO 5.2014
# this is a script to replace preflx proprocessor directives in older CHARMM
# source files with equivalent GNU preprocessor directives
# yes, you _can_ break it (if you put your mind to it) so check to make sure the output is what you want
#
# usage : prefx2cpp infile
if [ -z $1 ]; then
 echo "USAGE: prefx2cpp input.src"
 exit 1
fi
#
awk ' {
##IF : ============================================
 newline="";
 comment="";
 if ( $1 == "##IF" ) {
  for (i=2;i<=NF;i++) {
   if ( substr($i,1,1) == "!" ) { 
    comment="// "substr($0,index($0,$i));
    break;
   } else if ( substr($i,1,1) == "(" ) { 
    comment="// "substr($0,index($0,$i));
    break;
   }
   arg[i]=$i
  }
  numfield=i;
  operator="=="
  inot = index(arg[2],".not.")
  if (inot>0) {
   operator="!="
   arg[2]=substr(arg[2],inot+5)
  }
  newline="#if ("arg[2]"_KEY"operator"1)" ;
  for (j=3;j<numfield;j++) {
   operator="=="
   inot = index(arg[j],".not.")
   if (inot>0) {
    operator="!="
    arg[j]=substr(arg[j],inot+5)
   }
   newline=newline" || ("arg[j]"_KEY"operator"1)";
  }
##IFN : ============================================
 } else if ( $1 == "##IFN" ) {
  for (i=2;i<=NF;i++) {
   if ( substr($i,1,1) == "!" ) { 
    comment="// "substr($0,index($0,$i));
    break;
   } else if ( substr($i,1,1) == "(" ) { 
    comment="// "substr($0,index($0,$i));
    break;
   }
   arg[i]=$i
  }
  numfield=i;
  operator="!="
  inot = index(arg[2],".not.")
  if (inot>0) {
   operator="=="
   arg[2]=substr(arg[2],inot+5)
  }
  newline="#if ("arg[2]"_KEY"operator"1)" ;
  for (j=3;j<numfield;j++) {
   operator="!="
   inot = index(arg[j],".not.")
   if (inot>0) {
    operator="=="
    arg[j]=substr(arg[j],inot+5)
   }
   newline=newline" && ("arg[j]"_KEY"operator"1)";
  }
##ELSEIF : ==========================================
 } else if ( ( $1 == "##ELSEIF" ) || ( $1 == "##ELIF" ) ) {
  for (i=2;i<=NF;i++) {
   if ( substr($i,1,1) == "!" ) { 
    comment="// "substr($0,index($0,$i));
    break;
   } else if ( substr($i,1,1) == "(" ) { 
    comment="// "substr($0,index($0,$i));
    break;
   }
   arg[i]=$i
  }
  numfield=i;
  operator="=="
  inot = index(arg[2],".not.")
  if (inot>0) {
   operator="!="
   arg[2]=substr(arg[2],inot+5)
  }
  newline="#elseif ("arg[2]"_KEY"operator"1)" ;
  for (j=3;j<numfield;j++) {
   operator="=="
   inot = index(arg[j],".not.")
   if (inot>0) {
    operator="!="
    arg[j]=substr(arg[j],inot+5)
   }
   newline=newline" || ("arg[j]"_KEY"operator"1)";
  }
##ELSE : ==========================================
 } else if( $1 == "##ELSE" ) {
  newline="#else"
  if (NF>1) {
   comment=substr($0,index($0,$2));
   if (length(comment)>0) { comment="// "comment }
  }
##ENDIF : ==========================================
 } else if( $1 == "##ENDIF" ) {
  newline="#endif"
  if (NF>1) {
   comment=substr($0,index($0,$2));
   if (length(comment)>0) { comment="// "comment }
  }
# now take of preflx commands to the right of line:
# =================================================
 } else {
# replace all occurrences of "!##" by "#12345"
  otag="!##"
  ntag="#12345"
  gsub(otag, ntag, $0)
#
  ipound=index($0,ntag);
  if ((ipound>0) && ((substr($0,ipound+length(ntag),1) ~ /[A-Z]|[a-z]/) || (substr($0,ipound+length(ntag),5) ~ /[\.][Nn][Oo][Tt][\.]/ )))  {
   command=substr($0,0,ipound-1)
# determine if "command" has a comment character, in which case the directives are to be ignored as comments
   if (index(command,"!")>0) {
    gsub(ntag, otag, $0)
    newline=$0 # do nothing
   } else {
#
     remainder=substr($0,ipound+length(ntag))
     $0=remainder
# note: code below repeated from above
     for (i=1;i<=NF;i++) {
      if ( substr($i,1,1) == "!" ) {
       comment="// "substr($0,index($0,$i));
       break;
      }
     arg[i]=$i
     }
     numfield=i;
#
     relop="=="
     inot = index(arg[1],".not.")
     if (inot>0) {
      relop="!="
      arg[1]=substr(arg[1],inot+5)
     }
#
     newline="#if ("arg[1]"_KEY"relop"1)" ; # relational operator
     for (j=2;j<numfield;j++) {
      operator="||"
      ipound=index(arg[j], ntag)
      if (ipound>0) {
       operator="&&"
       arg[j]=substr(arg[j],ipound+length(ntag))
      }
      relop="=="
      inot = index(arg[j],".not.")
      if (inot>0) {
       relop="!="
       arg[j]=substr(arg[j],inot+5)
      }
      newline=newline" "operator" ("arg[j]"_KEY"relop"1)";
     }
     newline=newline" "comment
     comment=""
     gsub(ntag, otag, newline)
#
     print newline
     print command
     newline="#endif"
     comment=""
    }
#
# normal code lines ===============================
  } else {
   newline=$0
   gsub(ntag, otag, newline) ;# in case otag was replaced with ntag before we decided that otag was actually a comment
  }
 }
 print newline" "comment
}  ' < $1
