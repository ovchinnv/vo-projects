! 12.20.11: did not find using 5th order approximation faster than the 7th order one
! this may be due to the cost of the exponential function (as well as other operations within the loop)
! may be a good idea to approximate the exponential function
!DEC$ ATTRIBUTES FORCEINLINE :: erfo7
!DEC$ ATTRIBUTES FORCEINLINE :: erfo5
! approximations from Abramowitz & Stegun
#define one 1d0
#define zero 0d0
function erfo7(y)
implicit none
!float, parameter :: a1=0.0705230784d0,a2=0.0422820123d0,a3=0.0092705272d0,a4=0.0001520143d0,a5=0.0002765672d0,a6=0.0000430638d0,&
!&                    one=1d0, zero=0d0
#define a1 0.0705230784d0
#define a2 0.0422820123d0
#define a3 0.0092705272d0
#define a4 0.0001520143d0
#define a5 0.0002765672d0
#define a6 0.0000430638d0
float :: erfo7, y ! , x, x2, x3
!int :: isgn
#define isgn (INT(sign(one,y)))
#define x (isgn*y)
#define x2 (x*x)
#define x3 (x2*x)
erfo7 = isgn*(one - one/(one + a1 * x + a2 * x2 + a3 * x3 + a4 * x2 * x2 + a5 * x2 * x3 + a6 * x3 * x3)**16);
!erfo7 = one + a1 * x + a2 * x2 + a3 * x3 + a4 * x2 * x2 + a5 * x2 * x3 + a6 * x3 * x3;
!erfo7=one/erfo7**16
!erfo7=one/erfo7
!erfo7=erfo7*erfo7; erfo7=erfo7*erfo7; erfo7=erfo7*erfo7; erfo7=erfo7*erfo7; ! 16th power
!erfo7=(one-erfo7)*isgn
end function erfo7
#undef a1
#undef a2
#undef a3
#undef a4
#undef a5
#undef a6
#undef x
#undef isgn
!
function erfo5(y)
implicit none
float, parameter :: p=0.47047d0, a1=0.3480242d0, a2=-0.0958798d0, a3=0.7478556d0
float :: erfo5, y, x, t, t2
int :: isgn
isgn=INT(sign(one,y)); x=isgn*y; 
t=one/(one+p*x); t2=t*t
erfo5 = (one - (a1*t + a2*t2 + a3*t*t2)*exp(-x*x))*isgn
end function erfo5
!
