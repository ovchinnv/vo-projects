! 12.20.11: did not find using 5th order approximation faster than the 7th order one
! this may be due to the cost of the exponential function (as well as other operations within the loop)
! may be a good idea to approximate the exponential function
!DEC$ ATTRIBUTES FORCEINLINE :: erfo7
!DEC$ ATTRIBUTES FORCEINLINE :: erfo5
#ifdef __SINGLE
#define __PCODE e
#else
#define __PCODE d
#endif
! approximations from Abramowitz & Stegun
#define one __CONCAT3(1,__PCODE,0)
#define zero 0d0
function erfo7(y)
implicit none
!float, parameter :: a1=0.0705230784d0,a2=0.0422820123d0,a3=0.0092705272d0,a4=0.0001520143d0,a5=0.0002765672d0,a6=0.0000430638d0,&
!&                    one=1d0, zero=0d0
#define a1 0.07052307840000d0
#define a2 0.04228201230000d0
#define a3 0.00927052720000d0
#define a4 0.00015201430000d0
#define a5 0.00027656720000d0
#define a6 0.00004306380000d0
float :: erfo7, y ! , x, x2, x3
!int :: isgn
#define isgn (INT(sign(one,y)))
#define x (isgn*y)
#define x2 (x*x)
#define x3 (x2*x)
!erfo7 = isgn*(one - one/(one + a1 * x + a2 * x2 + a3 * x3 + a4 * x2 * x2 + a5 * x2 * x3 + a6 * x3 * x3)**16);
erfo7 = isgn*(one - one/(one + x * (a1+x*(a2+x*(a3+x*(a4+x*(a5+x*a6))))))**16);
!erfo7 = one + a1 * x + a2 * x2 + a3 * x3 + a4 * x2 * x2 + a5 * x2 * x3 + a6 * x3 * x3;
!erfo7=one/erfo7**16
!erfo7=one/erfo7
!erfo7=erfo7*erfo7; erfo7=erfo7*erfo7; erfo7=erfo7*erfo7; erfo7=erfo7*erfo7; ! 16th power
!erfo7=(one-erfo7)*isgn
end function erfo7
#undef a1
#undef a2
#undef a3
#undef a4
#undef a5
#undef a6
#undef x
#undef isgn
!
function erfo5exp(y)
implicit none
!float, parameter :: p=0.47047d0, a1=0.3480242d0, a2=-0.0958798d0, a3=0.7478556d0
#define p 0.47047d0
#define a1 0.3480242d0
#define a2 -0.0958798d0 
#define a3 0.7478556d0
float :: erfo5exp, y, x, t, t2
int :: isgn
isgn=INT(sign(one,y)); x=isgn*y; 
t=one/(one+p*x);
erfo5exp = (one - (t*(a1 + t*(a2 + t*a3)))*exp(-y*y))*isgn
end function erfo5exp
#undef p
#undef a1
#undef a2
#undef a3
!
!
function erfo7exp(y)
implicit none
!float, parameter :: p=0.3275911d0, a1=0.254829592d0, a2=-0.284496736d0, a3=1.421413741d0, a4=-1.453152027d0, a5=1.061405429d0
#define p __CONCAT3(0.3275911,__PCODE,0)
#define a1 __CONCAT3( 0.254829592,__PCODE,0)
#define a2 __CONCAT3(-0.284496736,__PCODE,0)
#define a3 __CONCAT3(1.421413741,__PCODE,0)
#define a4 __CONCAT3(-1.453152027,__PCODE,0)
#define a5 __CONCAT3(1.061405429,__PCODE,0)
float :: erfo7exp, y, x, t
int :: isgn
isgn=INT(sign(one,y)); x=isgn*y; 
t=one/(one+p*x);
erfo7exp = (one - (t*(a1 + t*(a2 + t*(a3 + t*(a4 + t*a5)))))*exp(-y*y))*isgn
end function erfo7exp
!
