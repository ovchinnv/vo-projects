! test calculations and approximations of the error function
!
  program test
  use erf_ext
  __IMPNONE
! timer vars
!
! explicit interface to erf approximations (they are not in a module)
include 'erf.h'
!  float erfo7, erfo7exp, erfo5exp, ierfo7
!
  int :: icount, irate, imax, idiff, i

  integer*4, parameter :: seed=1
  int, parameter :: n=20000000 ! number of points
!  int, parameter :: n=10 ! number of points
  float :: x0=-2d0, x1=2d0, emax, eave

  float, dimension(n) :: e_sun, e_c, e_native, e_o7, ex_o5, ex_o7, e_o7h, e_o7hs, ex_o7hs, x, ierf
  real*4, dimension(n) :: xs ! single precision
!
! initialize Fortran rng
  call srand(seed)
!
  do i=1,n
    x(i)=rand(0)*(x1-x0)+x0 ; ! rand(0) -- return next number in sequence ; rand(1) -- restart RNG from (the same seed set by srand) 
    xs(i)=x(i) ! single precision
  enddo
!
  write(0,*) 'Calculating erf of',n,' numbers using the built-in erf ...'
  call system_clock(icount, irate, imax)
!
  do i=1,n
    e_native(i)=erf(x(i))
  enddo
!
  call system_clock(idiff, irate, imax); idiff=idiff-icount
!
  write(0,*) '  ===> Clock time (s): ',1e0*idiff/irate
!--------------------------------------------------------------------------

  write(0,*) 'Calculating erf of',n,' numbers using erf from C...'
  call system_clock(icount, irate, imax)
!
  do i=1,n
    e_c(i)=erf_c(x(i))
  enddo
 
  call system_clock(idiff, irate, imax); idiff=idiff-icount
!
  write(0,*) '  ===> Clock time (s): ',1e0*idiff/irate
!--------------------------------------------------------------------------

  write(0,*) 'Calculating erf of',n,' numbers using erf from SUN ...'
  call system_clock(icount, irate, imax)
!
  do i=1,n
    e_sun(i)=erf_sun(x(i))
  enddo
 
  call system_clock(idiff, irate, imax); idiff=idiff-icount
!
  write(0,*) '  ===> Clock time (s): ',1e0*idiff/irate
!
!--------------------------------------------------------------------------
!
  write(0,*) 'Calculating erf of',n,' numbers using O(7) erf approximation  ...'
  call system_clock(icount, irate, imax)
!
  do i=1,n
    e_o7(i)=erfo7(x(i))
  enddo
!
  call system_clock(idiff, irate, imax); idiff=idiff-icount
!
  write(0,*) '  ===> Clock time (s): ',1e0*idiff/irate
!
!--------------------------------------------------------------------------
!
  write(0,*) 'Calculating erf of',n,' numbers using a hardwired O(7) erf approximation  ...'
  call system_clock(icount, irate, imax)
!
  do i=1,n
    e_o7h(i)=__erfo7(x(i))
  enddo
!
  call system_clock(idiff, irate, imax); idiff=idiff-icount
!
  write(0,*) '  ===> Clock time (s): ',1e0*idiff/irate
!
!--------------------------------------------------------------------------
!
  write(0,*) 'Calculating erf of',n,' numbers using a single-precision hardwired O(7) erf approximation  ...'
  call system_clock(icount, irate, imax)
!
  do i=1,n
    e_o7hs(i)=__erfo7s(xs(i))
  enddo
!
  call system_clock(idiff, irate, imax); idiff=idiff-icount
!
  write(0,*) '  ===> Clock time (s): ',1e0*idiff/irate
!
!--------------------------------------------------------------------------
!
  write(0,*) 'Calculating erf of',n,' numbers using O(5) erf approximation (exp)  ...'
  call system_clock(icount, irate, imax)
!
  do i=1,n
    ex_o5(i)=erfo5exp(x(i))
  enddo
 
  call system_clock(idiff, irate, imax); idiff=idiff-icount
!
  write(0,*) '  ===> Clock time (s): ',1e0*idiff/irate

!----------------------------------------------------------------------------
  write(0,*) 'Calculating erf of',n,' numbers using O(7) erf approximation (exp)  ...'
  call system_clock(icount, irate, imax)
!
  do i=1,n
    ex_o7(i)=erfo7exp(x(i))
  enddo
 
  call system_clock(idiff, irate, imax); idiff=idiff-icount
!
  write(0,*) '  ===> Clock time (s): ',1e0*idiff/irate
!----------------------------------------------------------------------------

  write(0,*) 'Calculating erf of',n,' numbers using O(7) single-precision hardwired erf approximation (exp)  ...'
  call system_clock(icount, irate, imax)
!
  do i=1,n
    ex_o7hs(i)=__erfo7sexp(xs(i))
  enddo

  call system_clock(idiff, irate, imax); idiff=idiff-icount
!
  write(0,*) '  ===> Clock time (s): ',1e0*idiff/irate

!----------------------------------------------------------------------------
  write(0,*) '------------------------------------------------------------'
  write(0,*) 'Computing errors (built-in function is the reference) :'
  emax=maxval(abs(e_native-e_c));   eave=sum(abs(e_native-e_c))/n
  write(0,'(A,G30.20,A1,G30.20,A1)') ' ERF from C (max/average) : (',emax,'/',eave,')'
  emax=maxval(abs(e_native-e_sun));   eave=sum(abs(e_native-e_sun))/n
  write(0,'(A,G30.20,A1,G30.20,A1)') ' ERF from SUN (max/average) : (',emax,'/',eave,')'
  emax=maxval(abs(e_native-e_o7));   eave=sum(abs(e_native-e_o7))/n
  write(0,'(A,G30.20,A1,G30.20,A1)') ' O(7) approximation (max/average) : (',emax,'/',eave,')'
  emax=maxval(abs(e_native-e_o7hs));   eave=sum(abs(e_native-e_o7hs))/n
  write(0,'(A,G30.20,A1,G30.20,A1)') ' O(7) single-precision hardwired approximation (max/average) : (',emax,'/',eave,')'
  emax=maxval(abs(e_native-e_o7h));   eave=sum(abs(e_native-e_o7h))/n
  write(0,'(A,G30.20,A1,G30.20,A1)') ' O(7) hardwired approximation (max/average) : (',emax,'/',eave,')'
  emax=maxval(abs(e_native-ex_o5));   eave=sum(abs(e_native-ex_o5))/n
  write(0,'(A,G30.20,A1,G30.20,A1)') ' O(5) exp approximation (max/average) : (',emax,'/',eave,')'
  emax=maxval(abs(e_native-ex_o7));   eave=sum(abs(e_native-ex_o7))/n
  write(0,'(A,G30.20,A1,G30.20,A1)') ' O(7) exp approximation (max/average) : (',emax,'/',eave,')'
  emax=maxval(abs(e_native-ex_o7hs));   eave=sum(abs(e_native-ex_o7hs))/n
  write(0,'(A,G30.20,A1,G30.20,A1)') ' O(7) single-precision hardwired exp approximation (max/average) : (',emax,'/',eave,')'
  write(0,*) '------------------------------------------------------------'
! 
! now test the inverse error function approximation

  write(0,*) 'Calculating inverse erf of',n,' numbers using O(7) single-precision approximation  :'
  call system_clock(icount, irate, imax)
!
  do i=1,n
    ierf(i)=ierfo7(e_native(i))
  enddo
!
  call system_clock(idiff, irate, imax); idiff=idiff-icount
  write(0,*) '  ===> Clock time (s): ',1e0*idiff/irate
!
  write(0,*) '------------------------------------------------------------'
  write(0,*) 'Computing errors ...'
  emax=maxval(abs(x-ierf));   eave=sum(abs(x-ierf))/n
  write(0,'(A,G30.20,A1,G30.20,A1)') ' O(7) single-precision approximation (max/average) : (',emax,'/',eave,')'
  write(0,*) '------------------------------------------------------------'
!
end