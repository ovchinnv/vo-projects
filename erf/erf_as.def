#//adapted from Abramowitz & Stegun, and erfun directory in projects
#// appears to be the fastest algorithm

#ifdef __SINGLE
#define __PCODE e
#else
#define __PCODE d
#endif

#define _a1 __CONCAT3(0.0705230784,__PCODE, 0)
#define _a2 __CONCAT3(0.0422820123,__PCODE, 0)
#define _a3 __CONCAT3(0.0092705272,__PCODE, 0)
#define _a4 __CONCAT3(0.0001520143,__PCODE, 0)
#define _a5 __CONCAT3(0.0002765672,__PCODE, 0)
#define _a6 __CONCAT3(0.0000430638,__PCODE, 0)
#define _one __CONCAT3(1,__PCODE,0)

#define _isgn(_Y) (INT(sign(_one,(_Y))))
#define _x(_Y) abs(_Y)
#//define _x(_Y) (_isgn(_Y)*(_Y))
#//define _x2(_Y) (_x(_Y)*_x(_Y))
#//define _x3(_Y) (_x2(_Y)*_x(_Y))
#//define __erfo7(_Y) _isgn(_Y)*(_one - _one/(_one+_a1*_x(_Y)+_a2*_x2(_Y)+_a3*_x3(_Y)+_a4*_x2(_Y)*_x2(_Y)+_a5*_x2(_Y)*_x3(_Y)+_a6*_x3(_Y)*_x3(_Y))**16)
#//fraction of percent slower below but error halved
#define __erfo7(_Y) _isgn(_Y)*(_one - _one/(_one+_x(_Y)*(_a1+_x(_Y)*(_a2+_x(_Y)*(_a3+_x(_Y)*(_a4+_x(_Y)*(_a5+_x(_Y)*_a6))))))**16)
#//define __erfo7(_Y) _isgn(_Y)*(_one - (_one/sqrt(_one+_a1*_x(_Y)+_a2*_x2(_Y)+_a3*_x3(_Y)+_a4*_x2(_Y)*_x2(_Y)+_a5*_x2(_Y)*_x3(_Y)+_a6*_x3(_Y)*_x3(_Y)))**32)

#//explicit with exponential
#define _p __CONCAT3(0.3275911,__PCODE,0)
#define _ax1 __CONCAT3( 0.254829592,__PCODE,0)
#define _ax2 __CONCAT3(-0.284496736,__PCODE,0)
#define _ax3 __CONCAT3(1.421413741,__PCODE,0)
#define _ax4 __CONCAT3(-1.453152027,__PCODE,0)
#define _ax5 __CONCAT3(1.061405429,__PCODE,0)
#define _t(_Y) (_one/(_one+_p*_x(_Y)))
#define __erfo7exp(_Y) _isgn(_Y)*(_one - (_t(_Y)*(_ax1 + _t(_Y)*(_ax2 + _t(_Y)*(_ax3 + _t(_Y)*(_ax4 + _t(_Y)*_ax5)))))*exp(-(_Y)*(_Y)))


#//mixture of defines and variables :
#//define __ERFHYBRID
#ifdef __ERFHYBRID
#define __x2 (x_*x_)
#define __x3 (__x2*x_)
#define  __erfo7i(_Y,_VAL) \
         isgn_=(INT(sign(_one,(_Y))));\
         x_=isgn_*(_Y);\
         _VAL=isgn_*(_one - _one/(_one+_a1*x_+_a2*__x2+_a3*__x3+_a4*__x2*__x2+_a5*__x2*__x3+_a6*__x3*__x3)**16)
#endif


#// explicit single prec :
#define _ones 1e0
#define _as1 0.070523078400000e0
#define _as2 0.042282012300000e0
#define _as3 0.009270527200000e0
#define _as4 0.000152014300000e0
#define _as5 0.000276567200000e0
#define _as6 0.000043063800000e0
#define _isgns(_Y) (INT(sign(_ones,(_Y))))
#define _xs(_Y) abs(_Y)
#//define _xs(_Y) (_isgns(_Y)*(_Y))
#//define _xs2(_Y) (_xs(_Y)*_xs(_Y))
#//define _xs3(_Y) (_xs2(_Y)*_xs(_Y))
#//define __erfo7s(_Y) _isgns(_Y)*(_ones - _ones/(_ones+_as1*_xs(_Y)+_as2*_xs2(_Y)+_as3*_xs3(_Y)+_as4*_xs2(_Y)*_xs2(_Y)+_as5*_xs2(_Y)*_xs3(_Y)+_as6*_xs3(_Y)*_xs3(_Y))**16)
#//fraction of percent slower below but error halved
#//define __erfo7s(_Y) _isgns(_Y)*(_ones - _ones/(_ones+_xs(_Y)*(_as1+_xs(_Y)*(_as2+_xs(_Y)*(_as3+_xs(_Y)*(_as4+_xs(_Y)*(_as5+_xs(_Y)*_as6))))))**16)
#define __erfo7s(_Y) _isgns(real(_Y))*(_ones - _ones/(_ones+_xs(_Y)*(_as1+_xs(_Y)*(_as2+_xs(_Y)*(_as3+_xs(_Y)*(_as4+_xs(_Y)*(_as5+_xs(_Y)*_as6))))))**16)


#//explicit single prec with exponential
#define _ps (0.3275911e0)
#define _axs1 ( 0.254829592e0)
#define _axs2 (-0.284496736e0)
#define _axs3 (1.421413741e0)
#define _axs4 (-1.453152027e0)
#define _axs5 (1.061405429e0)
#define _ts(_Y) (_ones/(_ones+_ps*_xs(_Y)))
#define __erfo7sexp(_Y) _isgns(_Y)*(_ones - (_ts(_Y)*(_axs1 + _ts(_Y)*(_axs2 + _ts(_Y)*(_axs3 + _ts(_Y)*(_axs4 + _ts(_Y)*_axs5)))))*exp(-(_Y)*(_Y)))

