module rng
 __IMPNONE
 bool :: random_initialized=.false.
 int :: s(4)=(/1,2,3,4/)
 private s
 contains
!%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
 subroutine random_init(seeds)
 __DEP_PARSER
 __DEP_OUTPUT
!
 __DECL_MSGBUF
 int, optional :: seeds(4)
 if (random_initialized) return
!
 if (present(seeds)) then ; s=seeds ; 
 else
!
  if (existtag_nocase('random_seeds')) then ; 
   s=INT(atofv(getval_nocase('random_seeds'),4));
  else
   __WARN('RANDOM_INIT','SEEDS NOT SPECIFIED, USING [',s,']')
  endif
 endif ! seeds
!
 if (.not.fatal_warning()) then
  call clcginit(s)
  random_initialized=.true.
 else
  random_initialized=.false.
 endif
!
 end subroutine random_init
!%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
 subroutine random_reinit(seeds)
 __DEP_PARSER
 __DEP_OUTPUT
!
 __DECL_MSGBUF
 int, optional :: seeds(4)
!
 if (present(seeds)) then ; s=seeds ; 
 else
!
  if (existtag_nocase('random_seeds')) then ;
   s=INT(atofv(getval_nocase('random_seeds'),4));
  else
   __WARN('RANDOM_INIT','SEEDS NOT SPECIFIED, USING [',s,']')
  endif
 endif ! seeds
!
 if (.not.fatal_warning()) then
  call clcginit(s)
  random_initialized=.true.
 endif
!
 end subroutine random_reinit
!%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
 function randomu(channel)
!
! uniformly distributed random number
!
 __DEP_OUTPUT
!
 float :: randomu
 int, optional :: channel
 int :: chan
 character(len=8), parameter :: whoami='RANDOMU'
! 
 float :: random
! 
 if (present(channel)) then ; chan=channel ; else ; chan=1 ; endif

 if (random_initialized) then
  randomu=random(chan)
 else
  call warning(whoami, 'RNG NOT INTIALIZED. ABORT',-1)
  randomu = -1d0
 endif
!
 end function randomu
!%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
 subroutine randomu_vector(a, n, channel)
!
! uniformly distributed random numbers
!
 __DEP_OUTPUT
!
 int :: n
 float :: a(n)
 int, optional :: channel
 int :: chan
 character(len=14), parameter :: whoami='RANDOMU_VECTOR'
! 
 float :: random
 int :: i
! 
 if (present(channel)) then ; chan=channel ; else ; chan=1 ; endif

 if (random_initialized) then
!
  do i=1,n ; a(i)=random(chan) ; enddo
!
 else
  call warning(whoami, 'RNG NOT INTIALIZED. ABORT',-1)
 endif
!
 end subroutine randomu_vector
!%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
 subroutine randomg_vector(a, n, channel)
!
! generate Gaussian random numbers using Box-Muller scheme
!
 __DEP_CONST 
 __DEP_OUTPUT
!
 int :: n
 float :: a(n)
 int, optional :: channel
 int :: chan
 character(len=14), parameter :: whoami='RANDOMG_VECTOR'
! 
 float :: random, u1, u2
 int :: i, m
! 
 if (present(channel)) then ; chan=channel ; else ; chan=1 ; endif

 if (random_initialized) then
!
  i=1;
  m=mod(n,itwo);
  do while (i.lt.(n-m))
     u1=sqrt(-2d0*log(random(chan)))
     u2=twopi*random(chan)
     a(i)=u1*cos(u2) ; i=i+1
     a(i)=u1*sin(u2) ; i=i+1
  enddo
  if (m.eq.1) then 
     u1=sqrt(-2d0*log(random(chan)))
     u2=twopi*random(chan)
     a(i)=u1*cos(u2)
  endif
!
 else
  call error(whoami, 'RNG NOT INTIALIZED. ABORT',-1)
 endif
!
 end subroutine randomg_vector
end module rng
