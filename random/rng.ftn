module rng
 __IMPNONE
 bool :: random_initialized=.false.
 int :: s(4)=(/1,2,3,4/)
 private s
 contains
!%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
 subroutine random_init(seeds, context_)
 __DEP_PARSER
 __DEP_OUTPUT
 __IAM(RANDOM_INIT)
!
 int, intent(in), optional :: seeds(4)
 __OPAR(context,character(len=vartaglen))

 if (random_initialized) then 
   __MESG(whoami,' RNG ALREADY INITIALIZED WITH SEEDS [',random_get_seeds(),']');
  return
 endif
!
 if (present(seeds)) then ; s=seeds ;
  __MESG(whoami,'INITIALIZING RNG WITH SEEDS [',s,']');
 else
  __PRESENT(context,__STRING(__RNGCTX))
  if (existtag_nocase('random_seeds', context)) then ; 
   s=INT(atofv(getval_nocase('random_seeds', context),4));
   __MESG(whoami,'INITIALIZING RNG WITH SEEDS [',s,']');
  else
   __WARN(whoami,'SEEDS NOT SPECIFIED, USING [',s,']')
  endif
 endif ! seeds
!
 if (.not.fatal_warning()) then
  call clcginit(s)
  random_initialized=.true.
 else
  random_initialized=.false.
 endif
!
 end subroutine random_init
!%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
 subroutine random_reinit(seeds, context_)
 __DEP_PARSER
 __DEP_OUTPUT
!
 int, optional :: seeds(4)
 __OPAR(context,character(len=vartaglen))
!
 if (present(seeds)) then ; s=seeds ; 
 else
  __PRESENT(context,__STRING(__RNGCTX))
  if (existtag_nocase('random_seeds', context)) then ;
   s=INT(atofv(getval_nocase('random_seeds', context),4));
  else
   __WARN('RANDOM_INIT','SEEDS NOT SPECIFIED, USING [',s,']')
  endif
 endif ! seeds
!
 if (.not.fatal_warning()) then
  call clcginit(s)
  random_initialized=.true.
 endif
!
 end subroutine random_reinit
!%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
 function random_get_seeds(channel_) result(seeds) ! return current seeds
 __OPAR(channel, int)
 int, dimension(4) :: seeds
 __PRESENT(channel,1)
 call GetSeed(channel,s)
 seeds=s
 end function random_get_seeds
!%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
 function randomu(channel_)
!
! uniformly distributed random number
!
 __DEP_OUTPUT
!
 float :: randomu
 __OPAR(channel, int)
 __IAM(RANDOMU)
! 
 float :: random
!
 __PRESENT(channel,1)

 if (random_initialized) then
  randomu=random(channel)
 else
  call warning(whoami, 'RANDOM NUMBER GENERATOR NOT INTIALIZED. ABORT',-1)
  randomu = -1d0
 endif
!
 end function randomu
!%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
 subroutine randomu_vector(a, n, channel)
!
! uniformly distributed random numbers
!
 __DEP_OUTPUT
!
 int :: n
 float :: a(n)
 int, optional :: channel
 int :: chan
 __IAM(RANDOMU_VECTOR)
! 
 float :: random
 int :: i
! 
 if (present(channel)) then ; chan=channel ; else ; chan=1 ; endif

 if (random_initialized) then
!
  do i=1,n ; a(i)=random(chan) ; enddo
!
 else
  call warning(whoami, 'RANDOM NUMBER GENERATOR NOT INTIALIZED. ABORT',-1)
 endif
!
 end subroutine randomu_vector
!%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
 subroutine randomg_vector(a, n, channel)
!
! generate Gaussian random numbers using Box-Muller scheme
!
 __DEP_CONST
 __DEP_OUTPUT
!
 int :: n
 float :: a(n)
 int, optional :: channel
 int :: chan
 __IAM(RANDOMG_VECTOR)
! 
 float :: random, u1, u2
 int :: i, m
! 
 if (present(channel)) then ; chan=channel ; else ; chan=1 ; endif

 if (random_initialized) then
!
  i=1;
  m=mod(n,itwo);
  do while (i.lt.(n-m))
     u1=sqrt(-two*log(random(chan)))
     u2=twopi*random(chan)
     a(i)=u1*cos(u2) ; i=i+1
     a(i)=u1*sin(u2) ; i=i+1
  enddo
  if (m.gt.0) then 
     u1=sqrt(-two*log(random(chan)))
     u2=twopi*random(chan)
     a(i)=u1*cos(u2)
  endif
!
 else
  call error(whoami, 'RANDOM NUMBER GENERATOR NOT INTIALIZED. ABORT',-1)
 endif
!
 end subroutine randomg_vector
end module rng
