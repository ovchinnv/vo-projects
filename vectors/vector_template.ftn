#define __CONCAT(__A,__B) __CONCAT1(__A,__B)
#define __CONCAT1(__A,__B) __A##__B
#define __MODNAME  __CONCAT(__DATANAME,vector)
#define __TNAME    __CONCAT(__TYPENAME,_vector)
!
      module __MODNAME
      __CHARMM_ONLY __DEP_KINDS
      implicit none
!
      type __TNAME
       __DATATYPE, dimension(:), pointer :: __DATANAME
       int :: length ! length of the vector
       int :: last ! index of last element
       bool :: initialized=.false. ! has the vector been initialized
!
#ifdef __CHARMM
##IFN PATHSCALE
#endif
#if !(defined(__pathf90) || defined(__pathf77) || defined(__pathf95))
      contains
       procedure :: init   => __CONCAT(__TNAME,_init)
       procedure :: done   => __CONCAT(__TNAME,_done)
       procedure :: add    => __CONCAT(__TNAME,_add)
       procedure :: uadd   => __CONCAT(__TNAME,_uadd)
       procedure :: delete => __CONCAT(__TNAME,_delete)
       procedure :: find   => __CONCAT(__TNAME,_getind)
       procedure :: end    => __CONCAT(__TNAME,_getlast)
#define __TYPE class
#else
#define __TYPE type
#endif
#ifdef __CHARMM
##ENDIF
#endif
      end type __TNAME
!
      private __CONCAT(__TNAME,_expand)
      int, parameter, private :: expand_incr=100
!
      contains

       subroutine __CONCAT(__TNAME,_init( v ))
#ifndef __CHARMM
       __TYPE (__TNAME) :: v
#else
       class (__TNAME) :: v !##.not.PATHSCALE
       type  (__TNAME) :: v !##PATHSCALE
#endif
!       if (associated(v%__DATANAME)) deallocate(v%__DATANAME) ! testing unassigned pointer is an error!
       allocate(v%__DATANAME(expand_incr))
       v%__DATANAME=0
       v%length=expand_incr
       v%last=0
       v%initialized=.true.
       end subroutine __CONCAT(__TNAME,_init)
!ccccc
       subroutine __CONCAT(__TNAME,_done( v ))
#ifndef __CHARMM
       __TYPE (__TNAME) :: v
#else
       class (__TNAME) :: v !##.not.PATHSCALE
       type  (__TNAME) :: v !##PATHSCALE
#endif
       if (associated(v%__DATANAME)) deallocate(v%__DATANAME)
       v%length=0
       v%last=0
       v%initialized=.false.
       end subroutine __CONCAT(__TNAME,_done)
!ccccc
       subroutine __CONCAT(__TNAME,_expand( v ))
       type  (__TNAME) :: v
       int :: newlength
       __DATATYPE, dimension(:), allocatable :: p
!
       if (.not.v%initialized) then
        call __CONCAT(__TNAME,_init(v))
       else
!    assume length is valid
        newlength=v%length+expand_incr
        allocate(p(newlength))       ! new memory
        p(1:v%length)=v%__DATANAME ! copy old data
        deallocate(v%__DATANAME) ! delete old data
        allocate(v%__DATANAME(newlength))
        v%__DATANAME = p ! copy data
        deallocate(p)
        v%length=newlength
       endif
       end subroutine __CONCAT(__TNAME,_expand)
!ccccc
       function __CONCAT(__TNAME,_add( v,i )) ! add a new element to the list (not necessarily unique)
!                                       and return its index
#ifndef __CHARMM
       __TYPE (__TNAME) :: v
#else
       class (__TNAME) :: v !##.not.PATHSCALE
       type  (__TNAME) :: v !##PATHSCALE
#endif
       __DATATYPE :: i 
       int :: j, __CONCAT(__TNAME,_add)
!
       if (.not.v%initialized) call __CONCAT(__TNAME,_init(v))
!    add element to the list
       if (v%last.eq.v%length) call __CONCAT(__TNAME,_expand(v))
       j=v%last+1
       v%__DATANAME(j)=i
       v%last=j
       __CONCAT(__TNAME,_add)=j
       end function __CONCAT(__TNAME,_add)
!ccccc
       function __CONCAT(__TNAME,_uadd( v,i )) ! add a UNIQUE new element to the list and return its index
!                                        if the element already exists, return its index
#ifndef __CHARMM
       __TYPE (__TNAME) :: v
#else
       class (__TNAME) :: v !##.not.PATHSCALE
       type  (__TNAME) :: v !##PATHSCALE
#endif
       __DATATYPE :: i
       int :: j, __CONCAT(__TNAME,_uadd)
!
       if (.not.v%initialized) call __CONCAT(__TNAME,_init(v))
       do j=1,v%last
        if (v%__DATANAME(j).eq.i) then
         __CONCAT(__TNAME,_uadd)=j
         return
        endif
       enddo
!    add element to the list
       if (v%last.eq.v%length) call __CONCAT(__TNAME,_expand(v))
       j=v%last+1
       v%__DATANAME(j)=i
       v%last=j
       __CONCAT(__TNAME,_uadd)=j
       end function __CONCAT(__TNAME,_uadd)
!ccccc
       function __CONCAT(__TNAME,_get( v,j )) ! returns v%__DATANAME(j) if j is valid
#ifndef __CHARMM
       __TYPE (__TNAME) :: v
#else
       class (__TNAME) :: v !##.not.PATHSCALE
       type  (__TNAME) :: v !##PATHSCALE
#endif
       __DATATYPE :: i, __CONCAT(__TNAME,_get)
       int :: j
       if (.not.v%initialized) then
        i=-1
       elseif (j.gt.v%last.or.j.le.0) then
        i=-1
       else
        i=v%__DATANAME(j)
       endif
       __CONCAT(__TNAME,_get)=i
       end function __CONCAT(__TNAME,_get)
!ccccc
       function __CONCAT(__TNAME,_getlast(v)) ! returns the last element, if list nonempty
#ifndef __CHARMM
       __TYPE (__TNAME) :: v
#else
       class (__TNAME) :: v !##.not.PATHSCALE
       type  (__TNAME) :: v !##PATHSCALE
#endif
       __DATATYPE :: i, __CONCAT(__TNAME,_getlast)
       if (.not.v%initialized) then
        i=-1
       elseif (v%last.le.0) then
        i=-1
       else
        i=v%__DATANAME(v%last)
       endif
       __CONCAT(__TNAME,_getlast)=i
       end function __CONCAT(__TNAME,_getlast)
!ccccc
       function __CONCAT(__TNAME,_getind( v,i )) result(j) ! returns j for the first "v%__DATANAME(j)=i" match
#ifndef __CHARMM
       __TYPE (__TNAME) :: v
#else
       class (__TNAME) :: v !##.not.PATHSCALE
       type  (__TNAME) :: v !##PATHSCALE
#endif
       int :: i, j
       bool :: found
       found=.false.
       if (v%initialized) then
        do j=1,v%last
         if (v%__DATANAME(j).eq.i) then ; found=.true. ; exit ; endif
        enddo
       endif
       if (.not.found) j=-1
       end function __CONCAT(__TNAME,_getind)
!ccccc
       function __CONCAT(__TNAME,_delete( v,i ))
#ifndef __CHARMM
       __TYPE (__TNAME) :: v
#else
       class (__TNAME) :: v !##.not.PATHSCALE
       type  (__TNAME) :: v !##PATHSCALE
#endif
       bool :: __CONCAT(__TNAME,_delete)
       int :: i
       if (i.gt.0.and.i.le.v%last) then ! delete
        if (i.lt.v%last) v%__DATANAME(i)=v%__DATANAME(v%last)
        v%last=v%last-1
        __CONCAT(__TNAME,_delete)=.true.
       else ! out of bounds
        __CONCAT(__TNAME,_delete)=.false.
       endif
       end function __CONCAT(__TNAME,_delete)
!ccccc
      end module __MODNAME
