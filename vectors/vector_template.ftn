#define __CONCAT(__A,__B) __CONCAT1(__A,__B)
#define __CONCAT1(__A,__B) __A##__B
#define __MODNAME  __CONCAT(__DATANAME,vector)
#define __TNAME    __CONCAT(__TYPENAME,_vector)
!
      module __MODNAME
      __CHARMM_ONLY __DEP_KINDS
      implicit none
!
      type __TNAME
       __DATATYPE, dimension(:), pointer :: __DATANAME
       int :: length ! length of the array
       int :: last ! index of last element
       bool :: initialized=.false. ! has the vector been initialized
!
#ifndef __CHARMM
#if !(defined(__pathf90) || defined(__pathf77) || defined(__pathf95) || defined(__g95))
      contains
       procedure :: init   => __CONCAT(__TNAME,_init)
       procedure :: done   => __CONCAT(__TNAME,_done)
       procedure :: add    => __CONCAT(__TNAME,_add)
       procedure :: uadd   => __CONCAT(__TNAME,_uadd)
       procedure :: delete => __CONCAT(__TNAME,_delete)
       procedure :: find   => __CONCAT(__TNAME,_getind)
       procedure :: end    => __CONCAT(__TNAME,_getlast)
#define __TYPE class
#else
#define __TYPE type
#endif
#else
#define __TYPE type
#endif
      end type __TNAME
!
      private __CONCAT(__TNAME,_expand)
      int, parameter, private :: expand_incr=50
!
      contains

       subroutine __CONCAT(__TNAME,_init( v, expand_incr_ ))
       __TYPE (__TNAME) :: v
       int, optional :: expand_incr_
       int :: length
       if (v%initialized) return
       if (present(expand_incr_)) then
        length=max(expand_incr_, expand_incr)
       else
        length=expand_incr
       endif
       allocate(v%__DATANAME(length))
       v%__DATANAME=0
       v%length=length
       v%last=0
       v%initialized=.true.
       end subroutine __CONCAT(__TNAME,_init)
!ccccc
       subroutine __CONCAT(__TNAME,_reinit( v, expand_incr_ ))
       __TYPE (__TNAME) :: v
       int, optional :: expand_incr_
       if (v%initialized) call __CONCAT(__TNAME,_done(v))
       if (present(expand_incr_)) then ; call __CONCAT(__TNAME, _init(v, expand_incr_)) ; else ; call __CONCAT(__TNAME, _init(v)) ; endif
       end subroutine __CONCAT(__TNAME,_reinit)
!ccccc
       subroutine __CONCAT(__TNAME,_done( v ))
       __TYPE (__TNAME) :: v
       if (associated(v%__DATANAME)) deallocate(v%__DATANAME)
       v%length=0
       v%last=0
       v%initialized=.false.
       end subroutine __CONCAT(__TNAME,_done)
!ccccc
       subroutine __CONCAT(__TNAME,_expand( v, expand_incr_ ))
       __TYPE (__TNAME) :: v
       int, optional :: expand_incr_
       int :: newlength
       __DATATYPE, dimension(:), allocatable :: p
!
       if (.not.v%initialized) then
        call __CONCAT(__TNAME,_init(v))
       else
!    assume length is valid
        if (present(expand_incr_)) then
         newlength=v%length+max(expand_incr_, expand_incr)
        else
         newlength=v%length+expand_incr
        endif
        allocate(p(newlength))       ! new memory
        p(1:v%length)=v%__DATANAME ! copy old data
        deallocate(v%__DATANAME) ! delete old data
        allocate(v%__DATANAME(newlength))
        v%__DATANAME = p ! copy data
        deallocate(p)
        v%length=newlength
       endif
       end subroutine __CONCAT(__TNAME,_expand)
!ccccc
       subroutine __CONCAT(__TNAME,_set( v, w )) ! set vector v to another vector w
       __TYPE (__TNAME) :: v, w
       if (w%initialized) then
        call __CONCAT(__TNAME, _reinit(v, w%last)) ! ensure that v has enough space
        v%__DATANAME(1:w%last)=w%__DATANAME(1:w%last)
        v%last=w%last
       endif
!
       end subroutine __CONCAT(__TNAME,_set)
!ccccc
       function __CONCAT(__TNAME,_add( v,i )) ! add a new element to the list (not necessarily unique)
!                                       and return its index
       __TYPE (__TNAME) :: v
       __DATATYPE :: i 
       int :: j, __CONCAT(__TNAME,_add)
!
       if (.not.v%initialized) call __CONCAT(__TNAME,_init(v))
!    add element to the list
       if (v%last.eq.v%length) call __CONCAT(__TNAME,_expand(v))
       j=v%last+1
       v%__DATANAME(j)=i
       v%last=j
       __CONCAT(__TNAME,_add)=j
       end function __CONCAT(__TNAME,_add)
!ccccc
       function __CONCAT(__TNAME,_uadd( v,i )) ! add a UNIQUE new element to the list and return its index
!                                        if the element already exists, return its index
       __TYPE (__TNAME) :: v
       __DATATYPE :: i
       int :: j, __CONCAT(__TNAME,_uadd)
!
       if (.not.v%initialized) call __CONCAT(__TNAME,_init(v))
       do j=1,v%last
        if (v%__DATANAME(j).eq.i) then
         __CONCAT(__TNAME,_uadd)=j
         return
        endif
       enddo
!    add element to the list
       if (v%last.eq.v%length) call __CONCAT(__TNAME,_expand(v))
       j=v%last+1
       v%__DATANAME(j)=i
       v%last=j
       __CONCAT(__TNAME,_uadd)=j
       end function __CONCAT(__TNAME,_uadd)
!ccccc
       function __CONCAT(__TNAME,_get( v,j )) ! returns v%__DATANAME(j) if j is valid
       __TYPE (__TNAME) :: v
       __DATATYPE :: i, __CONCAT(__TNAME,_get)
       int :: j
       if (.not.v%initialized) then
        i=-1
       elseif (j.gt.v%last.or.j.le.0) then
        i=-1
       else
        i=v%__DATANAME(j)
       endif
       __CONCAT(__TNAME,_get)=i
       end function __CONCAT(__TNAME,_get)
!ccccc
       function __CONCAT(__TNAME,_getlast(v)) ! returns the last element, if list nonempty
       __TYPE (__TNAME) :: v
       __DATATYPE :: i, __CONCAT(__TNAME,_getlast)
       if (.not.v%initialized) then
        i=-1
       elseif (v%last.le.0) then
        i=-1
       else
        i=v%__DATANAME(v%last)
       endif
       __CONCAT(__TNAME,_getlast)=i
       end function __CONCAT(__TNAME,_getlast)
!ccccc
       function __CONCAT(__TNAME,_getind( v,i )) result(j) ! returns j for the first "v%__DATANAME(j)=i" match
       __TYPE (__TNAME) :: v
       int :: i, j
       bool :: found
       found=.false.
       if (v%initialized) then
        do j=1,v%last
         if (v%__DATANAME(j).eq.i) then ; found=.true. ; exit ; endif
        enddo
       endif
       if (.not.found) j=-1
       end function __CONCAT(__TNAME,_getind)
!ccccc
       function __CONCAT(__TNAME,_delete( v,i ))
       __TYPE (__TNAME) :: v
       bool :: __CONCAT(__TNAME,_delete)
       int :: i
       if (i.gt.0.and.i.le.v%last) then ! delete
        if (i.lt.v%last) v%__DATANAME(i)=v%__DATANAME(v%last)
        v%last=v%last-1
        __CONCAT(__TNAME,_delete)=.true.
       else ! out of bounds
        __CONCAT(__TNAME,_delete)=.false.
       endif
       end function __CONCAT(__TNAME,_delete)
!ccccc
       function __CONCAT(__TNAME, _eq_ordered(v,w)) result(equal)
       __TYPE (__TNAME) :: v, w
       bool :: equal
       equal = v%initialized.and.w%initialized
       if (equal) equal = v%last .eq. w%last
       if (equal.and.v%last.gt.0) equal=all(v%__DATANAME(1:v%last).eq.w%__DATANAME(1:v%last))
       end function __CONCAT(__TNAME, _eq_ordered)
!ccccc
       function __CONCAT(__TNAME, _eq_unordered(v,w)) result(equal)
       __TYPE (__TNAME) :: v, w
       bool :: equal
       __DATATYPE, dimension(:), pointer :: a, b
       int :: error
       equal = v%last .eq. w%last
       if (equal.and.v%last.gt.0) then
        allocate(a(v%last), b(v%last))
        a=v%__DATANAME(1:v%last) ! make copies
        b=w%__DATANAME(1:v%last)
        call __CONCAT(__DATANAME,sort('i', v%last, a, error)) ! sort in increasing order
        call __CONCAT(__DATANAME,sort('i', v%last, b, error))
        equal=all(a.eq.b)
        deallocate(a,b)
       endif
       end function __CONCAT(__TNAME, _eq_unordered)
!ccccc
       subroutine __CONCAT(__TNAME, _sort(v,dir))
       __TYPE (__TNAME) :: v
       character, optional :: dir
       character :: d
       int :: error
       if (present(dir)) then ; d=dir ; else ; d = 'i' ; endif ! sort in increasing order by default
       if (v%initialized) then
        if (v%last.gt.1) call __CONCAT(__DATANAME, sort(d, v%last, v%__DATANAME(1:v%last), error))
       endif
       end subroutine __CONCAT(__TNAME, _sort)
!cccc
      end module __MODNAME
