#define __CONCAT(__A,__B) __CONCAT1(__A,__B)
#define __CONCAT1(__A,__B) __A##__B
#define __MODNAME  __CONCAT(__DATANAME,vector)
#define __TNAME    __CONCAT(__TYPENAME,_vector)
#define __MODLNAME __CONCAT(__MODNAME,_list)
#define __TLNAME   __CONCAT(__TYPENAME,_vlist)
!
      module __MODLNAME
      use __MODNAME
      __CHARMM_ONLY __DEP_KINDS
      implicit none
!
      type __TLNAME
       integer*8, dimension(:), pointer :: i       ! integer label
       type (__TNAME), dimension(:), pointer :: v  ! list of vectors
       int :: length ! length of the array
       int :: last ! index of last element
       bool :: initialized=.false. ! has the vector been initialized
#if !(defined __CHARMM) && defined(__CLASS)
#if !(defined(__pathf90) || defined(__pathf77) || defined(__pathf95) || defined (__g95))
      contains
       procedure :: init   => __CONCAT(__TLNAME,_init)
       procedure :: done   => __CONCAT(__TLNAME,_done)
       procedure :: add4   => __CONCAT(__TLNAME,_uadd)
       procedure :: add8   => __CONCAT(__TLNAME,_uadd8)
       generic :: add      => add4, add8
       procedure :: uadd4  => __CONCAT(__TLNAME,_uaddu)
       procedure :: uadd8  => __CONCAT(__TLNAME,_uaddu8)
       generic :: uadd     => uadd4, uadd8
       procedure :: delete4=> __CONCAT(__TLNAME,_delete)
       procedure :: delete8=> __CONCAT(__TLNAME,_delete8)
       generic :: delete   => delete4, delete8
       procedure :: getind4=> __CONCAT(__TLNAME,_getind)
       procedure :: getind8=> __CONCAT(__TLNAME,_getind8)
       generic :: getind   => getind4, getind8
       procedure :: data4  => __CONCAT(__TLNAME,_get)
       procedure :: data8  => __CONCAT(__TLNAME,_get8)
       generic :: data     => data4, data8
#define __TYPE class
#else
#define __TYPE type
#endif
#else
#define __TYPE type
#endif
      end type __TLNAME
!
      private __CONCAT(__TLNAME,_expand)
      int, parameter, private :: initial_size=2
      int, parameter, private :: expand_incr=500
!
      interface __CONCAT(__TLNAME,_add)
       module procedure __CONCAT(__TLNAME,_add)
       module procedure __CONCAT(__TLNAME,_add8)
      end interface
!
      interface __CONCAT(__TLNAME,_uadd)
       module procedure __CONCAT(__TLNAME,_uadd)
       module procedure __CONCAT(__TLNAME,_uadd8)
      end interface
!
      interface __CONCAT(__TLNAME,_uaddu)
       module procedure __CONCAT(__TLNAME,_uaddu)
       module procedure __CONCAT(__TLNAME,_uaddu8)
      end interface
!
      interface __CONCAT(__TLNAME,_get)
       module procedure __CONCAT(__TLNAME,_get)
       module procedure __CONCAT(__TLNAME,_get8)
      end interface
!
      interface __CONCAT(__TLNAME,_getind)
       module procedure __CONCAT(__TLNAME,_getind)
       module procedure __CONCAT(__TLNAME,_getind8)
      end interface
!
      interface __CONCAT(__TLNAME,_delete)
       module procedure __CONCAT(__TLNAME,_delete)
       module procedure __CONCAT(__TLNAME,_delete8)
      end interface
!
      contains

       subroutine __CONCAT(__TLNAME,_init( vl, length ))
       int, optional :: length
       int :: i, llength
       __TYPE (__TLNAME) :: vl
       if (vl%initialized) return ! do not reinitialize
       if (present(length)) then  ; llength=length; 
       else ; llength=initial_size ; endif
       allocate(vl%v(llength)) ! note that the constituent vectors are not initialized here
       allocate(vl%i(llength))
       vl%length=llength
       vl%last=0
! allocate new vectors and point to them
       do i=1,vl%length ; call __CONCAT(__TNAME,_init(vl%v(i))) ; enddo
       vl%i=0
       vl%initialized=.true.
       end subroutine __CONCAT(__TLNAME,_init)
!
       subroutine __CONCAT(__TLNAME,_reinit( vl, length ))
       int, optional :: length
       __TYPE (__TLNAME) :: vl
       if (vl%initialized) call __CONCAT(__TLNAME,_done(vl))
       if (present(length)) then ; call __CONCAT(__TLNAME,_init(vl, length)) ; else ; call __CONCAT(__TLNAME,_init(vl)) ; endif
       end subroutine __CONCAT(__TLNAME,_reinit)
!
       subroutine __CONCAT(__TLNAME,_done( vl ))
       int :: i
       __TYPE (__TLNAME) :: vl
       if (.not.vl%initialized) return ! do nothing if list not initialized
       if (associated(vl%v)) then
        do i=1,vl%length ; call __CONCAT(__TNAME,_done(vl%v(i))) ; enddo
        deallocate(vl%v)
        vl%length=0
        vl%last=0
       endif
       if (associated(vl%i)) deallocate(vl%i)
       vl%initialized=.false.
       end subroutine __CONCAT(__TLNAME,_done)
!
       subroutine __CONCAT(__TLNAME,_expand( vl ))
       __TYPE (__TLNAME) :: vl
       int :: newlength, i
!
       type (__TLNAME) :: wl ! temporary list
!
       if (.not.vl%initialized) then
        call __CONCAT(__TLNAME,_init(vl))
       else
        newlength=vl%length+expand_incr
!
        call __CONCAT(__TLNAME,_init(wl,newlength)) ! initialize a new list with larger size
!
        wl%i(1:vl%length)=vl%i     ! copy old labels
        wl%v(1:vl%length)=vl%v     ! copy old pointers ( the target list data should stay unscathed )
        deallocate(vl%i)           ! delete old labels
        deallocate(vl%v)           ! delete old pointers
!
!        do i=vl%length+1,newlength;call __CONCAT(__TNAME,_init(wl%v(i)));enddo!allocate space for additional vectors (unnecessary, b/c list will init on 1st use)
        wl%last=vl%length
!        vl=wl ! copy static data & pointers
        vl%i=>wl%i
        vl%v=>wl%v ! pointer assignment
        vl%last=wl%last
        vl%length=wl%length
        vl%initialized=wl%initialized
        nullify(wl%i,wl%v)
       endif
       end subroutine __CONCAT(__TLNAME,_expand)
!
       function __CONCAT(__TLNAME,_add( vl, i, j )) !   add a new list labeled 'i' ; then add element 'j' to it & return index of label i
       __TYPE (__TLNAME) :: vl
       int :: i, k, l, __CONCAT(__TLNAME,_add)
       __DATATYPE, optional :: j
!
       if (.not.vl%initialized) call __CONCAT(__TLNAME,_init(vl))
       if (vl%last.eq.vl%length) call __CONCAT(__TLNAME,_expand(vl))
       k=vl%last+1
       vl%i(k)=i                                           !    new list label
       if (present(j)) l=__CONCAT(__TNAME,_add(vl%v(k),j)) !    add element to the list

       vl%last=k
       __CONCAT(__TLNAME,_add)=k
       end function __CONCAT(__TLNAME,_add)
!
! duplicate with longint label
       function __CONCAT(__TLNAME,_add8( vl, i, j )) !   add a new list labeled 'i' ; then add element 'j' to it & return index of label i
       __TYPE (__TLNAME) :: vl
       int :: k, l, __CONCAT(__TLNAME,_add8)
       integer*8 :: i
       __DATATYPE, optional :: j
!
       if (.not.vl%initialized) call __CONCAT(__TLNAME,_init(vl))
       if (vl%last.eq.vl%length) call __CONCAT(__TLNAME,_expand(vl))
       k=vl%last+1
       vl%i(k)=i                                           !    new list label
       if (present(j)) l=__CONCAT(__TNAME,_add(vl%v(k),j)) !    add element to the list

       vl%last=k
       __CONCAT(__TLNAME,_add8)=k
       end function __CONCAT(__TLNAME,_add8)
!
       function __CONCAT(__TLNAME,_uadd( vl, i, j )) ! add a new element to the list and return the index of the list
       __TYPE (__TLNAME) :: vl
       int :: i, k, l, __CONCAT(__TLNAME,_uadd)
       __DATATYPE, optional :: j
!
       if (.not.vl%initialized) call __CONCAT(__TLNAME,_init(vl))
       do k=1,vl%last
        if (vl%i(k).eq.i) then
         __CONCAT(__TLNAME,_uadd)=k
         if (present(j)) l=__CONCAT(__TNAME,_add(vl%v(k),j))
         return
        endif
       enddo
! if we are here, that means a matching entry was not found; we can safely call regular add (not unique)
       if (present(j)) then
        __CONCAT(__TLNAME,_uadd)=__CONCAT(__TLNAME,_add( vl, i, j ))
       else
        __CONCAT(__TLNAME,_uadd)=__CONCAT(__TLNAME,_add( vl, i ))
       endif
       end function __CONCAT(__TLNAME,_uadd)
!
! duplicate with longint label
       function __CONCAT(__TLNAME,_uadd8( vl, i, j )) ! add a new element to the list and return the index of the list
       __TYPE (__TLNAME) :: vl
       int :: k, l, __CONCAT(__TLNAME,_uadd8)
       INTEGER*8 :: i
       __DATATYPE, optional :: j
!
       if (.not.vl%initialized) call __CONCAT(__TLNAME,_init(vl))
       do k=1,vl%last
        if (vl%i(k).eq.i) then
         __CONCAT(__TLNAME,_uadd8)=k
         if (present(j)) l=__CONCAT(__TNAME,_add(vl%v(k),j))
         return
        endif
       enddo
! if we are here, that means a matching entry was not found; we can safely call regular add (not unique)
       if (present(j)) then
        __CONCAT(__TLNAME,_uadd8)=__CONCAT(__TLNAME,_add8( vl, i, j ))
       else
        __CONCAT(__TLNAME,_uadd8)=__CONCAT(__TLNAME,_add8( vl, i ))
       endif
!
       end function __CONCAT(__TLNAME,_uadd8)
!
       function __CONCAT(__TLNAME,_uaddu( vl, i, j )) ! add a UNIQUE new element to the list and return the index of the list
       __TYPE (__TLNAME) :: vl
       int :: i, k, l, __CONCAT(__TLNAME,_uaddu)
       __DATATYPE, optional :: j
!
       if (.not.vl%initialized) call __CONCAT(__TLNAME,_init(vl))
       do k=1,vl%last
        if (vl%i(k).eq.i) then
         __CONCAT(__TLNAME,_uaddu)=k
         if (present(j)) l=__CONCAT(__TNAME,_uadd(vl%v(k),j))
         return
        endif
       enddo
! if we are here, that means a matching entry was not found; we can safely call regular add
       if (present(j)) then
        __CONCAT(__TLNAME,_uaddu)=__CONCAT(__TLNAME,_add( vl, i, j ))
       else
        __CONCAT(__TLNAME,_uaddu)=__CONCAT(__TLNAME,_add( vl, i ))
       endif
!
       end function __CONCAT(__TLNAME,_uaddu)
!
! with longint label
       function __CONCAT(__TLNAME,_uaddu8( vl, i, j )) ! add a UNIQUE new element to the list and return the index of the list
       __TYPE (__TLNAME) :: vl
       int :: k, l, __CONCAT(__TLNAME,_uaddu8)
       INTEGER*8 :: i
       __DATATYPE, optional :: j
!
       if (.not.vl%initialized) call __CONCAT(__TLNAME,_init(vl))
       do k=1,vl%last
        if (vl%i(k).eq.i) then
         __CONCAT(__TLNAME,_uaddu8)=k
         if (present(j)) l=__CONCAT(__TNAME,_uadd(vl%v(k),j))
         return
        endif
       enddo
! if we are here, that means a matching entry was not found; we can safely call regular add
       if (present(j)) then
        __CONCAT(__TLNAME,_uaddu8)=__CONCAT(__TLNAME,_add8( vl, i, j ))
       else
        __CONCAT(__TLNAME,_uaddu8)=__CONCAT(__TLNAME,_add8( vl, i ))
       endif
!
       end function __CONCAT(__TLNAME,_uaddu8)
!
       function __CONCAT(__TLNAME,_get( vl, i )) result(list) ! if i is found, returns the corresponding list
       __TYPE (__TLNAME) :: vl
       int :: i, k
       __DATATYPE, pointer :: list(:)
       nullify(list)
       do k=1,vl%last
         if (vl%i(k).eq.i) then
          allocate(list(vl%v(k)%last))
          list=vl%v(k)%__DATANAME(1:vl%v(k)%last) ! note: returning copy of data because otherwise calling sub does not know the list length !
          return
         endif
       enddo
       end function __CONCAT(__TLNAME,_get)
!
! with longint label
       function __CONCAT(__TLNAME,_get8( vl, i )) result(list) ! if i is found, returns the corresponding list
       __TYPE (__TLNAME) :: vl
       int :: k
       integer*8 :: i
       __DATATYPE, pointer :: list(:)
       nullify(list)
       do k=1,vl%last
         if (vl%i(k).eq.i) then
          allocate(list(vl%v(k)%last))
          list=vl%v(k)%__DATANAME(1:vl%v(k)%last) ! note: returning copy of data because otherwise calling sub does not know the list length !
          return
         endif
       enddo
       end function __CONCAT(__TLNAME,_get8)
!
       function __CONCAT(__TLNAME,_getind( vl,i )) result(j) ! returns j for the first "vl%i(j)=i" match
       __TYPE (__TLNAME) :: vl
       int :: i, j
       j=-1
       if (vl%initialized) then
        do j=1,vl%last
         if (vl%i(j).eq.i) exit
        enddo
        if (j.eq.vl%last) then ; if (vl%i(j).ne.i) j=-1 ; endif ! not found entry, just ran to end of loop ! 
       endif
       end function __CONCAT(__TLNAME,_getind)
!
! with longint label
       function __CONCAT(__TLNAME,_getind8( vl,i )) result(j) ! returns j for the first "vl%i(j)=i" match
       __TYPE (__TLNAME) :: vl
       int :: j
       integer*8 :: i
       j=-1
       if (vl%initialized) then
        do j=1,vl%last
         if (vl%i(j).eq.i) exit
        enddo
        if (j.eq.vl%last) then ; if (vl%i(j).ne.i) j=-1 ; endif ! not found entry, just ran to end of loop ! 
       endif
       end function __CONCAT(__TLNAME,_getind8)
!
       function __CONCAT(__TLNAME,_delete( vl,i )) ! delete list that corresponds to the tag 'i'
       __TYPE (__TLNAME) :: vl
       bool :: __CONCAT(__TLNAME,_delete)
       int :: i, k, l
       __CONCAT(__TLNAME,_delete)=.false.
       l=vl%last
       do k=1,l
         if (vl%i(k).eq.i) then ! found match at index k
          vl%i(k)=vl%i(l)       ! copy label from l into position k
          call __CONCAT(__TNAME,_done(vl%v(k))) ! deallocate vector v(k)
          vl%v(k)=vl%v(l)       ! copy pointer to vector v(l) into v(k)
          vl%last=vl%last-1     ! decrement list length
! reinitialize list at position l (the length of the list stays the same)
          nullify(vl%v(l)%__DATANAME)
          call __CONCAT( __TNAME,_reinit(vl%v(l))) ! need reinit because v(l)%initialized = .true. (despite nullify)
          __CONCAT(__TLNAME,_delete)=.true.
          exit
         endif
       enddo
!
       end function __CONCAT(__TLNAME,_delete)
!
! with longint label
       function __CONCAT(__TLNAME,_delete8( vl,i )) ! delete list that corresponds to the tag 'i'
       __TYPE (__TLNAME) :: vl
       bool :: __CONCAT(__TLNAME,_delete8)
       int :: k, l
       integer*8 :: i
       __CONCAT(__TLNAME,_delete8)=.false.
       l=vl%last
       do k=1,l
         if (vl%i(k).eq.i) then ! found match at index k
          vl%i(k)=vl%i(l)       ! copy label from l into position k
          call __CONCAT(__TNAME,_done(vl%v(k))) ! deallocate vector v(k)
          vl%v(k)=vl%v(l)       ! copy pointer to vector v(l) into v(k)
          vl%last=vl%last-1     ! decrement list length
! reinitialize list at position l (the length of the list stays the same)
          nullify(vl%v(l)%__DATANAME)
          call __CONCAT( __TNAME,_reinit(vl%v(l))) ! need reinit because v(l)%initialized = .true. (despite nullify)
          __CONCAT(__TLNAME,_delete8)=.true.
          exit
         endif
       enddo
!
       end function __CONCAT(__TLNAME,_delete8)
!
      end module __MODLNAME
