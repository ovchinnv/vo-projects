!CHARMM Element source/stringm/vector.mod $Revision: 1.0 $
!C
!C     IVECTOR.MOD
!C
!c
!c
      module ivector

      type int_vector
       integer, dimension(:), pointer :: i
       integer :: length ! length of the vector
       integer :: last ! index of last element
       logical :: initialized=.false. ! has the vector been initialized
      end type int_vector
!
      private int_vector_expand
      integer, parameter, private :: expand_incr=500
!
      contains

       subroutine int_vector_init( v )
      use string
!       implicit none
       type (int_vector) :: v
!       if (associated(v%i)) deallocate(v%i) ! testing unassigned pointer is an error!
       allocate(v%i(expand_incr))
       v%i=0
       v%length=expand_incr
       v%last=0
       v%initialized=.true.
       end subroutine int_vector_init
!ccccc
       subroutine int_vector_done( v )
      use string
!       implicit none
       type (int_vector) :: v
       if (associated(v%i)) deallocate(v%i)
       v%length=0
       v%last=0
       v%initialized=.false.
       end subroutine int_vector_done
!ccccc
       subroutine int_vector_expand( v )
      use string
!       implicit none
       type (int_vector) :: v
       integer :: newlength
       integer, dimension(:), allocatable :: p
!
       if (.not.v%initialized) then
        call int_vector_init(v)
       else
!    assume length is valid
        newlength=v%length+expand_incr
        allocate(p(newlength))       ! new memory
        p(1:v%length)=v%i ! copy old data
        deallocate(v%i) ! delete old data
        allocate(v%i(newlength))
        v%i = p ! copy data
        deallocate(p)
        v%length=newlength
       endif
       end subroutine int_vector_expand
!ccccc
       function int_vector_add( v,i ) ! add a new element to the list (not necessarily unique)
!                                       and return its index
      use string
!       implicit none
       type (int_vector) :: v
       integer i, j, int_vector_add
!
       if (.not.v%initialized) call int_vector_init(v)
!    add element to the list
       if (v%last.eq.v%length) call int_vector_expand(v)
       j=v%last+1
       v%i(j)=i
       v%last=j
       int_vector_add=j
       end function int_vector_add
!ccccc
       function int_vector_uadd( v,i ) ! add a UNIQUE new element to the list and return its index
!                                        if the element already exists, return its index
      use string
!       implicit none
       type (int_vector) :: v
       integer i, j, int_vector_uadd
!
       if (.not.v%initialized) call int_vector_init(v)
       do j=1,v%last
        if (v%i(j).eq.i) then
         int_vector_uadd=j
         return
        endif
       enddo
!    add element to the list
       if (v%last.eq.v%length) call int_vector_expand(v)
       j=v%last+1
       v%i(j)=i
       v%last=j
       int_vector_uadd=j
       end function int_vector_uadd
!ccccc
       function int_vector_get( v,j ) ! returns v%i(j) if j is valid
      use string
!       implicit none
       type (int_vector) :: v
       integer :: i, j, int_vector_get
       if (.not.v%initialized) then
        i=-1
       elseif (j.gt.v%last.or.j.le.0) then
        i=-1
       else
        i=v%i(j)
       endif
       int_vector_get=i
       end function int_vector_get
!ccccc
       function int_vector_getlast(v) ! returns the last element, if list nonempty
      use string
!       implicit none
       type (int_vector) :: v
       integer :: i, int_vector_getlast
       if (.not.v%initialized) then
        i=-1
       elseif (v%last.le.0) then
        i=-1
       else
        i=v%i(v%last)
       endif
       int_vector_getlast=i
       end function int_vector_getlast
!
      end module ivector
