 program test
 
 use ivector
 use rvector

 use ivector_list
 use rvector_list
 
 
 
 type(int_vector) :: ilist
 
 int:: n = 1345 ; 
 bool ::q

! basic tests
 write(0,*) ilist%last
 write(0,*) ilist%length
 write(0,*) ilist%initialized
 
! add a few elements to the list
 write(0,*) 'inserting consecutive elements [',1,'...',n,'] into the list:'
!
 do i=1, n
  k=int_vector_add(ilist, i)
 enddo
! basic tests
 write(0,*) ilist%last
 write(0,*) ilist%length
 write(0,*) 'initialized: ', ilist%initialized
 write(0,*) 'last element: ', int_vector_getlast(ilist)
 write(0,*) 'index of element 236: ', int_vector_getind(ilist,236)
 write(0,*) 'index of element -96: ', int_vector_getind(ilist,-96)
!
! delete elements
!
 write(0,*) 'deleting first ',n/2,' elements:'
 do i=1,n/2
  q=int_vector_delete(ilist,i)
 enddo 
! basic tests
 write(0,*) ilist%last
 write(0,*) ilist%length
 write(0,*) 'initialized: ', ilist%initialized
 write(0,*) 'last element: ', int_vector_getlast(ilist)
 write(0,*) 'index of element 236: ', int_vector_getind(ilist,236)
 write(0,*) 'index of element ',n, ' :', int_vector_getind(ilist,n)
 write(0,*) 'index of element ',n-1, ' :', int_vector_getind(ilist,n-1)
!
! using type-bound procedures 
#if !(defined(__pathf90) || defined(__pathf77) || defined(__pathf95))
 write(0,*) 'deleting remaining elements using type-bound syntax:'
 do i=1,ilist%last
  q=ilist%delete(1)
 enddo 
! basic tests
 write(0,*) ilist%last
 write(0,*) ilist%length
 write(0,*) 'initialized: ', ilist%initialized
 write(0,*) 'last element: ', ilist%end()
#endif
 call int_vector_done(ilist)
 write(0,*) 'initialized: ', ilist%initialized

 
 end
