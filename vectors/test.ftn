 program test
 
 use ivector
 use rvector

 use ivector_list
 use rvector_list
 
 
 
 type(int_vector) :: ilist
 type(int_vlist) :: ivlist
 
 int:: n = 1345 ; 
 bool ::q

!
 write(0,*) '======================= testing ivector ======================='
! basic tests
 write(0,*) ilist%last
 write(0,*) ilist%length
 write(0,*) ilist%initialized
 
! add a few elements to the list
 write(0,*) 'inserting consecutive elements [',1,'...',n,'] into the list:'
!
 do i=1, n
  k=int_vector_add(ilist, i)
 enddo
! basic tests
 write(0,*) ilist%last
 write(0,*) ilist%length
 write(0,*) 'initialized: ', ilist%initialized
 write(0,*) 'last element: ', int_vector_getlast(ilist)
 write(0,*) 'index of element 236: ', int_vector_getind(ilist,236)
 write(0,*) 'index of element -96: ', int_vector_getind(ilist,-96)
!
! delete elements
!
 write(0,*) 'deleting first ',n/2,' elements:'
 do i=1,n/2
  q=int_vector_delete(ilist,i)
 enddo 
! basic tests
 write(0,*) ilist%last
 write(0,*) ilist%length
 write(0,*) 'initialized: ', ilist%initialized
 write(0,*) 'last element: ', int_vector_getlast(ilist)
 write(0,*) 'index of element 236: ', int_vector_getind(ilist,236)
 write(0,*) 'index of element ',n, ' :', int_vector_getind(ilist,n)
 write(0,*) 'index of element ',n-1, ' :', int_vector_getind(ilist,n-1)
!
! using type-bound procedures 
#if !(defined(__pathf90) || defined(__pathf77) || defined(__pathf95))
 write(0,*) 'deleting remaining elements using type-bound syntax:'
 do i=1,ilist%last
  q=ilist%delete(1)
 enddo 
! basic tests
 write(0,*) ilist%last
 write(0,*) ilist%length
 write(0,*) 'initialized: ', ilist%initialized
 write(0,*) 'last element: ', ilist%end()
#endif
 call int_vector_done(ilist)
 write(0,*) 'initialized: ', ilist%initialized

 write(0,*) '======================= testing ivector_list ======================='

! add some elements to the list 
 do i=100, 105
  k=int_vlist_uadd(ivlist,1,i)
 enddo
!
 write(0,*) 'vlist last : '  ,ivlist%last
 write(0,*) 'vlist length : ',ivlist%length
 write(0,*) 'initialized: ', ivlist%initialized
!
 ilist=ivlist%v(1) ! does not duplicate pointer data, only pointers (be careful) 
 write(0,*) ilist%last
 write(0,*) ilist%length
 write(0,*) 'initialized: ', ilist%initialized
 write(0,*) 'last element: ', ilist%end()
!
! add another list
 do i=100, 105
  k=int_vlist_uadd(ivlist,25,i*10)
 enddo
!
!
 write(0,*) 'vlist last : '  ,ivlist%last
 write(0,*) 'vlist length : ',ivlist%length
 write(0,*) 'initialized: ', ivlist%initialized
!
! add an empty list
  k=int_vlist_uadd(ivlist,2)
 write(0,*) 'vlist last : '  ,ivlist%last
 write(0,*) 'vlist length : ',ivlist%length

! try to add duplicate elements using uadd
 do i=100, 105
  k=int_vlist_uaddu(ivlist,25,i*10)
 enddo
! now print some info : should have the same number of elements since they are all duplicate !
 ilist=ivlist%v(2)
 write(0,*) ilist%last
 write(0,*) ilist%length
 write(0,*) 'initialized: ', ilist%initialized
 write(0,*) 'last element: ', ilist%end()

! try to add new elements using uadd
 do i=200, 205
  k=int_vlist_uaddu(ivlist,25,i*10)
 enddo
!
 ilist=ivlist%v(2)
 write(0,*) ilist%last
 write(0,*) ilist%length
 write(0,*) 'initialized: ', ilist%initialized
 write(0,*) 'last element: ', ilist%end()

! print vector lists
 do i=1,ivlist%last
  write(0,*) '========================================'
  write(0,*) 'Vector #',i,':' 
  write(0,*) 'Label: ',ivlist%i(i)
  write(0,*) 'Data:  ', ( char(10), ivlist%v(i)%i(j), j=1,ivlist%v(i)%last)
 enddo

 call int_vlist_done(ivlist) ! deallocate list data
! call int_vector_done(ilist) ! should fail if data was deallocated above
! call int_vlist_done(ivlist) ! should fail if data was deallocated above
 

end

