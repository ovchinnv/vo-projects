 module fieldio
 __DEP_PARSER
 __DEP_OUTPUT
 __DEP_FILES
 use formats
 use chestio
 use plot3Dio
 __IMPNONE
!
 private
!
 interface fieldio_write_scalar
  module procedure fieldio_write_scalar2
  module procedure fieldio_write_scalar3
 end interface fieldio_write_scalar
!
 private fieldio_write_scalar2
 private fieldio_write_scalar3
 public  fieldio_write_scalar
 public  fieldio_write_scalar3D
!
 contains
!
!=========================================================================
  function fieldio_write_scalar2(fname_,type_,frm_,q) result(ok)
  character(len=vartaglen) :: fname_, type_, frm_
  float :: q(:,:)
  bool :: ok, qbin
  int :: ifmt, nx, ny
  __IAM(FIELDIO_WRITE_SCALAR2D)
!
  ok=fieldio_gettype(type_, frm_, ifmt, qbin); if (.not.ok) return
!
  nx=size(q,1); ny=size(q,2)
  select case(ifmt)
   case(plot3d); ok=plot3Dwrite_scalar(fname_,q,(/nx/),(/ny/),(/1/),1, qbin)
   case(chest);  ok=chest_write_scalar(fname_,q,nx,ny,1,qbin)
  end select
!
  end function fieldio_write_scalar2
!=========================================================================
  function fieldio_write_scalar3(fname_,type_,frm_,q) result(ok)
  character(len=vartaglen) :: fname_, type_, frm_
  float :: q(:,:,:)
  bool :: ok, qbin
  int :: ifmt, nx, ny, nz
  __IAM(FIELDIO_WRITE_SCALAR3D)
!
  ok=fieldio_gettype(type_, frm_, ifmt, qbin); if (.not.ok) return
!
  nx=size(q,1); ny=size(q,2); nz=size(q,3)
  select case(ifmt)
   case(plot3d); ok=plot3Dwrite_scalar(fname_,q,(/nx/),(/ny/),(/nz/),1, qbin)
   case(chest);  ok=chest_write_scalar(fname_,q,nx,ny,nz,qbin)
  end select
!
  end function fieldio_write_scalar3
!=========================================================================
  function fieldio_write_scalar3D(fname_,type_,frm_,q, nx, ny, nz) result(ok)
  character(len=*) :: fname_, type_, frm_
  int, intent(in) :: nx, ny, nz
  float :: q(*)
  bool :: ok, qbin
  int :: ifmt
  __IAM(FIELDIO_WRITE_SCALAR3D)
!
  ok=fieldio_gettype(type_, frm_, ifmt, qbin); if (.not.ok) return
!
  select case(ifmt)
   case(plot3d); ok=plot3Dwrite_scalar(fname_,q,(/nx/),(/ny/),(/nz/),1, qbin)
   case(chest);  ok=chest_write_scalar(fname_,q,nx,ny,nz,qbin)
  end select
!
  end function fieldio_write_scalar3D
!=========================================================================
  function fieldio_gettype(type_, frm_, ifmt, qbin) result(ok)
  character(len=*) :: type_, frm_
  character(len=len(type_)) :: type
  character(len=len(frm_)) :: frm
  int, intent(out) :: ifmt
  bool, intent(out) :: qbin
  bool :: ok
  int :: i
  __IAM(FIELDIO_GETTYPE)

  ok=.false.; qbin=.false.
!
  ifmt=-1
  type=type_ ; call toupper(type);
  do i=1, num_format
   if (format_name(i).eq.type) then
    ifmt=i; exit
   endif
  enddo
  if (ifmt<0) then ; call message(whoami, 'Format "'//trim(type)//'" is not supported. Abort.',-1); return ; endif
!
  frm=frm_ ; call toupper(frm);
  select case(frm)
   case ('BINARY','BIN','UNFORMATTED')
    qbin=.true.
   case ('ASCII','TEXT','TXT')
    qbin=.false.
   case default
    call message(whoami, 'Format "'//trim(frm)//'" is not supported. Abort.',-1); return
  end select
!
 ok=.true.
 end function fieldio_gettype
!========================================================================
 end module fieldio
!
