#ifdef __INT
#undef __BOOL
#undef __CHAR
#define __NTOA(__WHAT) itoa(__WHAT)
#define __ATON(__WHAT) atoi(__WHAT)
#elif defined(__BOOL)
#undef __CHAR
#define __NTOA(__WHAT) ltoa(__WHAT)
#define __ATON(__WHAT) atol(__WHAT)
#elif defined(__CHAR)
#define __NTOA(__WHAT) trim(__WHAT) // __STRING(__WHAT)
#define __ATON(__WHAT) __WHAT
#else
#define __NTOA(__WHAT) ftoa(__WHAT)
#define __ATON(__WHAT) atof(__WHAT)
#endif // #ifdef __int
#ifndef __WHOAMI
#define __WHOAMI whoami
#endif // __WHOAMI
#ifndef __DOIFOK
#define __DOIFOK // nothing
#endif
#ifndef __DOALWAYS
#define __DOALWAYS // nothing
#endif
if (.not.existtag_nocase(__STRING(__VAR), __STRING(__CONTEXT))) then 
#ifdef __DEFAULT
#ifndef __DEFAULT_VAL
#define __DEFAULT_VAL __CONCAT2(__VAR, _default)
#endif // __DEFAULT_VAL
#ifdef __WARNIFMISSING
   call warning(__WHOAMI, __STRING(__NAME)//&
&   ' ("'//&
&   __STRING(__VAR)//&
&   '") unspecified. Defaulting to '//&
&                        __NTOA( __DEFAULT_VAL ),0)
#endif
   __VAR=__DEFAULT_VAL
#undef __DEFAULT_VAL
#else
#ifdef  __COMPUTE
#ifdef __WARNIFMISSING
   call warning(__WHOAMI, __STRING(__NAME)//&
&   ' ("'//&
&   __STRING(__VAR)//&
&   '") unspecified. Will compute from grid',0)
#endif
   __VAR=-1
#else
#ifdef __WARNIFMISSING
   call warning(__WHOAMI, __STRING(__NAME)//&
&   ' ("'//&
&   __STRING(__VAR)//&
&   '") unspecified',-1)
#endif
#endif
#endif
else 
   keyword=getval_nocase(__STRING(__VAR), __STRING(__CONTEXT));
#ifdef  __BYATOM
   select case(keyword)
    case('PDB','PQR','CHARMM','ATOMID')
    call warning(__WHOAMI, 'Atom-based parameters not yet supported. Abort.',-1)
    return
   end select
#endif
   l=len_trim(keyword)
   call message(__WHOAMI, 'Setting '// &
                        __STRING(__NAME)//&
&   ' ("'//&
&   __STRING(__VAR)//&
&   '") to '//keyword(1:l)//'');
   __VAR = __ATON(keyword)
#if (!defined(__BOOL) & !defined(__CHAR))
#if defined(__LEZEROERR)
   if ( __VAR .le. 0) then
    call warning(__WHOAMI,__STRING(__NAME)//' must be positive ("'//keyword(1:l)//'"). Abort.',-1)
   else
    __DOIFOK
   endif
#elif ( defined(__MINUSERR) || defined(__LTZEROERR) )
   if ( __VAR .lt. 0d0) then
    call warning(__WHOAMI,__STRING(__NAME)//' cannot be negative ('//keyword(1:l)//'). Abort.',-1)
   else
    __DOIFOK
   endif
#elif defined(__MINUSWRN)
   if (__VAR .lt. 0d0) then
    call warning(__WHOAMI,__STRING(__NAME)// ' < 0 (Is this what you want?)',0)
   else
    __DOIFOK
   endif
#endif
#endif
   __DOIFOK
endif
__DOALWAYS
#undef __VAR
#undef __NAME
#undef __TAG
#undef __ATON
#undef __NTOA
#undef __DEFAULT_VAL
#undef __DOIFOK
#undef __DOALWAYS
