#ifdef __EPS
#define __E _eps
#else
#define __E
#endif

#ifdef __KAPPA
#define __K _kappa
#else
#define __K
#endif

#ifdef __RHS
#define __R _rhs
#else
#define __R
#endif

#ifdef __SURF
#define __S _rho
#else
#define __S
#endif

#define _NAME __CONCAT(__CONCAT(__CONCAT(__CONCAT(grid_objects, __E), __K), __R), __S)

  subroutine __NM(_NAME) (xcen, ycen, zcen, dxcor, dycor, dzcor, &
#ifdef __EPS
&  eps, &
#endif
#ifdef __KAPPA
&  kappa, &
#endif
#ifdef __RHS
&  rhs, &
#endif
&  nx, ny, nz)
!DEC$ ATTRIBUTES FORCEINLINE :: erfo7
!DEC$ ATTRIBUTES FORCEINLINE :: erfo5
! to avoid circular dependencies, need to compile 'molecule' before 'grid', so pass the gridded data explicitly
! use SIZE, only: nx, ny, nz
! use grid, only : xcen, ycen, zcen, dxcor, dycor, dzcor
! use state, only: eps, kappa, rhs
! declare passed parameters (gridded data) -- see above comments
  int :: nx, ny, nz
#ifdef __EPS
  float, dimension(nx,ny,nz) :: eps
#endif
#ifdef __KAPPA
  float, dimension(nx,ny,nz) :: kappa
#endif
#ifdef __RHS
  float, dimension(nx,ny,nz) :: rhs
#ifdef __NORMALIZE_FILTER
  float :: temp(nx,ny,nz)
  float :: fnorm ! discrete filter norm
  int, dimension(-1:1) :: ilim, jlim, klim ! grid support indices for a given charge ; 0th position wasted
#endif

#endif
  float, dimension(nx), intent(in) :: xcen, dxcor
  float, dimension(ny), intent(in) :: ycen, dycor
  float, dimension(nz), intent(in) :: zcen, dzcor
! local vars
  __IAM(__NM(_NAME))
  int :: l
  int :: i, j, k, idir, jdir, kdir

  float :: xpt, ypt, zpt,&
           dz2, dzdy2, dzdydx2,&
           d, d2, e, e2,&
#ifdef __RHS
&          qn,&
#endif
&          val
!
#ifdef __EPS
  float :: reps   , repsn,    r2epsn   , rmax2eps
#endif
#ifdef __KAPPA
  float :: rkappa , rkappan,  r2kappan , rmax2kappa
#endif
#ifdef __RHS
  float :: rcharge, rchargen, r2chargen, rmax2charge
#endif
#ifdef __SURF
  float :: rsurf  , rsurfn,   r2surfn  , rmax2surf
#endif
!
  bool :: &
#ifdef __KAPPA
&          qkappai, qkappaj, qkappak,&
#endif
#ifdef __RHS
&          qchargei, qchargej, qchargek,&
#endif
#ifdef __EPS
&          qepsi, qepsj, qepsk,&
#endif
#ifdef __SURF
&          qsurfi, qsurfj, qsurfk,&
#endif
&          qanyi, qanyj, qanyk
!
  float :: erfsun ! external erf function; code by Sun Microsystems
  float :: erfo7  ! approximation to within O(-7)
  float :: erfo5  ! approximation to within O(-5) [contains an exponential term]
!
  float, parameter :: TOL=1e-5
!
  if (.not.molecule_initialized) call molecule_initialize()
! make sure we have radii
  if (.not.system_radii_initialized) then
    __WRN(whoami, 'Atomic radii not initialized. Abort.')
    return
!  else
!   write(666,*) natom, size(radius), radius
  endif
!
#ifdef __DEBUG
  __OUT('Will transfer atomic parameters to grid.')
#endif
!
! if stdevs are negative, compute from grid :
  d=-1
#ifndef __GRIDSCALE
#define __GRIDSCALE 1.5d0
#endif
!
  if (any((/ &
#ifdef __EPS
&  stdev_eps, &
#endif
#ifdef __KAPPA
&  stdev_kappa, &
#endif
#ifdef __RHS
&  stdev_charge, &
#endif
#ifdef __SURF
&  stdev_surf, &
#endif
&  one/).lt.zero)) d=__GRIDSCALE*min(minval(dxcor),minval(dycor),minval(dzcor))
!
#ifdef __INFO
#undef __INFO
#endif
#// NOTE : ^^ below will be removed by preprocessor
#define __INFO(_WHAT) call message(whoami, 'COMPUTED SMALLEST '^^ftoupper(__STRING(__CONCAT(stdev_,_WHAT)))^^' FROM GRID := '^^ftoa(d) )

#ifdef __EPS
  if (stdev_eps.lt.zero)  then;
   __INFO(eps)
   stdev_eps=d;  cutoff_eps=cutoff_eps_stdev*stdev_eps;  oo_stdev_eps=one/stdev_eps 
  endif
#endif
#ifdef __KAPPA
  if (stdev_kappa.lt.zero)  then;
   __INFO(kappa)
   stdev_kappa=d;  cutoff_kappa=cutoff_kappa_stdev*stdev_kappa;  oo_stdev_kappa=one/stdev_kappa
  endif
#endif
#ifdef __RHS
  if (stdev_charge.lt.zero) then;
   __INFO(charge)
   stdev_charge=d;  cutoff_charge=cutoff_charge_stdev*stdev_charge;  oo_stdev_charge=one/stdev_charge
  endif
#endif
#ifdef __SURF
  if (stdev_surf.lt.zero) then;
   __INFO(surf)
   stdev_surf=d;  cutoff_surf=cutoff_surf_stdev*stdev_surf;  oo_stdev_surf=one/stdev_surf 
  endif
#endif
!  write(0,*) 'STDEV:', oo_stdev_eps, oo_stdev_surf ! aa
!
! initialize all but rhs (so that we can superpose additional sources outside of this module)
#ifdef __SURF
  if (.not.associated(rho)) allocate(rho(nx,ny,nz))
  rho=zero
#endif
#ifdef __EPS
  eps=zero
#endif
#ifdef __KAPPA
  kappa=zero
#endif
#ifdef __RHS
#ifdef _NORMALIZE_FILTER
 temp=zero
#endif
#endif
! gridding
!%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
! for each atom, find the closest gridpoint
  if (.not. closest_pt_found) call __NM(find_closest_pt)(xcen, ycen, zcen, nx, ny, nz)
!%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
! loop over all points in the vicinity of the closest point (defined by distance) 
  do l=1, natom ! this loop should be parallelized
   xpt=r(1,l)
   ypt=r(2,l)
   zpt=r(3,l)
!
!  write(777,*) radius(l), q(l) ! aa
!  write(888,*) r(:,l), radius(l), closest_pt(:,l) ! aa; coords correct
! precomputation of parameters for the smoothed densities
#ifdef __EPS
   reps=   (radius(l)+eps_padding   );  repsn   =reps    * oo_stdev_eps   ! normalize by stdev
!   r2epsn   =repsn   **2
   rmax2eps   =(cutoff_eps   +reps   )**2
#ifdef __DEBUG
 __OUT('Maximum radius for gridding epsilon for atom', l, 'is', sqrt(rmax2eps))
#endif
#endif
#ifdef __KAPPA
   rkappa= (radius(l)+kappa_padding );  rkappan =rkappa  * oo_stdev_kappa
!   r2kappan =rkappan **2
   rmax2kappa =(cutoff_kappa +rkappa )**2
#endif
#ifdef __RHS
   rcharge=(charge_radius_scale*radius(l)+charge_padding);  rchargen=rcharge * oo_stdev_charge
!   r2chargen=rchargen**2
   rmax2charge=(cutoff_charge+rcharge)**2
#ifdef __NORMALIZE_FILTER
   fnorm=zero
#endif
#ifdef __DEBUG
 __OUT('Maximum radius for gridding charge for atom', l, 'is', sqrt(rmax2charge))
#endif
! compute nominal charge density ( nominal because it will not be accurate on the grid and will need correction )
! note that this procedure holds only if rcharge > 0 ; in the case rcharge -> 0, note that we are actually
! computing [ qn * G(r) ] below, so we can take the limit of this expression (which could also be used
! if r is infinitesimal but positive
   if ( rchargen .gt. TOL ) then ! note normalization by stdev
    qn=q(l) * three / (four * pi * rcharge **3 ) ! so that the density qn integrated over the sphere gives the charge q(l)
   else
    qn=q(l)
   endif
!
#endif

#ifdef __SURF
   rsurf  =(radius(l)+surf_padding  );  rsurfn  =rsurf   * oo_stdev_surf
!   r2surfn  =rsurfn  **2
   rmax2surf  =(cutoff_surf  +rsurf  )**2
#endif
!
   do kdir=-1,1,2 ! directions 
    k=closest_pt(3,l)+(kdir+1)/2; ! when kdir = 1, shift to the the right relative to closest point, but not when kdir=-1
#ifdef __EPS
    qepsk=.true.;
#endif
#ifdef __KAPPA
    qkappak=.true.;
#endif
#ifdef __RHS
    qchargek=.true.;
#ifdef __NORMALIZE_FILTER
    klim(kdir)=kdir*k
#endif
#endif
#ifdef __SURF
    qsurfk=.true.
#endif
    do
! z-grid OOB test:
     if ((k.ge.nz).or.(k.le.1)) then 
      call warning(whoami, 'SMOOTHED MOLECULE CROSSES Z-GRID BOUNDARY.',0)
      call warning(whoami, 'ATOM #'//itoa(l)//' located at ('//trim(ftoa(xpt))//trim(ftoa(ypt))//trim(ftoa(zpt))//'); gridpoint '//itoa(k)//' of '//itoa(nz),0)
      exit
     endif
!
     dz2=(zcen(k)-zpt)**2
!     k range test:
#ifdef __EPS
     if (qepsk)    qepsk=(dz2.lt.rmax2eps)
#endif
#ifdef __KAPPA
     if (qkappak)  qkappak=(dz2.lt.rmax2kappa)
#endif
#ifdef __RHS
     if (qchargek) then
      qchargek=(dz2.lt.rmax2charge)
#ifdef __NORMALIZE_FILTER
      klim(kdir)=max(klim(kdir), kdir*k) ! note that klim(-1) will be negative
#endif
     endif
#endif
#ifdef __SURF
     if (qsurfk)   qsurfk=(dz2.lt.rmax2surf  )
#endif
!
     qanyk = & 
#ifdef __EPS
&     qepsk .or. &
#endif
#ifdef __KAPPA
&     qkappak .or. &
#endif
#ifdef __RHS
&     qchargek .or. &
#endif
#ifdef __SURF
&     qsurfk .or. &
#endif
&     .false.
!
     if (.not.( qanyk )) exit
!
     do jdir=-1,1,2 
      j=closest_pt(2,l)+(jdir+1)/2;
#ifdef __EPS
      qepsj=qepsk; 
#endif
#ifdef __KAPPA
      qkappaj=qkappak;
#endif
#ifdef __RHS
      qchargej=qchargek 
#ifdef __NORMALIZE_FILTER
      jlim(jdir)=jdir*j
#endif
#endif
#ifdef __SURF
      qsurfj=qsurfk
#endif
      do
! y-grid OOB test:
       if ((j.ge.ny).or.(j.le.1)) then 
        call warning(whoami, 'SMOOTHED MOLECULE CROSSES Y-GRID BOUNDARY.',0)
        call warning(whoami, 'ATOM #'//itoa(l)//' located at ('//trim(ftoa(xpt))//trim(ftoa(ypt))//trim(ftoa(zpt))//'); gridpoint '//itoa(j)//' of '//itoa(ny),0)
        exit
       endif
!
       dzdy2=dz2+(ycen(j)-ypt)**2
!     j range test:
#ifdef __EPS
       if (qepsj)    qepsj=(dzdy2.lt.rmax2eps)
#endif
#ifdef __KAPPA
       if (qkappaj)  qkappaj=(dzdy2.lt.rmax2kappa)
#endif
#ifdef __RHS
       if (qchargej) then 
       qchargej=(dzdy2.lt.rmax2charge)
#ifdef __NORMALIZE_FILTER
       jlim(jdir)=max(jlim(jdir), jdir*j) ! note that jlim(-1) will be negative
#endif
       endif
#endif
#ifdef __SURF
       if (qsurfj)   qsurfj=(dzdy2.lt.rmax2surf  )
#endif
       qanyj = &
#ifdef __EPS
&     qepsj .or. &
#endif
#ifdef __KAPPA
&     qkappaj .or. &
#endif
#ifdef __RHS
&     qchargej .or. &
#endif
#ifdef __SURF
&     qsurfj .or. &
#endif
&     .false.
!
       if (.not.( qanyj )) exit
!
       do idir=-1,1,2 
        i=closest_pt(1,l)+(idir+1)/2;
#ifdef __EPS
        qepsi=qepsj;
#endif
#ifdef __KAPPA
        qkappai=qkappaj;
#endif
#ifdef __RHS
        qchargei=qchargej;
#ifdef __NORMALIZE_FILTER
       ilim(idir)=idir*i
#endif
#endif
#ifdef __SURF
        qsurfi=qsurfj
#endif
        do
! x-grid OOB test:
         if ((i.ge.nx).or.(i.le.1)) then 
          call warning(whoami, 'SMOOTHED MOLECULE CROSSES X-GRID BOUNDARY.',0)
          call warning(whoami, 'ATOM #'//itoa(l)//' located at ('//trim(ftoa(xpt))//trim(ftoa(ypt))//trim(ftoa(zpt))//'); gridpoint '//itoa(i)//' of '//itoa(nx),0)
          exit
         endif
!
         dzdydx2=dzdy2+(xcen(i)-xpt)**2
!     i range test:
#ifdef __EPS
         if (qepsi)    qepsi=(dzdydx2.lt.rmax2eps)
#endif
#ifdef __KAPPA
         if (qkappai)  qkappai=(dzdydx2.lt.rmax2kappa)
#endif
#ifdef __RHS
         if (qchargei) then
          qchargei=(dzdydx2.lt.rmax2charge)
#ifdef __NORMALIZE_FILTER
          ilim(idir)=max(ilim(idir), idir*i) ! note that ilim(-1) will be negative
#endif
         endif
#endif
#ifdef __SURF
         if (qsurfi)   qsurfi=(dzdydx2.lt.rmax2surf  )
#endif
         qanyi = &
#ifdef __EPS
&         qepsi .or. &
#endif
#ifdef __KAPPA
&         qkappai .or. &
#endif
#ifdef __RHS
&         qchargei .or. &
#endif
#ifdef __SURF
&         qsurfi .or. &
#endif
&         .false.
         if (.not.( qanyi )) exit
         d=sqrt(dzdydx2)
!
#ifndef __erf
#define __erf erf
#endif
#define __SMOOTH_GAUSS(__A,__B,__C)half * ( __erf (__A) - __erf (__B) ) + osq2pi*( exp(-(__A)**2) - exp(-(__B)**2 ) ) /(__C)
#ifdef __REGULARIZE
#define __SMOOTH_GAUSS_C0(__A,__B) half * ( __erf (__A) - __erf (__B) ) - osq2pi* exp( -half * ((__A)**2+(__B)**2)) \
        * osq2 * ((__A) - (__B)) * (two+third*(half * ((__A)**2-(__B)**2))**2)
#endif
#ifndef __TRUNCATEVAL
#define __TRUNCATEVAL 1.0
#endif
!#undef __TRUNCATESUMS
#ifdef __EPS
! grid epsilon %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
         if (qepsi &
#ifdef __TRUNCATESUMS
                     .and. ( eps(i,j,k) .lt. __TRUNCATEVAL   ) &
#endif
         ) then ! do not compute if cutoff exceeded in previous iteration
! compute atomic contribution to mesh point
           d2=d*oo_stdev_eps ; e  = osq2 * (d2 + repsn) ; e2= osq2 * (d2 - repsn)
!
#ifdef __REGULARIZE
           if ( d2 .lt. TOL ) then ! Taylor expansion for exponentials
            val=__SMOOTH_GAUSS_C0(e,e2)
           else
#endif
            val=__SMOOTH_GAUSS(e,e2,d2)
#ifdef __REGULARIZE
           endif
#endif
#ifdef __DDEBUG
       __OUT('Atom', l, 'makes a contribution of', val, 'to eps array at point', i, j, k)
#endif
!
           __INCR(eps(i,j,k), val) ! scale to correct levels later
!
! this is the convolution of a normalized gaussian with stdev sigma with a function that changes across the boundary of
! a sphere of the given atomic radius (function values depend on the property: charge, surf, kappa, eps)
         endif ! epsilon
#endif
#ifdef __KAPPA
! grid kappa %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
         if (qkappai &
#ifdef __TRUNCATESUMS
                     .and. ( kappa(i,j,k) .lt. __TRUNCATEVAL   ) &
#endif
         ) then ! do not compute if cutoff exceeded in previous iteration
! compute atomic contribution to mesh point
           d2=d*oo_stdev_kappa ; e  = osq2 * (d2 + rkappan) ; e2= osq2 * (d2 - rkappan)
!
#ifdef __REGULARIZE
           if ( d2 .lt. TOL ) then ! Taylor expansion for exponentials
            val=__SMOOTH_GAUSS_C0(e,e2)
           else
#endif
            val=__SMOOTH_GAUSS(e,e2,d2)
#ifdef __REGULARIZE
           endif
#endif
!
           __INCR(kappa(i,j,k), val)
         endif ! kappa
#endif
#ifdef __RHS
! grid charges %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
         if (qchargei) then ! do not compute if cutoff exceeded in previous iteration
! compute atomic contribution to mesh point
           d2=d*oo_stdev_charge ; e  = osq2 * (d2 + rchargen) ; e2= osq2 * (d2 - rchargen)
!
           if (rchargen .gt. TOL) then
#ifdef __REGULARIZE
            if ( d2 .lt. TOL ) then ! Taylor expansion for exponentials
             val=__SMOOTH_GAUSS_C0(e,e2)
            else
#endif
             val=__SMOOTH_GAUSS(e,e2,d2)
#ifdef __REGULARIZE
        endif
#endif
           else ! Gaussian asymptote
            val =  (osq2pi*oo_stdev_charge)**3 * exp(-half*d2**2) * (one + tenth * rchargen**2 * (d2**2 - three))
           endif
#ifdef __DEBUG
       __OUT('Atom', l, 'makes a contribution of', val, 'to rhs array at point', i, j, k)
#endif
!
#ifdef __NORMALIZE_FILTER
           temp(i,j,k) = val * qn
           __INCR(fnorm, val * dxcor(i) * dycor(j) * dzcor(k))
#else
           __INCR(rhs(i,j,k), val * qn) ! qn is nominal charge density: q / ( 4/3pi r^3 ), or q(l) [if unit mass]
#endif
         endif ! charge
#endif
#ifdef __SURF
! grid surface %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
         if (qsurfi &
! this is probably not a good idea if the surface derivatives are needed
!#ifdef __TRUNCATESUMS
!                     .and. ( rho(i,j,k) .lt. __TRUNCATEVAL   ) &
!#endif
         ) then ! do not compute if cutoff exceeded in previous iteration
! compute atomic contribution to mesh point
           d2=d*oo_stdev_surf ; e  = osq2 * (d2 + rsurfn) ; e2= osq2 * (d2 - rsurfn)
!
#ifdef __REGULARIZE
           if ( d2 .lt. TOL ) then ! Taylor expansion for exponentials
            val=__SMOOTH_GAUSS_C0(e,e2)
           else
#endif
            val=__SMOOTH_GAUSS(e,e2,d2)
#ifdef __REGULARIZE
           endif
#endif
!
           __INCR(rho(i,j,k), val) ! density: 1 inside sphere, 0 outside sphere
!
         endif ! surface
#endif
!
         i=i+idir
        enddo ! over i
       enddo ! idir changes from -1 to 1
!
       j=j+jdir
      enddo
     enddo ! jdir changes from -1 to 1
!
     k=k+kdir
    enddo
   enddo ! kdir changes from -1 to 1
!if (l.eq.100) exit ! aa -- grid a few atoms

#ifdef __RHS
#ifdef __NORMALIZE_FILTER
  if (fnorm > (__ERRTOL) .and. normalize_charge_support ) then ; fnorm=one/fnorm; else ; fnorm=one; endif
  do k=-klim(-1), klim(1)
   do j=-jlim(-1), jlim(1)
    do i=-ilim(-1), ilim(1)
     __INCR(rhs(i,j,k), temp(i,j,k) * fnorm )
     temp(i,j,k)=0d0
  enddo ; enddo ; enddo
#endif
#endif

  enddo ! over all atoms
!
! 3) Need to scale gridded coefficients so that they add up correctly
!    The most straightforward and, perhaps, correct way to do this is
!    to keep track of the grid points that support a given charge, and 
!    scale all of them uniformly so that the charge density integrated over this support 
!    integrates to the charge.
!    Another approach, which is adopted below, is to scale all of the 
!    grid values uniformly so that the charge density integrated over the entire domain
!    adds up to the total charge
!%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
#ifdef __RHS
! scale charges uniformly
  qn=0d0  ! total grid charge
#endif
#ifdef __EPS
! scaling factors for kappa and eps
  d =eps_scale*(eps_solute-eps_solvent)
  e =eps_solvent*eps_scale
#endif
#ifdef __KAPPA
! scaling factors for kappa and eps
  d2=kappa_scale*(kappa_solute-kappa_solvent)
  e2=kappa_solvent*kappa_scale
#endif
!
  do k=2, nz-1 
   dz2=dzcor(k)
   do j=2, ny-1 
    dzdy2=dz2*dycor(j)
    do i=2, nx-1
!
#ifdef __RHS
     __INCR( qn , rhs(i,j,k) * dxcor(i) * dzdy2 ) ! charge integral
#endif
!
! scale rho, eps and kappa below
!%%%%%%%%%%%%%%%%%%%%%%%%%
#ifdef __SURF
! surface
!     if (rho(i,j,k).gt.one) rho(i,j,k)=one
     rho(i,j,k)=min(rho(i,j,k),one)
#endif
#ifdef __EPS
! dielectric
!     if (eps(i,j,k).gt.one) eps(i,j,k)=one
#ifdef __MAXONE
     eps(i,j,k)=min(eps(i,j,k),one)
#endif
     eps(i,j,k)=eps  (i,j,k) * d  + e
#endif
#ifdef __KAPPA
! ionic strength
!     if (kappa(i,j,k).gt.one) kappa(i,j,k)=one 
#ifdef __MAXONE
     kappa(i,j,k)=min(kappa(i,j,k),one)
#endif
     kappa(i,j,k)=kappa(i,j,k) * d2 + e2
#endif
!
!%%%%%%%%%%%%%%%%%%%%%%%%%
    enddo
#ifdef __EPS
#ifdef __MAXONE
    eps(1,j,k)=min(eps(1,j,k),one)
    eps(nx,j,k)=min(eps(nx,j,k),one)
#endif
    eps(1,j,k)    = eps(1,j,k)*d     + e
    eps(nx,j,k)   = eps(nx,j,k)*d    + e
#endif
#ifdef _KAPPA
#ifdef __MAXONE
    kappa(1,j,k)=min(kappa(1,j,k),one)
    kappa(nx,j,k)=min(kappa(nx,j,k),one)
#endif
    kappa(1,j,k)  = kappa(1,j,k)*d2  + e2
    kappa(nx,j,k) = kappa(nx,j,k)*d2 + e2
#endif
   enddo
!
   do i=1,nx
#ifdef __EPS
#ifdef __MAXONE
    eps(i,1,k)=min(eps(i,1,k),one)
    eps(i,ny,k)=min(eps(i,ny,k),one)
#endif
    eps(i,1,k)    = eps(i,1,k)*d     + e
    eps(i,ny,k)   = eps(i,ny,k)*d    + e
#endif
#ifdef _KAPPA
#ifdef __MAXONE
    kappa(i,1,k)=min(kappa(i,1,k),one)
    kappa(i,ny,k)=min(kappa(i,ny,k),one)
#endif
    kappa(i,1,k)  = kappa(i,1,k)*d2  + e2
    kappa(i,ny,k) = kappa(i,ny,k)*d2 + e2
#endif
   enddo
!
  enddo
!
  do j=1,ny ; do i=1,nx
#ifdef __EPS
#ifdef __MAXONE
   eps(i,j,1)=min(eps(i,j,1),one)
   eps(i,j,nz)=min(eps(i,j,nz),one)
#endif
   eps(i,j,1)   = eps(i,j,1)*d    + e;      eps(i,j,nz)   = eps(i,j,nz)*d    + e
#endif
#ifdef _KAPPA
#ifdef __MAXONE
   kappa(i,j,1)=min(kappa(i,j,1),one)
   kappa(i,j,nz)=min(kappa(i,j,nz),one)
#endif
   kappa(i,j,1) = kappa(i,j,1)*d2 + e2;     kappa(i,j,nz) = kappa(i,j,nz)*d2 + e2
#endif
  enddo     ; enddo
!
#ifdef __RHS
  d=sum(q)
  if (abs(qn-d).gt.__FERRTOL) then
   call warning(whoami, 'GRID CHARGE DENSITY INTEGRAL IS '//trim(ftoa(qn))//', AND THE TOTAL CHARGE IS '//ftoa(d),0)
  endif
#ifdef __PRESERVE_GLOBAL_CHARGE
  if (preserve_total_charge) then
   __MESG(whoami, 'RESCALING GRID DENSITY TO MATCH TOTAL CHARGE.')
   __SCALE(rhs, charge_scale * d / qn); ! preserve total charge and apply charge scaling, if any
  endif
#else
! invert the sign to match the definition of the Poisson problem
  __SCALE(rhs, charge_scale)
#endif
#endif
!%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

! done !

  end subroutine __NM(_NAME)
#undef __E
#undef __K
#undef __R
#undef __S
#undef _NAME