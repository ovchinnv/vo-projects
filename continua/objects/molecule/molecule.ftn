#define __CONTEXT __MOLCTX
#define _N molecule
module _N
 use system
 __DEP_OUTPUT
 __DEP_PARSER
 __DEP_CONST
 __IMPNONE
!
 bool, private :: molecule_initialized=.false.

 float, private, allocatable :: epsatom(:) ! relative dielectric as a function of atom (not currently used)
!
!
 int, private, allocatable :: closest_pt(:,:)
 float, public, pointer :: rho(:,:,:)         ! surface 'density', the isosurfaces of which are used to assign the molecular surface
!
 float, private, parameter :: osq2=one/sqrt2
 float, private, parameter :: osq2pi=one/sqrt(twopi)
!
!************************************** DEFAULT VALUES
 __FPPARDEF(eps_solute, 2.5d0)
 __FPPARDEF(eps_solvent, 78d0)
 __FPPARDEF(kappa_solute, 0d0)
 __FPPARDEF(kappa_solvent, 0.15d0)
!
 float, private, parameter :: cutoff_stdev_default    =3d0, & ! dimensionless (see above)
&                             padding_default         =0d0, & ! units of radius
&                             stdev_default           = - 1d0 ! MEANS: determine from grid in grid_data
!
 float, private :: cutoff_eps    ! grid smoothing cutoff normalized by standard deviation of gaussian (epsilon)
 float, private :: cutoff_kappa
 float, private :: cutoff_charge
 float, private :: cutoff_surf
!
 __FPPARDEF(cutoff_eps_stdev,   cutoff_stdev_default)
 __FPPARDEF(cutoff_kappa_stdev, cutoff_stdev_default)
 __FPPARDEF(cutoff_charge_stdev,cutoff_stdev_default)
 __FPPARDEF(cutoff_surf_stdev,  cutoff_stdev_default)
!
 float, private :: oo_stdev_eps! , oo_stdev_eps2 ! std. dev. of the gaussian filter (epsilon)
 float, private :: oo_stdev_kappa! , oo_stdev_kappa2
 float, private :: oo_stdev_charge! , oo_stdev_charge2
 float, private :: oo_stdev_surf! , oo_stdev_surf2
!
 __FPPARDEF(stdev_eps,   stdev_default)
 __FPPARDEF(stdev_kappa, stdev_default)
 __FPPARDEF(stdev_charge,stdev_default)
 __FPPARDEF(stdev_surf,  stdev_default)
!
 __FPPARDEF(kappa_padding,padding_default)
 __FPPARDEF(charge_padding,padding_default)
 __FPPARDEF(eps_padding,padding_default)
 __FPPARDEF(surf_padding,padding_default)

! permittivity units conversion :
! CHARMM says :
! CCELEC is 1/ (4 pi eps ) in AKMA units, conversion from SI
! units: CCELEC = e*e*Na / (4*pi*eps*1Kcal*1A)
 __FPAR(eps_amber    , 332.0522173d0)
 __FPAR(eps_charmm   , 332.0716d0)
 __FPAR(eps_discover , 332.054d0)
 __FPAR(eps_namd     , 332.0636d0)
!
 __FPPARDEF(temperature, 298d0)
!
!CHARMM uses :     kappa2 = 8*PI*cat*e**2*beta
!    KAPPA2=2530.362733*CONC/TEMP
 __FPAR(kappa_akma , -2530.362733d0)

 __FPPARDEF(eps_scale, one/(eps_charmm*four*pi))
 __FPPARDEF(kappa_scale, kappa_akma/(four*pi*temperature_default))
!
 __FPPARDEF(charge_scale, -one) ! in the MG solver, the equation is  lap(u) = q, but we need lap(u) = -q, i.e. with a negative sign
!
!***************************** subroutines ****************
 public molecule_initialize ! initialize molecular coordinates, radii and charges
 public molecule_ok
 public molecule_read_parameters ! query parser for molecule parameters
 public molecule_center ! translate center to origin
 public molecule_align  ! align principal vectors with coordinate system
 public molecule_dimens ! translate to center
 public molecule_done ! deallocate memory
 public molecule_grid_objects ! public routine used to obtain grid values from this module
 public molecule_compute_bc
 public molecule_ndim ! return number of dimensions (inherited from system)
 public molecule_surface_pointer
!
!**********************************************************
 contains
!********************************************************************
  bool function molecule_ok(); molecule_ok=molecule_initialized;end function molecule_ok
!********************************************************************
  function molecule_surface_pointer()
  float, pointer, dimension(:,:,:) :: molecule_surface_pointer
  nullify(molecule_surface_pointer)
  if (molecule_initialized) then
   if (associated(rho)) molecule_surface_pointer=>rho
  endif
  end function molecule_surface_pointer
!********************************************************************
  subroutine molecule_read_parameters
  int :: l
  __IAM(MOLECULE_READ_PARAMETERS)
  character(len=vartaglen) :: keyword
!  character(len=7), parameter :: fmt='(F10.5)'
  character(len=15), parameter :: fmt='('//realfmt//')'
!
! query parser for parameters 
!
! temperature
#define __LEZEROERR
#define __DEFAULT
#define __VAR	temperature
#define __NAME	Temperature
#include "mol_macro1.src"
#undef __LEZEROERR
!
#define __WARNIFMISSING
#define __MINUSWRN
! solvent dielectric
#define __VAR	eps_solvent
#define __NAME	Solvent dielectric
#include "mol_macro1.src"
!
! solute dielectric
#define __VAR	eps_solute
#define __NAME	Solute dielectric
#define __BYATOM
#include "mol_macro1.src"
#undef  __BYATOM
!
! check for epsilon scaling (adapted from elec code):
#define  __VAR eps_scale
  if (existtag_nocase(__STRING(__VAR),__STRING(__CONTEXT))) then
   keyword=getval_nocase(__STRING(__VAR),__STRING(__CONTEXT))
  else
   __OUT('Dielectric permittivity scaling not specified.')
   keyword='CHARMM'
  endif
  call toupper(keyword)
  select case(keyword)
   case('CHARMM','CHM','CHRM','CHARM','CH') ; __VAR=one/(eps_charmm*four*pi)   ; __OUT('Using CHARMM AKMA permittivity scaling');
   case('NAMD','NAMD2')                     ; __VAR=one/(eps_namd*four*pi)     ; __OUT('Using NAMD AKMA permittivity scaling');
   case('AMBER','AMB','AM')                 ; __VAR=one/(eps_amber*four*pi)    ; __OUT('Using AMBER AKMA permittivity scaling');
   case('DISCOVER','DISC','DSC','DI')       ; __VAR=one/(eps_discover*four*pi) ; __OUT('Using DISCOVER AKMA permittivity scaling');
   case('NONE', 'ONE')                      ; __VAR=one                        ; __OUT('Assuming permittivity has correct units (no scaling applied)');
   case default                             ; __VAR=atof(keyword)              ; __OUT('Setting permittivity scale to ', __VAR)
  end select
#undef __VAR
!
! check for ionic strength scaling
#define  __VAR kappa_scale
  if (existtag_nocase(__STRING(__VAR),__STRING(__CONTEXT))) then
   keyword=getval_nocase(__STRING(__VAR),__STRING(__CONTEXT))
  else
   __OUT('Ionic strength scaling not specified.')
   keyword='AKMA'
  endif
  call toupper(keyword)
  select case(keyword)
   case('AKMA','CHM','CHRM','CHARM','CHARMM', 'CH') ; __VAR=kappa_akma/(temperature*four*pi) ; __OUT('Using AKMA ionic strength scaling');
   case('NONE', 'ONE')                              ; __VAR=one                              ; __OUT('Assuming ionic strength has correct units (no scaling applied)');
   case default                                     ; __VAR=atof(keyword)                    ; __OUT('Setting ionic strength scale to ', __VAR)
  end select
#ifdef __DEBUG
  __OUT('kappa_scale=',kappa_scale)
#endif
#undef __VAR
!
! charge (rhs) scaling :
#undef __WARNIFMISSING
#define __VAR	charge_scale
#define __NAME	Charge density scaling [-1 for electrostatics]
#include "mol_macro1.src"
#define __WARNIFMISSING
!
! solvent ionic strength
#define __VAR	kappa_solvent
#define __NAME	Solvent molarity
#include "mol_macro1.src"
! solute ionic strength
#define __VAR	kappa_solute
#define __NAME	Solute molarity
#include "mol_macro1.src"
!
!%%%%%%%%%%%%%%%%%%%% padding parameters for grid smoothing %%%%%%%%%%%%%%%%%%%%%%%%%%%%
! charge padding
#undef __LEZEROERR
#define __MINUSERR
#define __VAR	charge_padding
#define __NAME	Charge padding
#include "mol_macro1.src"
! kappa padding
#define __VAR	kappa_padding
#define __NAME	Ionic strength padding
#include "mol_macro1.src"
! epsilon padding
#define __VAR	eps_padding
#define __NAME	Dielectric padding
#include "mol_macro1.src"
! density padding
#define __VAR	surf_padding
#define __NAME	Density padding
#include "mol_macro1.src"
!%%%%%%%%%%%%%% cutoffs beyond which the grid values are assumed to be zero %%%%%%%%%%%%%%%%%%%%%%
! cutoff for dielectric
#define __VAR	cutoff_eps_stdev
#define __NAME	Cutoff for dielectric smoothing
#include "mol_macro1.src"
! cutoff for ionic strength
#define __VAR	cutoff_kappa_stdev
#define __NAME	Cutoff for ionic strength smoothing
#include "mol_macro1.src"
! cutoff for charge 
#define __VAR	cutoff_charge_stdev
#define __NAME	Cutoff for charge smoothing
#include "mol_macro1.src"
! cutoff for density
#define __VAR	cutoff_surf_stdev
#define __NAME	Cutoff for density smoothing
#include "mol_macro1.src"
! GAUSSIAN standard deviations for smoothing %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
#undef __DEFAULT
#define __COMPUTE
!%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
#define __VAR	stdev_charge
#define __NAME	Gaussian stdev for charge smoothing
#include "mol_macro1.src"
!%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
#define __VAR	stdev_kappa
#define __NAME	Gaussian stdev for ionic strength smoothing
#include "mol_macro1.src"
!%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
#define __VAR	stdev_eps
#define __NAME	Gaussian stdev for dielectric smoothing
#include "mol_macro1.src"
!%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
#define __VAR	stdev_surf
#define __NAME	Gaussian stdev for density smoothing
#include "mol_macro1.src"
!
!%%%%%%%%%%%%%%%%%%%%% compute normalized parameters %%%%%%%%%%%%%%%%%%%%%%%%%%%%%
 oo_stdev_charge=1d0/stdev_charge;  oo_stdev_eps=1d0/stdev_eps; oo_stdev_kappa=1d0/stdev_kappa;  oo_stdev_surf=1d0/stdev_surf
! oo_stdev_charge2=oo_stdev_charge**2;oo_stdev_eps2=oo_stdev_eps**2;oo_stdev_surf2=oo_stdev_surf**2;oo_stdev_kappa2=oo_stdev_kappa**2
 cutoff_eps   =cutoff_eps_stdev*stdev_eps
 cutoff_kappa =cutoff_kappa_stdev*stdev_kappa
 cutoff_surf  =cutoff_surf_stdev*stdev_surf
 cutoff_charge=cutoff_charge_stdev*stdev_charge
!%%%%%%%%%%%%%%%%%%%%%%%%%%% done with input parameters %%%%%%%%%%%%%%%%%%%%%%%%%%%
!
  end subroutine molecule_read_parameters
!
!**********************************************************************************
#define _NAME find_closest_pt
  __SUB(_NAME) (xcen, ycen, zcen, nx, ny, nz)
  int, intent(in) :: nx, ny, nz
  int :: i, j, k, l, im1, jm1, km1, ip1, jp1, kp1
  float, intent(in) :: xcen(nx), ycen(ny), zcen(nz)
  float :: xpt, ypt, zpt
  __IAM(__NM(_NAME))
  if (.not.molecule_initialized) call molecule_initialize()
  if (.not.allocated(closest_pt)) allocate(closest_pt(3,natom))
! begin search in the middle (in the future, can start alternatively from existing closest_pt array)
  i=nx/2; j=ny/2; k=nz/2;
!
! process grid centers (may need to do the same for corner grid to compute gradients (which will defined naturally on the corners)  
!
#ifdef __DEBUG
 __OUT('Found', natom, 'atoms.')
#endif
!
  do l=1, natom
!
   xpt=r(1,l)
   ypt=r(2,l)
   zpt=r(3,l)
#ifdef __DEBUG
 __OUT('Processing atom', l, 'with coordinates', xpt, ypt, zpt, 'charge', q(l), 'and radius', radius(l))
#endif
!%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% x-
   if ( xpt.gt.xcen(i) ) then 
    do
     ip1=i+1
     if (ip1.eq.nx) then
      call warning(whoami, 'MOLECULE INTERSECTS RIGHT X-GRID BOUNDARY.',-1)
      closest_pt(1,l)=i
      exit
     elseif (xpt.le.xcen(ip1)) then
      closest_pt(1,l)=i
      exit
     endif
     i=ip1
    enddo
!
   else ! xpt.le.xcen(i)
    do
     im1=i-1
     if (im1.eq.1) then
      call warning(whoami, 'MOLECULE INTERSECTS LEFT X-GRID BOUNDARY.',-1)
      closest_pt(1,l)=im1
      exit
     elseif (xpt.ge.xcen(im1)) then
      closest_pt(1,l)=im1
      exit
     endif
     i=im1
    enddo
   endif
!%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% y-
   if ( ypt.gt.ycen(j) ) then 
    do
     jp1=j+1
     if (jp1.eq.ny) then
      call warning(whoami, 'MOLECULE INTERSECTS RIGHT Y-GRID BOUNDARY.',0)
      closest_pt(2,l)=j
      exit
     elseif (ypt.le.ycen(jp1)) then
      closest_pt(2,l)=j
      exit
     endif
     j=jp1
    enddo
!
   else ! ypt.le.ycen(j)
    do
     jm1=j-1
     if (jm1.eq.1) then
      call warning(whoami, 'MOLECULE INTERSECTS LEFT Y-GRID BOUNDARY.',0)
      closest_pt(2,l)=jm1
      exit
     elseif (ypt.ge.ycen(jm1)) then
      closest_pt(2,l)=jm1
      exit
     endif
     j=jm1
    enddo
   endif
!%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% z-
   if ( zpt.gt.zcen(k) ) then 
    do
     kp1=k+1
     if (kp1.eq.nz) then
      call warning(whoami, 'MOLECULE INTERSECTS RIGHT Z-GRID BOUNDARY.',0)
      closest_pt(3,l)=k
      exit
     elseif (zpt.le.zcen(kp1)) then
      closest_pt(3,l)=k
      exit
     endif
     k=kp1
    enddo
!
   else ! zpt.le.zcen(k)
    do
     km1=k-1
     if (km1.eq.1) then
      call warning(whoami, 'MOLECULE INTERSECTS LEFT Z-GRID BOUNDARY.',0)
      closest_pt(3,l)=km1
      exit
     elseif (zpt.ge.zcen(km1)) then
      closest_pt(3,l)=km1
      exit
     endif
     k=km1
    enddo
   endif
!
#ifdef __DEBUG
  __OUT('The closest grid point to atom is', closest_pt(1,l), closest_pt(2,l), closest_pt(3,l))
#endif
  enddo ! over all atoms
  end __SUB(_NAME)
#undef _NAME
!**********************************************************************************
#define __SURF
#// 1 0 0 0
#include "molecule_grid_objects.src"
#define __EPS
#// 1 1 0 0
#include "molecule_grid_objects.src"
#define __KAPPA
#// 1 1 1 0
#include "molecule_grid_objects.src"
#define __RHS
#// 1 1 1 1
#include "molecule_grid_objects.src"

#undef __KAPPA
#// 1 1 0 1
#include "molecule_grid_objects.src"
#undef __EPS
#// 1 0 0 1
#include "molecule_grid_objects.src"
#undef __RHS
#define __KAPPA
#// 1 0 1 0
#include "molecule_grid_objects.src"

#undef __SURF
#undef __KAPPA
#//repeat above
#define __EPS
#// 0 1 0 0
#include "molecule_grid_objects.src"
#define __KAPPA
#// 0 1 1 0
#include "molecule_grid_objects.src"
#define __RHS
#// 0 1 1 1
#include "molecule_grid_objects.src"

#undef __KAPPA
#// 0 1 0 1
#include "molecule_grid_objects.src"
#undef __EPS
#// 0 0 0 1
#include "molecule_grid_objects.src"
#define __KAPPA
#// 0 0 1 1
#include "molecule_grid_objects.src"
#undef __RHS
#// 0 0 1 0
#include "molecule_grid_objects.src"
!
  subroutine molecule_grid_objects( xcen, ycen, zcen, dxcor, dycor, dzcor, eps, kappa, rhs, qeps, qkappa, qrhs, nx, ny, nz )
  float, dimension(:,:,:) :: eps, kappa, rhs
  float, dimension(:), intent(in) :: xcen, ycen, zcen, dxcor, dycor, dzcor
  int, intent(in) :: nx,ny,nz
  bool, intent(in) :: qeps, qkappa, qrhs
#define __GRID(__WHAT, ... ) call __CONCAT(molecule_grid_objects, __WHAT) (xcen, ycen, zcen, dxcor, dycor, dzcor, __VA_ARGS__, nx, ny, nz)
  if (qeps) then
   if (qkappa) then
    if (qrhs) then
     __GRID(_eps_kappa_rhs, eps, kappa, rhs)
    else
     __GRID(_eps_kappa, eps, kappa)
    endif
   else
    if (qrhs) then
     __GRID(_eps_rhs, eps, rhs)
    else
     __GRID(_eps, eps)
    endif
   endif
  else
   if (qkappa) then
    if (qrhs) then
     __GRID(_kappa_rhs, kappa, rhs)
    else
     __GRID(_kappa, kappa) 
    endif
   else
    if (qrhs) then
     __GRID(_rhs, rhs)
    else
! nothing to do
    endif
   endif
  endif
!
  end subroutine molecule_grid_objects
!**********************************************************************************
  subroutine molecule_compute_bc(d, bctype, bcloc, xcor, ycor, zcor, xcen, ycen, zcen, nx, ny, nz, ok)
  use fieldbcdef
  float, dimension(:,:), intent(inout) :: d ! BC data
  float, dimension(:), intent(in) :: xcen,ycen,zcen ! grid centers
  float, dimension(:), intent(in) :: xcor,ycor,zcor ! grid corners
  int, intent(inout) :: bctype
  int, intent(in) :: bcloc, nx, ny, nz
  bool, intent(inout) :: ok
  float :: xpt, ypt, zpt, dz2, dy2, dr, rad, charge
!
! automatic boundary resolution adapted from bc_apply in state
  int :: ib, ie, jb, je, kb, ke
  int*1 :: di, dj, omdi, omdj
  int :: i, j, k, l
!
  __IAM(molecule_compute_bc)
!
  ok=.false.
! for now, only supporting Debye-Huckel Dirichlet boundary conditions at ghost point
  if (.not.molecule_initialized) call molecule_initialize()
! make sure we have radii
  if (.not.system_radii_initialized) then
    __WRN(whoami, 'Atomic radii not initialized. Abort.')
    return
  endif
!    preset indices:
!
  ib=2; ie=nx-1; di=1 ! limiting indices of inner points 
  jb=2; je=ny-1; dj=1
  kb=2; ke=nz-1;
!
  select case(bcloc)
    case(left);
     ib=1; ie=1; di=0
    case(right);
     ib=nx; ie=nx ; di=0
    case(bottom);
     jb=1; je=1 ; dj=0
    case(top);
     jb=ny; je=ny ; dj=0
    case(front);
     kb=1; ke=1 ;
    case(back);
     kb=nz; ke=nz ;
    case default;
     ke=0 ! set invalid indices so that no loops are executed; better than early return
  end select ! which boundary
!
  call message(whoami, 'Will use Debye-Huckel superposition for boundary "'//bc_names(bcloc)//'"')
!
  omdi=1-di
  dj=di*dj
  omdj=1-dj

  d=zero

  do l=1, natom ! this loop should be parallelized
   xpt=r(1,l)
   ypt=r(2,l)
   zpt=r(3,l)
!   rad=radius(l)+kappa_padding ! not sure this is the best radius
   rad=radius(l)+eps_padding ! not sure this is the best radius
   charge=q(l)
!
   do k=kb, ke
    dz2=(zcen(k)-zpt)**2
    do j=jb, je
     dy2=dz2+(ycen(j)-ypt)**2
     do i=ib, ie
      dr=sqrt(dy2+(xcen(i)-xpt)**2)
      __INCR(d(di*i+omdi*j, dj*j+omdj*k), charge*exp(-kappa_scale*kappa_solvent*(dr-rad))/((one+kappa_scale*kappa_solvent*rad)*dr))
     enddo
    enddo
   enddo
!
  enddo ! over atoms

  __SCALE(d, one/(four*pi*eps_scale*eps_solvent)) ! recheck scaling
  bctype=dirichletg
  ok=.true.
!
  end subroutine molecule_compute_bc
!**********************************************************************************
  subroutine molecule_initialize()
  call system_initialize() ; molecule_initialized=system_initialized
#ifdef __DEBUG
  __MESG('molecule_initialize', molecule_initialized)
#endif
  end subroutine molecule_initialize
!***********************************************************************************
  subroutine molecule_center(rcen, qmass)
  use sysmanip
  use sysinfo
  float :: dimens(ndim,3)
  float :: rcen(3)
  bool :: qmass
!
  if (.not. molecule_initialized) call molecule_initialize()
!
  dimens=sysinfo_dimens(qmass,(/iminusone/)) ! last argument is an array of length 1
  call sysmanip_translate(rcen-dimens(1:ndim,1),(/iminusone/))
!
  end subroutine molecule_center
!***********************************************************************************
  subroutine molecule_align(qmass)
  use sysmanip
  use sysinfo
  bool :: qmass
!
  if (.not. molecule_initialized) call molecule_initialize()
!
  call sysmanip_align_pc(qmass,(/iminusone/),(/iminusone/))! align the principal components of the molecule with the Cartesian vectors  
!
  end subroutine molecule_align
!***********************************************************************************
  function molecule_dimens()
  use sysinfo
  float :: molecule_dimens(ndim,3)
  float :: pad
!
  if (.not. molecule_initialized) call molecule_initialize()
!
  molecule_dimens=sysinfo_dimens(.false.,(/iminusone/)) ! last argument is an array of length 1
! increase maximum coordinate values computed above by the padding
  pad=max(eps_padding+cutoff_eps, kappa_padding+cutoff_kappa, charge_padding+cutoff_charge, surf_padding+cutoff_surf)
  molecule_dimens(:,2)=molecule_dimens(:,2)-pad;
  molecule_dimens(:,3)=molecule_dimens(:,3)+pad;
!
  end function molecule_dimens
!
!***********************************************************************************
  int function molecule_ndim()
  molecule_ndim=ndim
  end function molecule_ndim
!***********************************************************************************
  subroutine molecule_done()
  molecule_initialized=.false.
  if (allocated(closest_pt)) deallocate(closest_pt)
  if (associated(rho)) deallocate(rho)
  call system_done()
  end subroutine molecule_done
!***********************************************************************************
end module molecule
