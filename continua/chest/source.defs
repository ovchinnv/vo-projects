#if defined(__BINDC)
#ifdef __SINGLE
#define __FCFLOAT real(c_float)
#define __CFLOAT float
#else // __BINDC
#define __FCFLOAT real(c_double)
#define __CFLOAT double
#endif // __BINDC
#define __CINT int
#define __CCHAR char
#define __FCCHAR character(c_char)
#define __CBOOL _Bool
#define __FCBOOL logical(c_bool)
#define __FCINT integer(c_int)

#ifdef __CUDA
#define __CUFLOAT float
#define __FCUFLOAT real(c_float)

#define __COPY_HOST_DEVICE(_WHAT) call CopyHostToDevice_C(_WHAT, __CONCAT(CU,_WHAT), size(_WHAT))
#define __COPY_DEVICE_HOST(_WHAT) call CopyDeviceToHost_C(_WHAT, __CONCAT(CU,_WHAT), size(_WHAT))
#define __ALLOC_DEV_MEM(_WHAT) call AllocDevMem_C(__CONCAT(CU,_WHAT), size(_WHAT))
#define __FREE_DEV_MEM(_WHAT) call FreeDevMem_C(__CONCAT(CU,_WHAT))

#define __CUDBG(...) __MESG(whoami, '***CUDA DEBUG***', __VA_ARGS__)
#//define __CUDBG ! CUDA_DEBUG !
#endif

#define _BSIZE_X 16
#define _BSIZE_Y 8
#define _BSIZE_Z 1

#//tile dimensions for boundary condition kernels
#define _BCDIM_X 16
#define _BCDIM_Y 16
#define _BCDIM_Z 16

#//tile dimensions for coarsening kernels
#define _BCRSE_X 4
#define _BCRSE_Y 4
#define _BCRSE_Z 4

#define _SX 2 // block size multipliers for Gauss Seidel Red/Black
#define _SY 1

#define _RED 1
#define _BLACK 2
#define _REDBLACK 0 // this will not converge to error tolerance

#define __BCTEX // for using texture cache in BCs ; does not seem to help
#define __MGTEX // for using textures inside multigrid smoother

#else
# // cuda requires bindc
#ifdef __CUDA
#undef __CUDA
#endif
#endif // __BINDC
