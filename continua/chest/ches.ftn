#define __COMMUNICATOR __CHESCOMM
#define __CONTEXT __CHESCTX
#include "setcomm.def"
!
      module ches ! (Cartesian Helmholtz Equation Solver)
! 2010-2012 Victor Ovchinnikov (ovchinnv_at_georgetown_dot_edu)
! Free for academic use
! Most of the source code is distributed 
! under the GNU General Public License
! certain parts of the code are under restricted license
!
!    include other modules
      use datatypes
      use state     ! main physical variables
      __DEP_PARSER    ! parses input unit and stores input parameters
      use SIZE      ! basic size information
      use grid      ! grid module
      __DEP_OUTPUT    ! runtime output
      use object    ! objects that modify problem coefficients
!      use plot3Dio ! output in plot3D (CFD) format; compile as a library, not as a module
      use multigrid ! multigrid solver module
!      use openDXio ! output in openDX format ; not implemented yet
#ifdef __PARALLEL
      __DEP_MULTICOM
#endif
      __IMPNONE
!**************************************************************************************
!     routines:
      public ches_exec
      public ches_init
      public ches_done
      private ches_solve
      private ches_output
!
!     variables:
!
      bool :: ches_initialized=.false.
      __STRING_PAR(ctx,__CONTEXT)
      type(varray3df), pointer, save :: p_, eps_, kappa_, rhs_
      int :: warnlev=-1
!
      contains
!=========================================================================
       subroutine ches_init()
       use fieldbcdef
       int :: nxyz(3)
       __IAM(CHES_INIT)
!
! if running in parallel pass communicator when adding variables (quick and dirty)
#ifdef __CTX
#undef __CTX
#endif
#ifdef __PARALLEL
#define __CTX __COMM, ctx
#else
#define __CTX ctx
#endif
!
       __NULL_COMM_STOP
!
! crude way to make sure only root prints
 __SETWARNLEV
!
! *********************************************************************************************************
! * INITIALIZATION
! *
!    check that the size module is initialized
       if (.not. size_initialized) then
        call warning(whoami, 'Size not initialized. Nothing done.',warnlev)
        return
       endif
!    check that Cartesian grid and metrics are initialized
       if (.not. grid_initialized) then
        call warning(whoami, 'Grid not initialized. Nothing done.',warnlev)
        return
       endif
!    check that the state module is initialized
       if (.not. state_initialized) then
        call warning(whoami, 'State module not initialized. Nothing done.',warnlev)
        return
       endif
!    initialize state variables
       call message(whoami, 'Initializing state variables.');
!
       nullify(p_, eps_, kappa_, rhs_)
       nxyz=(/nx, ny, nz/)
!
! initialize important variables
#define __CHKINIT(_N,_V) if (.not.__CONCAT3(_V,_,%vinit)) then ; __WRN(whoami, 'MISSING INITIALIZATION FOR VARIABLE "'//__STRING(_N)//'"') ; endif
#define __ADDVAR(_N, _D, _V) call state_add3df(__STRING(_N), __STRING(_D), nxyz, __CTX, vptr=__CONCAT(_V,_) ) ;
!
        __ADDVAR(PHI, Electrostatic Potential Field, p)
        __ADDVAR(EPS, Dielectric Field, eps)
        __ADDVAR(KAPPA, Ionic Screening Field, kappa)
        __ADDVAR(RHS, Source Density Field, rhs)
! check to make sure variable is initialized
! add more variables here as needed
!
!    initialize boundary conditions
       call message(whoami, 'Initializing boundary condition arrays for variable "PHI".');
!
       call state_bc_add3df('PHI', left,  __CTX ) ;   call state_bc_add3df('PHI', right, __CTX )
       call state_bc_add3df('PHI', bottom,__CTX ) ;   call state_bc_add3df('PHI', top,   __CTX )
       if (.not.q2D) then
        call state_bc_add3df('PHI', front,__CTX ) ;   call state_bc_add3df('PHI', back,  __CTX )
       endif
!
!    initialization from object :
       if ((eps_%vflag.eq.1) .or. (kappa_%vflag.eq.1) .or. (rhs_%vflag.eq.1)) then
! check that everything else is allocated :
        if (.not.size_initialized) then 
         call warning(whoami, 'Size not initialized.',-1);
        elseif (.not.grid_initialized) then 
         call warning(whoami, 'Grid not initialized.',-1);
        elseif (.not.state_initialized) then
         call warning(whoami, 'State variables not initialized.',-1);
        else
#define __MSGINIT(_N,_V) if (__CONCAT3(_V,_,%vflag).eq.1) then ; __MESG(whoami, 'initializing variable "'//__STRING(_N)//'" from object') ; endif
         __MSGINIT(EPS,eps)
         __MSGINIT(KAPPA,kappa)
         __MSGINIT(RHS,rhs)
         call object_grid_objects( xcen, ycen, zcen, dxcor, dycor, dzcor, eps_%v, kappa_%v, rhs_%v, nx, ny, nz )
         eps_%vinit=.true.
         kappa_%vinit=.true.
         rhs_%vinit=.true.
        endif
!
       endif
!
! make sure 3D fields are initialized
       __CHKINIT(PHI,p)
       __CHKINIT(EPS,eps)
       __CHKINIT(KAPPA,kappa)
       __CHKINIT(RHS,rhs)
!
       if (.not.fatal_warning(__COMM)) ches_initialized=.true.
!
       end subroutine ches_init
!************************************************************************************
       subroutine ches_solve()
!
       character(len=vartaglen) :: solver
!
!    initialize multigrid solver, if requested
!
       __IAM(CHES_SOLVE)
!
__NULL_COMM_STOP
__SETWARNLEV
!    the proper way to terminate run if error occurs on some processors (but not all)
       if (.not. ches_initialized) call warning(whoami, 'CHES module not initialized.',warnlev)
       if (fatal_warning(__COMM)) call terminate(whoami)
!
       if     (existtag_nocase('SOLVER',ctx)) then ; solver=getval_nocase_upper('SOLVER',ctx) ;
#ifdef __DEBUG
       call message(whoami,'SOLVER "'//trim(solver)//'" REQUESTED');
#endif
       else ; ! no solver defined
        call warning(whoami, 'No solver specified. Nothing done.',warnlev+1);
        return
       endif
!
! special case: NONE - skip solution
!
       if (solver.eq.'NONE') return
!
! if still here, attempt to call solver
!
       select case(solver)
!*********************************************************************************!
#define __N MULTIGRID
#define __ARGS p_, eps_, kappa_, rhs_
#include "macro1.def"
!*********************************************************************************!
       case default;
        call warning(whoami, 'Unknown solver '//trim(solver)//' specified. Nothing done.',warnlev);
       end select
!
       end subroutine ches_solve
!*********************************************************************************!
       subroutine ches_output()
       use object, only : object_surface_pointer, object_initialized
       use formats
       use chestio
       use plot3dio
       use opendxio
!
       __IAM(CHES_OUTPUT)
       int :: ifmt=plot3d
       bool :: qbin ! whether binary output is used
       float, pointer, dimension(:,:,:) :: surf, eps, kappa, rhs, p
       int :: i
       bool :: ok
!
       character(len=vartaglen) :: filename, output_format, output_mode
!
 __NULL_COMM_STOP
 __SETWARNLEV
! macro to add communicator to calls to output routine
       p=>state_get3df('phi', ctx)
       eps=>state_get3df('eps', ctx)
       kappa=>state_get3df('kappa', ctx)
       rhs=>state_get3df('rhs', ctx)
!
       if (existtag_nocase('output_format', ctx)) then 
        output_format=getval_nocase_upper('output_format', ctx);
        ifmt=-999
        do i=1,num_format
         if (output_format.eq.format_name(i)) then 
          ifmt=i
          exit
         endif
        enddo
       endif
!
       if (ifmt.gt.0) then
        call message(whoami,trim(format_name(ifmt))//' format will be used for output');
       else
        call warning(whoami,'Format "'//trim(output_format)//'" is not recognized',warnlev+1)
        return
       endif
!
       if (existtag_nocase('output_mode', ctx)) then
        output_mode=getval_nocase_upper('output_mode', ctx)
        select case(output_mode);
         case('BINARY', 'BIN');
          call message(whoami,'Using binary mode');
          qbin=.true.
         case('ASCII', 'TEXT');
          call message(whoami,'Using ASCII mode');
          qbin=.false.
         case default
          call warning(whoami,'Unknown output mode "'//trim(output_mode)//'". Will use ASCII',warnlev+1);
          qbin=.false.
        end select
       else
        call message(whoami,'Using ASCII mode');
        qbin=.false.
       endif
! process output options using macros
#define __QBIN qbin
#define __XC xcen
#define __YC ycen
#define __ZC zcen
#define __WHAT eps
#define __TAG epsoutput
#define __DESC dielectric
#include "continua/outmacro1.def"
!
#define __WHAT kappa
#define __TAG kappaout
#define __DESC ionic stregth
#include "continua/outmacro1.def"
!
#define __WHAT rhs
#define __TAG rhsoutput
#define __DESC right hand side (source density)
#include "continua/outmacro1.def"
!
#define __WHAT p
#define __TAG phioutput
#define __DESC solution
#include "continua/outmacro1.def"
!
!    check for surface output options
!
       if (existtag_nocase('surfoutput', ctx).or.existtag_nocase('alloutput', ctx)) then
        nullify(surf)
        if (object_initialized) then 
         surf=>object_surface_pointer()
         if (.not.associated(surf)) then
          call warning(whoami, 'Object initialized but shape density is null. Will output zero.',warnlev+1)
          allocate(surf(nx,ny,nz)); surf=0d0
         endif
        else
         call warning(whoami, 'Object not initialized. Shape density is everywhere zero.',warnlev+1)
         allocate(surf(nx,ny,nz)); surf=0d0
        endif
       endif
!
#define __WHAT surf
#define __TAG surfoutput
#define __DESC shape density
#include "continua/outmacro1.def"
!
!    plot five (four in 2D)  variables that correspond to the plot3D "solution"
       if (existtag_nocase('alloutput', ctx)) then
        filename=getval_nocase('alloutput', ctx)
        call message(whoami,'Writing data and solution [EPS(1),K(2),RHS(3),P(4),RHO(5)] to file "'&
&                                                       //filename(1:len_trim(filename))//'"')
        select case(ifmt)
         case(plot3d); 
          call plot3Dwrite_solution(filename,eps,kappa,rhs,p,surf,(/nx/),(/ny/),(/nz/),1,qbin _COMMA __COMM)
        end select
       endif
!
!    destroy surf, if needed
       if (existtag_nocase('surfoutput', ctx).or.existtag_nocase('alloutput', ctx)) then
        if (.not.object_initialized) then ; deallocate(surf)
        elseif (.not.associated(object_surface_pointer())) then ; deallocate(surf)
        endif
       endif
!
! MOVED TO CONTINUUM
!       if (existtag_nocase('gridoutput', ctx)) then
!        filename=getval_nocase('gridoutput', ctx)
!        call message(whoami,'Writing grid to file "'//filename(1:len_trim(filename))//'"');
!        select case(ifmt)
!         case(plot3d); call plot3Dwrite_grid(filename,xcen,ycen,zcen,nx,ny,nz,1,qbin _COMMA __COMM)
!         case(chest);  call chest_write_grid(filename,xcen,ycen,zcen,nx,ny,nz,qbin _COMMA __COMM)
!        end select
!       endif
!
       end subroutine ches_output
!*********************************************************************************!
       subroutine ches_done()
       __IAM(CHES_DONE)
       character(len=vartaglen) :: solver
!
       if (existtag('OBJECT', ctx) .or. existtag('object', ctx)) then 
        if (object_initialized) then 
         call object_done()
        endif
       endif
!
       if     (existtag_nocase('SOLVER', ctx)) then ; solver=getval_nocase_upper('SOLVER', ctx);
       else
        ches_initialized=.false.
        return
       endif
! special case: NONE -- do nothing
       if (solver.eq.'NONE') then 
        ches_initialized=.false.
        return
       endif
!
       select case(solver)
!*********************************************************************************!
#define __N MULTIGRID
#include "macro2.def"
!*********************************************************************************!
       end select
!
       ches_initialized=.false.
!
       end subroutine ches_done
!=================================================================================
#define _IFS1 'INIT','INITIALIZE'
#define _DOS1 init
#define _IFS2 'SOLVE','RUN','EXEC'
#define _DOS2 solve
#define _IFS3 'OUTPUT'
#define _DOS3 output
#define _IFS4 'DONE','STOP','END'
#define _DOS4 done
#include "exec.def"
!=================================================================================
       end module ches
