  PROGRAM CHES ! (Cartesian Helmholtz Equation Solver)
! 2010-2012 Victor Ovchinnikov (ovchinnv_at_georgetown_dot_edu)
! Free for academic use
! Most of the source code is distributed 
! under the GNU General Public License
! certain parts of the code are under restricted license
!
  use PBmain
#ifdef __TIMER
  use timer
  __DEP_PARSER
  __DEP_OUTPUT
#endif
#ifdef __PARALLEL
  __DEP_MULTICOM
  use multicom
#endif
  __IMPNONE
!
  character(len=4) :: whoami='CHES'
  int4mpi :: comm ! default communicator
  int :: i
#ifdef __TIMER
  int :: pbtimer
  float :: time(10)
#endif
!

#ifdef __PARALLEL
 __DECLARE_MSGBUF
 if (.not.multicom_initialized) then 
  call multicom_init()
  _MSGBUF(1)='SET CHES 1'  ! set local comm to world (which is first in the communicator array, and points to "world") 
  i=10;
  call multicom_main( _MSGBUF(1),i)
 endif
 if (ME_CHES.gt.0) call set_minmessagelev(1) ! turn off output for slaves
 comm=MPI_COMM_CHES
#else
  comm=-1
#endif
!
#ifdef __TIMER
  call timer_init()
  pbtimer=timer_start()
#endif
!
#if PARALLEL
  call PB_init(comm)
#else
  call PB_init()
#endif
#ifdef __TIMER 
 time(1)=timer_stamp(pbtimer)
#endif
! solve the Poisson-Boltzmann equation (if requested in the input file)
  call PB_solve()
#ifdef __TIMER
  time(2)=timer_stamp(pbtimer)
#endif
! output solution, or other properties (as requested in the input file)
  call PB_output()
#ifdef __TIMER
  time(3)=timer_stamp(pbtimer)
#endif
! deallocate arrays
  call PB_done()
!
#ifdef __TIMER
  call timer_done()
#endif
!
#ifdef __TIMER
 call message(whoami,'============= TIMING INFORMATION ==============')
 call message(whoami,'PB initialization time (s) : '//ftoa(time(1)))
 call message(whoami,'PB solution time (s)       : '//ftoa(time(2)))
 call message(whoami,'PB output time (s)         : '//ftoa(time(3)))
 call message(whoami,'PB finalization time (s)   : '//ftoa(time(4)))
 call message(whoami,'===============================================')
#endif
  end ! CHES

