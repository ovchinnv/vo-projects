

 output {
  minmessagelev=2   ;# for setting output verbosity
 }

multicom {
# multicom is necessary for parallel execution of CHES
#  exec:init          #re-initialize
  exec:set ches 1    #default communicator
#  exec:list
 }

# size

nx=258; ny=258

# grid
xgrid=exp; xstretch=1.0; x0=0; x1=1
ygrid=exp; ystretch=1.0; y0=0; y1=2




output_format=plot3d
output_mode=text
gridoutput=xy_test.xyz
potoutput=solution.dat

ches {

# initial 3D data
 epsinit=constant   ; epsconst=1.
 kappainit=constant ; kappaconst=0.
 rhsinit=file       ; rhsfile=rhs_test.dat ;  rhs_mode=text ; rhs_format=chest
 phiinit=constant   ; phiconst=0. % initial solution

#BC
 phi_bcx0=dirichlet; phi_bcx0_file=xbc0_test.dat
 phi_bcx1=dirichlet; phi_bcx1_file=xbc1_test.dat
 phi_bcy0=dirichlet; phi_bcy0_file=ybc0_test.dat
 phi_bcy1=dirichlet; phi_bcy1_file=ybc1_test.dat
#
# multigrid solver parameters
 solver=multigrid

 exec: init
 exec: run
# exec: solve # repeat (for debugging)
}

# multigrid solver parameters
#
 multigrid {
  multigrid_maximum_cycles=10
  multigrid_smooth_iterations=3
  multigrid_maximum_levels=20
  multigrid_smoother=Gauss-Seidel
  #multigrid_smoother_unroll=-1
 }




