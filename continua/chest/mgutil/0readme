
smoother types (from code ): 
&                     (/'JACOBI                  ','GAUSS-SEIDEL            ','GAUSS-SEIDEL-RB         ',&
&                       'GAUSS-SEIDEL-UNROLL     ','GAUSS-SEIDEL-RB-TILED   ','GAUSS-SEIDEL-RB-TILED-LM',&
&                       'GAUSS-SEIDEL-REVERSE    ','JACOBI-TILED-LM         ','JACOBI-LM               '/)
#endif
 int, parameter :: Jacobi_=1, GaussSeidel_=2, GaussSeidelRB_=3, GSUnrollFromMiddle_=4, GaussSeidelRBTiled_=5,&
&                  GaussSeidelRBTiledLoMem_=6, GaussSeidelReverse_=7, JacobiTiledLomem_=8, JacobiOnTheFly_=9

reverse : simply reverse loops
rb -- red/black (2D) only
unroll -- perform several smoothing interations without calling bc ; this means that the support shrinks with each "inner iteration" ; 
          then, do an 'outer' iteration, whereby the missing boundary point updated are 'filled in'
          this method (which is implemented for 2D thus far) actually takes longer ...
rb-tiled -- red / black GS ; use tiles ; this is a GPU "prototype" which is NOT yet working -- TODO !