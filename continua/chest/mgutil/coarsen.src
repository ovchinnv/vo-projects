 subroutine coarsen(f,c,nx,ny,nz,i2d,ibc)
 implicit none
! note that nx,ny,nz correspond to the number of inner points (in 2D, nnz = 1)
 int1 :: i2d
 int1, intent(in) :: ibc ! include optional offset for arrays with boundaries (if ibc = 1)
 int :: nx, ny, nz, nnx, nny, nnz
 float :: f(nx+2*ibc,ny+2*ibc,nz+2*ibc), c(nx/2+2*ibc,ny/2+2*ibc,nz/(2-i2d)+2*ibc)
 int :: ib,ie,je,ke
 float :: coef
#ifndef __CVEC
 int :: i,j,k,im,jm,km
#endif
!
 ib=1+ibc; nnx=nx/2+ibc; nny=ny/2+ibc; nnz=nz/(2-i2d)+ibc
!
 if (i2d.eq.0) then
 coef=0.125d0
#ifndef __CVEC
!############################ serial calculation ###########################
 km=ib
 do k=ib,nnz ; jm=ib ; 
!
  do j=ib,nny ; im=ib ; 
!
   do i=ib,nnx;
    c(i,j,k)=coef * ( f(im,jm,km)  +f(im+1,jm,km)  +f(im+1,jm+1,km)  +f(im,jm+1,km) + &
&                     f(im,jm,km+1)+f(im+1,jm,km+1)+f(im+1,jm+1,km+1)+f(im,jm+1,km+1) )
    im=im+2
   enddo ! i 
   jm=jm+2
  enddo ! j
  km=km+2
 enddo ! k
#else
  ie=nx+ibc; je=ny+ibc; ke=nz+ibc
!write(0,*) 'computing c: ', ibc, ib, ie, je, ke, nx,ny,nz,nnz
  c(ib:nnx,ib:nny,ib:nnz) = coef*(&
&   f(ib  :ie:2,	ib  :je:2,	ib  :ke:2)+&
&   f(ib+1:ie:2,	ib  :je:2,	ib  :ke:2)+&
&   f(ib  :ie:2,	ib+1:je:2,	ib  :ke:2)+&
&   f(ib+1:ie:2,	ib+1:je:2,	ib  :ke:2)+&
&   f(ib  :ie:2,	ib  :je:2,	ib+1:ke:2)+&
&   f(ib+1:ie:2,	ib  :je:2,	ib+1:ke:2)+&
&   f(ib  :ie:2,	ib+1:je:2,	ib+1:ke:2)+&
&   f(ib+1:ie:2,	ib+1:je:2,	ib+1:ke:2) &
&  )
#endif
 else
 coef=0.25d0
#ifndef __CVEC
!################################### serial calculation ################################
 jm=ib;
 do j=ib,nny ; im=ib ; 
!
  do i=ib,nnx;
   c(i,j,ib)=coef * ( f(im,jm,ib)+f(im+1,jm,ib)+f(im+1,jm+1,ib)+f(im,jm+1,ib) )
   im=im+2
  enddo 
  jm=jm+2
 enddo
! 
#else
!################################### vector calculation ################################
  ie=nx+ibc; je=ny+ibc; ke=nz+ibc
  c(ib:nnx,ib:nny,ib:nnz) = coef*(&
&   f(ib  :ie:2,	ib  :je:2,	ib  :ke:2)+&
&   f(ib+1:ie:2,	ib  :je:2,	ib  :ke:2)+&
&   f(ib  :ie:2,	ib+1:je:2,	ib  :ke:2)+&
&   f(ib+1:ie:2,	ib+1:je:2,	ib  :ke:2)&
&   )
!  c=0.25d0*(&
!   f(1::2,1::2,1::2)+&
!   f(2::2,1::2,1::2)+&
!   f(1::2,2::2,1::2)+&
!   f(2::2,2::2,1::2)&
!  )
#endif
 endif
!
 end subroutine coarsen
!*****************************************************************************************!
 subroutine coarsen2d_vec(fine,coarse,nx,ny)
! used for coarsening the residual 
! note that nx,ny correspond to the number of inner points
 implicit none
 int :: nx, ny
 float :: fine(nx,ny), coarse(nx/2,ny/2)
 coarse=0.25d0*(&
   fine(1::2,1::2)+&
   fine(2::2,1::2)+&
   fine(1::2,2::2)+&
   fine(2::2,2::2)&
  )
 end subroutine coarsen2d_vec
