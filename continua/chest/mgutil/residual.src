 subroutine residual(r,p,rhs,w,e,s,n,f,b,o,nx,ny,nz,q2d)
! note that nx,ny,nz include ghost points
! note, also, that q2d is optional (since f=b=0 in 2D) but included to (hopefully) increase speed
 implicit none
 int :: nx, ny, nz
 float, dimension(nx,ny,nz) :: p 
 float, dimension(nx-2,ny-2,nz-2) :: r,rhs,w,e,s,n,f,b,o ! note that the metrics e--o are variable (because they include eps)
 int :: nnx, nny, nnz
 int :: nxp, nyp, nzp
 bool :: q2d
!
#ifndef __RVEC
 int :: i,j,k,im,jm,km
 float :: pw,pe,po
#endif
!
 nnx=nx-2; nny=ny-2; nnz=nz-2;
 nxp=nnx+1; nyp=nny+1; nzp=nnz+1;
!
 if (q2d) then
#ifndef __RVEC
! compute in a loop (a la GS.src)
!##################################################################################
  do k=2,nzp;    km=k-1;
   do j=2,nyp;   jm=j-1;        po=p(2,j,k); pw=p(1,j,k);
    do i=2,nxp;  im=i-1;
     pe=p(i+1,j,k)
     r(im,jm,km)=o(im,jm,km) * ( rhs(im,jm,km)                                     -&
                                   w(im,jm,km)*pw         - e(im,jm,km)*pe         -& 
                                   s(im,jm,km)*p(i,j-1,k) - n(im,jm,km)*p(i,j+1,k) -&
                                   po                                               ) 
     pw=po; po=pe;
    
  enddo ; enddo ; enddo  ! i ,j, k
#else
! compute using vector routines
  r=o*(rhs-&
       w*p(1:nnx,2:nyp,2:nzp)-&
       e*p(3:nx ,2:nyp,2:nzp)-&
       s*p(2:nxp,1:nny,2:nzp)-&
       n*p(2:nxp,3:ny ,2:nzp)-&
         p(2:nxp,2:nyp,2:nzp))
#endif
 else ! 3D
#ifndef __RVEC
!##################################################################################
  do k=2,nzp;    km=k-1;
   do j=2,nyp;   jm=j-1;        po=p(2,j,k); pw=p(1,j,k);
    do i=2,nxp;  im=i-1;
     pe=p(i+1,j,k)
     r(im,jm,km)=o(im,jm,km) * ( rhs(im,jm,km)                                     -&
                                   w(im,jm,km)*pw         - e(im,jm,km)*pe         -& 
                                   s(im,jm,km)*p(i,j-1,k) - n(im,jm,km)*p(i,j+1,k) -&
                                   f(im,jm,km)*p(i,j,k-1) - b(im,jm,km)*p(i,j,k+1) -&
                                   po                                               ) 
     pw=po; po=pe;
    
  enddo ; enddo ; enddo  ! i ,j, k
#else
!##################################################################################
  r=o*(rhs-                   &
       w*p(1:nnx,2:nyp,2:nzp)-&
       e*p(3:nx ,2:nyp,2:nzp)-&
       s*p(2:nxp,1:nny,2:nzp)-&
       n*p(2:nxp,3:ny ,2:nzp)-&
       f*p(2:nxp,2:nyp,1:nnz)-&
       b*p(2:nxp,2:nyp,3:nz )-&
         p(2:nxp,2:nyp,2:nzp))
#endif
!
 endif
!
 end subroutine residual
!*****************************************************************************************!
 subroutine residual2d_vec(r,p,rhs,w,e,s,n,o,nx,ny)
! note that nx,ny include ghost points
 implicit none
 int :: nx, ny
 float, dimension(nx,ny) :: p 
 float, dimension(nx-2,ny-2) :: r,rhs,w,e,s,n,o ! note that the metrics e--o are variable (because they include eps)
 int :: nnx, nny
 int :: nxp, nyp
! 
 nnx=nx-2; nny=ny-2;
 nxp=nnx+1; nyp=nny+1;
!
 r=o*(rhs-&
      w*p(1:nnx,2:nyp)-&
      e*p(3:nx ,2:nyp)-&
      s*p(2:nxp,1:nny)-&
      n*p(2:nxp,3:ny )-&
        p(2:nxp,2:nyp))
!
 end subroutine residual2d_vec
