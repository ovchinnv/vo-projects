#!charmm
# test case for computing grid densities based on a molecule
# grid size
output {
! minwarnlev=-1 ! turn off fatal warnings
}

continuum {
 nx=98
 ny=98
 nz=98

 xgrid=object ; xbuffer=12 ; dxmin=1 ; xstretch=1.0
 ygrid=object ; ybuffer=12 ; dymin=1 ;
 zgrid=object ; zbuffer=12 ; dzmin=1 ;
!
! xstretchfix=no ! defaults to yes
! xoptimize=no ! to optimize grid size for multigrid solver, which requires maximizing powers of two in the grid size
! yoptimize=no
! zoptimize=no
!
 gridoutput=xyz.xyz
 output_mode=binary ! default is ascii
 output_format=plot3d
!
 exec: init
 exec: output

}

object {
 object=molecule
 object_center=(0,0,0)          ! vector parameter: means bring object COM to this position
 object_align=yes               ! align ( along principal components for molecule; in principle depends on object)OR
 object_massw=true              ! will use mass weighing in computation of COM/alignments
}

molecule{
 structure=traf-rank.psf
 parameters=par_all36_prot.prm
 coordinates=traf-rank.pdb
 coortype=pdb
 cutoff_surf_stdev=5 ! increasing this will define the density farther out ; not clear where this parameters belongs -- maybe ches ?
 kappa_solvent=0 ! molar strength in the solvent region
 eps_solute=1 ! protein dielectric
 eps_solvent=78 ! solvent dielectric
 eps_scale=none ! default behavior is to scale to AKMA units
}

ches{
! surfoutput=density.dat
! alloutput=data.dat
 phi_bcx0=periodic
 phibcx1=periodic
 phibcy0=periodic
 phibcy1=periodic
 phibcz0=periodic
 phibcz1=periodic

 phiinit=const
 phiconst=0
 epsinit=object
 kappainit=object
 rhsinit=object

 rhsoutput=q.dx ! charge density
 epsoutput=eps.dx
 output_mode=binary ! default is ascii
 output_format=opendx
 exec:init
 exec:output
}
