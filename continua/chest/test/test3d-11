#!/bin/bash
# 3D test case for chest
# V. Ovchinnikov 2019
# Numerical solution to the poisson equation in three dimensions (known analytical solution)
#
# Requires a fortran compiler
. ./fcheck "$1" "$2" "$3" ;# execute script in the current context
# electrostatic potential due to a single Gaussian charge, i.e.
# rho=-Q/(sqrt(2*pi)*s)**3 * exp(-0.5d0*(dr/s)**2)
# the potential is represented analytically only if the permittivity is uniform
# in which case the solution is expressed via the error function :
# U = Q / (4*pi*eps) * erf( r / (sqrt(2) * s )) / r
# where Q is the charge, eps is the permittivity, s is the std of the Gaussian
# and r is the distance to the charge.
# Otherwise, analytical solution can be computed as a 1D numerical integral
# This test case is different from test3d-11 in terms of how the source is specified:
# here the molecule context is used, which prepares a single gaussian-filtered ball
#
# parameters :
omega=1.44 # SOR acceleration
eps0=1; # permittivity units/normalization
ein=4 ;# scaled permittivity inside
eout=80 ;# scaled permittivity outside
s=0.2
Q=1
R=3 ;# nominal radius of born cavity
echo
echo " *********************************************************************************************"
echo " (test3d-9) "
echo " Test case for solving 3D Poisson equation using CHES" 
echo " Laplacian U  = f"
echo " U(t) = ${Q} INT_t^oo  1/ ( r^2 ${eps} ) * ( erf( r / (sqrt(2) * ${s} )) / (4*pi) - (r/${s}) * exp(-0.5 (r/${s})^2) / (2*pi)^(3/2) )"
echo " Dirichlet boundary conditions assigned on the boundary"
#echo " Jacobi smoother with step (omega) = $omega " ;# varies
echo " *********************************************************************************************"
#
#
nx=98; ny=98; nz=98;
#nx=50; ny=50; nz=50;
xstretch=1.0; x0=0; x1=7
ystretch=1.0; y0=0; y1=7
zstretch=1.0; z0=0; z1=7
#
#
echo " Generating test data..."
echo "
  implicit none
  float :: x1($nx), y1($ny), z1($nz)
  float :: x2($nx), y2($ny), z2($nz)
  float :: xbc0($ny,$nz), xbc1($ny,$nz)
  float :: ybc0($nx,$nz), ybc1($nx,$nz)
  float :: zbc0($nx,$ny), zbc1($nx,$ny)
  float :: rhs($nx,$ny,$nz), u($nx,$ny,$nz), eps($nx, $ny, $nz)
  float, parameter :: err = 1d-12, sq2=sqrt(2d0)
  float :: a, b, l, z, pi, delta, xcen, ycen, zcen, drn
  integer :: i, j, k, n
! variables for analytical solution
  integer, parameter :: npt = 10000
  float, parameter :: rmin=0d0, rmax=10d0, dr=(rmax-rmin)/(npt-1)
  float :: r(npt), phi(npt), rhoint(npt)
!
  pi=atan(1d0)*4d0
! construct analytical solution numerically
! charge density integral :
  rhoint(1)=0d0
  r(1)=0d0
  do i=2, npt
   r(i)=r(i-1)+dr
   drn=r(i)/${s}
   delta=${eps0}*(${eout} + (${ein}-${eout})*ball(r(i),${R}d0,${s}d0))
   rhoint(i)=${Q} * ( erf(drn/sq2) / (4*pi) - (drn) * exp(-0.5d0*drn**2) / sqrt(2*pi)**3 )/r(i)**2/delta
  enddo
! integrate from infinity to 1 to obtain potential :
  phi(npt)=0d0
  do i=npt-1, 1,-1
    phi(i)=phi(i+1) + 0.5d0 * (rhoint(i) + rhoint(i+1)) * (r(i+1)-r(i));
  enddo
! now, we can use phi as an approximation to the true solution
!
!
! xgrid:
  a=${x0}d0; b=${x1}d0; z=${xstretch}d0; n=$nx-1
  l=b-a
  if (ABS(z-1.0d0).lt.ERR) then 
   delta=l/(n-1) 
  else 
   delta=l*(1.0d0-z)/(1.0d0-(z**(n-1)))
  endif
!
  x1(1)=a
  do i=2,n+1
   x1(i)=x1(i-1)+delta;
   delta=delta*z;
  enddo
!
  open(1,file='xg_test.dat',form='formatted', status='unknown')
  write(1,'(F30.15)') x1 
  close(1)
!
  x2(2:$nx)=0.5d0*(x1(1:$nx-1)+x1(2:$nx)); x2(1)=x1(1)-0.5d0*(x1(2)-x1(1)); 
!
! ygrid:
  a=${y0}d0; b=${y1}d0; z=${ystretch}d0; n=$ny-1
  l=b-a 
  if (ABS(z-1.0d0).lt.ERR) then 
   delta=l/(n-1) 
  else 
   delta=l*(1.0d0-z)/(1.0d0-(z**(n-1)))
  endif
!
  y1(1)=a
  do i=2,n+1
   y1(i)=y1(i-1)+delta;
   delta=delta*z;
  enddo
!
  open(1,file='yg_test.dat',form='formatted', status='unknown')
  write(1,'(F30.15)') y1 
  close(1)
!
  y2(2:$ny)=0.5d0*(y1(1:$ny-1)+y1(2:$ny)); y2(1)=y1(1)-0.5d0*(y1(2)-y1(1));
!
! zgrid:
  a=${z0}d0; b=${z1}d0; z=${zstretch}d0; n=$nz-1
  l=b-a
  if (ABS(z-1.0d0).lt.ERR) then 
   delta=l/(n-1)
  else
   delta=l*(1.0d0-z)/(1.0d0-(z**(n-1)))
  endif
!
  z1(1)=a
  do i=2,n+1
   z1(i)=z1(i-1)+delta;
   delta=delta*z;
  enddo
!
  open(1,file='zg_test.dat',form='formatted', status='unknown')
  write(1,'(F30.15)') z1 
  close(1)
!
  z2(2:$nz)=0.5d0*(z1(1:$nz-1)+z1(2:$nz)); z2(1)=z1(1)-0.5d0*(z1(2)-z1(1)); 
!
! data :
! charge center :
 xcen=0.5d0*(${x0}+${x1});
 ycen=0.5d0*(${y0}+${y1});
 zcen=0.5d0*(${z0}+${z1});
!
 do i=1,$nx ; do j=1, $ny; do k=1, $nz
  drn=sqrt( (x2(i)-xcen)**2 + (y2(j)-ycen)**2 + (z2(k)-zcen)**2 )
! right-hand side :
  rhs(i,j,k)=-${Q}/(sqrt(2d0*pi)*${s})**3 * exp(-0.5d0*(drn/${s})**2) ;
! permittivity :
  eps(i,j,k)= ${eps0}*(${eout} + (${ein}-${eout})*ball(drn,${R}d0,${s}d0))
! compute exact solution by interpolation from phi
  drn=min(drn, r(npt-1))
  drn=max(drn, r(1))
  n = int(drn/dr) + 1
  a = (r(n+1)-drn)/dr
  b = 1d0-a
  u(i,j,k) = a*phi(n)+b*(phi(n+1))
 enddo;       enddo;       enddo
!
! write datafiles in chest format
!
 open(1,file='uexact_test.dat',form='formatted', status='unknown')
 write(1,'(3I5)') $nx,$ny,$nz
 write(1,'(${nx}F30.15)') u 
! write(1) $nx,$ny,$nz
! write(1) u
 close(1)
 open(1,file='rhs_test.dat',form='formatted', status='unknown')
 write(1,'(3I5)') $nx,$ny,$nz
 write(1,'(${nx}F30.15)') rhs 
! write(1) $nx,$ny,$nz
! write(1) rhs 
 close(1)
 open(1,file='eps_test.dat',form='formatted', status='unknown')
 write(1,'(3I5)') $nx,$ny,$nz
 write(1,'(${nx}F30.15)') eps 
 close(1)
! bc arrays
 do k=1,$nz
  do j=1,$ny
   drn = sqrt( (${x0}-xcen)**2 + (y2(j)-ycen)**2 + (z2(k)-zcen)**2 )
   drn=min(drn, r(npt-1))
   drn=max(drn, r(1))
   n = int(drn/dr) + 1
   a = (r(n+1)-drn)/dr
   b = 1d0-a
   xbc0(j,k) = a*phi(n)+b*(phi(n+1))
!
   drn = sqrt( (${x1}-xcen)**2 + (y2(j)-ycen)**2 + (z2(k)-zcen)**2 )
   drn=min(drn, r(npt-1))
   drn=max(drn, r(1))
   n = int(drn/dr) + 1
   a = (r(n+1)-drn)/dr
   b = 1d0-a
   xbc1(j,k) = a*phi(n)+b*(phi(n+1))
  enddo
 enddo
!
 do k=1,$nz
  do i=1,$nx
   drn = sqrt( (x2(i)-xcen)**2 + (${y0}-ycen)**2 + (z2(k)-zcen)**2 )
   drn=min(drn, r(npt-1))
   drn=max(drn, r(1))
   n = int(drn/dr) + 1
   a = (r(n+1)-drn)/dr
   b = 1d0-a
   ybc0(i,k) = a*phi(n)+b*(phi(n+1))
   drn = sqrt( (x2(i)-xcen)**2 + (${y1}-ycen)**2 + (z2(k)-zcen)**2 )
   drn=min(drn, r(npt-1))
   drn=max(drn, r(1))
   n = int(drn/dr) + 1
   a = (r(n+1)-drn)/dr
   b = 1d0-a
   ybc1(i,k) = a*phi(n)+b*(phi(n+1))
  enddo
 enddo
!
 do j=1,$ny
  do i=1,$nx
   drn = sqrt( (x2(i)-xcen)**2 + (y2(j)-ycen)**2 + (${z0}-zcen)**2 )
   drn=min(drn, r(npt-1))
   drn=max(drn, r(1))
   n = int(drn/dr) + 1
   a = (r(n+1)-drn)/dr
   b = 1d0-a
   zbc0(i,j) = a*phi(n)+b*(phi(n+1))
   drn = sqrt( (x2(i)-xcen)**2 + (y2(j)-ycen)**2 + (${z1}-zcen)**2 )
   drn=min(drn, r(npt-1))
   drn=max(drn, r(1))
   n = int(drn/dr) + 1
   a = (r(n+1)-drn)/dr
   b = 1d0-a
   zbc1(i,j) = a*phi(n)+b*(phi(n+1))
  enddo
 enddo
!
 open(10,file='xbc0_test.dat',form='formatted', status='unknown')
 open(11,file='xbc1_test.dat',form='formatted', status='unknown')
 open(12,file='ybc0_test.dat',form='formatted', status='unknown')
 open(13,file='ybc1_test.dat',form='formatted', status='unknown')
 open(14,file='zbc0_test.dat',form='formatted', status='unknown')
 open(15,file='zbc1_test.dat',form='formatted', status='unknown')
!
 write(10,'(F30.15)') xbc0(2:$ny-1,2:$nz-1); close(10)
 write(11,'(F30.15)') xbc1(2:$ny-1,2:$nz-1); close(11)
 write(12,'(F30.15)') ybc0(2:$nx-1,2:$nz-1); close(12)
 write(13,'(F30.15)') ybc1(2:$nx-1,2:$nz-1); close(13)
 write(14,'(F30.15)') zbc0(2:$nx-1,2:$ny-1); close(14)
 write(15,'(F30.15)') zbc1(2:$nx-1,2:$ny-1); close(15)
!
  contains
  function ball(dr, R, s)
! R : ball radius
! s : std of Gaussian filter
  float, parameter ::TOL=1d-13, sq2=sqrt(2d0), pi=4d0*atan(1d0)
  float :: ball
  float, intent(in) :: dr, R, s
!
  ball= 0.5d0 * ( erf( (dr+R)/s/sq2 ) - erf ( (dr-R)/s/sq2 ) );
! exponential term
  if (abs(dr)>TOL) then
   ball = ball + 1d0/sqrt(2*pi)*s/dr * ( exp ( -0.5d0*((dr+R)/s)**2 ) - exp ( -0.5d0*((dr-R)/s)**2 ) );
! note that the expression above will be divergent when dr is zero
! therefore, use a taylor expansion :
  else
   ball = ball - s/sqrt(2*pi)*exp(-0.5d0*(R**2+dr**2)/s**2)*( 2*R/s**2 + R**3/s**6*dr**2/3d0)
  endif
  end function ball
end " > test.F90
#
$FC $FFLAGS $DEFS test.F90 -o test ; ./test; rm -f test;
#
# write ion parameters to pqr file
# compute center :
xc=`echo "scale=6 ; 0.5*($x0 + $x1)" | bc`
yc=`echo "scale=6 ; 0.5*($y0 + $y1)" | bc`
zc=`echo "scale=6 ; 0.5*($z0 + $z1)" | bc`
echo -n "
REMARK SINGLE ION
PQR FORMAT
ATOM 1 Q ION 1 $xc $yc $zc ${Q} 0.00
" > born.pqr
#
# prepare input file for CHES
#
echo " Preparing input file..."
echo "

continuum {
#Size
 nx=${nx}; ny=${ny}; nz=${nz}

#Grid

 xgrid=exp; xstretch=${xstretch}; x0=${x0}; x1=${x1}
 ygrid=exp; ystretch=${ystretch}; y0=${y0}; y1=${y1}
 zgrid=exp; zstretch=${zstretch}; z0=${z0}; z1=${z1}

#Continuum output options
 output_format=plot3d
 output_mode=text
 gridoutput=xyz_test.xyz

 exec:output
}

#Communicators
multicom {
 exec:set ches 1
}

object {
 object=molecule
}

molecule {
 structype=PQR ! note : would be good to have multple ways/keywords of specifying
 structure=born.pqr ! note that this file should have a single charge with radius 0 (unit mass)
 kappa_solute=0 ! note that could skip gaussian gridding if solute/solvent values are same
 kappa_solvent=0
 eps_solute=${ein}
 eps_solvent=${eout}
 eps_scale=none
 eps_padding=${R} ! this is added to the radius to compute the eps array
 charge_padding=0 ! added to radius to compute smoothed right-hand-side
 stdev_eps=${s} ! might be worthwhile to be able to set a single stdev
 stdev_charge=${s}
 cutoff_eps_stdev=10 ! does not seem to make much difference
 cutoff_charge_stdev=5
}

ches {
# BC
 phi_bcx0=dirichlet; phi_bcx0_file=xbc0_test.dat
 phi_bcx1=dirichlet; phi_bcx1_file=xbc1_test.dat
 phi_bcy0=dirichlet; phi_bcy0_file=ybc0_test.dat
 phi_bcy1=dirichlet; phi_bcy1_file=ybc1_test.dat
 phi_bcz0=dirichlet; phi_bcz0_file=zbc0_test.dat
 phi_bcz1=dirichlet; phi_bcz1_file=zbc1_test.dat

#Initial 3D data

! note : object init gives error of ~0.005 vs 0.00004 for direct init ; using gridded eps reduces error to 0.00004 (with charge cutoff=5)
! so the problem is with eps gridding. Investigate !
! perhaps need to compare the arrays. (NOTE: increasing filtering cutoff does not help)
 epsinit=object
! epsinit=file ; epsfile=eps_test.dat ; eps_mode=text ; eps_format=chest
 kappainit=constant ; kappaconst=0.
 rhsinit=object
! rhsinit=file ; rhsfile=rhs_test.dat ; rhs_mode=text ; rhs_format=chest
 phiinit=constant   ; phiconst=0. % initial solution

#Solver
 solver=multigrid

#Output
 output_format=plot3d
 output_mode=text
 phioutput=solution.dat
 epsoutput=eps.dat
! rhsoutput=rhs.dat

#Execution
 exec:init
 exec:solve
 exec:output
 exec:done
} ! ches

multigrid {
# multigrid solver parameters
# multigrid_maximum_cycles=4
# multigrid_smooth_iterations=4
# multigrid_maximum_levels=4
# multigrid_smoother=Jacobi
 multigrid_residual=1e-6 # for shorter running times
# multigrid_smoother=Jacobi-Tiled-LM
# multigrid_compute_ini_residual=no
# multigrid_skip_convergence_test=1
# multigrid_smoother_unroll=-1
 multigrid_omega=$omega
}

" > test.dat
if !([ -L ches ]); then
ln -s ../ches .
fi
echo " Running CHES..."
#echo " ********************************************************************************************"
ulimit -s unlimited
./ches < test.dat #>/dev/null
#
# compare solutions
#
echo " Comparing to analytical solution..."
#echo " ********************************************************************************************"
#
echo "
 implicit none
 float, dimension($nx,$ny,$nz)  :: uanl, uches, rhs
 float :: grid($nx,$ny,$nz,3)
 float :: x1($nx), x2($nx), y1($ny), y2($ny), z1($nz), z2($nz)
 float :: griderror, error
 integer :: where(3), i, j, k
!
! compare grids
!
 open(1,file='xg_test.dat',form='formatted', status='old')
 read(1,*) x1
 close(1)
 open(1,file='yg_test.dat',form='formatted', status='old')
 read(1,*) y1
 close(1)
 open(1,file='zg_test.dat',form='formatted', status='old')
 read(1,*) z1
 close(1)
! bring grids to center
 x2(2:$nx)=0.5d0*(x1(1:$nx-1)+x1(2:$nx)); x2(1)=x1(1)-0.5d0*(x1(2)-x1(1)); x1=x2;
 y2(2:$ny)=0.5d0*(y1(1:$ny-1)+y1(2:$ny)); y2(1)=y1(1)-0.5d0*(y1(2)-y1(1)); y1=y2;
 z2(2:$nz)=0.5d0*(z1(1:$nz-1)+z1(2:$nz)); z2(1)=z1(1)-0.5d0*(z1(2)-z1(1)); z1=z2;
!
! grid output from CHEST is at center
!
 open(1,file='xyz_test.xyz',form='formatted', status='old')
 read(1,*)
 read(1,*) grid
 close(1)
!
 x2=grid(:,1,1,1); y2=grid(1,:,1,2); z2=grid(1,1,:,3)
 griderror=max(maxval(abs(x1-x2)), maxval(abs(y1-y2)), maxval(abs(z1-z2)))
! write(0,*) x1-x2
! write(0,*) y1-y2
! write(0,*) z1-z2
!
! compare solutions
!
 open(1,file='uexact_test.dat',form='formatted', status='old')
 read(1,*)
 read(1,*) uanl
 close(1)
!
 open(1,file='solution.dat',form='formatted', status='old')
 read(1,*)
 read(1,*)
 read(1,*) uches
 close(1)
!
 uanl=abs(uanl-uches);
 error=maxval(uanl(2:$nx-1,2:$ny-1,2:$nz-1))
 where=maxloc(uanl(2:$nx-1,2:$ny-1,2:$nz-1))
 write(6,'(2F25.12,3I10)') griderror, error, where
! RMS error :
 error=sqrt ( sum ( uanl(2:$nx-1,2:$ny-1,2:$nz-1)**2 ) / (( $nx-2 )*( $ny-2 )*( $nz-2 )) )
 write(6,'(F25.12)') error
! read rhs file to compute potential energy :
 open(1,file='rhs_test.dat',form='formatted', status='old')
 read(1,*)
 read(1,*) rhs
 close(1)
 error=0d0;
! error = 0.5d0 * sum ( uches(2:$nx-1,2:$ny-1,2:$nz-1) * rhs(2:$nx-1,2:$ny-1,2:$nz-1)) * (x1(2)-x1(1)) * (y1(2)-y1(1)) * (z1(2)-z1(1));
! integrate for nonuniform mesh
 do k=2,$nz-1 ; do j=2,$ny-1 ; do i=2,$nx-1
  error = error + uches(i,j,k) * rhs(i,j,k) * (x1(i)-x1(i-1)) * (y1(j)-y1(j-1)) * (z1(k)-z1(k-1))
 enddo ; enddo ; enddo
 error=0.5d0 * error
 write(6,'(F25.12)') error
 end " > compare.F90
#
$FC $FFLAGS $DEFS compare.F90 -o compare
j=0
for f in `./compare`; do
 i[$j]=$f
 j=$(($j+1))
done
rm -f compare;
griderr=0.00001;
if [ `echo "${i[0]} > $griderr" | bc` -eq 1 ]; then
 echo " Grids do not match!";
 echo " TEST FAILED";
 test_passed=0
else
 ermax=0.06; # ad-hoc criterion
 echo " The electrostatic energy is ${i[6]}"
 echo " The RMS error is ${i[5]}"
 echo " The maximum absolute error is "${i[1]}" at grid point ["${i[2]}","${i[3]}","${i[4]}"]"
 echo " Comparing with maximum allowed error ("$ermax")"
 if [ `echo "${i[1]} < $ermax" | bc` -eq 1 ]; then
  echo " TEST PASSED";
  test_passed=1
 else
  echo " TEST FAILED";
  test_passed=0
 fi
fi
echo " ********************************************************************************************"
#
# clean up
#
#if [ -L ches ]; then
# rm -f ches ; 
#fi
#
exit $test_passed
