#!/bin/bash
# 2D test case for chest
# V. Ovchinnikov 2011
# Numerical solution to the poisson equation in two dimensions (known analytical solution)
#
# Requires a fortran compiler
. ./fcheck "$1" "$2" "$3" ;# execute script in the current context
#
#
# u = ( 1 - exp (-ax) ) * cos (2*pi*n*y)
a=5; n=1;
#

echo
echo " *********************************************************************************************"
echo " (test2d-2) "
echo " Test case for solving 2D Poisson equation using CHES" 
echo " Laplacian U  = f"
echo " U = ( 1 - exp (-$a * x) ) * cos (2 * pi * $n * y); Dirichlet boundary conditions at ghostcell"
echo " *********************************************************************************************"
#
#
nx=130; ny=162
xstretch=1.01; x0=0; x1=1
ystretch=1.015; y0=0; y1=2

#nx=258; ny=258
#nx=1026; ny=1026
#xstretch=1.0; x0=0; x1=1
#ystretch=1.0; y0=0; y1=2
#
#
echo " Generating test data..."
echo "
  implicit none
  float :: x1($nx), y1($ny)
  float :: x2($nx), y2($ny)
  float :: xbc0($ny), xbc1($ny)
  float :: ybc0($nx), ybc1($nx)
  float :: rhs($nx,$ny), u($nx,$ny)
  float, parameter :: err = 1d-12
  float :: a, b, l, z, pi, delta
  integer :: i, j, n
!
! xgrid:
  a=${x0}d0; b=${x1}d0; z=${xstretch}d0; n=$nx-1
  l=b-a
  if (ABS(z-1.0d0).lt.ERR) then 
   delta=l/(n-1) 
  else 
   delta=l*(1.0d0-z)/(1.0d0-(z**(n-1)))
  endif
!
  x1(1)=a
  do i=2,n+1
   x1(i)=x1(i-1)+delta;
   delta=delta*z;
  enddo
!
  open(1,file='xg_test.dat',form='formatted', status='unknown')
  write(1,'(F30.15)') x1 
  close(1)
!
  x2(2:$nx)=0.5d0*(x1(1:$nx-1)+x1(2:$nx)); x2(1)=x1(1)-0.5d0*(x1(2)-x1(1)); 
!
! ygrid:
  a=${y0}d0; b=${y1}d0; z=${ystretch}d0; n=$ny-1
  l=b-a 
  if (ABS(z-1.0d0).lt.ERR) then 
   delta=l/(n-1) 
  else 
   delta=l*(1.0d0-z)/(1.0d0-(z**(n-1)))
  endif
!
  y1(1)=a
  do i=2,n+1
   y1(i)=y1(i-1)+delta;
   delta=delta*z;
  enddo
!
  open(1,file='yg_test.dat',form='formatted', status='unknown')
  write(1,'(F30.15)') y1 
  close(1)
!
  y2(2:$ny)=0.5d0*(y1(1:$ny-1)+y1(2:$ny)); y2(1)=y1(1)-0.5d0*(y1(2)-y1(1)); 
!
! data arrays
!
 pi=atan(1d0)*4d0
 do i=1,$nx ; do j=1, $ny
  u(i,j) = (1-exp (-${a}d0*x2(i)))*cos(2*pi*$n*y2(j))
  rhs(i,j) = -${a}d0**2 * exp(-${a}d0*x2(i))*cos(2*pi*$n*y2(j)) - (2*pi*$n)**2 * u(i,j)
 enddo; enddo
!
! write datafiles in chest format
!
 open(1,file='uexact_test.dat',form='formatted', status='unknown')
 write(1,'(3I5)') $nx,$ny
 write(1,'(${nx}F30.15)') u 
! write(1) $nx,$ny
! write(1) u 
 close(1)
 open(1,file='rhs_test.dat',form='formatted', status='unknown')
 write(1,'(3I5)') $nx,$ny
 write(1,'(${nx}F30.15)') rhs 
! write(1) $nx,$ny
! write(1) rhs 
 close(1)
! bc arrays
 xbc0= (1-exp (-${a}d0*x2(1)))  *cos(2*pi*$n*y2(:))
 xbc1= (1-exp (-${a}d0*x2($nx)))*cos(2*pi*$n*y2(:))
 ybc0= (1-exp (-${a}d0*x2(:)))  *cos(2*pi*$n*y2(1))
 ybc1= (1-exp (-${a}d0*x2(:)))  *cos(2*pi*$n*y2($ny))
!
 open(10,file='xbc0_test.dat',form='formatted', status='unknown')
 open(11,file='xbc1_test.dat',form='formatted', status='unknown')
 open(12,file='ybc0_test.dat',form='formatted', status='unknown')
 open(13,file='ybc1_test.dat',form='formatted', status='unknown')
!
 write(10,'(F30.15)') xbc0(2:$ny-1); close(10)
 write(11,'(F30.15)') xbc1(2:$ny-1); close(11)
 write(12,'(F30.15)') ybc0(2:$nx-1); close(12)
 write(13,'(F30.15)') ybc1(2:$nx-1); close(13)
!
end " > test.F90
#
$FC $FFLAGS $DEFS test.F90 -o test ; ./test; rm -f test;
#
# prepare input file for CHES
#
echo " Preparing input file..."
echo "

continuum {
# size
 nx=${nx}; ny=${ny}

# grid
 xgrid=exp; xstretch=${xstretch}; x0=${x0}; x1=${x1}
 ygrid=exp; ystretch=${ystretch}; y0=${y0}; y1=${y1}

#Output options
 output_format=chest
 output_mode=text
 gridoutput=xy_test.xyz

 exec:output
}

# communicator section
multicom {
 exec:set ches 1
}

ches {
#Initial 3D data
 epsinit=constant   ; epsconst=1.
 kappainit=constant ; kappaconst=0.
 rhsinit=file       ; rhsfile=rhs_test.dat ;  rhs_mode=text ; rhs_format=chest
 phiinit=constant   ; phiconst=0. % initial solution

#Boundary conditions
 phi_bcx0=dirichletg; phi_bcx0_file=xbc0_test.dat
 phi_bcx1=dirichletg; phi_bcx1_file=xbc1_test.dat
 phi_bcy0=dirichletg; phi_bcy0_file=ybc0_test.dat
 phi_bcy1=dirichletg; phi_bcy1_file=ybc1_test.dat

#Solver
 solver=multigrid

#Output
 output_format=chest
 output_mode=text
 phioutput=solution.dat

#Execution
 exec: init
 exec: run
 exec: output
 exec: done
}

#Multigrid solver parameters
multigrid {
 multigrid_maximum_cycles=1000
 multigrid_smooth_iterations=6
 multigrid_maximum_levels=20
 multigrid_compute_ini_residual=yes
# multigrid_skip_convergence_test=10
# multigrid_smoother=Jacobi
# multigrid_smoother=Jacobi-LM
 multigrid_smoother=Jacobi-Tiled-LM
# multigrid_smoother=Gauss-Seidel-Unroll
# multigrid_smoother=Gauss-Seidel-RB
# multigrid_smoother=Gauss-Seidel-RB-Tiled-LM
# multigrid_smoother=Gauss-Seidel-RB-Tiled
# multigrid_smoother_tilesize=128
# multigrid_smoother_unroll=3
multigrid_residual=1e-5 # set residual low for Jacobi-like methods to converge
multigrid_omega=0.92
#multigrid_omega=1.4 # large value good for GS
}
" > test.dat
if !([ -L ches ]); then
ln -s ../ches .
fi
echo " Running CHES..."
#echo " ********************************************************************************************"
./ches < test.dat #>/dev/null
#
# compare solutions
#
echo " Comparing to analytical solution..."
#echo " ********************************************************************************************"
#
echo "
 implicit none
 float, dimension($nx,$ny)  :: uanl, uches
 float :: grid($nx,$ny,2)
 float :: x1($nx), x2($nx), y1($ny), y2($ny)
 float :: griderror, error
 integer :: where(2)
!
! compare grids
!
 open(1,file='xg_test.dat',form='formatted', status='old')
 read(1,*) x1
 close(1)
 open(1,file='yg_test.dat',form='formatted', status='old')
 read(1,*) y1
 close(1)
! bring grids to center
 x2(2:$nx)=0.5d0*(x1(1:$nx-1)+x1(2:$nx)); x2(1)=x1(1)-0.5d0*(x1(2)-x1(1)); x1=x2;
 y2(2:$ny)=0.5d0*(y1(1:$ny-1)+y1(2:$ny)); y2(1)=y1(1)-0.5d0*(y1(2)-y1(1)); y1=y2;
!
! grid output from CHEST is at center
!
 open(1,file='xy_test.xyz',form='formatted', status='old')
 read(1,*)
! read(1,*) grid                 ! plot3d
! x2=grid(:,1,1); y2=grid(1,:,2) ! plot3d
 read(1,*) x2, y2
 close(1)
!
 griderror=max(maxval(abs(x1-x2)), maxval(abs(y1-y2)))
! write(0,*) x1-x2
! write(0,*) y1-y2
! write(0,*) y2
!
! compare solutions
!
 open(1,file='uexact_test.dat',form='formatted', status='old')
 read(1,*)
 read(1,*) uanl
 close(1)
!
 open(1,file='solution.dat',form='formatted', status='old')
 read(1,*)
! read(1,*) ! extra line for plot3D
 read(1,*) uches
 close(1)
!
 uches=abs(uanl-uches);
 error=maxval(uches(2:$nx-1,2:$ny-1))
 where=maxloc(uches(2:$nx-1,2:$ny-1))
 write(6,'(2F25.12,2I10)') griderror, error, where
 end " > compare.F90
#
$FC $FFLAGS $DEFS compare.F90 -o compare 
j=0
for f in `./compare`; do
 i[$j]=$f
 j=$(($j+1))
done
rm -f compare;
griderr=0.00002;
if [ `echo "${i[0]} > $griderr" | bc` -eq 1 ]; then
 echo " Grids do not match!";
 echo " TEST FAILED";
 test_passed=0
else
 ermax=0.01; # ad-hoc criterion
 echo " The maximum absolute error is "${i[1]}" at grid point ["${i[2]}","${i[3]}"]"
 echo " Comparing with maximum allowed error ("$ermax")"
 if [ `echo "${i[1]} < $ermax" | bc` -eq 1 ]; then
  echo " TEST PASSED";
  test_passed=1
 else
  echo " TEST FAILED";
  test_passed=0
 fi
fi
echo " ********************************************************************************************"
#
# clean up
#
if [ -L ches ]; then
 rm -f ches ; 
fi
#
exit $test_passed
