!charmm
continuum {
#Size
 nx=@{nx}; ny=@{ny}; nz=@{nz}

#Grid
 xgrid=exp ; x0=-@{len} ; x1=@{len}
 ygrid=exp ; y0=-@{len} ; y1=@{len}
 zgrid=exp ; z0=-@{len} ; z1=@{len}

#Continuum output options
 output_format=chest
 output_mode=text
 gridoutput=xyz_test.xyz

! exec:output
}

object {
 object=molecule
 object_center=(0 0 0)
 object_align=yes
 exec:info
}

molecule {
 structype=PQR
 structure=barstar.pqr
 kappa_solute=0
 kappa_solvent=0
 eps_solute=@{epsin}
 eps_solvent=@{epsout}
 eps_scale=discover
 energy_units=kt
 temperature=297.33
 eps_padding=@{epspad} ! this is added to the radius to compute the eps array
 stdev_eps=@{epssig}
 eps_radius_scale=0.65 ! note that if the eps radii are small vs. epssig, we might never reach eps=eps_solute
 stdev_charge=@{qsig}
 bcname=delphi
! slightly more esoteric options
 cutoff_eps_stdev=6
 cutoff_charge_stdev=6
! preserve_total_charge=yes
! normalize_charge_support=yes ! make sure that each total charge particle contributes its nominal charge to the grid
}

ches {
#BC
 phi_bcx0=object
 phi_bcx1=object
 phi_bcy0=object
 phi_bcy1=object
 phi_bcz0=object
 phi_bcz1=object

#Initial 3D data

 epsinit=object
 kappainit=constant ; kappaconst=0.
 rhsinit=object
 phiinit=constant   ; phiconst=0.

#Solver
 solver=@{solver}

#Output
 output_format=chest
 output_mode=binary
 phioutput=solution.dat
# epsoutput=eps.dat
 rhsoutput=rhs.dat

#Execution
 exec:init
 exec:solve
 exec:energy
 exec:totch
 exec:coulomb
! exec:output
 exec:done
} ! ches

multigrid {
# multigrid solver parameters
# multigrid_maximum_cycles=4
# multigrid_smooth_iterations=5
# multigrid_maximum_levels=4
 multigrid_smoother=@{smoother}
# multigrid_smoother=Jacobi
# multigrid_residual=2e-4 # for shorter running times
 multigrid_residual=1e-4
 multigrid_omega=1.44
}
