 case('exponential', 'EXPONENTIAL', 'EXP', 'exp', 'EXPO', 'expo');
!
#define __WARNIFMISSING
#define __VAR	__CONCAT(__dim,0)
#define __TAG	__CONCAT(__DIM,0)
#define __NAME	left __DIM-grid boundary
#include "parser/parser_macro1.src"
!
#define __VAR	__CONCAT(__dim,1)
#define __TAG	__CONCAT(__DIM,1)
#define __NAME	right __DIM-grid boundary
#include "parser/parser_macro1.src"
!
#define __MINUSERR
#define __VAR	__CONCAT(__dim,stretch)
#define __TAG	__CONCAT(__DIM,STRETCH)
#define __NAME	__DIM-grid stretching parameter
#include "parser/parser_macro1.src"
! call grid generator
         __CONCAT(__dim,cor)=>grid_exponential(__CONCAT(__dim,0),__CONCAT(__dim,1),__CONCAT(n,__dim)-1,__CONCAT(__dim,stretch))
        case('hyperbolictan','HYPERBOLICTAN','HTAN','htan'); ! will add support in the future
#define __WARNIFMISSING
#define __VAR	__CONCAT(__dim,0)
#define __TAG	__CONCAT(__DIM,0)
#define __NAME	left __DIM-grid boundary
#include "parser/parser_macro1.src"
!
#define __VAR	__CONCAT(__dim,1)
#define __TAG	__CONCAT(__DIM,1)
#define __NAME	right __DIM-grid boundary
#include "parser/parser_macro1.src"
!
#define __MINUSERR
#define __VAR	__CONCAT(__dim,stretch)
#define __TAG	__CONCAT(__DIM,STRETCH)
#define __NAME	__DIM-grid stretching parameter
#include "parser/parser_macro1.src"
!         __CONCAT(__dim,cor)=>grid_hyperbolictan(__CONCAT(__dim,0),__CONCAT(__dim,1),__CONCAT(__dim,stretch))
!
!    generate grid based on the object:
        case('object', 'OBJECT');
         __CONCAT3(q,__dim,gridobject)=.true.
         call message(whoami,__STRING(__DIM-grid will be generated from object))
         call warning(whoami,__STRING(Number of __DIM-grid cells will be adjusted to match requested resolution),0)
!
!#undef  __WARNIFMISSING
#define __DEFAULT
!
#define __DEFAULT_VAL dmin_default
#define __VAR	__CONCAT(d,__CONCAT(__dim,min))
#define __TAG	__CONCAT(D,__CONCAT(__DIM,MIN))
#define __NAME	minimum __CONCAT(__DIM,-grid) spacing
#include "parser/parser_macro1.src"
!
#define __DEFAULT_VAL stretch_default
#define __VAR	__CONCAT(__dim,stretch)
#define __TAG	__CONCAT(__DIM,STRETCH)
#define __NAME	__CONCAT(__DIM,-grid) stretching parameter
#include "parser/parser_macro1.src"
!
!#undef  __DEFAULT
#define __DEFAULT_VAL stretchfix_default
#undef  __MINUSERR
#define __BOOL
#define __VAR	__CONCAT(__dim,stretchfix)
#define __TAG	__CONCAT(__DIM,STRETCHFIX)
#define __NAME	flag to fix __CONCAT(__DIM,-stretching) parameter
#include "parser/parser_macro1.src"
!
#define __DEFAULT_VAL optimize_default
#define __BOOL
#define __VAR	__CONCAT(__dim,optimize)
#define __TAG	__CONCAT(__DIM,OPTIMIZE)
#define __NAME	flag to optimize __CONCAT(__DIM,-grid) factorization
#include "parser/parser_macro1.src"
!
#undef  __BOOL
#define __DEFAULT
#define __DEFAULT_VAL buffer_default
#define __VAR	__CONCAT(__dim,1)
#define __TAG	__CONCAT(__DIM,BUFFER)
#define __NAME	__CONCAT(__DIM,-grid) buffer
#include "parser/parser_macro1.src"
!
        case('NONE','none'); ! nothing
        case default ! assume __DIMGRID is set to a file name
!
! to do: need to catch io exception properly
         iostatus=0
         open(unit=100, file=__CONCAT(__dim,grid_file), form='FORMATTED', status='OLD', IOSTAT=iostatus)
#define __ng __CONCAT(n,__dim)
         allocate( __CONCAT(__dim,cor)(__ng))
         i=0
         do while (iostatus.ge.0)
          read(100, *, iostat=iostatus) __dim
          i=i+1
          if (i.le.__ng) __CONCAT(__dim,cor) (i)=__dim
         enddo
         close(100)
!
         if (i.gt.__ng) then 
          call warning(whoami, __STRING(__DIM)//"-GRID FILE HAS MORE LINES THAN EXPECTED.", 0)
         elseif (i.lt.__ng) then 
          call warning(whoami, __STRING(__DIM)//"-GRID FILE DOES NOT CONTAIN ENOUGH ENTRIES. ABORT.", -1)
         endif

#undef __dim
#undef __DIM
#undef __MINUSERR
#undef __DEFAULT
