#ifdef __PARALLEL
#define __COMM __CONCAT(MPI_COMM_,__GRIDCOMM )
#define __ME   __CONCAT(ME_,__GRIDCOMM )
#define __NCPU __CONCAT(SIZE_,__GRIDCOMM )
#else
#define __COMM
#define __ME 0
#define __NCPU 1
#endif
!
      module grid
!     contains all parameters for the computational grid
      use SIZE
      __DEP_PARSER
      __DEP_CONST
#ifdef __PARALLEL
      __DEP_MPI
      __DEP_MULTICOM
#endif
      __IMPNONE
!
      private
!
      public grid_initialize
      public grid_done
      private grid_exponential   ! generate exponential grid
      private grid_around_object   ! generate a grid automatically based on shape (and other) information
!
!      private grid_hyperbolictan ! generate hyperbolic tan grid
!      private grid_htan ! generate hyperbolic tan grid
!
#define __CTX __STRING(__GRIDCTX)
!
      float, pointer, public, save, dimension(:) :: &
     &                                    xcor,xcen,& ! x-corner, x-center
     &                                    ycor,ycen,&
     &                                    zcor,zcen,&
! metrics
     &                                    dxcor,dxcen,odxcor,odxcen,& ! corner-corner; center-center; 1/(..)
     &                                    dycor,dycen,odycor,odycen,&
     &                                    dzcor,dzcen,odzcor,odzcen
!
!
      bool, public, save :: grid_initialized=.false.
!
      int :: warnlev=0
!
      contains
       subroutine grid_initialize()
       __DEP_OUTPUT
       use object, only: object_dimens
       use state, only: state_initialized, state_initialize
       __IMPNONE
!
       character(len=vartaglen) :: xgrid_file, ygrid_file, zgrid_file, fmt, keyword
       integer :: iostatus=0
       int :: i=0, j=0, k=0, l
       int :: bug
       float :: x, y, z
       float :: x0, x1, y0, y1, z0, z1, xstretch, ystretch, zstretch
       float :: dxmax, dxmin, dymax, dymin, dzmax, dzmin
       bool :: qxgridobject=.false., qygridobject=.false., qzgridobject=.false.
       bool :: xstretchfix=.false., ystretchfix=.false., zstretchfix=.false.
       float, pointer :: dimens(:,:)=>NULL() ! object dimensions
       float, pointer :: agrid(:)=>NULL()
       int :: nnx, nny, nnz, ndim
       bool :: q3d
!    default parameters for automatic grid generation
!
       float, parameter :: dmin_default=half, stretch_default=1.05d0, buffer_default=30d0
!
       __IAM(GRID_INITIALIZE)
!
       __SETWARNLEV
!
       if (grid_initialized) call grid_done() ! clean up memory if needed
!
       if (.not.size_initialized) then 
        call warning(whoami, 'Size not initialized. Nothing done.', warnlev-1)
        return
       endif
!
! nullify pointers
       nullify(xcor, ycor, zcor, xcen, ycen, zcen, dxcor, dycor, dzcor, dxcen, dycen, dzcen, odxcen, odycen, odzcen)
       q3d=.not.q2d
!
!    generate/read grids
!
#define __CONTEXT __CTX
!
       if (__ME.le.0) then ! only root node does this, then broadcasts to the other nodes
!
!========================================= x-grid
       xgrid_file=getval_nocase('XGRID',__CTX) ! query parser module for grid filename 
!     check for missing value to avoid crash
       if (len_trim(xgrid_file).le.0) then
        call warning(whoami, '"XGRID" is missing.',-1)
       endif
!
       select case(xgrid_file)
#define __dim x
#define __DIM X
#include "gridopts.def"
       end select
!
!========================================== y-grid
       ygrid_file=getval_nocase('YGRID',__CTX) ! query parser module for grid filename 
!     check for missing value to avoid crash
       if (len_trim(ygrid_file).le.0) then
        call warning(whoami, '"YGRID" is missing.',-1)
       endif
       select case(ygrid_file)
#define __dim y
#define __DIM Y
#include "gridopts.def"
       end select
!========================================== z-grid
       if (q3d) then ! 3D 
        zgrid_file=getval_nocase('ZGRID',__CTX) ! query parser module for grid filename 
!     check for missing value to avoid crash
        if (len_trim(zgrid_file).le.0) then
         call warning(whoami, '"ZGRID" is missing.',-1)
        endif
        select case(zgrid_file)
         case(''); ! do nothing; allow to skip z-grid for 2D problems
#define __dim z
#define __DIM Z
#include "gridopts.def"
        end select
!
       else ! 2D
        if (existtag_nocase('ZGRID')) then 
         call warning(whoami, '"ZGRID" will be ignored in 2D configuration.',0)
        endif
        allocate(zcor(nz)) ! zero-sized allocations should be valid
       endif
!
!****** if automatic grid generation requested, perform it here
!
       if (qxgridobject.or.qygridobject.or.qzgridobject) then 
         nnx=nx; nny=ny; nnz=nz;
         dimens=>object_dimens()
         ndim=size(dimens,1); ! number of dimensions
       endif
! x-grid
       if (qxgridobject) then 
        if (ndim.gt.0) then 
         agrid=>grid_around_object( dimens(1,2), dimens(1,3), dxmin, xstretch, xstretchfix, x1 ) 
!            write(0,*) agrid, 'AA'
         if (associated(agrid)) then; nnx=size(agrid); 
          if (associated(xcor)) deallocate(xcor); xcor=>agrid
!            write(0,*) xcor, 'AA'
         else ; call warning(whoami,' X-grid could not be created from object.',-1); qxgridobject=.false. ;endif
        else
         call warning(whoami,' Object dimension less than one. Cannot build X-grid.',-1); qxgridobject=.false. ;
        endif
       endif ! xgrid
! y-grid
       if (qygridobject) then 
        if (ndim.gt.1) then 
         agrid=>grid_around_object( dimens(2,2), dimens(2,3), dymin, ystretch, ystretchfix, y1 )
         if (associated(agrid)) then; nny=size(agrid); 
          if (associated(ycor)) deallocate(ycor); ycor=>agrid
         else ; call warning(whoami,' Y-grid could not be created from object.',-1); qygridobject=.false. ;endif
        else 
         call warning(whoami,' Object dimension less than two. Cannot build Y-grid.',-1); qygridobject=.false. ;
        endif
       endif ! ygrid
! z-grid
       if (qzgridobject) then 
        if (q3d) then 
         if (ndim.gt.2) then 
          agrid=>grid_around_object( dimens(3,2), dimens(3,3), dzmin, zstretch, zstretchfix, z1 ) 
          if (associated(agrid)) then; nnz=size(agrid);
           if (associated(zcor)) deallocate(zcor); zcor=>agrid
          else ; call warning(whoami,' Z-grid could not be created from object.',-1); qzgridobject=.false. ;endif
         else 
          call warning(whoami,' Object dimension less than three. Cannot build Z-grid.',-1); qzgridobject=.false. ;
         endif
        else ! 2D problem
         call warning(whoami,' Object dimension is three but geometry is 2D. Cannot build Z-grid.',-1); qzgridobject=.false. ;
        endif
       endif
! 
       if (associated(dimens)) deallocate(dimens)
!****** end of automatic grid generation
       endif ! __ME.eq.0
!
!  reduce warnings and terminate if they are fatal
       if (fatal_warning(__COMM)) then
        if (associated(xcor)) deallocate(xcor)
        if (associated(ycor)) deallocate(ycor)
        if (associated(zcor)) deallocate(zcor)
        return
       endif
!
!****** additional parallel code for automatic grid generation
#if __PARALLEL
       if (__NCPU.gt.1) then 
        call MPI_BCAST(qxgridobject,1,mpibool,0,__COMM,bug)
        call MPI_BCAST(qygridobject,1,mpibool,0,__COMM,bug)
        call MPI_BCAST(qzgridobject,1,mpibool,0,__COMM,bug)
       endif
#endif
!**********************************************
       if (qxgridobject) then 
#if __PARALLEL
        if (__NCPU.gt.1) call MPI_BCAST(nnx,1,mpiint,0,__COMM,bug)
#endif
! hack into SIZE module: note that if state has been initialized, need to reinitialize; do not do this at home
        nx=nnx
       endif
!**********************************************
       if (qygridobject) then 
#if __PARALLEL
       if (__NCPU.gt.1) call MPI_BCAST(nny,1,mpiint,0,__COMM,bug)
#endif
! hack into SIZE module
        ny=nny
       endif
!**********************************************
       if (qzgridobject) then
#if __PARALLEL
        if (__NCPU.gt.1) call MPI_BCAST(nnz,1,mpiint,0,__COMM,bug)
#endif
! hack into SIZE module
        nz=nnz
       endif
!
       if (qxgridobject.or.qygridobject.or.qzgridobject) then 
        if (state_initialized) call state_initialize() ! will reinitialize main arrays if nx,ny,nz change; should be a _very_ rare situation
       endif
!
!  reduce warnings and terminate if they are fatal (otherwise bcasts will fail below)
!
! write(0,*) __ME, fatal_warning(__COMM),'!'
       if (fatal_warning(__COMM)) then
        if (associated(xcor)) deallocate(xcor)
        if (associated(ycor)) deallocate(ycor)
        if (associated(zcor)) deallocate(zcor)
        return
       endif
! allocate arrays on other nodes
       if (__ME.gt.0) allocate(xcor(nx), ycor(ny), zcor(nz))
!
#if __PARALLEL
       if (__NCPU.gt.1) then 
        call MPI_BCAST(xcor,nx,mpi_float,0,__COMM,bug)
        call MPI_BCAST(ycor,ny,mpi_float,0,__COMM,bug)
        if (q3d) call MPI_BCAST(zcor,nz,mpi_float,0,__COMM,bug)
       endif
#endif
!
!    allocate other grid arrays
       allocate(xcen(nx), dxcor(nx), dxcen(nx), odxcor(nx), odxcen(nx))
       allocate(ycen(ny), dycor(ny), dycen(ny), odycor(ny), odycen(ny))
       allocate(zcen(nz), dzcor(nz), dzcen(nz), odzcor(nz), odzcen(nz))
!
!    offset for staggered components
!
       do i=2,nx
         xcen(i)=(xcor(i)+xcor(i-1))*half
       enddo
       xcen(1)=xcor(1)-half*(xcor(2)-xcor(1))
!
       do j=2,ny
         ycen(j)=(ycor(j)+ycor(j-1))*half
       enddo
       ycen(1)=ycor(1)-half*(ycor(2)-ycor(1))
!
       if (q3d) then
        do k=2,nz
         zcen(k)=(zcor(k)+zcor(k-1))*half
        enddo
        zcen(1)=zcor(1)-half*(zcor(2)-zcor(1))
       endif
!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
!    metrics
!    corner-to-corner
       dxcor(2:nx)=xcor(2:nx)-xcor(1:nx-1); dxcor(1)=dxcor(2) ! note that the metric 'spans' the corresponding center 
       dycor(2:ny)=ycor(2:ny)-ycor(1:ny-1); dycor(1)=dycor(2)
       if (q3d) then ; dzcor(2:nz)=zcor(2:nz)-zcor(1:nz-1); dzcor(1)=dzcor(2); endif
!    center-co-center
       dxcen(1:nx-1)=xcen(2:nx)-xcen(1:nx-1); dxcen(nx)=dxcen(nx-1) ! note again that the metric spans the corr. corner
       dycen(1:ny-1)=ycen(2:ny)-ycen(1:ny-1); dycen(ny)=dycen(ny-1)
       if (q3d) then ; dzcen(1:nz-1)=zcen(2:nz)-zcen(1:nz-1); dzcen(nz)=dzcen(nz-1); endif
!    note that the fluids code has a true 2nd order approximation to the ghost center-center metrics (probably unimportant)
!    invert metrics
       odxcor=one/dxcor;     odycor=one/dycor;      if (q3d) odzcor=one/dzcor;
       odxcen=one/dxcen;     odycen=one/dycen;      if (q3d) odzcen=one/dzcen;
!
!    compute min and max cell size
!
       dxmax=maxval(dxcor);       dxmin=minval(dxcor);
       dymax=maxval(dycor);       dymin=minval(dycor);
       if (q3d) then ;       dzmax=maxval(dzcor);       dzmin=minval(dzcor);
       else ;                dzmax=-one; dzmin=-one
       endif
!
       if (__ME.eq.0) then 
        __MSG('(A)',        '============== GRID INITIALIZED ==============')
      __MSG('(A,3I5," ( ",I9,A," ) ")','Global domain size: ',nx,ny,nz,(nx-2)*(ny-2)*(nz-2),' DOF')
        fmt='(A,'//realfmt//')'
        __MSG(fmt,  'dx max    =',dxmax)
        __MSG(fmt,  'dx min    =',dxmin)
        __MSG(fmt,  'dy max    =',dymax)
        __MSG(fmt,  'dy min    =',dymin)
        if (q3d) then 
         __MSG(fmt, 'dz max    =',dzmax)
         __MSG(fmt, 'dz min    =',dzmin)
        endif
        __MSG(fmt,  'dx/dy max =',dxmax/dymin)
        __MSG(fmt,  'dx/dy min =',dxmin/dymax)
        if (q3d) then 
         __MSG(fmt, 'dx/dz max =',dxmax/dzmin)
         __MSG(fmt, 'dx/dz min =',dxmin/dzmax)
         __MSG(fmt, 'dy/dz max =',dymax/dzmin)
         __MSG(fmt, 'dy/dz min =',dymin/dzmax)
         __MSG('(A)',       '=============================================')
        endif
       endif
!
       grid_initialized=.true.
! aa to be removed below
!        write(100,*) xcen
!        write(100,*) dxcen
!        write(200,*) ycen
!        write(200,*) dycen
!        write(300,*) zcen
!        write(300,*) dzcen
       end subroutine grid_initialize 
!*******************************************************************************************
       subroutine grid_done
       deallocate(xcor,xcen,ycor,ycen,zcor,zcen,&
     &            dxcor,dxcen,dycor,dycen,dzcor,dzcen,&
     &            odxcor,odxcen,odycor,odycen,odzcor,odzcen)
!
       grid_initialized=.false.
!
       end subroutine grid_done
!
!*******************************************************************************************
       function grid_exponential(a,b,n,z)
       __DEP_CONST
       __DEP_OUTPUT
! create a stretched grid of length b-a, discretized into nx points with x(1)=a and x(nx)=b;
!   a: low value; 
!   b: high value; 
!   n: number of points; note that the routine returns an array of length n+1
!   z: stretching factor ( 1 no stretching; z<0 -- shrinking from a to b; z>0 -- growing from a to b )
!
       float :: a, b, z
       int :: n, i
       float, pointer, dimension(:) :: grid_exponential, x
!
       __IAM(GRID_EXPONENTIAL)
!
       float :: l
       float :: delta
!
       if (n.le.2) then
        call warning(whoami,'Number of grid points must be at least two. Nothing done.',warnlev-1);
        nullify(grid_exponential)
        return
       endif
!
       l=b-a
       if (ABS(z-one).lt.ERRTOL()) then
         delta=l/(n-1) 
       else 
         delta=l*(one-z)/(one-(z**(n-1)))
       endif
!
       allocate(grid_exponential(n+1))
       x=>grid_exponential
       x(1)=a
       do i=2,n+1
        x(i)=x(i-1)+delta; ! grid points
        delta=delta*z;
       enddo
!
       end function grid_exponential
!*******************************************************************************************
       function grid_around_object(xmin,xmax,dxmin,stretch,stretchfix,buffer) 
       __DEP_CONST
       __DEP_OUTPUT
!
       float :: xmin, xmax, dxmin, stretch, buffer
       bool :: stretchfix
       float, pointer, dimension(:) :: grid_around_object
       float, pointer, dimension(:) :: g
       int :: n1, n2, n, nnew(1)
       int, dimension(4) :: ns
       float :: x, dx0, dx
       float :: TOL
       float :: b, c, s, ys, dyds, ys1, dyds1, oos, sn
       __IAM(GRID_AROUND_OBJECT)
       int, parameter :: maxit=500
       int :: i, j
!
!      sandwich a uniform grid between two exponential grids ; number of points is adjusted for the multigrid solver
!
       nullify(grid_around_object)
!
       if (buffer.lt.0) then 
        call warning(whoami, 'Grid buffer cannot be negative. Abort.',warnlev-1);
        return
       endif
!
       if (stretch.le.0) then 
        call warning(whoami, 'Grid stretching cannot be zero or less. Abort.',warnlev-1);
        return
       endif
!
       if (xmax.le.xmin) then 
        call warning(whoami, 'Maximum value less than minimum. Abort.',warnlev-1);
        return
       endif
!
       x=0d0; n1=1
       dx=dxmin
       do while (x.lt.buffer) 
        x=x+dx
        dx=dx*stretch
        n1=n1+1
       enddo
! add number of points for inner grid
       n2 = INT((xmax-xmin) / dxmin) + 1
! total number of points
       n = n1 + n2 + n1 - 2 ! subtract two points since the end of one grid is the beginning of the next
       n = n-3 ; ! further subtract 3 since we are concerned with the number of inner cell-center points
!    adjust n so it is suitable for constructing subgrids
!
!    for now, allow four possible factorizations : all 2s, one 3, one 5, one 7
       b=one/log(two);
!
       c=b*log(one*n)   ; ns(1) =          itwo ** nint(c); ! just 2s
       c=b*log(one*n/3) ; ns(2) = ithree * itwo ** nint(c); ! one 3
       c=b*log(one*n/5) ; ns(3) = ifive  * itwo ** nint(c); ! one 5
       c=b*log(one*n/7) ; ns(4) = iseven * itwo ** nint(c); ! one 7
! now choose the factorization that gives the closest number of points to n
!        write(0,*) ns, n, 'AA'
       nnew=ns( minloc ( abs ( ns-n ) ) ) + 2 ! note that nnew must be an array of rank 1; add two points (for ghost cells)
! now need to modify grid spacings to correspond to the new grid size
! for simplicity, keep the inner grid the same, but modify stretching:
       n2=n2 + mod(n2,itwo) * sign(ione,n-nnew(1)) ; ! make the number of inner points even if it is not
       dx0=(xmax-xmin)/(n2-1); ! spacing between inner points
       n1=(nnew(1)-n2)/2 ; ! n1 count with ghost point; 
       n1=n1 - 1 ! corresponds to the number of intervals
!         write(0,*) n2, n1, nnew(1), dxmin, dx0, stretch, buffer, 'AA'
! compute new stretching coefficient (keep buffer region the same)
!
!     newton-raphson optimization to get optimal stretching parameter
!     number of desired intervals is n1 !
!
       s=stretch; ! start from provided value of stretching parameter
!
       if (.not.stretchfix) then 
!
       TOL=50*ERRTOL();
       i=0
!
       ys1=dx*(n1)-buffer         ! total length when s => 1; 
       dyds1=half * dx * (n1 ) * (n1-1) ! approximate derivative when s => 1
!
       do ! until converged or max. iterations exceeded
        i=i+1
        if ( abs(s-one).lt.TOL ) then 
         ys=ys1
         dyds=dyds1;
        else
         sn=s**(n1-1);
         oos=one/(one-s);
!
         ys   = dxmin * ( one-s*sn )*oos - buffer
         dyds = dxmin * ( s*sn * (n1 - 1)  - sn * n1 + one )*oos**2
        endif
!
        if ( abs(ys).lt.TOL ) exit ! got solution
        if (i.gt.maxit) then
         call warning(whoami,'Maximum number of iterations exceeded. Grid not generated.',warnlev-1)
         return
         exit
        endif
!
!       Newton iteration:
        s=s-ys/dyds;
!
       enddo
!
       endif ! stretchfix
!
!     now, generate complete grid:
!
       allocate(grid_around_object(nnew(1)))
       g=>grid_around_object ! shortcut handle
       g=zero                ! initialize
!
       dx=dx0;
       i=n1+2; ! there are n1+1 buffer points, including ghost point
       g(i)=xmin; 
! left buffer grid:
       do j=1,n1+1
        g(i-1)=g(i)-dx
        dx=dx*s
        i=i-1
       enddo
! middle (uniform) grid:
       i=n1+2;
!
       dx=dx0
       do j=1,n2-1 ! the first inner point is already defined at n1+2, there are n2-1 remaining ones
        g(i+1)=g(i)+dx;
        i=i+1
       enddo
! right buffer grid
!
       do j=1,n1+1 ! add n1+1 points in the right buffer
        g(i+1)=g(i)+dx
        dx=dx*s
        i=i+1
       enddo
!
! all done
!
!        write(0,*) i,g
       end function grid_around_object
!
      end module grid
