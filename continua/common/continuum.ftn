#define __COMMUNICATOR __CONTCOMM
#define __CONTEXT __CONTCTX
#define __CTX __STRING(__CONTEXT)
#include "setcomm.def"
#ifdef __QPRINT
#undef __QPRINT
#endif
#define __QPRINT qprint=(__ME.eq.0)
module continuum
 use SIZE
 use grid
 use output
#ifdef __PARALLEL
 __DEP_MULTICOM
 use multicom
 __DEP_MPI
#endif
!
 __IMPNONE
!
 private
 bool, save :: continuum_initialized=.false.
!
 public continuum_initialize
 public continuum_exec
 public continuum_done
!
 contains
  subroutine continuum_initialize()
  __IAM(CONTINUUM_INITIALIZE)
  if (continuum_initialized) then ! already initialized
   call message(whoami,' Already initialized. Nothing done.')
  else
!
#ifdef __DEBUG
   call message(whoami, 'INITIALIZING SIZE', __DBGLEV)
#endif
   call size_initialize()
#ifdef __DEBUG
   call message(whoami, 'INITIALIZING GRID', __DBGLEV)
#endif
   call grid_initialize()
!
   if (fatal_warning(__COMM)) then 
    call terminate(whoami)
   else
    continuum_initialized=.true.
   endif
  endif ! if initialized
!
  end subroutine continuum_initialize
!===================================================
#define _IFS1 "INIT","INITIALIZE"
#define _DOS1 initialize
#define _IFS2 "OUTPUT"
#define _DOS2 output
#include "exec.def"
!===================================================
  subroutine continuum_done()
   call grid_done()
   call size_done()
   continuum_initialized=.false.
  end subroutine continuum_done
!===================================================
  subroutine continuum_output()
! only grid output currently available
! much code taken from ches_output (which should be replaced by this !)
       __DEP_PARSER
       use formats
       use chestio
       use plot3dio
!
       __IAM(CONTINUUM_OUTPUT)
       int :: ifmt=plot3d
       bool :: qbin ! whether binary output is used
       int :: i
!
       character(len=vartaglen) :: filename, output_format, output_mode
!
 __NULL_COMM_STOP
 __QPRINT
!
       if (existtag_nocase('output_format', __CTX)) then 
        output_format=getval_nocase_upper('output_format', __CTX);
        ifmt=-999
        do i=1,num_format
         if (output_format.eq.format_name(i)) then 
          ifmt=i
          exit
         endif
        enddo
       endif
!
       if (ifmt.gt.0) then
        call message(whoami,trim(format_name(ifmt))//' format will be used for output');
       else
        call warning(whoami,'Format "'//trim(output_format)//'" is not recognized',0)
        return
       endif
!
       if (existtag_nocase('output_mode', __CTX)) then
        output_mode=getval_nocase('output_mode', __CTX)
        select case(output_mode);
         case('BINARY', 'BIN', 'binary', 'bin'); 
          call message(whoami,'Using binary mode');
          qbin=.true.
         case('ASCII', 'TEXT', 'ascii', 'text'); 
          call message(whoami,'Using ASCII mode');
          qbin=.false.
         case default
          call warning(whoami,'Unknown output mode "'//trim(output_mode)//'". Will use ASCII',0);
          qbin=.false.
        end select
       else
        call message(whoami,'Using ASCII mode');
        qbin=.false.
       endif
!
       if (existtag_nocase('gridoutput', __CTX)) then
        filename=getval_nocase('gridoutput', __CTX)
        call message(whoami,'Writing grid to file "'//filename(1:len_trim(filename))//'"');
        select case(ifmt)
         case(plot3d); call plot3Dwrite_grid(filename,xcen,ycen,zcen,(/nx/),(/ny/),(/nz/),1,qbin _COMMA __COMM) ! plot3D requires size arrays
         case(chest);  call chest_write_grid(filename,xcen,ycen,zcen,nx,ny,nz,qbin _COMMA __COMM)
        end select
       endif
!
  end subroutine continuum_output
!
end module continuum
