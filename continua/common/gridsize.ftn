      module SIZE ! must be upper-case for the preprocessor to recognize
!
#ifdef __PARALLEL
       __DEP_MULTICOM
#endif
       private
!
       character(len=:), private, parameter :: ctx=__SIZECTX
!
       public size_initialize
       int, save, public ::  nx=0, ny=0, nz=0
       bool, save, public ::  size_initialized, q2D
!
      contains
       subroutine size_initialize(mx, my, mz)
       use output
       use parser
       __IMPNONE
       int, optional :: mx, my, mz
       character(len=:), parameter :: whoami='SIZE_INITIALIZE'
       int :: me, warnlev
!
       size_initialized=.false.
       q2D=.false.
!
 __SETWARNLEV
!      only root prints
       mx=atoi(getval_nocase('NX',ctx)) 
       my=atoi(getval_nocase('NY',ctx))
       if (existtag_nocase('NZ',ctx)) then ; mz=atoi(getval_nocase('NZ',ctx)) ; else ; mz=0 ; endif
!
       if (mx.lt.4) then
        call warning(whoami, 'NX less than 4.', warnlev)
       else
        nx=mx
       endif
!
       if (my.lt.4) then
        call warning(whoami, 'NY less than 4.', warnlev)
       else
        ny=my
       endif
!
       if (mz.lt.4) then
        call message(whoami, 'NZ less than 4. Assuming 2D configuration (NZ = 3).', warnlev)
        q2D=.true.
        nz=3
       else
        nz=mz
        q2D=.false.
       endif
!
       if (.not. fatal_warning( &
#ifdef __PARALLEL
&       MPI_COMM_GLOBAL &
#endif
&                              ) ) size_initialized=.true.
!
       end subroutine size_initialize
      end module SIZE
