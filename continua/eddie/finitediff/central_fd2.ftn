module central_fd2
 __DEP_CONST
 use SIZE         ! dimensions
 use eddie_grid   ! metrics
 use eddie_config
 __IMPNONE

 contains

!===================================================================================
      subroutine divergence(u,v,w,div)
!          Computes the divergence
      float, dimension(:,:,:) ::  u, v, w, div
!      float :: coef, odt
      int :: i,j,k
!
!      if (qimplicit_z) ; then ; coef = two ; else ; coef = one ; endif ; coef = coef * odt
!
! should store the previous i-point to save on mem. access
!
      do k=kb,ke  ; do j=jb,je ; do i=ib,ie
         div(i,j,k)=coef*( ap(i) * ( u(i,j,k)-u(i-1,j,  k  ) ) &
     &                   + bp(j) * ( v(i,j,k)-v(i,  j-1,k  ) ) &
     &                   + cp(k) * ( w(i,j,k)-w(i,  j,  k-1) ) &
     &                   )
      enddo       ; enddo      ; enddo
!
      end subroutine divergence
!===================================================================================
      subroutine corrector(upred, vpred, wpred, deltap, dt, u, v, w)
!                Performs the corector step upred => unew
!    VO 3.2013 : NOTE that with periodoc bcs, the last (nonghost) point in the domain does not need to be updated
      float, dimension(:,:,:) ::  u, v, w, upred, vpred, wpred, deltap
      float ::  coef, dt, dp, dpp
      int :: i, j, k
!
      if (qimplicit_z) ; then ; coef = half ; else ; coef = one ; endif ; coef = coef * dt
!
      do k=kb,ke  ; do j=jb,je ; dp=deltap(ib,j,k)
                                 do i=ib,ie 
!
       dpp=deltap(i+1,j,k)
!
       u(i,j,k)=upred(i,j,k) - coef * au(i) * ( dpp             - dp )
       v(i,j,k)=vpred(i,j,k) - coef * bv(j) * ( deltap(i,j+1,k) - dp )
       w(i,j,k)=wpred(i,j,k) - coef * cw(k) * ( deltap(i,j,k+1) - dp )
!
       dp=dpp
!
      enddo       ; enddo      ; enddo
!
      end subroutine corrector
!===================================================================================
      subroutine rhs_advection_diffusion(u, v, w, tv, rhsx_u, rhsx_v, rhsi_w, rhsi_v, rhsi_w)
!-----Formerly subroutine-Rhscent----------------------E. Balaras  7/1/99------
!
!      CUMPUTES THE RIGHT SIDE OF THE MOMENTUM EQUATION
!      (ADVECTION AND VISCOUS TERMS)
! 
!-----------------------------------------------------------------------
      float, dimension (:,:,:) :: u, v, w, &                 ! velocity field
     &                            rhsx_u, rhsx_v, rhsx_w, &  ! explicit part of right-hand-side
     &                            rhsi_u, rhsi_v, rhsi_w, &  ! implicit part of right-hand-side
     &                            tv                         ! nonconstant viscosity field
!
      float :: zimp, omzimp
!
      int :: i, j, k
      float :: wzminus, wzplus, wyminus, wyplus, wxminus, wxplus, &
     &     vzminus, vzplus, vyminus, vyplus, vxminus, vxplus,     &
     &     uzminus, uzplus, uyminus, uyplus, uxminus, uxplus,     &
     &     txzp, txzm, tzzp, tzzm, tyzm, tyyp, tyzp, tvip, txyp,  &
     &     tvkp, txxm, txym, txxp, tyym, tvjp, tvim, tvjm, tvkm,  &
     &     dwdzm, dwdzp, dwdxp, dwdym, dvdzp, dvdym, dvdxp,       &
     &     dudym, dvdxm, dudzp, dudzm, dvdyp, dvdzm, dwdyp,       &
     &     dudxp, dudxm, dudyp, dwdxm
!
!
      tvip=zero; tvim=zero; tvjp=zero; tvjm=zero; tvkm=zero, tvkp=zero
!
      if (qimplicit_z) then ; zimp=one ; else ; zimp=zero ; enddo ; omzimp = one-zimp
!
!CCCCCCCCCCCCCCCCCC     U COMPONENT     CCCCCCCCCCCCCCCCCC
!
      do k=kb,ke  ; do j=jb,je ; do i=ib,ie
!...get velocities at 1/2 locations
         UXPLUS =(u(I+1,J  ,K  )+u(I  ,J  ,K  ))*half
         UXMINUS=(u(I  ,J  ,K  )+u(I-1,J  ,K  ))*half
!
         VXPLUS =(v(I+1,J  ,K  )+v(I  ,J  ,K  ))*half
         VXMINUS=(v(I+1,J-1,K  )+v(I  ,J-1,K  ))*half
!
         WXPLUS =(w(I+1,J  ,K  )+w(I  ,J  ,K  ))*half
         WXMINUS=(w(I+1,J  ,K-1)+w(I  ,J  ,K-1))*half
!
         UYPLUS =(u(I  ,J+1,K  )+u(I  ,J  ,K  ))*half
         UYMINUS=(u(I  ,J  ,K  )+u(I  ,J-1,K  ))*half
!
         UZPLUS =(u(I  ,J  ,K+1)+u(I  ,J  ,K  ))*half
         UZMINUS=(u(I  ,J  ,K  )+u(I  ,J  ,K-1))*half
!
!...get derivatives at 1/2 locations
         dudxp= ap(i+1)*(u(i+1,j,  k)-u(i,  j,  k  ))
         dudxm= ap(i  )*(u(i,  j,  k)-u(i-1,j,  k  ))
         dudyp= bv(j  )*(u(i,  j+1,k)-u(i,  j,  k  ))
         dudym= bv(j-1)*(u(i,  j  ,k)-u(i,  j-1,k  ))
         dudzp= cw(k  )*(u(i,  j,k+1)-u(i,  j,  k  ))
         dudzm= cw(k-1)*(u(i,  j,  k)-u(i,  j,  k-1))
         dvdxp= au(i  )*(v(i+1,j  ,k)-v(i,  j  ,k  ))
         dvdxm= au(i  )*(v(i+1,j-1,k)-v(i,  j-1,k  ))
         dwdxp= au(i  )*(w(i+1,j,  k)-w(i,  j,  k  ))
         dwdxm= au(i  )*(w(i+1,j,k-1)-w(i,  j,  k-1))
!...get nu_t where needed
#ifdef __TURVIS
         tvjp=quarter*(tv(i,j,  k  ) + tv(i+1,j,  k  )  &
     &                +tv(i,j+1,k  ) + tv(i+1,j+1,k  )) 
         tvjm=quarter*(tv(i,j,  k  ) + tv(i+1,j,  k  )  &
     &                +tv(i,j-1,k  ) + tv(i+1,j-1,k  ))
         tvkp=quarter*(tv(i,j,  k  ) + tv(i+1,j,  k  )  &
     &                +tv(i,j,  k+1) + tv(i+1,j,  k+1))
         tvkm=quarter*(tv(i,j,  k  ) + tv(i+1,j,  k  )  &
     &                +tv(i,j,  k-1) + tv(i+1,j,  k-1))
#endif
!...flux of normal total stresses
         txxp=(viscosity +two*tv(i+1,j,k))*dudxp
         txxm=(viscosity +two*tv(i,  j,k))*dudxm
         tyyp=(viscosity +    tvjp       )*dudyp
         tyym=(viscosity +    tvjm       )*dudym
         tzzp=(viscosity +    tvkp       )*dudzp
         tzzm=(viscosity +    tvkm       )*dudzm
!...flux of cross sgs stresses
         txyp=tvjp*dvdxp
         txym=tvjm*dvdxm
         txzp=tvkp*dwdxp
         txzm=tvkm*dwdxm
!
!......calculate RHS for u-momentum
!
         rhsx_u(i,j,k)= &
!..advective term in conservative formulation
     &   -au(i)*(uxplus*uxplus-uxminus*uxminus) &
     &   -bu(j)*(vxplus*uyplus-vxminus*uyminus) &
     &   -cu(k)*(wxplus*uzplus-wxminus*uzminus) &
!..viscous + part of subgrid stress diffusion
     &   +au(i)*(txxp-txxm) &
     &   +bu(j)*(tyyp-tyym) &
     &   +cu(k)*(tzzp-tzzm)*omzimp &
!..rest of sgs diffusion
     &   +bu(j)*(txyp-txym) &
     &   +cu(k)*(txzp-txzm) &

!..store explicit part of wall normal diffusio for C.N.
         rhsi_u(i,j,k) = cu(k)*(tzzp-tzzm)*zimp
!
      enddo ; enddo ; enddo
!
!CCCCCCCCCCCCCCCCCC     V COMPONENT     CCCCCCCCCCCCCCCCCC
!
      do k=kb, ke  ;  do j=jb,je  ;  do i=ib,ie
!...get velocities at 1/2 locations
         vxplus =(v(i+1,j  ,k  )+v(i  ,j  ,k  ))*half
         vxminus=(v(i  ,j  ,k  )+v(i-1,j  ,k  ))*half
!
         vyplus =(v(i  ,j+1,k  )+v(i  ,j  ,k  ))*half
         vyminus=(v(i  ,j  ,k  )+v(i  ,j-1,k  ))*half
!
         vzplus =(v(i  ,j  ,k+1)+v(i  ,j  ,k  ))*half
         vzminus=(v(i  ,j  ,k  )+v(i  ,j  ,k-1))*half
!
         uyplus =(u(i  ,j+1,k  )+u(i  ,j  ,k  ))*half
         uyminus=(u(i-1,j+1,k  )+u(i-1,j  ,k  ))*half
!
         wyplus =(w(i  ,j+1,k  )+w(i  ,j  ,k  ))*half
         wyminus=(w(i  ,j+1,k-1)+w(i  ,j  ,k-1))*half

!...get derivatives at 1/2 locations
         dvdxp= au(i  )*( v(i+1,j,  k  )-v(i,  j,  k  ) )
         dvdxm= au(i-1)*( v(i,  j,  k  )-v(i-1,j,  k  ) )
         dvdyp= bp(j+1)*( v(i,  j+1,k  )-v(i,  j,  k  ) )
         dvdym= bp(j  )*( v(i,  j,  k  )-v(i,  j-1,k  ) )
         dvdzp= cw(k  )*( v(i,  j,  k+1)-v(i,  j,  k  ) )
         dvdzm= cw(k-1)*( v(i,  j,  k  )-v(i,  j,  k-1) )
         dudyp= bv(j  )*( u(i,  j+1,k  )-u(i,  j,  k  ) )
         dudym= bv(j  )*( u(i-1,j+1,k  )-u(i-1,j,  k  ) )
         dwdyp= bv(j  )*( w(i,  j+1,k  )-w(i,  j,  k  ) )
         dwdym= bv(j  )*( w(i,  j+1,k-1)-w(i,  j,  k-1) )
!...get nu_t where needed
#ifdef __TURVIS
         tvip=quarter*(tv(i,j  ,k) + tv(i+1,j,  k  )   &
     &                +tv(i,j+1,k) + tv(i+1,j+1,k  ))
         tvim=quarter*(tv(i,j  ,k) + tv(i-1,j,  k  )   &
     &                +tv(i,j+1,k) + tv(i-1,j+1,k  ))
         tvkp=quarter*(tv(i,j  ,k) + tv(i,  j,  k+1)   &
     &                +tv(i,j+1,k) + tv(i,  j+1,k+1))
         tvkm=quarter*(tv(i,j  ,k) + tv(i,  j,  k-1)   &
     &                +tv(i,j+1,k) + tv(i,  j+1,k-1))
#endif
c...flux of normal total stresses
         txxp=(viscosity+    tvip       )*dvdxp
         txxm=(viscosity+    tvim       )*dvdxm
         tyyp=(viscosity+two*tv(i,j+1,k))*dvdyp
         tyym=(viscosity+two*tv(i,j  ,k))*dvdym
         tzzp=(viscosity+    tvkp       )*dvdzp
         tzzm=(viscosity+    tvkm       )*dvdzm
c...flux of cross sgs stresses
         txyp=tvip*dudyp
         txym=tvim*dudym
         tyzp=tvkp*dwdyp
         tyzm=tvkm*dwdym
!
!......calculate RHS for v-momentum
!
         rhsx_v(i,j,k)= &
!..advective term in conservative formulation
     &    -av(i)*(uyplus*vxplus-uyminus*vxminus) &
     &    -bv(j)*(vyplus*vyplus-vyminus*vyminus) &
     &    -cv(k)*(wyplus*vzplus-wyminus*vzminus) &
!..viscous+part of sgs diffusion
     &    +av(i)*(txxp-txxm) &
     &    +bv(j)*(tyyp-tyym) &
& +omzimp *cv(k)*(tzzp-tzzm) &
!..rest of sgs diffusion
     &    +av(i)*(txyp-txym) &
     &    +cv(k)*(tyzp-tyzm)

!..store explicit part of wall normal diffusio for C.N.
          rhsi_v(i,j,k)=zimp * cv(k)*(tzzp-tzzm)
!
      enddo ;  enddo  ;  enddo
!
!CCCCCCCCCCCCCCCCCC    W COMPONENT     CCCCCCCCCCCCCCCCCC
!
      do k=bk,ke  ;  do j=jb,je  ;  do i=ib,ie
!    velocities at 1/2 locations
          wxplus =(w(i+1,j  ,k  ) + w(i  ,j  ,k  ))*half
          wxminus=(w(i  ,j  ,k  ) + w(i-1,j  ,k  ))*half
!
          wyplus =(w(i  ,j+1,k  ) + w(i  ,j  ,k  ))*half
          wyminus=(w(i  ,j  ,k  ) + w(i  ,j-1,k  ))*half
!
          wzplus =(w(i  ,j  ,k+1) + w(i  ,j  ,k  ))*half
          wzminus=(w(i  ,j  ,k  ) + w(i  ,j  ,k-1))*half
!
          uzplus =(u(i  ,j  ,k+1) + u(i  ,j  ,k  ))*half
          uzminus=(u(i-1,j  ,k+1) + u(i-1,j  ,k  ))*half
!
          vzplus =(v(i  ,j  ,k+1) + v(i  ,j  ,k  ))*half
          vzminus=(v(i  ,j-1,k+1) + v(i  ,j-1,k  ))*half

!    derivatives at 1/2 locations
          dwdxp= au(i  )*(w(i+1,j,  k  )-w(i,  j,  k  ))
          dwdxm= au(i-1)*(w(i,  j,  k  )-w(i-1,j,  k  ))
          dwdyp= bv(j  )*(w(i,  j+1,k  )-w(i,  j,  k  ))
          dwdym= bv(j-1)*(w(i,  j,  k  )-w(i,  j-1,k  ))
          dwdzp= cp(k+1)*(w(i,  j,  k+1)-w(i,  j,  k  ))
          dwdzm= cp(k  )*(w(i,  j,  k  )-w(i,  j,  k-1))
          dudzp= cw(k  )*(u(i,  j,  k+1)-u(i  ,j,  k  ))
          dudzm= cw(k  )*(u(i-1,j,  k+1)-u(i-1,j,  k  ))
          dvdzp= cw(k  )*(v(i,  j,  k+1)-v(i,  j,  k  ))
          dvdzm= cw(k  )*(v(i,  j-1,k+1)-v(i,  j-1,k  ))
c    nu_t where needed
#ifdef __TURVIS
          tvip=quarter*(tv(i,j,k  ) + tv(i+1,j,  k  )
     &                 +tv(i,j,k+1) + tv(i+1,j,  k+1))
          tvim=quarter*(tv(i,j,k  ) + tv(i-1,j,  k  )
     &                 +tv(i,j,k+1) + tv(i-1,j,  k+1))
          tvjp=quarter*(tv(i,j,k  ) + tv(i,  j+1,k  )
     &                 +tv(i,j,k+1) + tv(i,  j+1,k+1))
          tvjm=quarter*(tv(i,j,k  ) + tv(i,  j-1,k  )
     &                 +tv(i,j,k+1) + tv(i,  j-1,k+1))
#endif
!...flux of normal total stresses
          txxp=(viscosity +     tvip       )*dwdxp
          txxm=(viscosity +     tvim       )*dwdxm
          tyyp=(viscosity +     tvjp       )*dwdyp
          tyym=(viscosity +     tvjm       )*dwdym
          tzzp=(viscosity + two*tv(i,j,k+1))*dwdzp
          tzzm=(viscosity + two*tv(i,j,k  ))*dwdzm
!...flux of cross sgs stresses
          txzp=tvip*dudzp
          txzm=tvim*dudzm
          tyzp=tvjp*dvdzp
          tyzm=tvjm*dvdzm
!
!......calculate RHS for w-momentum
!
          rhsx_w(i,j,k)= &
!..advective term in conservative formulation
     &     -aw(i)*(uzplus * wxplus - uzminus * wxminus) &
     &     -bw(j)*(vzplus * wyplus - vzminus * wyminus) &
     &     -cw(k)*(wzplus * wzplus - wzminus * wzminus) &
!..viscous + subgrid diffusion
     &     +aw(i)*(txxp-txxm) &
     &     +bw(j)*(tyyp-tyym) &
   &+omzimp*cw(k)*(tzzp-tzzm) &
!..rest of subgrid diffusion
     &     +aw(i)*(txzp-txzm) &
     &     +bw(j)*(tyzp-tyzm)

!..store explicit part of wall normal diffusio for C.N.
          rhsi_w(i,j,k) = zimp * cw(k)*(tzzp-tzzm)
!
      enddo   ;   enddo   ;   enddo
!
      end subroutine rhs_advection_diffusion

end module central_fd2
