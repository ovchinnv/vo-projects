module discretization
!
 __DEP_PARSER
 use basediscretization
 use fd2c
!
 __IMPNONE
!
 bool :: discretization_initialized=.false.
 class(discretization_base), pointer :: s_discretization
!
 contains
!=================================================================================
  subroutine discretization_init()
  __IAM(DISCRETIZATION_INIT)
  character(len=20) :: keyword
!
! determine discretization
#define __WARNIFMISSING
#define __CONTEXT __EDCTX
#define __VARNAME s_discretization
#define __FILETAG discretization
#define __DESCRIPTION	discretization
#define __CASES1 'FD2C','FD2CENTRAL'
#define __CLASS1 fd2c
#define __DEFAULT __CLASS1
#include "init_class_macro.src"
!
 if (associated(s_discretization)) then 
  call s_discretization%init()
  discretization_initialized=s_discretization%initialized
 endif
!
end subroutine discretization_init
!=================================================================================
  subroutine discretization_done()
!
   __IAM(DISCRETIZATION_DONE)
   if (associated(s_discretization)) call s_discretization%done()
   discretization__initialized=.false.
!
  end subroutine discretization_done
!
end module discretization
