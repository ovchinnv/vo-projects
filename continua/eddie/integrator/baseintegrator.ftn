module baseintegrator
 __IMPNONE
!
 type, abstract :: integrator_base
!
  float :: time, dt
  float :: fconst(3) ! constant source terms
  bool :: initialized=.false.
!  character(len=:), parameter, private :: ctx=__EDCTX
  character(len=20) :: ctx=__EDCTX
  float, pointer, dimension(:,:,:) :: u, v, w, p
!
 contains
  procedure(init), deferred :: init               ! initialize
  procedure(done), deferred :: done               ! finalize
  procedure(predict), deferred :: predict         ! integrate
  procedure(correct), deferred :: correct         ! correct
 end type integrator_base
!
 abstract interface
  subroutine init(me)
  import integrator_base
  class(integrator_base) :: me
  end subroutine init
!
  subroutine done(me)
  import integrator_base
  class(integrator_base) :: me
  end subroutine done
!
  subroutine integrate(me,qeuler_)
  import integrator_base
  class(integrator_base) :: me
  bool, optional :: qeuler_
  end subroutine integrate
!
  subroutine correct(me)
  import integrator_base
  class(integrator_base) :: me
  end subroutine correct
 end interface
!
 contains 
!========================================================================
 subroutine integrator_base_init(me)
  __DEP_PARSER
  __DEP_CONST
  use state, only : state_get3df
  class(integrator_base) :: me
!
  associate(ctx=>me%ctx, fconst=>me%fconst)
  if (existtag_nocase('FCONST',ctx)) then ; fconst=atofv(getval_nocase('FCONST',ctx),3) ; else ; fconst=zero ; endif
!
  me%u=>state_get3df('U',ctx)
  me%v=>state_get3df('V',ctx)
  me%w=>state_get3df('W',ctx)
  me%w=>state_get3df('P',ctx)
!
  end associate

 end subroutine integrator_base_init
!=========================================================================
 subroutine integrator_base_done(me)
  __DEP_CONST
  class(integrator_base) :: me
  nullify(me%u, me%v, me%w, me%p)
  me%initialized=.false.
  me%fconst=zero
 end subroutine integrator_base_done
!
end module baseintegrator
