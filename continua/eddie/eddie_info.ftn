module eddie_info
      use SIZE
      use datatypes
      use eddie_grid
#if __PARALLEL
      __DEP_MULTICOM
      __DEP_MPI
#endif
!
!
      __IMPNONE
!
      bool, private :: eddie_info_initialized=.false.
!
#if __PARALLEL
      int4mpi, save, private :: min_max_data_mpi
!    custom type for sending rex data by MPI
      type min_max_datatype
       float :: rmin, rmax
       int :: imin, jmin, kmin, imax, jmax, kmax
      end type min_max_datatype
#endif
!
      interface print_min_max_rms3d
       module procedure print_min_max_rms3d_varray, print_min_max_rms3d_array_name
      end interface print_min_max_rms3d
!


!-----------------------------------------------------------------------
!     screen and file information
!-----------------------------------------------------------------------
!            write(6,*) '*********************************************'
!            write(6,*) '*...Iteration number= ',icycle
!            write(6,*) '*...Time Step       = ',dtm1
!            write(6,*) '*...Total Time      = ',tlevel
!            write(6,*) '*...CPU RHS         = ',cpurhs
!            write(6,*) '*...CPU PRED        = ',cpupredict
!            write(6,*) '*...CPU PRESS       = ',cpupres
!            write(6,*) '*...CPU CORR        = ',cpucorr
!            write(6,*) '*...CPU TURVIS      = ',cputurvis
!         ENDIF
!         
!         call divergence()
!         call print_min_max_rms3d(
!
!         CALL CALCME(uo,vo,wo,xu,yv,zw,dtm1,nx,ny,nz)
!         CALL SCRUVWP(uo,vo,wo,p,nx,ny,nz)
!      ENDIF


      contains
!============================================================================================
      subroutine eddie_info_init()
!
#ifdef __PARALLEL
       int4mpi :: counts(0:1), oldtypes(0:1), ierr ! , extent, offsets(0:2)
!
       integer(kind=MPI_ADDRESS_KIND) :: lb, extent, offsets(0:1)
!
       if (.not.eddie_info_initialized) then
!
! initialize MPI type for computing minima and maxima
!
        offsets(0)=0; oldtypes(0)=mpifloat; counts(0)=2    ! two maxima
        call MPI_TYPE_GET_EXTENT(mpifloat,lb,extent,ierr)
!
        offsets(1)=offsets(0)+counts(0)*extent; oldtypes(1)=mpiint ; counts(1)=6
        call MPI_TYPE_GET_EXTENT(mpiint,lb,extent,ierr)
        call MPI_TYPE_CREATE_STRUCT(2, counts, offsets, oldtypes, min_max_data_mpi, ierr) 
        call MPI_TYPE_COMMIT(min_max_data_mpi, ierr) 
!
       endif
#endif
       eddie_info_initialized=.true.
!
      end subroutine eddie_info_init
!============================================================================================
      subroutine eddie_info_done()
!
#ifdef __PARALLEL
       int :: i
       if (eddie_info_initialized) call MPI_TYPE_FREE(min_max_data_mpi,i)
#endif
       eddie_info_initialized=.false.
!
      end subroutine eddie_info_done
!============================================================================================
      subroutine print_min_max_rms3d_array_name(r, rname)
       __DEP_OUTPUT
       __DEP_PARSER
!
       float, intent(in) :: r(:,:,:)
       character(len=*) :: rname
       int :: imax, jmax, kmax, imin, jmin, kmin
       float :: rmax, rmin, rrms
       character(len=19) :: whoami = 'PRINT_MIN_MAX_RMS3D'
#ifdef __PARALLEL
       int :: rankmax, rankmin ! MPI ranks corresponding to the global maximum/minimum
#endif
!
       call message(whoami,'============= 3D ARRAY "'//rname(1:len_trim(rname))//'" ==============')
#ifdef __PARALLEL
       call get_min_max_ave_3d(r,rmin,rmax,rrms,imin,jmin,kmin,imax,jmax,kmax,rankmin,rankmax)
       call message(whoami,' MAXIMUM : '//ftoa(rmax)//' @[ '//itoa(imax)//','//itoa(jmax)//','//itoa(kmax)//'; RANK '//itoa(rankmax)//' ]')
       call message(whoami,' MIMIMUM : '//ftoa(rmin)//' @[ '//itoa(imin)//','//itoa(jmin)//','//itoa(kmin)//'; RANK '//itoa(rankmin)//' ]')
#else
       call get_min_max_ave_3d(r,rmin,rmax,rrms,imin,jmin,kmin,imax,jmax,kmax)
       call message(whoami,' MAXIMUM : '//ftoa(rmax)//' @[ '//itoa(imax)//','//itoa(jmax)//','//itoa(kmax)//']')
       call message(whoami,' MIMIMUM : '//ftoa(rmin)//' @[ '//itoa(imin)//','//itoa(jmin)//','//itoa(kmin)//']')
#endif
       call message(whoami,' RMS     : '//ftoa(rrms))
       call message(whoami,'========================================================')
!
      end subroutine print_min_max_rms3d_array_name
!============================================================================================
      subroutine print_min_max_rms3d_varray(r_)
       type(varray3df), pointer :: r_
       float, pointer :: r(:,:,:)
       character(len=varnamelen) :: rname
!
       r=>r_%v ; rname=r_%vname
       call print_min_max_rms3d_array_name(r, rname)
!
      end subroutine print_min_max_rms3d_varray
!============================================================================================
      subroutine get_min_max_ave3d(r,rmin,rmax,rrms,imin,jmin,kmin,imax,jmax,kmax,rankmin,rankmax)
!
       int, intent(out) :: imin, jmin, kmin, imax, jmax, kmax
       float, intent(out) :: rmin, rmax, rrms
       float, intent(in), dimension(:,:,:) :: r
       int :: i, j, k
       float :: d
!
#ifdef __PARALLEL
       float :: rrmsg
       int :: ierror
       type(min_max_datatype) :: rminmax_all(SIZE_EDDIE), rminmax
       int :: rankmax, rankmin
#endif
!
       if (.not. eddie_info_initialized) call eddie_info_init()
!
       imin=ib; imax=ib; jmin=jb; jmax=jb; kmin=kb; kmax=kb 
       rmin=r(imin,jmin,kmin) ; rmax=r(imax,jmax,kmax) ; rrms=zero ;
!
       do k=kb,ke  ; do j=jb,je ; do i=ib,ie
!
        d=r(i,j,k)
        if     (d .lt. rmin) then ; rmin=d ; imin=i; jmin=j; kmin=k;
        elseif (d .gt. rmax) then ; rmax=d ; imax=i; jmax=j; kmax=k;
        endif
        rrms=rrms+d*d
!
       enddo       ; enddo      ; enddo
! combine statistics from different processors
#ifdef __PARALLEL
       call MPI_REDUCE(rrms, rrmsg, 1, mpifloat, MPI_SUM, 0, MPI_COMM_EDDIE, ierror)
       rrms = sqrt ( rrmsg / (keg - kbg + 1) / (jeg - jbg + 1) / (ieg - ibg + 1) ) ! use global counters for normalization
!
       rminmax%rmin=rmin
       rminmax%rmin=rmax
       rminmax%imin=imin
       rminmax%jmin=jmin
       rminmax%kmin=kmin
       rminmax%imax=imax
       rminmax%jmax=jmax
       rminmax%kmax=kmax
!
       call MPI_GATHER(rminmax, 1, min_max_data_mpi, rminmax_all, 1, min_max_data_mpi, 0, MPI_COMM_EDDIE, ierror)
! find minimum and maximum
       rankmin=1; rankmax=1;
       rmin=rminmax_all(rankmin)%rmin
       rmax=rminmax_all(rankmax)%rmax
       imin=rminmax_all(rankmin)%imin
       jmin=rminmax_all(rankmin)%jmin
       kmin=rminmax_all(rankmin)%kmin
       imax=rminmax_all(rankmax)%imax
       jmax=rminmax_all(rankmax)%jmax
       kmax=rminmax_all(rankmax)%kmax
!
       do i=2, SIZE_EDDIE
        if (rmin.gt.rminmax_all(i)%rmin) then
         rankmin=i
         rmin=rminmax_all(i)%rmin
         imin=rminmax_all(i)%imin
         jmin=rminmax_all(i)%jmin
         kmin=rminmax_all(i)%kmin
        elseif (rmax.lt.rminmax_all(i)%rmax) then
         rankmax=i
         rmax=rminmax_all(i)%rmax
         imax=rminmax_all(i)%imax
         jmax=rminmax_all(i)%jmax
         kmax=rminmax_all(i)%kmax
        endif
       enddo
#else
       rrms = sqrt ( rrms / (ke - kb + 1) / (je - jb + 1) / (ie - ib + 1) )
#endif
!
      end subroutine get_min_max_ave3d
!
end module eddie_info
!