!
      module eddie
      private
!
      use datatypes
      use fieldbcdef
      use state
      __DEP_PARSER
      use SIZE
      use eddie_grid
      use eddie_info
      __DEP_OUTPUT
      use random
      use statistics
!
      use integrator
      use discretization

#ifdef __central_fd2
      use central_fd2     ! central finite difference, second order derivatives
#endif
#ifdef __immbnd 
      use immbnd          ! use immersed boundary approach to model internal surfaces
#endif
#ifdef __rogallo
      use rogallo         ! Rogallo-type turbulent inflow
#endif
#ifdef __precursor_inflow
      use precursor_inflow ! save planes of velocity and pressure
#endif
#ifdef __precursor_output
      use precursor_output ! save planes of velocity and pressure
#endif
#ifdef __LES
      use LES             ! routines/variables for Large-Eddy simulation
#endif
!
      __IMPNONE
!
!     routines:
      private eddie_init
      public eddie_done
      public eddie_solve
      public eddie_exec
!
      character(len=:), parameter, private :: ctx=__EDDIECTX
      eddie_initialized=.false.
!
      type(varray3df), save, pointer :: u_, v_, w_, ustar_, vstar_, wstar_, pres_, deltap_, div_, nu_
!
      float, pointer, save, dimension(:,:,:) :: u, v, w, ustar, vstar, wstar, p, dp, div, nu
!
      float :: nu_m ! molecular viscosity
!
#ifdef __PARALLEL
      ierror
#endif
!
      contains
!======================================================================================
       subroutine eddie_init()
       __IAM(EDDIE_INIT)
! if running in parallel pass communicator when adding variables (quick and dirty)
#ifdef __CTX
#undef __CTX
#endif
#ifdef __PARALLEL
! use a trick to supply communicator only in parallel mode
#define __CTX __COMM, ctx
#else
#define __CTX ctx
#endif
!
 __NULL_COMM_STOP
 __QPRINT
!
!    check that the size module is initialized
       if (.not. size_initialized) then
        call warning(whoami, 'Size not initialized. Nothing done.',-1)
        return
       endif
!    check that Cartesian grid and metrics are initialized
       if (.not. grid_initialized) then
        call warning(whoami, 'Grid not initialized. Nothing done.',-1)
        return
       endif
!    check that the state module is initialized
       if (.not. state_initialized) then
        call warning(whoami, 'State module not initialized. Nothing done.',-1)
        return
       endif
!
!    prepare Cartesian grid and metrics (eddie - specific additions to grid)
!
       call message(whoami, 'Initializing grid variables.');
       call eddie_grid_initialize()
!    initialize state variables
!    (declare variables and boundary conditions)
       nullify(u_, v_, w_, pres_, nu_, pres_, deltap_, ustar_, vstar_, wstar_, div_)
       nullify(u,v,w,p,nu,dp,div,ustar,vstar,wstar)
!
       call message(whoami, 'Initializing state variables.');
!
       call state_add3df('U'  ,'Streamwise velocity'      , __CTX, vptr=u_)     ; u=>u_%v
       call state_add3df('V'  ,'Spanwise velocity'        , __CTX, vptr=v_)     ; v=>v_%v
       call state_add3df('W'  ,'Wall-normal velocity'     , __CTX, vptr=w_)     ; w=>w_%v
       call state_add3df('P'  ,'Pressure field'           , __CTX, vptr=pres_)  ; p=>pres_%v
       call state_add3df('NU' ,'Viscosity (nonuniform)'   , __CTX, vptr=nu_)    ; nu=>nu_%v
       call state_add3df('DIV' ,'Divergence field'        , __CTX, vptr=div_)   ; div=>div_%v ; deltap_=>div_ ; dp=>deltap_%v 
       call state_add3df('U*' ,'Predicted U-velocity'     , __CTX, vptr=ustar_) ; ustar=>ustar_%v
       call state_add3df('V*' ,'Predicted V-velocity'     , __CTX, vptr=vstar_) ; vstar=>vstar_%v
       call state_add3df('W*' ,'Predicted W-velocity'     , __CTX, vptr=wstar_) ; wstar=>wstar_%v
! add boundary condition arrays
!
!
       call discretization_init()
       call integrator_init()
       call pressure_init()
!======================================================================================
! determine pressure solver
#define __WARNIFMISSING
#define __CONTEXT ctx
#define __VARNAME p_solver
#define __FILETAG pressure_solver
#define __DESCRIPTION	pressure solver
#define __OPTIONS1 'MG','MULTIGRID'
#define __VALUE1 pMG
#define __OPTIONS2 'MGFFT','MULTIGRIDFFT', 'MG-FFT', 'MULTIGRID-FFT'
#define __VALUE2 pMGFFT
#define __DEFAULT __VALUE1
#define __NAMES pres_name
#include "parser/parser_macro2.src"
!




!    initialize LES
#ifdef LES
       call LES_init)
#endif // LES
!    initialize immersed boundary
#ifdef immbnd 
       call immbnd_initialize()
#endif
!    set initial condition

       call initial()


!ccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccc
!     input data and setup
!-----------------------------------------------------------------------
! Reynolds number : not sure how to handle this: should we keep a constant nu separately (as assumed by rhs )
!
#define __MINUSERR
#define __WARNIFMISSING
#define __CONTEXT ctx
#define __VAR	nu_m
#define __TAG	molecular_viscosity
#define __NAME	molecular viscosity
#include "parser/parser_macro1.src"
!
!     initiaize statistics variables (now in stats)
!

         write(*,*) 'starting time=',tlevel
         write(*,*) 'Initial field'

       call eddie_info(uo,vo,wo,p) ! initial info



!------------------------------------------------------------------------
!     Check Divergence of field field
!-----------------------------------------------------------------------
       call message(whoami, 'Calculating divergence of the initial velocity field.')
       call divergence(u,v,w,div)
       call print_min_max_rms3d(div_)
!
!    RNG
       if (.not. random_initialized) then
        call message(whoami, 'Initializing random number generator.')
        call random_init()
       endif
!
!================================================================
#ifdef __PARALLEL
      if (me.eq.0) then 
#endif
       if (t_integrator%dpdx.ne.0) then 
        if (bctype(west).ne.periodic.or.bctype(east).ne.periodic) call warning(whoami,' DPDX =/= 0 FOR NONPERIODIC X-BC',0)
       elseif (t_integrator%dpdy.ne.0) then
        if (bctype(front).ne.periodic.or.bctype(back).ne.periodic) call warning(whoami,' DPDY =/= 0 FOR NONPERIODIC Y-BC',0)
       elseif (t_integrator%dpdz.ne.0) then
        if (bctype(bottom).ne.periodic) call warning(whoami,' DPDZ =/= 0 FOR NONPERIODIC Z0-BC',0)
       elseif (me.eq.ncpu-1) then
        if (bctype(top).ne.periodic) call warning(whoami,' DPDZ =/= 0 FOR NONPERIODIC Z1-BC',0)
       endif
#ifdef __PARALLEL
      endif
#endif
!=================================================================
!
#ifdef rogallo
       call rogallo_initialize() ! synthetic turbulence
#endif
#ifdef precursor_output
       call precursor_output_initialize()
#endif
!#ifdef precursor_inflow
!       call precursor_inflow_initialize() ! should move to bc?
!#endif
#ifdef stat
       call stat_initialize() 
#endif
! other modules to be added here
!
       eddie_initialized=.true.
!
       end subroutine eddie_init
!******************************************************************8
!


       subroutine eddie()
!
!.....arrays for the solver
!    
!.....dummy:                    dummy array for Poisson solver

!.....uoc,voc,woc:		velocities at cell centers
!.....upr, vpr, wpr:		fluctuating components
!.....StrkPos,StrfIndx:         streaks
!    
!     

       character*(5) :: whoami
       data whoami /'EDDIE'/
!
!    check for initialization
!
       if (.not.eddie_initialized) then 
        call error(whoami, ' NOT INITIALIZED. NOTHING DONE.',-1)
        return
       endif
!


      real upr(nx,ny,nz),vpr(nx,ny,nz),wpr(nx,ny,nz)
!      real dummy(nx,ny,nz) !artifice for the doubly periodic poisson solver

      real wfrg(nx,ny,nz) ! probably for the "fringe region" boundary layer sim 
!     
      real u2d(nt,ny,nz),v2d(nt,ny,nz),w2d(nt,ny,nz)
      real u2dnd(ntnd,ny,nz),v2dnd(ntnd,ny,nz),w2dnd(ntnd,ny,nz)
!     
      real urun(nx,nz),vrun(nx,nz),wrun(nx,nz)
      real uinf(nx),duinf(nx)
      integer iuinf
!     


      integer statnum,samples,psample

!     start of inflow        
      REAL TPRESSURE(3)
      REAL    qo,qold,dpdx,tke,divmax,dpdz
      INTEGER i, j, k, ii, jj, kk, iii, jjj, kkk
!     
      LOGICAL Ltstep            ! .f.-predictor .t.-corrector
!     
      REAL    delt, yplusmin, erm
      INTEGER icycle,istart,icount1,icount2,icinf,Niter,ibnd
      REAL    dtm1,dtold,adiv,zz
!     
      INTEGER ipart
!...  slice data
      INTEGER ic
      REAL    tlevel,t_prev,t_old
      INTEGER iSliceSize,ksub
!...  series of restart files


      logical  LcreateR

!     
      real   a, b, lamda, pi, u0, w0
!     
      INTEGER IERR
      real*8 cpue,cpub
      real*8 cputurvis
      real*8 cpucorr
      real*8 cpupres,cpupredict,cpurhs
!
!     added for boundary layer simulation VO
      integer iistart,imid,imidf,ifin,nload,n,nn,status(MPI_STATUS_SIZE),counter,cpusave
      integer np,ksave
      real xloc, uscale, puscale, pvscale, pwscale, plevel, ux,vx,scx
      integer pind
      real dummy1,dummy2,dummy3
!--------------statistics variables-------------------------------------
      real uactg
!-----------------------------------------------------------------------
!cccc VARIABLES FOR STREAMWISE SPECTRA
      include 'headers/spec.h'
      integer spec_cpu(nspec), spec_k(nspec)
!cccccccccccccccccccccccccccccccccccccccccccccccccc      
!
!     misc variables
      real topbc(3,ny,nz), botbc(3,ny,nz) !these variables are needed when the code is run implicitly
      integer real1d, real2d, stat2d, cross2d !new MPI types
      real dstar ! boundary layer variable
      real oldtime, znewtime ! variables for keeping track of time per timestep

!      temporary debugging variables
      real divmax_,divmin_,divavg_
      integer idmax, jdmax, kdmax, idmin, jdmin, kdmin
      real rsu, rsv, rsw ! currently exist for backward compatibility with "correct"        
      real umx,vmx,wmx
!
!
      
!     CALL CALCTKE(tke,uo,vo,wo,urun,vrun,wrun,zw,xu,nx,ny,nz)
!-----------------------------------------------------------------------
!     setup immersed boundary -- now part of IB setup
!-----------------------------------------------------------------------

!................initialize counters...................
!.....istart:	contains number of previous iterations
!.....icycle:	iteration counter
!.....itmax:	number of iterations
!.....itini:	start space-time sampling
!.....infnum:	information counter
!.....ipart:	particle tracking counter

      ICOUNT1=0
      ICOUNT2=0
      ICINF  =0
      ICYCLE =ITINI
      ipart  =0
!-----------------------------------------------------------------------
!     compute coefficients
!-----------------------------------------------------------------------
#ifdef LES
!
      dtm1=1. ! should be ineffectual in this first call , but included to avoid an undefined variable error
      CALL turvis(uo,vo,wo,dxdydz,xu,yv,zw,urun,
     &     sxx,syy,szz,sxy,sxz,syz,g,
     &     uoc,voc,woc,upr,vpr,wpr,gbar,
     &     lm,mm,Ilm,Imm,xcf,ycf,zcf,
     &     wrk1,wrk2,wrk3,wrk4,
     &     tv,dtm1,icycle-itini,nx,ny,nz       )
!
#ifdef immbnd
!
      if(ibswitch.and.Isgsmodel.ne.0) then
!
             CALL IB_forcing(tv,tvim,
     &                    vniml,viiml,vjiml,vntop,vtk,vstk1,vstk2,vnbot,vbk,vsti,vtib_ind,vtib_c1,vtib_c2,vbib_ind,
     &                    vbib_c1,vbib_c2,
     &                    vc4intl) 
!...  numerator for largangian dynamic model
           if(Isgsmodel.eq.20) then
!
             CALL Forcing(Ilm,Ilmim,
     &                    vniml,viiml,vjiml,vntop,vtk,vstk1,vstk2,vnbot,vbk,vsti,vtib_ind,vtib_c1,vtib_c2,vbib_ind,
     &                    vbib_c1,vbib_c2,
     &                    vc4intl) 
             CALL REFRESHBC(Ilm,nx*ny,(nz-2),MYSIZE,MYRANK,communicator)
           endif
         CALL REFRESHBC(tv, nx*ny,(nz-2),MYSIZE,MYRANK,communicator)
      endif
!
#else // LES not defined
!
      tv=0.
#endif

!-----------------------------------------------------------------------
!     begin main loop
!-----------------------------------------------------------------------
!     
      oldtime=0.
 1000 icycle = icycle + 1
!
      znewtime=mpi_wtime()
      write(666,*) icycle, znewtime-oldtime
      oldtime=znewtime
      close(666)
!
! switch to the timer class for this ...
      cpurhs=0
      cpupredict=0
      cpupres=0
      cpucorr=0
      cputurvis=0
!.....time step (computed by integrator)


#ifdef rogallo
!     for phase reshuffling -- new routine
      if (jdose.or.rogal) then 
       if (myrank.eq.0) then 
        dummy1=mod(uinfty*tlevel+zw(1),zlen)
        dummy2=mod(uinfty*tlevel+dtm1+zw(1),zlen)
!	write(0,'(5 G20.10)') dummy1,dummy2,tlevel,dtm1,zlen
!	if (dummy2.lt.dummy1) call reshuffle(jcounter,uh,vh,wh,ky,kz,seed)
	if (dummy2.lt.dummy1) call reshuffle_old(jcounter,uh,vh,wh,count,is,seed)
       endif !myrank

       call MPI_BCAST(uh(1),2*nmodes,type,0,communicator,ierr)
       call MPI_BCAST(vh(1),2*nmodes,type,0,communicator,ierr)
       call MPI_BCAST(wh(1),2*nmodes,type,0,communicator,ierr)
       call MPI_BCAST(ky(1),nmodes,type,0,communicator,ierr)
       call MPI_BCAST(kz(1),nmodes,type,0,communicator,ierr)
      endif !jdose/rogal
#endif
!
#ifdef precursor_inflow
      if (box2) call box2dt(dtm1,icycle,index,type)
#endif
!
!      TLEVEL=TLEVEL+DTM1 ! done inside integrator
!-----------------------------------------------------------------------
!     predictor-corrector step
!-----------------------------------------------------------------------
      ITSTAMP = ITMAX
      ICOUNT1 = MOD(ICYCLE,100000)
!
      ! timer_stamp
!
!      call s_discretization%compute() ! now in the integrator
!      CALL Rhs(uo,vo,wo,ucn,vcn,wcn,tv,wfrg,uab2,vab2,wab2,nx,ny,nz )
!      cpurhs= (timer)
!
      qeuler = ((ICOUNT1.EQ.0).OR.((IFIELD.NE.2).AND.(ICYCLE-ITINI.EQ.1)))

      
!.....Predictor step + boundary conditions for Ustar
!     
      if(impfla.eq.1.and.icycle-itini.eq.1) then ! : to be moved to setup since this is an INIT call
!...  boundary condition setup for implicit part
         CALL BOUN_IMP(botbc,topbc,nx,ny,nz)
      endif
!
#ifdef __TIMER
      cpub=timer_stamp()

      call t_integrator%predict() !
!      CALL ab_predictor(UO,VO,WO,P,UAB1,VAB1,WAB1,
!     &     UAB2,VAB2,WAB2,ucn,vcn,wcn,tv,
!     &     USTAR,VSTAR,WSTAR,xu,
!     &     dpdx,dpdy,dpdz,dtm1,a1,a2,
     
     botbc,topbc)

      Ltstep = .FALSE.
!     don`t think this is needed anymore since new IB does _NOT_ use ghost points
!      if (myrank.eq.0) write(66+mod(icycle,5),*) myrank,': refreshbc'
!      CALL REFRESHBC(USTAR,NX*NY,NZ-2,MYSIZE,MYRANK,communicator)
!      CALL REFRESHBC(VSTAR,NX*NY,NZ-2,MYSIZE,MYRANK,communicator)
!      CALL REFRESHBC(WSTAR,NX*NY,NZ-2,MYSIZE,MYRANK,communicator)
!      if (myrank.eq.0) write(66+mod(icycle,5),*) myrank,': done'    
!cccccIMMERSED BOUNDARY
#ifdef immbnd
!....modify viscosity at the immersed boundary points
!    DEAL WITH THIS LATER
!      if(ibswitch.and.ftype.eq.1) then !remove pressure from boundary points
!         do i=1,nbodyu
!            ustar(ibodyu(i),j,kbodyu(i)) = ustar(ibodyu(i),j,kbodyu(i))
!     &           +dpdx*dtm1
!         enddo 
!         do i=1,nbodyv
!            vstar(ibodyv(i),j,kbodyv(i)) = vstar(ibodyv(i),j,kbodyv(i))
!     &           +dpdy*dtm1
!         enddo 
!      endif
!
!....compute forcing in x momentum
      if(ibswitch) then
              CALL IB_forcing(ustar,uim,
     &                    uniml,uiiml,ujiml,untop,utk,ustk1,ustk2,unbot,ubk,usti,utib_ind,utib_c1,utib_c2,ubib_ind,
     &                    ubib_c1,ubib_c2,
     &                    uc4intl) 
!.... compute forcing in y momentum
              CALL IB_forcing(vstar,vim,
     &                    vniml,viiml,vjiml,vntop,vtk,vstk1,vstk2,vnbot,vbk,vsti,vtib_ind,vtib_c1,vtib_c2,vbib_ind,
     &                    vbib_c1,vbib_c2,
     &                    vc4intl) 
!.... compute forcing in z momentum
              CALL IB_forcing(wstar,wim,
     &                    wniml,wiiml,wjiml,wntop,wtk,wstk1,wstk2,wnbot,wbk,wsti,wtib_ind,wtib_c1,wtib_c2,wbib_ind,
     &                    wbib_c1,wbib_c2,
     &                    wc4intl) 
      endif
!
!      me=myrank
!      do j=jy1,jy2+1
!       do i=1,vnbod
!        p (vibod(i),j,vjbod(i))=0.
!        vstar(vibod(i),j,vjbod(i))=0.
!       enddo
!       do i=1,unbod
!        ustar(uibod(i),j,ujbod(i))=0.
!       enddo
!       do i=1,wnbod
!        wstar(wibod(i),j,wjbod(i))=0.
!       enddo
!      enddo
!
#endif  
      if (myrank.eq.0) write(66+mod(icycle,5),*) myrank,': refreshbc after predictor (or IB)'
      CALL REFRESHBC(USTAR,NX*NY,NZ-2,MYSIZE,MYRANK,communicator)
      CALL REFRESHBC(VSTAR,NX*NY,NZ-2,MYSIZE,MYRANK,communicator)
      CALL REFRESHBC(WSTAR,NX*NY,NZ-2,MYSIZE,MYRANK,communicator)
      if (myrank.eq.0) write(66+mod(icycle,5),*) myrank,': done'    
!cccccIMMERSED BOUNDARY
!     need to call boundary because refreshbc changes wstar at 1st point!!!
      CALL Boundary(USTAR,VSTAR,WSTAR,UO,VO,WO,
     &     u2d,v2d,w2d,tlevel,t_old,ksub,nt,
     &     urun,wrun,
     &     XU,YV,ZW,nx,ny,nz,Ltstep,uinf,duinf,dtm1,x_ref)
!
#ifdef rogallo
      if (jdose) then
       call jdorrsom(uose,vose,wose,jcounter,uh,vh,wh,kx,ky,kz,xu,xcf,yv,ycf,zwg,tlevel,eta,detacen,detacor,U_,d2U,
     &                 a_w,b_w,a_u,b_u,ps_w,ps_u)
       if (myrank.eq.0) then 
!     add the perturbation
        do i=2,nx-1 
         do j=2,ny-1
          ustar(i,j,1)=ustar(i,j,1)+wose(j,i)*uscale*puscale    
          vstar(i,j,1)=vstar(i,j,1)+vose(j,i)*uscale*pvscale    
          wstar(i,j,1)=wstar(i,j,1)+uose(j,i)*uscale*pwscale
         enddo
        enddo    
       endif ! myrank
      endif !jdose
!          
      if (rogal) then 
!     generate inflow with fourier wall-normal basis cccccc
!       call rogallo(uose,vose,wose,jcounter,uh,vh,wh,kx,ky,kz,xu,xcf,yv,ycf,zwg,tlevel,type)
       call rogallo_old(uose,vose,wose,jcounter,uh,vh,wh,kx,ky,kz,xu,xcf,yv,ycf,zwg,tlevel,type)
       if (myrank.eq.0) then
!     add the perturbation
        do i=2,nx-1 
         do j=2,ny-1
          ustar(i,j,1)=ustar(i,j,1)+uose(j,i)*uinfty*uscale*cutoffu(i)*puscale     
          vstar(i,j,1)=vstar(i,j,1)+vose(j,i)*uinfty*uscale*cutoffw(i)*pvscale   
          wstar(i,j,1)=wstar(i,j,1)+wose(j,i)*uinfty*uscale*cutoffw(i)*pwscale
	 enddo
        enddo    
!	   write(0,*) 'max(u,v,w):',umx,vmx,wmx
       endif ! myrank
      endif !rogal
#endif // rogallo
!
#ifdef precursor_inflow
      if (box2) call box2read(ustar,vstar,wstar,a_u,a_w,b_u,b_w,ps_u,ps_w)
#endif
!
!================================================================
      cpupredict=mpi_wtime()-cpub
!
! all below (massbal/div/pres/correct) should be part of correct
!
!      call correct_mass(USTAR,VSTAR,WSTAR,xu,yv,zw,icycle-itini,nx,ny,nz) ! MasBlas routine
!      call s_discretization%correct_mass()
!      call correct_mass(USTAR,VSTAR,WSTAR,xu,yv,zw,nx,ny,nz) ! mass-balance routine
      ! timer_stamp
!      call t_integrator%divergence() ! formerly div(USTAR,VSTAR,WSTAR,nx,ny,nz,DTM1,dp) )
!      call t_integrator%compute_p()
!
!      if(IPresMethod .eq. 1) then
!         CALL PRESDP2P(dp,dp,P,ZWG,YV,XU,DUMMY,
!     &        MYRANK,communicator,TPRESSURE)
!      elseif(IPresMethod.eq.11) then 
!         call pfft_yz(p,dp,dp,dummy,dummy,au,ap,bp(1),cwg(1),myrank,communicator,type)
!      elseif(IPresMethod .eq. 22) then
!
!         CALL presdirect(dp,dp,p,xu,yv,zwg,au,cwg,icycle-itini,
!     &        myrank,communicator,tpressure)
!      else
!         call error(whoami,' UNKNOWN PRESSURE SOLVER. ABORTING.',-1)
!         return
!      endif
!
!      cpupres=mpi_wtime()-cpub
!     
!.....Update velocity values , compute residuals and store RHS
!     
!      cpub=mpi_wtime()
      call t_integrator%correct()
!
!      call Correct(USTAR,VSTAR,WSTAR,DP,DTM1,nx,ny,nz,UO,VO,WO)
!cccc pressure recovery
!      me=myrank
!      do i=1,ptrashn
!       do j=jy1,jy2+1
!        p(ptrashi(me,i),j,ptrashj(me,i))=0.
!       enddo
!      enddo

#ifdef immbnd
!      me=myrank
!      do j=jy1,jy2+1
!       do i=1,vnbod
!        p (vibod(i),j,vjbod(i))=4.
!        vo(vibod(i),j,vjbod(i))=0.
!       enddo
!       do i=1,unbod
!        uo(uibod(i),j,ujbod(i))=0.
!       enddo
!       do i=1,wnbod
!        wo(wibod(i),j,wjbod(i))=0.
!       enddo
!      enddo
#endif
!-----------------------------------------------------------------------
!     boundary conditions to the updated values
!-----------------------------------------------------------------------
!     
      Ltstep = .TRUE. 
      CALL Boundary(UO,VO,WO,USTAR,VSTAR,WSTAR,
     &     u2d,v2d,w2d,tlevel,t_old,ksub,nt,
     &     urun,wrun,
     &     XU,YV,ZW,nx,ny,nz,Ltstep,uinf,duinf,dtm1,x_ref)
!     
      if (myrank.eq.0) write(66+mod(icycle,5),*) myrank,': refreshbs'
      CALL REFRESHBC(UO,NX*NY,NZ-2,MYSIZE,MYRANK,communicator)
      CALL REFRESHBC(VO,NX*NY,NZ-2,MYSIZE,MYRANK,communicator)
      CALL REFRESHBC(WO,NX*NY,NZ-2,MYSIZE,MYRANK,communicator)
!
      if (box2) call box2bc(ustar,vstar,wstar,uo,vo,wo)
!     .....divergence
      if (myrank.eq.0) write(66+mod(icycle,5),*) myrank,': done'
!
      __AB_

#define __CALL _update_rhs()
#include "integrator_macro.src"
!      Storen(UAB1,VAB1,WAB1,UAB2,VAB2,WAB2,tmeth,nx,ny,nz)


!     
      cpucorr=mpi_wtime()-cpub
!     ccccccccccccccccccccccccccccccccccc
#if precursor_output
       if (save) call save_slice(uo,vo,wo,cpusave,ksave,xu,yv,tlevel,t_prev,icycle,index)
#endif
!
!-----------------------------------------------------------------------
!     eddy viscosity  and forcing
!-----------------------------------------------------------------------
!.... compute runing average of velocities for inflow bc
!     CALL RunAve(uo,vo,wo,urun,vrun,wrun,xu,yv,zw,
!     &            tlevel,dtm1,icycle,nx,ny,nz       )

!.....turbulent viscosity
      cpub=mpi_wtime()
#ifdef LES
!      write(0,*) myrank,' calling turvis'
      CALL turvis(uo,vo,wo,dxdydz,xu,yv,zw,urun,
     &     sxx,syy,szz,sxy,sxz,syz,g,
     &     uoc,voc,woc,upr,vpr,wpr,gbar,
     &     lm,mm,Ilm,Imm,xcf,ycf,zcf,
     &     wrk1,wrk2,wrk3,wrk4,
     &     tv,dtm1,icycle-itini,nx,ny,nz       )
!      write(0,*) myrank,' back from turvis'
#endif
      cputurvis=mpi_wtime()-cpub
!      
#ifdef immbnd
#ifdef LES
!
!....modify viscosity at the immersed boundary points
      if(ibswitch.and.Isgsmodel.ne.0) then

             CALL Forcing(tv,tvim,
     &                    vniml,viiml,vjiml,vntop,vtk,vstk1,vstk2,vnbot,vbk,vsti,vtib_ind,vtib_c1,vtib_c2,vbib_ind,
     &                    vbib_c1,vbib_c2,
     &                    vc4intl) 
!
!...  numerator and denominator for largangian dynamic model
           if(Isgsmodel.eq.20) then
!
             CALL Forcing(Ilm,Ilmim,
     &                    vniml,viiml,vjiml,vntop,vtk,vstk1,vstk2,vnbot,vbk,vsti,vtib_ind,vtib_c1,vtib_c2,vbib_ind,
     &                    vbib_c1,vbib_c2,
     &                    vc4intl) 
             CALL REFRESHBC(Ilm,nx*ny,(nz-2),MYSIZE,MYRANK,communicator)
           endif
         CALL REFRESHBC(tv, nx*ny,(nz-2),MYSIZE,MYRANK,communicator)
      endif
!      write(0,*) myrank,' back from les-immbnd loop'
#endif 
#endif     
!     output for streamwise spectra
#ifdef probe
      if (spec) then 
        if (mod(icycle,specfreq).eq.0) then 
          j=ny/2  
          call spec_write(uo,vo,wo,p,spec_cpu,spec_k,tlevel,j)
        endif
      endif	
#endif // probe
!
#ifdef immbnd      
!     output for surface pressure
      if (pres_out) then
       if (mod(icycle, presfreq).eq.0) then
!        write(0,*) 'pressure output' 
        call surface_pressure(p, tlevel, npres, npresl, ipresl, kpresl, npres_array, npres_disp, myrank, communicator)
       endif
      endif
#endif
!     
!---------------------------------------------------------------------
 555  continue
      if (.not.(CalcStat.and.planes)) then
!ccccccccccccccccccccccccccc OUTPUT one xz PLANE cccccccccccccccccccccccccccccccccccccccccccc
         if(mod(ICYCLE-itini-1,infnum).eq.0) then
 1234            j=ny/2
                 write(66+mod(icycle,5),*) myrank,': matlab output'
                 call plane_xz(uo,vo,wo,p,xcf,ycf,zcg,STR5,j,real2d)
                 write(66+mod(icycle,5),*) myrank,': done'
         endif !mod
      endif ! .not.CalcStat
!     
!-----------------------------------------------------------------------
!     create a series of restart files
!-----------------------------------------------------------------------
      
      LcreateR=.true.
      if(MOD(ICYCLE,ievery).EQ.0) then
!.... write restart file
         idir  = 1
	 
         if (myrank.eq.0) write(66+mod(icycle,5),*) myrank,': restart file'
!         call IOVECTOR('res.int.vel_f',uo,vo,wo,nx,ny,nz,nzg,idir,tlevel)
         call IOSCALAR('res.int.p_f',p,nx,ny,nz,nzg,idir,tlevel)
!         call IOVECTOR('res.int.ab_f',uab1,vab1,wab1,nx,ny,nz,nzg,idir,tlevel)
!cccccccccc for large files
         call ioscalar('res.int.u_f',uo,nx,ny,nz,nzg,idir,tlevel)
         call ioscalar('res.int.v_f',vo,nx,ny,nz,nzg,idir,tlevel)
         call ioscalar('res.int.w_f',wo,nx,ny,nz,nzg,idir,tlevel)
         call ioscalar('res.int.uab_f',uab1,nx,ny,nz,nzg,idir,tlevel)
         call ioscalar('res.int.vab_f',vab1,nx,ny,nz,nzg,idir,tlevel)
         call ioscalar('res.int.wab_f',wab1,nx,ny,nz,nzg,idir,tlevel)
!cccccccccc temporary solution for large files
#ifdef LES
         if (Isgsmodel.eq.20) then 
           call ioscalar(ilm_file,Ilm,NX,NY,NZ,NZG,idir,TLEVEL)
           call ioscalar(imm_file,Imm,NX,NY,NZ,NZG,idir,TLEVEL)
         elseif (Isgsmodel.eq.30) then  
           call ioscalar('savt.res',Ilm,NX,NY,NZ,NZG,idir,TLEVEL)
           call ioscalar('satv.res',tv,NX,NY,NZ,NZG,idir,TLEVEL)
         endif
#endif
	 
         if (myrank.eq.0) write(66+mod(icycle,5),*) myrank,': done'
!     
!     write latest inflow phase information(note: this file overwrites the original)
         if (jdose.or.rogal) then 
!          call waves_write(jcounter,kx,ky,kz,uh,vh,wh)
          call waves_write_old(jcounter,kx,ky,kz,count,is,uh,vh,wh)
!	  
          if (myrank.eq.0) then        
            open(101,file='pscale.dat',form='formatted',status='old')
              write(101,'(3 G25.15)') puscale, pvscale, pwscale
	      write(101,'(I6)') psample
	    close(101)  
	  endif     
 999  continue
         endif
      endif
!     
!============================ runtime information =
      if ( eddie_info_freq .gt. 0 ) then
       if ( mod(iteration, eddie_info_freq).eq.0 ) then
#ifdef __PARALLEL
        if ( me.eq.0 ) then
#endif
         call eddie_info()
#ifdef __PARALLEL
        endif
#endif
       endif
      endif
!===================================================
!============================ statistics ===========
      if ( eddie_stat_freq .gt. 0 ) then
       if ( mod(iteration, eddie_stat_freq).eq.0 ) call eddie_stat()
      endif


         samples =samples+1      
         if (samples.gt.statsample) then ! write new stats files
           statnum=statnum+1
           samples=1
	 endif  	  

!cccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccc	 
!     compute uinfinity 
      if (myrank.eq.0) write(66+mod(icycle,5),*) myrank,': compute uinft,uact'
      call uinfinity(wo,xu,zwg,uinft,uinftg,uactg,samples,real1d)      
      if (myrank.eq.0) write(66+mod(icycle,5),*) myrank,': done'	
!     compute free-stream statistics
      call stats_old(uo,vo,wo,zwg,uav,vav,wav,uuav,vvav,wwav,guav,gvav,gwav,guuav,gvvav,gwwav,samples,statnum,imid,imidf,
     &               index,real1d)
!ccccccccc DYNAMIC NOISE ADJUSTMENT ccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccc      
        if (.false.) then!(jdose.or.rogal) then 
          if (myrank.eq.mysize-1) then 
!     recomupute scaling parameter
            uosm=sqrt(guuav(pind)-guav(pind)**2)/uinfty
            vosm=sqrt(gvvav(pind)-gvav(pind)**2)/uinfty
            wosm=sqrt(gwwav(pind)-gwav(pind)**2)/uinfty
	       	    
      	    puscale=(puscale*psample+puscale*plevel/(uosm))
      	    pvscale=(pvscale*psample+pvscale*plevel/(vosm))
      	    pwscale=(pwscale*psample+pwscale*plevel/(wosm))
      
            psample=psample+1
            puscale=puscale/psample
            pvscale=pvscale/psample
            pwscale=pwscale/psample
            write(0,'("inlet noise rms: u,v,w & scales ",6 G13.5,I5)') uosm,vosm,wosm,puscale,pvscale,pwscale,psample
          endif
!
          call MPI_BCAST(puscale,1,type,mysize-1,communicator,ierr)
          call MPI_BCAST(pvscale,1,type,mysize-1,communicator,ierr)
          call MPI_BCAST(pwscale,1,type,mysize-1,communicator,ierr)
          call MPI_BCAST(psample,1,MPI_int,mysize-1,communicator,ierr)
        endif   

 222  continue
!     compute turbulent boundary layer statistics
      call stats_new(uo,vo,wo,p,tv,xcf,xu,zcg,zwg,uavg,vavg,wavg,pavg,uuavg,vvavg,wwavg,uwavg,ppavg,
     &                     uuuavg,wwuavg,utaug,tauwg,
     &                     uinft,uinftg,dstg,thetag,uactg,winstg,cfg,
     &                     kpg,ubulkg,samples,statnum,real1d,stat2d,index,icycle)
!
        if (.false.) then!(myrank.eq.mysize-1) then 
            open(22,file='shape'//index(statnum)//'.gnu',status='unknown',form='formatted')
            open(27,file='cf'//index2(icycle)//'.gnu',status='unknown',form='formatted')
            do k=kz1,nzg-1 
               write(22,'(6 G20.12)') (zwg(k)-x_ref)*uactg/ru1,cfg(k),dstg(k),thetag(k),kpg(k),zwg(k)-x_ref
               write(27,'(3 G20.12)') (zwg(k)-x_ref)*uactg/ru1,winstg(k),zwg(k)-x_ref
            enddo !k
            close(22)
      	    close(27)
        endif	!myrank
!ccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccc
!ccccccccccccccccccc INSTANTANEOUS PLANES cccccccccccccccccccccccccccc
         if (planes) call write_planes(uo,vo,wo,p,
#ifdef LES
     &                        tv,
#endif
     &  xu,xcf,yv,ycf,zcf,zcg,cpuxy,kxy,type,real2d,cross2d,index,index2,icycle)
!cccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccc
!cccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccc
!cccccccccccccccccccccccccccccccREYNOLDS STRESS BUDGETS -- SEE RSBUD1.F cccccccccccccccccccccccccccccccccccccccccccccccccccc
         if (rstat) call rstress(rsblk_1,rsblkg_1,rsblk_2,
#ifdef LES      
     &                           rsblk_3,rsblk_4,rsblkg_3,
#endif     
     &                           uo,vo,wo,p,tv,utaug,tauwg,samples,statnum,rsnames,xcf,zcg,stat2d,index)
!cccccccccccccccccccccccccccccccREYNOLDS STRESS BUDGETS -- SEE RSBUD1.F cccccccccccccccccccccccccccccccccccccccccccccccccccc
!ccccccccccccccccccccccccccccccc two-point spanwise correlations cccccccccccccccccccccccccccccccccccccccccccccccccccccccccccc
         if (two_pt_corr) then 
	  call span_corr(uo,vo,wo,u2pt,v2pt,w2pt,um2pt,vm2pt,wm2pt,ks(myrank),ke(myrank),samples)
!      normalize & write output file       
          call write_corr(u2pt,v2pt,w2pt,um2pt,vm2pt,wm2pt,nx_act,nz_act,xn,ycf,zn,npt,type)
          if (myrank.eq.0) write(66+mod(icycle,5),*) myrank,' two_pt_corr: done'
         endif ! two-pt-corr	   
!ccccccccccccccccccccccccccccccc two-point spanwise correlations cccccccccccccccccccccccccccccccccccccccccccccccccccccccccccc
 333     continue 
      endif ! stat loop

      close(66+mod(icycle,5))      
      IF (icycle .LT. itmax) GO TO 1000
!     
      Niter = Itmax
      IF(MYRANK.eq.0) THEN
         WRITE(6,*) '*.........................'
         WRITE(6,*) '*..EDDY finished.'
      ENDIF
!     
!     write final restart file
!     
      ifield = 2
      idir   = 1
       if (myrank.eq.0) write(66+mod(icycle,5),*) myrank,': final restart'
!      call IOVECTOR('res.fin.vel_f',uo,vo,wo,nx,ny,nz,nzg,idir,tlevel)
      call IOSCALAR('res.fin.p_f',p,nx,ny,nz,nzg,idir,tlevel)
!      call IOVECTOR('res.fin.ab_f',uab1,vab1,wab1,nx,ny,nz,nzg,idir,
!     &     tlevel)
!cccccccccc for large files
         call ioscalar('res.fin.u_f',uo,nx,ny,nz,nzg,idir,tlevel)
         call ioscalar('res.fin.v_f',vo,nx,ny,nz,nzg,idir,tlevel)
         call ioscalar('res.fin.w_f',wo,nx,ny,nz,nzg,idir,tlevel)
         call ioscalar('res.fin.uab_f',uab1,nx,ny,nz,nzg,idir,tlevel)
         call ioscalar('res.fin.vab_f',vab1,nx,ny,nz,nzg,idir,tlevel)
         call ioscalar('res.fin.wab_f',wab1,nx,ny,nz,nzg,idir,tlevel)
!cccccccccc temporary solution for large files

#ifdef LES
         if (Isgsmodel.eq.20) then  
           call ioscalar(ilm_file,Ilm,NX,NY,NZ,NZG,idir,TLEVEL)
           call ioscalar(imm_file,Imm,NX,NY,NZ,NZG,idir,TLEVEL)
         elseif (Isgsmodel.eq.30) then  
           call ioscalar('savt.res',Ilm,NX,NY,NZ,NZG,idir,TLEVEL)
           call ioscalar('satv.res',tv,NX,NY,NZ,NZG,idir,TLEVEL)
         endif
#endif
!     write latest inflow phase information(note: this file overwrites the original)
         if (jdose.or.rogal) then 
!          call waves_write(jcounter,kx,ky,kz,uh,vh,wh)
          call waves_write_old(jcounter,kx,ky,kz,count,is,uh,vh,wh)
!
          if (myrank.eq.0) then        
            open(101,file='pscale.dat',form='formatted',status='old')
              write(101,'(3 G25.15)') puscale, pvscale, pwscale
	      write(101,'(I6)') psample
	    close(101)  
	  endif
	 endif     
!
       if (myrank.eq.0) write(66+mod(icycle,5),*) myrank,' done'
! free mopi types (stats)
!     
      if(myrank .eq. 0) then 
         close(67)
	 close(66+mod(icycle,5))
      endif
      if (save) call save_close(cpusave)
      if (spec) call spec_close(spec_cpu)
      if (box2) call box2close()
#ifdef immbnd
      if (pres_out) call pressure_close(myrank)
#endif
!
      return
      end
!-----------------------------------------------------------------------


!==============================================================================
       subroutine eddie_exec()  ! execute command block
       __IAM(EDDIE_EXEC)
       character(len=:), pointer :: command
       int :: l
!
__NULL_COMM_STOP
       if (noexec(ctx)) return
!
__QPRINT
       call message(whoami,'Executing commands within context "'//trim(ctx)//'"')
!
       do
        command=>get_next_command(ctx)
        if (.not.associated(command)) exit
        call toupper(command)
        l=len_trim(command)
!
        call message(whoami, ' =====> "'//command(1:l)//'"');
!
        select case(command(1:l))
         case('INIT','INITIALIZE') ; call eddie_init()
         case('SOLVE','RUN','EXEC') ; call eddie_solve()
         case('OUTPUT') ; call ches_output()
         case('DONE','STOP','END') ; call eddie_done()
         case default; call warning(whoami, 'Unknown command. Skipping.',-1)
        end select
!
        if (fatal_warning(__COMM)) return
!
        deallocate(command)
       enddo
!
       end subroutine eddie_exec
!==============================================================================
end module eddie
