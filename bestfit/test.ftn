 program test

 use bestfit
 use constants
 use parser

 implicit none

 float :: M(3,3), detr, uu(3,3)
 float :: maxerr, err, TOL
 real*8 :: ERRTOL_
 real*4 :: ERRTOL4
 int :: numtest
!######################## for best-fit tests
 float, allocatable :: r(:,:,:), r_rot(:,:,:), rave(:,:), rave_new(:,:)
 character(len=100) :: line
 float, allocatable :: u(:,:,:)
 float, allocatable :: ugrad(:,:,:,:), ugrad_fd(:,:,:,:)
 float :: uplus(3,3), uminus(3,3) ! for FD test
!
 float :: h
!
 float :: Kd(3,3) = RESHAPE( (/one,zero,zero,zero,one,zero,zero,zero,one/), (/3,3/) ) ! Kronecker delta
 float, allocatable :: w(:)
 float :: eigval(3)
 int :: i,j,n,l,nrep,natom
!
 float :: rmsd_charmm(31) = &
& (/0.161762d0, 0.316171d0, 0.462415d0, 0.606288d0, 0.753354d0, 0.887121d0, 0.977275d0, 1.028353d0, 1.058443d0, 1.080392d0, 1.099811d0, 1.118947d0, 1.138144d0, 1.158221d0, 1.179165d0, 1.200457d0, &
&   1.222006d0, 1.243396d0, 1.264580d0, 1.284780d0, 1.305111d0, 1.324648d0, 1.343786d0, 1.362091d0, 1.379977d0, 1.396627d0, 1.412621d0, 1.428078d0, 1.445545d0, 1.468143d0, 1.493650d0 /)
 float :: rmsd_(32)
 float :: rmsd_vmd(31) = &
& (/ 0.16176186501979828d0, 0.3161707818508148d0, 0.4624148905277252d0, 0.6062883138656616d0, & 
& 0.7533543109893799d0, 0.8871204853057861d0, 0.9772745370864868d0, 1.0283526182174683d0, 1.0584430694580078d0, 1.0803922414779663d0, 1.0998106002807617d0, 1.1189470291137695d0, 1.1381436586380005d0,&
& 1.158220648765564d0, 1.179165005683899d0, 1.2004566192626953d0, 1.2220057249069214d0, 1.2433956861495972d0, 1.2645800113677979d0, 1.2847803831100464d0, 1.3051105737686157d0, 1.3246477842330933d0,&
& 1.3437864780426025d0, 1.362090826034546d0, 1.379976749420166d0, 1.396626591682434d0, 1.4126205444335938d0, 1.428078055381775d0, 1.445544719696045d0, 1.4681434631347656d0, 1.4936503171920776d0/)

!
! call setdebug(.true.)
!
!
 maxerr=0d0
 numtest=0
!
 if (kind(TOL).eq.kind(0d0)) then
  TOL=5d-8
 elseif (kind(TOL).eq.kind(0.)) then
  TOL=1d-1
 else
  TOL=1000*ERRTOL()
 endif
!
 ERRTOL_=ERRTOL()
 ERRTOL4=ERRTOL_
!
! 9/2014 : check for any failures in fort.666 files
 call check_666()
! stop
!
!goto 776
! ok
 M=reshape ( (/ 4.1d0, ERRTOL_, 0d0, 0d0, 1d0, 0d0, 0d0, 0d0, 3d0/),(/3,3/) )
 err=check_diag(M) ; if (err.ge.0) numtest=numtest+1 ; maxerr=max(maxerr,err)
! ok
 M=reshape ( (/ 4.1d0, ERRTOL_, ERRTOL_, 0d0, ERRTOL_, ERRTOL_, ERRTOL_, 0d0, ERRTOL_/),(/3,3/) )
 err=check_diag(M) ; if (err.ge.0) numtest=numtest+1 ; maxerr=max(maxerr,err)
! ok
 M=reshape ( (/  ERRTOL_, 1d0, 0d0, & 
                 1d0,      0d0, 3d0, & 
                 0d0,      3d0, ERRTOL_*1000/),(/3,3/) )
 err=check_diag(M) ; if (err.ge.0) numtest=numtest+1 ; maxerr=max(maxerr,err)
 666  continue
 M=reshape ( (/  ERRTOL4, 1., 0., &
                      1., 0., 3., &
                      0., 3., ERRTOL4*1000/),(/3,3/) )
 err=check_diag(M) ; if (err.ge.0) numtest=numtest+1 ; maxerr=max(maxerr,err)
 M=reshape ( (/  ERRTOL_, 1d0, 1d0, 1d0, 1d0, 1d0, 1d0, 1d0, ERRTOL_*1000/),(/3,3/) )
 err=check_diag(M) ; if (err.ge.0) numtest=numtest+1 ; maxerr=max(maxerr,err)
! goto 777
! previously failed cases : 
!
! this failed on edison: 9/14 cannot reproduce error here : perhaps due to precision
 776 continue
 M=reshape( (/ &
  0.1111390146284271795984E-01,  0.6646080588816050994938E-02, -0.1772941663859427946504E-01,&
  0.6646080588816050994938E-02,  0.3974930565945564500674E-02, -0.1059930749808372062171E-01,&
 -0.1772941663859427946504E-01, -0.1059930749808372062171E-01,  0.2834150414212475987963E-01 /), (/3,3/))
  err=check_diag(M) ; if (err.ge.0) numtest=numtest+1 ; maxerr=max(maxerr,err)
!  goto 777

! in this case the eigenvalues were very close to zero (but computed as 1e-8), which lead to two 'duplicate' evectors; fixed
 M=reshape( (/ &
 0.32753820909748578016352d-01, 0.75997504774541049799019d-01, 0.76284169485594674475770d-01,&
 0.75997504774541049799019d-01, 0.17633425876849012636782d+00, 0.17699939651858714873001d+00,&
 0.76284169485594674475770d-01, 0.17699939651858714873001d+00, 0.17766704318685860863880d+00 /), (/3,3/) )
 err=check_diag(M) ; if (err.ge.0) numtest=numtest+1 ; maxerr=max(maxerr,err)
!
! this failed:

 M=reshape( (/ &
 0.27427009764448101458711d+00, 0.10798602617951455484580d+00,-0.16209868811080687251457d-06,&
 0.10798602617951455484580d+00, 0.42516417029020051043808d-01,-0.63821733861371916309836d-07,&
-0.16209868811080687251457d-06,-0.63821733861371916309836d-07, 0.95803315464978367580174d-13 /), (/3,3/) )
 err=check_diag(M) ; if (err.ge.0) numtest=numtest+1 ; maxerr=max(maxerr,err)
!
! one eigenvalue large:
 M=reshape( (/&
 0.10218855987491707537629d+02, 0.78112421847828994100893d-05, 0.64453019393202336424775d-04,&
 0.78112421847828994100893d-05, 0.68376581709931139041458d+00, 0.16416207707149532701862d+00,&
 0.64453019393202336424775d-04, 0.16416207707149532701862d+00, 0.46534616727659389168181d+00 /), (/3,3/) )
 err=check_diag(M) ; if (err.ge.0) numtest=numtest+1 ; maxerr=max(maxerr,err)
!goto 777
!
! fixed by using the fact that eigenvectors coresponding to different EV of a symmetric matrix are orthogonal
 888 continue
 M=reshape( (/ &
 0.367410888671875d+02, 0.293145179748535d+01, -0.475931777954102d+02,&
 0.293145179748535d+01, -0.166737194061279d+02, -0.260370373725891d+01,&
-0.475931777954102d+02, -0.260370373725891d+01, -0.685383224487305d+02 /), (/3,3/) )
 err=check_diag(M) ; if (err.ge.0) numtest=numtest+1 ; maxerr=max(maxerr,err)
! goto 777
 999 continue
 M=reshape( (/ &
 0.677300186157227d+02,-0.592178153991699d+02,-0.896424102783203d+01,&
-0.592178153991699d+02,-0.689867553710938d+02,-0.241539478302002d+02,&
-0.896424102783203d+01,-0.241539478302002d+02, 0.861421356201172d+02 /), (/3,3/))
 err=check_diag(M) ; if (err.ge.0) numtest=numtest+1 ; maxerr=max(maxerr,err)
! goto 777
M=reshape( (/ & ! make sure eigenvalue refine is off
  0.10924203079999976646886d-02, -0.45881652935999953091262d-01, 0.89734525299999890260438d-03, &
 -0.45881652935999953091262d-01,  0.19270294233120000004789d+01, -0.37688500625999994675386d-01, &
  0.89734525299999890260438d-03, -0.37688500625999994675386d-01, 0.73710502924999993495242d-03 /),(/3,3/));

 err=check_diag(M) ; if (err.ge.0) numtest=numtest+1 ; maxerr=max(maxerr,err)
!goto 777

 M=reshape( (/ &
  1.0119807460629636d-003,  -4.2503191334644523d-002,   8.3126989855172092d-004, &
  -4.2503191334644523d-002,   1.7851340360550723d0,       -3.4913335739172324d-002, &
    8.3126989855172092d-004,  -3.4913335739172324d-002,   6.8282884523891436d-004 /), (/3,3/) );
 err=check_diag(M) ; if (err.ge.0) numtest=numtest+1 ; maxerr=max(maxerr,err)

 M=reshape( (/ &
    0.1028934910212111206520569d-02 ,  -0.4321526622890872748605773d-01 ,   0.8451965333885209496339597d-03 ,&
    -0.4321526622890872748605773d-01 ,   0.1815041181614169163438532d+01 ,  -0.3549825440231792889056450d-01, &
     0.8451965333885209496339597d-03 ,  -0.3549825440231792889056450d-01 ,   0.6942685809977144038851460d-03 &
     /), (/3,3/)) ;
 err=check_diag(M) ; if (err.ge.0) numtest=numtest+1 ; maxerr=max(maxerr,err)

 M=reshape( (/ &
 0.10464176237616285101290d-02, -0.43949540197988447298716d-01, 0.85955733380419581564358d-03,&
-0.43949540197988447298716d-01, 0.18458806883155174372035d+01 , -0.36101408019776265456713d-01,&
 0.85955733380419581564358d-03, -0.36101408019776265456713d-01, 0.70606495276773304382162d-03 &
     /), (/3,3/)) ;
 err=check_diag(M) ; if (err.ge.0) numtest=numtest+1 ; maxerr=max(maxerr,err)
 
 667   continue
 M=reshape( (/ &
  0.2565222370592278480217d+03,  0.6789121705472491896671d+02,  0.1180548847706488579945d+02,&
  0.6789121705472491896671d+02,  0.4684488123634363319070d+03, -0.5353344378598894337529d+02,&
  0.1180548847706488579945d+02, -0.5353344378598894337529d+02,  0.7669282973109143419777d+01&
     /), (/3,3/)) ;
 err=check_diag(M) ; if (err.ge.0) numtest=numtest+1 ; maxerr=max(maxerr,err)
 
! compute inverse of this nearly singular matrix
         uu=M
         detr= &
     &  uu(1,1)*(uu(2,2)*uu(3,3)-uu(2,3)*uu(3,2))+ &
     &  uu(1,2)*(uu(2,3)*uu(3,1)-uu(2,1)*uu(3,3))+ &
     &  uu(1,3)*(uu(2,1)*uu(3,2)-uu(2,2)*uu(3,1))
        if (detr.gt.errtol_) then
         M(1,1)=uu(2,2)*uu(3,3)-uu(2,3)*uu(3,2);
         M(1,2)=uu(1,3)*uu(3,2)-uu(1,2)*uu(3,3);
         M(1,3)=uu(2,3)*uu(1,2)-uu(2,2)*uu(1,3);
         M(2,1)=M(1,2)
         M(2,2)=uu(1,1)*uu(3,3)-uu(1,3)*uu(3,1);
         M(2,3)=uu(1,3)*uu(2,1)-uu(1,1)*uu(2,3);
         M(3,1)=M(1,3)
         M(3,2)=M(2,3)
         M(3,3)=uu(1,1)*uu(2,2)-uu(1,2)*uu(2,1);
       endif
 err=check_diag(M) ; if (err.ge.0) numtest=numtest+1 ; maxerr=max(maxerr,err)

 
 
 
!goto 777

!*******random matrix tests*******
! these are an approximation to what actually goes on in a code
!
 do n=1,100000000
! do n=1,100000000  ! millions
! do n=1,1000000000 ! one billion
!do n=1,0
  call random_number(M)
  M=100d0*(M+transpose(M)-1d0)
  err=check_diag(M) ; if (err.ge.0) numtest=numtest+1 ; maxerr=max(maxerr,err)
 enddo
!
 777  continue
#ifndef __USELAPACK
 write(0,*) ' MAXIMUM DIAGONALIZATION ERROR: ',maxerr
#else
 write(0,*) ' MAXIMUM DIAGONALIZATION ERROR(LPK): ',maxerr
#endif
 write(0,*) ' NUMBER OF TESTS: ',numtest
!####################################################################################################
!stop
!####################################################################################################
! TEST BEST FIT ALIGNMENT
!
 write(0,*) ' ---------------------------------------' 
 write(0,*) ' Reading structures for best-fit test...' 
 nrep=32
 do n=1,nrep
  write(line,'(I5)') n-1
  line=adjustl(line)
  l=len_trim(line)
  line='testdata/diala22_zts_'//line(1:l)//'.cor'
  open(unit=100, file=line,form='FORMATTED',status='old')
  line='*'
  do while (line(1:1).eq.'*')
   read(100,'(A)') line
  enddo
  read(line,'(I5)') natom
  if (n==1) then
    allocate(r(natom,3,nrep))
    allocate(r_rot(natom,3,nrep))
    allocate(rave(natom,3)); rave=zero
    allocate(rave_new(natom,3))
    allocate(u(3,3,nrep))
!    allocate(w(natom)); w=(/(one,j=1,natom)/)/natom ! fails with gfortran 4.9.1, producing infinities; OK is uusing -O0 -- no opt.
    allocate(w(natom)); w=(/(one/natom,j=1,natom)/)
!aa write(0,*) 'w: ',one, w
  endif
  do i=1,natom
   read(100,'(20X,3F10.5)') r(i,:,n)
  enddo
!
!aa write(0,*) 'natom:', natom
! remove COM
  eigval=com(r(:,:,n),w)
!aa write(0,*) 'COM: ',eigval
  do i=1,3; r(:,i,n)=r(:,i,n)-eigval(i); enddo
!
 enddo ! nrep
!stop
! superpose all structures onto a single one
 write(0,*) ' Superposing all structures onto first structure using RMSBestFit ...' 
!
 do n=2,nrep
  call RMSBestFit(r(:,:,n),r(:,:,1),w,u(:,:,n),EIGVAL=eigval)
!aa
!write(0,'(3G25.15)') transpose(matmul(r(:,:,n),transpose(u(:,:,n))))
!write(0,*) '*****'
!write(0,'(3G25.15)') transpose(r(:,:,n))
  rmsd_(n-1)=rmsd(r(:,:,1),matmul(r(:,:,n),transpose(u(:,:,n))),w)
!  write(0,'(I5,A20)') n, ' Rotation matrix : ' 
!  write(0,'(3G20.9)') u(:,:,n)
! test orthogonality
!  write(0,*)  ' -------------------------------------------------------------------- ' 
!  write(0,'(A,I5,3G25.15)') ' Orthogonality error: ',n,rmsd(matmul(u(:,:,n),transpose(u(:,:,n))),Kd,(/one,one,one/))/nine
!  write(0, '(A,10G25.15)')   ' RMSD from eigenvalues  : ',sqrt(rmsd(r(:,:,n),rave,w)**2+rmsd(r(:,:,1),rave,w)**2-two*sum(eigval)) ! , eigval ! , maxval(abs(rave))
!  write(0, '(A,3G25.15)')   ' RMSD from coordinates  : ',rmsd_(n-1)
!stop
!aa   write(0, *) rmsd_(n-1), rmsd_charmm(n-1), rmsd_vmd(n-1)
  
 enddo
! compute difference from charmm and VMD:
 write(0,*) ' -------------------------------------------------------'
 write(0,*) ' Maximum RMS differences between different calculations:'
 write(0,*) ' Present vs. CHARMM: ', maxval(abs(rmsd_(1:31) - rmsd_charmm))
 write(0,*) ' Present vs. VMD   : ', maxval(abs(rmsd_(1:31) - rmsd_vmd   ))
 write(0,*) ' CHARMM  vs. VMD   : ', maxval(abs(rmsd_charmm - rmsd_vmd   ))
!
! compute gradients of rotation analytically and compare to finite-differences
 write(0,*) '  ---------------------------------------------- '
 write(0,*) ' Comparing analytical and finite-difference gradients from RMSBestFit ...'
 write(0,*) '  max|u - ( u(x+h) - u(x-h) )/2h|'
 write(0,*) '  (NOTE: 2nd order FD should exhibit a quadratic reduction in max. error [for h not too small!])'
 write(0,*)
 write(0,*) '  FD interval, Max. grad. error (all structures): '
 write(0,*) '  ----------------------------------------------- '
! write(0,*) '  Coordinate set    Max. gradient error: '
 allocate( ugrad(3,3,3,natom), ugrad_fd(3,3,3,natom) )
!
 h=10d0;

 do
!
  maxerr=0;
  rave=r(:,:,1) ! first coordintate set
!
  do n=1,nrep ! over all coordinates
   call RMSBestFit(r(:,:,n),rave,w,uminus,1,natom,ugrad) ! compute matrix and gradients
!
   do j=1,natom ! over all atoms
    do i=1,3 ! over all components
     rave(j,i)=rave(j,i)+h ! fd perturbation
     call RMSBestFit(r(:,:,n),rave,w,uplus);
     rave(j,i)=rave(j,i)-h*2 ! fd perturbation
     call RMSBestFit(r(:,:,n),rave,w,uminus);
     ugrad_fd(:,:,i,j)=(uplus-uminus)*0.5d0/h ! second - order
!     ugrad_fd(:,:,i,j)=(uplus-uminus)/h ! first - order
     rave(j,i)=r(j,i,1) ! restore coordinate
    enddo
   enddo
! compare analytical and
   err=maxval(abs(ugrad_fd-ugrad))
   maxerr=max(err,maxerr)
!  write(0,*) n, err
  enddo ! n
  write(0,'("  ",ES20.13,A,ES20.13)')    h,',',maxerr
  h=h*0.1d0
  if (h.lt.TOL) exit

 enddo
!
 write(0,*) '  -------------------------------------------- '
!
!stop
! performance test (about 0.18 ms / calculation with AD)
 n=1
 write(0,*) ' Calculating best fit ', 10*n,' times...'
 do j=1,n 
  do i=2,11
   call RMSBestFit(r(:,:,i),r(:,:,i-1),w,u(:,:,i),EIGVAL=eigval)
  enddo
 enddo
!
! now, let`s try to find the common structure
 rave=r(:,:,1)
 rave_new=zero
! 
 i=77 ! maximum number of iterations
 do j=1,i
  do n=1,nrep
   call RMSBestFit(r(:,:,n),rave,w,u(:,:,n))
   r_rot(:,:,n)=matmul(r(:,:,n),transpose(u(:,:,n)))
   rmsd_(n)=rmsd(r(:,:,n),rave,w)
  enddo
  rave_new=sum(r_rot,3)/nrep
  err=rmsd(rave_new,rave,w)
  write(0,*) err, sum(rmsd_**2)
!  if (err.lt.errtol_) exit
  if (err.lt.errtol_) exit
  rave=rave_new
 enddo
!
 deallocate(r,r_rot,rave,rave_new,u,w)
!####################### UTILITY FUNCTIONS ##########################################################
 contains
  function check_diag(B,verbose_)
  implicit none
  float, intent(in) :: B(3,3)
  float :: maxerr, A(3,3)
  float :: eval(3), evec(3,3)
  real*8 :: b0(3,3) ! this is a check -- do in double prec
  float :: check_diag, norm
  character(len=10) :: whoami='CHECK_DIAG'
  bool, optional, intent(in) :: verbose_
  bool :: verbose
!
#ifdef __USELAPACK
  float :: evallpk(3), eveclpk(3,3), wlpk(20), maxerrlpk
  real*8 :: b0lpk(3,3)
  int :: errlpk=0
  bool, parameter :: qdouble=(kind(evallpk).eq.kind(1d0));
  bool, parameter :: qsingle=(kind(evallpk).eq.kind(1.0));
#endif
!
  if (present(verbose_)) then ; verbose=verbose_ ; else ; verbose=.false. ; endif
! First, make sure that the matrix is symmetric
  maxerr=(maxval(abs(B-transpose(B))))
  if (maxerr.ge.TOL) then
   write(0,*) whoami,': Matrix not symmetric, aborting test.'
   write(0,*) whoami,': Details:'
   write(0,*) '-------------------------'
   write(0,*)' A-A^T :'
   write(0,'(3E22.15)') B-transpose(B)
   write(0,*) '-------------------------'
   check_diag=-1d0
   return
  endif
! Second, scale the matrix
! I find that this does not make a significant difference
!  norm=third*abs(B(1,1)+B(2,2)+B(3,3))**third ; ! use trace for normalization 
!  norm=abs(B(1,1)+B(2,2)+B(3,3))**third ; ! use trace for normalization 
!  norm=abs(B(1,1)+B(2,2)+B(3,3))**half ; ! use trace for normalization 
!  norm=abs(B(1,1)+B(2,2)+B(3,3))/27 ; ! use trace for normalization 
!  norm=third*abs(B(1,1)+B(2,2)+B(3,3)) ; ! use trace for normalization 
!  norm=abs(sum(B))/9
  norm=1;
  A=B/norm
! 
  call eig3s(A, eval, evec)
#ifdef __USELAPACK
  eveclpk=A
  if (qdouble) then
   call dsyev('V','L',3,eveclpk,3,evallpk,wlpk,size(wlpk),errlpk)
  elseif (qsingle) then
   call ssyev('V','L',3,eveclpk,3,evallpk,wlpk,size(wlpk),errlpk)
  else
   write(0,*) whoami, 'Cannot find compatible LAPACK diagonalization routine for kind "'//itoa(kind(evallpk))//'". Abort'
  endif

! make sure eigenvalues are sorted by decreasing magnitude
  if (abs(evallpk(1)).lt.abs(evallpk(2))) then;
    wlpk(1)=evallpk(1); evallpk(1)=evallpk(2); evallpk(2)=wlpk(1); 
    wlpk(1:3)=eveclpk(:,1); eveclpk(:,1)=eveclpk(:,2); eveclpk(:,2)=wlpk(1:3); 
  endif
  if (abs(evallpk(1)).lt.abs(evallpk(3))) then;
    wlpk(1)=evallpk(1); evallpk(1)=evallpk(3); evallpk(3)=wlpk(1); 
    wlpk(1:3)=eveclpk(:,1); eveclpk(:,1)=eveclpk(:,3); eveclpk(:,3)=wlpk(1:3); 
  endif
  if (abs(evallpk(2)).lt.abs(evallpk(3))) then;
    wlpk(1)=evallpk(2); evallpk(2)=evallpk(3); evallpk(3)=wlpk(1); 
    wlpk(1:3)=eveclpk(:,2); eveclpk(:,2)=eveclpk(:,3); eveclpk(:,3)=wlpk(1:3); 
  endif
!
#endif // lapack
!
! check diagonalization directly
! rescale the eigenvalues back
  eval=eval*norm
  b0(:,1)=eval(1)*evec(:,1);b0(:,2)=eval(2)*evec(:,2);b0(:,3)=eval(3)*evec(:,3)! aa
!
#ifdef __USELAPACK
  evallpk=evallpk*norm
  b0lpk(:,1)=evallpk(1)*eveclpk(:,1);b0lpk(:,2)=evallpk(2)*eveclpk(:,2);b0lpk(:,3)=evallpk(3)*eveclpk(:,3)! aa
#endif
!
  if (verbose) then
   write(0,*) '* EIGENVALUES  : ' , eval
#ifdef __USELAPACK
   write(0,*) '* EIGENVAL(LPK): ' , evallpk
#endif
   write(0,*) '* EIGENVECTOR 1 ', evec(:,1), norm3(evec(:,1))
#ifdef __USELAPACK
   write(0,*) '* EVECT (LPK) 1 ', eveclpk(:,1), norm3(eveclpk(:,1))
#endif
   write(0,*) '* EIGENVECTOR 2 ', evec(:,2), norm3(evec(:,2))
#ifdef __USELAPACK
   write(0,*) '* EVECT (LPK) 2 ', eveclpk(:,2), norm3(eveclpk(:,2))
#endif
   write(0,*) '* EIGENVECTOR 3 ', evec(:,3), norm3(evec(:,3))
#ifdef __USELAPACK
   write(0,*) '* EVECT (LPK) 3 ', eveclpk(:,3), norm3(eveclpk(:,3))
#endif
   write(0,*) '* ERRTOL : ', __ERRTOL
   write(0,*) '*     ',matmul(b0, transpose(evec))
#ifdef __USELAPACK
   write(0,*) '*(LPK)',matmul(b0lpk, transpose(eveclpk))
#endif
  endif

  maxerr=(maxval(abs(matmul(b0,transpose(evec))-B)))
#ifdef __USELAPACK
  maxerrlpk=(maxval(abs(matmul(b0lpk,transpose(eveclpk))-B)))
#endif
  if (maxerr.ge.TOL) then
   write(666,*) whoami,': Test failed, maximum error , TOL:',maxerr,TOL
   write(666,*) whoami,': Details:'
   write(666,*) '-------------------------'
   write(666,*)' A :'
   write(666,'(3E22.15)') B
   write(666,*) '-------------------------'
   write(666,*) 'EIGENVALUES: '
   write(666,'(3G22.14)') eval
   write(666,*) '---------------------------------'
   write(666,*) 'EIGENVECTORS: '
   write(666,'(3G22.14)') evec
   write(666,*) '---------------------------------'
   write(666,*)' U x U^T (should be I):'
   write(666,*) '---------------------------------'
   write(666,'(3E22.15)') matmul(evec,transpose(evec))
   write(666,*)' A - U x M x U^T (should be 0):'
   write(666,*) '---------------------------------'
   write(666,'(3E22.15)') B-matmul(b0,transpose(evec))
   write(666,*) '================================='
  endif
!
  check_diag=maxerr
#ifdef __USELAPACK
  check_diag=maxerrlpk
#endif
!
  if (maxerr.ge.TOL) then
   write(0,*) '--**ERROR**--', check_diag ! , norm
  endif
!
  end function check_diag
!====================================
  subroutine check_666()
  __DEP_OUTPUT
  __IMPNONE
  __STRING_PARAM(fname,testdata/fort.666);
! __STRING_PARAM(fname,testdata/fort.888);
  __STRING_PARAM(tag,RMSBestFit>> RR matrix:)
!
  bool :: exists
  float :: derr
  int :: ioerr
  int :: funit = 10
  float :: rr(3,3)
  int :: i
  
  __DECL_MSGBUF
  inquire(file=fname, exist=exists);
!
  if (.not.exists) then
   __MESG('test',fname,' file does not exist');
   return
  endif
!
  __MESG('test','==================================');
  __MESG('test','testing matrices in ',fname,'...');
  open(file=fname, unit=funit, status='old', form='formatted');
!
  ioerr=0
  do while (ioerr==0)
   read(funit,'(A)', iostat=ioerr) line
   if (ioerr.ne.0) exit
   line=adjustl(line)
!   __MESG('test','*',trim(line),trim(tag),trim(line)==trim(tag),len_trim(line), len_trim(tag))
   if (trim(line).eq.tag) then ! next tree lines are a matrix
    do i=1,3
     read(funit,*,iostat=ioerr) rr(1,i), rr(2,i), rr(3,i)
     if (ioerr.ne.0) then
      __WARN('test','error reading matrix in file',fname)
      return
     endif
    enddo
    __MESG('test','testing diagonalization for:');
    __MESG('test','----------------------')
    do i=1,3
     __MESG('test',rr(:,i))
    enddo
    derr=check_diag(rr);
    __MESG('test','diagonalization error : ',derr)
    __MESG('test','----------------------')
   endif
  enddo

  __MESG('test','==================================');


  end subroutine check_666
!====================================

 end ! program
 