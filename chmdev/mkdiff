#!/bin/bash
# VO 5.2014
# create patches to update the charmm tree found in directory
#"$1" to the (modified) charmm tree found in the directory "$2"

OUT="===>";
ERR="WARNING:"
BREAK="===================================================================================";
chmv=40a1-327
patchdir=chmdiff$chmv
logfile=$patchdir.log
PREFLX2CPP=0 ; # indicate whether to replace charmm preflx macros with CPP macros : 1 - yes; 0 - no
PREFLX2CPP=1 ; # 
rdir=`pwd`;
#compute absolute location of log file
logfilename=${logfile##*/}
logpath=${logfile%$logfilename}
echo -n > $logfile
pushd "$logpath" >&/dev/null
logpath=`pwd`;
popd >&/dev/null
logfileabs="$logpath/$logfilename"

dnew_default="c40a1-327-mod"
dold_default="c40a1-327-copy"
#==================== source
if [ -z $1 ] ; then
 echo " Source (new) directory name unspecified. Trying \"$dnew_default\""
 dnew=$dnew_default
else
 echo " Source (new) directory name is \"$dnew\""
 dnew=$1
fi
#
if [ ! -d "$dnew" ]; then
 echo " Directory "$dnew" does not exist. Abort."
 exit 1
fi
#
#==================== destination
if [ -z $2 ] ; then
 echo " Target (old) directory name unspecified. Trying \"$dold_default\""
 dold=$dold_default
else
 echo " Target (old) directory name is \"$dold\""
 dold=$2
fi
#
if [ ! -d "$dold" ]; then
 echo " Directory "$dold" does not exist. Abort."
 exit 1
fi
#
#============================= specify what to do ===
# explicit dirs to process (in addition to source) :
subdirs="tool doc test/c39test test/c30test test/c36test test/c37test test/c40test" ;
# additional files to patch
buildfiles=`pushd $dnew >&/dev/null; ls build/UNX/Make* ; popd>&/dev/null`
buildfiles=$buildfiles" install.com"
patchfiles=$buildfiles
# files excluded from prefx2cpp
exclude_prefx2cpp="domdec_bonded_block.src fctall.src colfft_util.src"
# files to delete
delfiles="source/manip/confcons.src \
 source/manip/interp_path.src \
 source/stringm/reparam.src \
 source/stringm/splines.src \
 source/stringm/stats.src \
 source/stringm/stringcmd.src \
 source/stringm/stringm.src \
 test/c36test/confcons.inp \
 test/c36test/zts_ens.inp \
 doc/stringm.doc"
#
# append new test case files
declare -a newtestfiles=(`ls $dnew/test/c40test | grep "\ftsm\|sm0k\|smcv\|confcons"`)
newtestfiles=( "${newtestfiles[@]/#/test/c40test/}" )
# use "find" to get all files in the support string directory; use pushd to get the desirec paths
pushd $dnew >&/dev/null
declare -a newsupportfiles=(`find support/stringm -type f`)
popd >&/dev/null
#append (most) string files : 
#declare -a newstringfiles=(`ls $dnew/source/stringm | grep ".src" | sed 's/splines\.src//'`)
#newstringfiles=( "${newstringfiles[@]/#/source/stringm/}" )
#newfiles=${newtestfiles[@]}" "${newstringfiles[@]}
newfiles=${newtestfiles[@]}" "${newsupportfiles[@]}
#=====================================================
echo "$OUT Will create a directory tree \"$patchdir\" to patch \"$dold\"==>\"$dnew\""
echo "$OUT Will create a directory tree \"$patchdir\" to patch \"$dold\"==>\"$dnew\"" >>$logfile
#
echo $BREAK >>$logfile
echo "$OUT scanning tree in \"$dnew\" and building directory list"
echo "$OUT scanning tree in \"$dnew\" and building directory list" >> $logfile

# process source directory
pushd $dnew >&/dev/null;
pushd source >&/dev/null;
for d in `ls`; do
 if [ -d $d ] ; then
# exclude stringm directory
  dd=`echo $d | sed "s/stringm//"`
  if [ ! -z $dd ]; then
   echo "$OUT Adding $dnew/source/$d" >> $rdir/$logfile
   subdirs=$subdirs" "source/$d
  fi
 fi
done
popd >&/dev/null
popd >&/dev/null
#
echo $BREAK >>$logfile
echo "$OUT Generating patch files ..."
echo "$OUT Generating patch files ..." >>$logfile
#
if [ -z `echo $subdirs|awk '{print $1}'` ]; then
 echo "Nothing to do ..."
 exit 0
fi
#
echo "$OUT Creating directory \"$patchdir\""
rm -fr $patchdir ; #aa remove without prompting
if [ -d $patchdir ]; then
 echo "$ERR Directory \"$patchdir\" already exists. Abort."
 exit -1
fi
mkdir -p $patchdir
if [ ! -d $patchdir ] ; then
 echo "$ERR Could not create directory. Abort"
 exit -1
fi
#
pushd $patchdir>&/dev/null
patchdirabs=`pwd` ;# get absolute path
popd>&/dev/null
#
if [ 0 -eq 0 ]; then # to omit dirs
for d in $subdirs ; do
 echo "$OUT Processing directory $d"
 echo "$OUT Processing directory $d" >> $logfile
 if [ ! -d $dnew/$d ]; then
  echo "$ERR Requested directory \"$dnew/$d\" cannot be accessed (skipping). Patch tree may be incomplete"
  echo "$ERR Requested directory \"$dnew/$d\" cannot be accessed (skipping). Patch tree may be incomplete" >> $logfileabs
  continue
 elif [ ! -d $dold/$d ]; then
  echo "$ERR Cannot access \"$dold/$d\". Skipping \"$d\". Patch tree may be incomplete."
  echo "$ERR Cannot access \"$dold/$d\". Skipping \"$d\". Patch tree may be incomplete." >> $logfileabs
  continue
 fi
 ddold=$rdir/$dold/$d
 pushd $dnew/$d >&/dev/null
 files=`ls`
 for f in $files ; do
  if [ -d $f ]; then
   echo "$OUT Skipping subdirectory \"$d/$f\""
   continue
  elif [ -f $ddold/$f ]; then
# regular file
   fold=$ddold/$f
   fbase=${f%%.*}
   fpatch=$f.patch
# patch in the root directory
   cp -f $f $rdir/$fbase.new
   cp -f $fold $rdir/$f
   pushd $rdir >&/dev/null
   diff --text --unified=3 $f $fbase.new > $fpatch
#
   if [ -s $fpatch ] ; then
# convert preflx to cpp if requested and regenerate patch (we know it is not empty)
    if [ $PREFLX2CPP -eq 1 ]; then
     if [ `echo $exclude_prefx2cpp | grep $fbase  | wc -l` -eq "0" ] ; then # run prefx2cpp on this file
      $rdir/prefx2cpp $fbase.new 0 > _tmp ;# 0 - flag means no parentheses
      mv _tmp $fbase.new
      diff --text --unified=3 $f $fbase.new > $fpatch
     fi
    fi
# move patch to source directory
    echo "$OUT Creating patch file \"$patchdir/$d/$fbase.patch\"" >> $logfile
    mkdir -p $patchdirabs/$d
    mv $fpatch $patchdirabs/$d
   else
    rm -f $fpatch
   fi
   rm -f $fbase.new $f
   popd >&/dev/null ; # return to source dir
  else
   echo "$ERR Cannot access \"$ddold/$f\" (skipping). Patch tree may be incomplete."
   echo "$ERR Cannot access \"$ddold/$f\" (skipping). Patch tree may be incomplete." >> $logfileabs
  fi
 done
 popd >&/dev/null
done
#
fi
# process additional (individual) files
#=================================================================
echo $BREAK
echo "$OUT Creating additional patches:"
echo "$OUT Creating additional patches:" >> $logfile
echo "$OUT Files to be patched:" >> $logfile
echo "$OUT $patchfiles" >> $logfile
for f in $patchfiles ; do
 fnew=$dnew/$f
 fold=$dold/$f
 if [ ! -f $fnew ] ; then
  echo "$ERR File \"$fnew\" requested but cannot be found (skipping). Patch tree may be incomplete"
  echo "$ERR File \"$fnew\" requested but cannot be found (skipping). Patch tree may be incomplete" >> $logfile
  continue
 elif [ ! -f $fold ] ; then
  echo "$ERR File \"$fold\" requested cannot be found (skipping). Patch tree may be incomplete"
  echo "$ERR File \"$fold\" requested cannot be found (skipping). Patch tree may be incomplete" >> $logfile
  continue
 fi
#
 fname=${f##*/}
 fbase=${fname##*.}
 fdir=${f%$fname}
 fpatch=$fname.patch
 cp -f $fold $fname
 cp -f $fnew $fbase.new
 diff --text --unified=3 $fname $fbase.new > $fpatch
#
 if [ -s $fpatch ] ; then
# convert preflx to cpp if requested
  if [ $PREFLX2CPP -eq 1 ]; then
   if [ `echo $exclude_prefx2cpp | grep $fbase  | wc -l` -eq "0" ] ; then # do not run prefx2cpp on this file
    $rdir/prefx2cpp $fbase.new 0 > _tmp ;# 0 - flag means no parentheses
    mv _tmp $fbase.new
    diff --text --unified=3 $fname $fbase.new > $fpatch
   fi
  fi
  echo "$OUT Creating patch file \"$patchdir/$fdir/$fpatch\""
  echo "$OUT Creating patch file \"$patchdir/$fdir/$fpatch\"" >> $logfile
  mkdir -p $patchdirabs/$fdir
  mv $fpatch $patchdirabs/$fdir
 else
  rm -f $fpatch
 fi
 rm -f $fname $fbase.new
done

# delete files (if any)
#=================================================================
echo $BREAK
echo "$OUT Creating file removal patches:"
echo "$OUT Creating file removal patches:" >> $logfile
echo "$OUT Files to be removed:" >> $logfile
echo "$OUT $delfiles" >> $logfile
for f in $delfiles ; do
 ff=$dold/$f
 if [ ! -f $ff ] ; then
  echo "$ERR File \"$ff\" requested for deletion but cannot be found (skipping). Patch tree may be incomplete"
 fi
 fname=${f##*/}
 fdir=${f%$fname}
 fpatch=$fname.patch
 cp -f $ff $fname
 diff --text --unified=3 $fname /dev/null > $fpatch
 echo "$OUT Creating patch file \"$patchdir/$fdir/$fpatch\""
 echo "$OUT Creating patch file \"$patchdir/$fdir/$fpatch\"" >> $logfile
 mkdir -p $patchdirabs/$fdir
 mv $fpatch $patchdirabs/$fdir
 rm -f $fname
done
#
# create new files (if any)
#=================================================================
echo $BREAK
echo "$OUT Writing file creation patches:"
echo "$OUT Writing file creation patches:" >> $logfile
echo "$OUT Files to be created:" >> $logfile
echo "$OUT $newfiles" >> $logfile
for f in $newfiles ; do
 fname=${f##*/}
 ff=$dnew/$f
 if [ ! -f $ff ] ; then
  echo "$ERR File \"$ff\" requested for creation is not in the modified source tree (skipping). Patch tree may be incomplete"
  continue
 fi
 fdir=${f%$fname}
 fpatch=$fname.patch
 cp -f $ff $fname
 diff --text --unified=3 /dev/null $fname > $fpatch
 echo "$OUT Creating patch file \"$patchdir/$fdir/$fpatch\""
 echo "$OUT Creating patch file \"$patchdir/$fdir/$fpatch\"" >> $logfile
 mkdir -p $patchdirabs/$fdir
 mv $fpatch $patchdirabs/$fdir
 rm -f $fname
done

echo "$OUT DONE !"
echo $BREAK
echo "$OUT DONE !" >>$logfile
echo $BREAK >> $logfile
#
