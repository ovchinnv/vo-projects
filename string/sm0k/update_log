##IF STRINGM						      |	__CHARMM_ONLY##IF STRINGM
##IF PARALLEL						      |	__CHARMM_ONLY##IF PARALLEL
      logical, public, save :: sm0k_initialized=.false.	      |	      bool, public, save :: sm0k_initialized=.false.
      integer, save :: nstring=-1			      |	      int, save :: nstring=-1
      integer, save :: mestring=-1			      |	      int, save :: mestring=-1
      logical, save :: repa_initialized			      |	      bool, save :: repa_initialized
      integer, save :: norient, nmove			      |	      int, save :: norient, nmove
      integer, parameter :: linear=1, spline=2, bspline=3, ds |	      int, parameter :: linear=1, spline=2, bspline=3, dst=4,
      integer, save :: interp_method=0,orient=0		      |	      int, save :: interp_method=0,orient=0
      logical, save :: qstat_orient=.false.		      |	      bool, save :: qstat_orient=.false.
      integer, save :: orient_mass=0, repa_mass=0	      |	      int, save :: orient_mass=0, repa_mass=0
      integer, save :: iterations=1 ! maximum interpolation i |	      int, save :: iterations=1 ! maximum interpolation itera
      real*8, save  :: def=1.1d0 ! interpolation tolerance    |	      float, save  :: def=1.1d0 ! interpolation tolerance
      real*8, save  :: dst_cutoff=1.0d0 ! wavenumber truncati |	      float, save  :: dst_cutoff=1.0d0 ! wavenumber truncatio
      real*8, save, allocatable ::                            |	      float, save, allocatable ::                            
      real*8, save, allocatable :: ds(:), curv(:) ! unavailab |	      float, save, allocatable :: ds(:), curv(:) ! unavailabl
      real*8, save, allocatable :: orientWeights(:), repaWeig |	      float, save, allocatable :: orientWeights(:), repaWeigh
      integer, save, allocatable :: iatom_o(:), iatom_m(:),   |	      int, save, allocatable :: iatom_o(:), iatom_m(:),      
      integer, save, pointer :: iatom_f(:)		      |	      int, save, pointer :: iatom_f(:)
      integer, save :: nfix_bckl			      |	      int, save :: nfix_bckl
      logical, save, allocatable :: fixed_o(:), fixed_m(:), f |	      bool, save, allocatable :: fixed_o(:), fixed_m(:), fixe
      integer, save :: stat_iteration_counter=0 ! how many ti |	      int, save :: stat_iteration_counter=0 ! how many times 
      logical, save :: output_energy=.false., output_rmsd0=.f |	      bool, save :: output_energy=.false., output_rmsd0=.fals
      logical, save :: stat_rmsd_mass=.false. ! should the st |	      bool, save :: stat_rmsd_mass=.false. ! should the stati
      logical, save :: stat_initialized=.false.		      |	      bool, save :: stat_initialized=.false.
      character*80, save :: energy_fname='',                  |	      character(len=80, save :: energy_fname='',             
      integer, save :: nstat				      |	      int, save :: nstat
      integer, save :: rmsd0_funit=-1, dsdt_funit=-1, s_funit |	      int, save :: rmsd0_funit=-1, dsdt_funit=-1, s_funit=-1,
      integer, parameter :: enmax=100			      |	      int, parameter :: enmax=100
      character*4, save :: energy_names(enmax) ! arrays large |	      character(len=4, save :: energy_names(enmax) ! arrays l
      integer, save :: energy_indices(enmax) ! indices into t |	      int, save :: energy_indices(enmax) ! indices into the E
      integer, save :: num_energy_terms=0		      |	      int, save :: num_energy_terms=0
      integer, save :: num_average_samples=0 ! number of samp |	      int, save :: num_average_samples=0 ! number of samples 
      integer, save :: energy_flen=0,                         |	      int, save :: energy_flen=0,                            
      real*8, save, allocatable, dimension(:,:) ::            |	      float, save, allocatable, dimension(:,:) ::            
      real*8, save, allocatable :: statWeights(:)	      |	      float, save, allocatable :: statWeights(:)
      integer, save, allocatable :: iatom_s(:), iatom_free_s( |	      int, save, allocatable :: iatom_s(:), iatom_free_s(:)
      use string					      |	      __DEP_OUTPUT
!      implicit none					      |	!      __IMPNONE
      use dimens_fcm 					      |	      __DEP_SIZE 
      use stream 					      |	      __DEP_PARSER 
      character*8 keyword				      |	      character(len=8 keyword
      character*11 whoami				      |	      character(len=11 whoami
      integer :: isd, iconj, icgsd, iabnr, inrap	      |	      int :: isd, iconj, icgsd, iabnr, inrap
!      logical eqstwc					      |	!      bool __STRNCMP
!      character*4 nexta4				      |	!      character(len=4 __NEXTA
!      integer indxa, gtrmi				      |	!      int __INDX_RM, __GET_RM_I
!      real*8 gtrmf					      |	!      float __GET_RM_F
      logical :: qprint					      |	      bool :: qprint
      keyword=nexta4(comlyn,comlen)			      |	      keyword=__NEXTA(comlyn,comlen)
      if (eqstwc(keyword(1:4),4,'INIT',4)) then		      |	      if (__STRNCMP(keyword(1:4),4,'INIT',4)) then
      if (eqstwc(keyword(1:4),4,'INTE',4)) then		      |	      if (__STRNCMP(keyword(1:4),4,'INTE',4)) then
      elseif (eqstwc(keyword(1:4),4,'REPA',4)) then	      |	      elseif (__STRNCMP(keyword(1:4),4,'REPA',4)) then
      elseif (eqstwc(keyword(1:4),4,'STAT',4)) then	      |	      elseif (__STRNCMP(keyword(1:4),4,'STAT',4)) then
      elseif (eqstwc(keyword(1:4),4,'MINI',4)) then	      |	      elseif (__STRNCMP(keyword(1:4),4,'MINI',4)) then
       isd=indxa(comlyn, comlen, 'SD')			      |	       isd=__INDX_RM(comlyn, comlen, 'SD')
       iconj=indxa(comlyn, comlen, 'CONJ')		      |	       iconj=__INDX_RM(comlyn, comlen, 'CONJ')
       icgsd=indxa(comlyn, comlen, 'CGSD')		      |	       icgsd=__INDX_RM(comlyn, comlen, 'CGSD')
       iabnr=indxa(comlyn, comlen, 'ABNR')		      |	       iabnr=__INDX_RM(comlyn, comlen, 'ABNR')
       inrap=indxa(comlyn, comlen, 'NRAP')		      |	       inrap=__INDX_RM(comlyn, comlen, 'NRAP')
        call wrndie(0,'<STRING_MINI>',                        |	        __WRN('<STRING_MINI>',                               
       repa_freq=gtrmi(comlyn, comlen, 'REPF',-1)	      |	       repa_freq=__GET_RM_I(comlyn, comlen, 'REPF',-1)
     &      WRITE (OUTU,'(/,2A,/,2A,/,2A/)')                  |	     &      WRITE (_MSGBUF,'(/,2A,/,2A,/,2A/)')              
     &      WRITE (OUTU,'(/,2A,/,2A,I7,A/)')                  |	     &      WRITE (_MSGBUF,'(/,2A,/,2A,I7,A/)')              
       if (repa_on) then ! logically, it makes sense to outpu |	       if (repa_on) then ! boolly, it makes sense to output s
        stat_freq=gtrmi(comlyn, comlen, 'STAF',-1)	      |	        stat_freq=__GET_RM_I(comlyn, comlen, 'STAF',-1)
     &   WRITE (OUTU,'(/,2A,/,2A/)')                          |	     &   WRITE (_MSGBUF,'(/,2A,/,2A/)')                      
     &   WRITE (OUTU,'(/,2A,I6,A/)')                          |	     &   WRITE (_MSGBUF,'(/,2A,I6,A/)')                      
     &  WRITE (OUTU,'(/,2A,/,2A/)')                           |	     &  WRITE (_MSGBUF,'(/,2A,/,2A/)')                       
      use string					      |	      __DEP_OUTPUT
!      implicit none					      |	!      __IMPNONE
      use stream 					      |	      __DEP_PARSER 
      use multicom_ltm       !##MULTICOM		      |	      __DEP_MULTICOM       !__CHARMM_ONLY##MULTICOM
      use mpi 						      |	      __DEP_MPI 
      logical :: qroot, qslave				      |	      bool :: qroot, qslave
      character*11 :: whoami				      |	      character(len=11 :: whoami
        write(outu, 111) whoami, ME_GLOBAL, whoami	      |	        write(_MSGBUF, 111) whoami, ME_GLOBAL, whoami
        write(outu, 111) whoami, ME_GLOBAL, whoami	      |	        write(_MSGBUF, 111) whoami, ME_GLOBAL, whoami
          write(outu,'(2A)')                                  |	          write(_MSGBUF,'(2A)')                              
          write(outu,'(2A,I5, A)')                            |	          write(_MSGBUF,'(2A,I5, A)')                        
      use stream 					      |	      __DEP_PARSER 
      use multicom_ltm       !##MULTICOM		      |	      __DEP_MULTICOM       !__CHARMM_ONLY##MULTICOM
      use mpi 						      |	      __DEP_MPI 
      character*11 :: whoami				      |	      character(len=11 :: whoami
      integer :: bug					      |	      int :: bug
     &  write(outu,'(2A,I5, A)') whoami, ' CLEANING UP.'      |	     &  write(_MSGBUF,'(2A,I5, A)') whoami, ' CLEANING UP.'
      use string					      |	      __DEP_OUTPUT
!      implicit none					      |	!      __IMPNONE
      use dimens_fcm 					      |	      __DEP_SIZE 
      integer, pointer :: sm0k_fixed_atoms(:)		      |	      int, pointer :: sm0k_fixed_atoms(:)
      integer, allocatable :: backlist(:)		      |	      int, allocatable :: backlist(:)
      integer :: nfix, i, j				      |	      int :: nfix, i, j
      logical :: qfree					      |	      bool :: qfree
##IF TSM						      |	__CHARMM_ONLY##IF TSM
!       backlist=heap(j:j+natom-1) ! heap must have of intege |	!       backlist=heap(j:j+natom-1) ! heap must have of int ty
##ENDIF							      |	__CHARMM_ONLY##ENDIF
       if (qtsm) qfree=qfree.and.backlist(i).eq.0 !##TSM      |	       if (qtsm) qfree=qfree.and.backlist(i).eq.0 !__CHARMM_O
      use string					      |	      __DEP_OUTPUT
!      implicit none					      |	!      __IMPNONE
      use dimens_fcm 					      |	      __DEP_SIZE 
      use stream 					      |	      __DEP_PARSER 
!##INCLUDE '~/charmm_fcm/coordc.fcm'			      |	!__CHARMM_ONLY##INCLUDE '~/charmm_fcm/coordc.fcm'
      use tsmh, only:backls  !##TSM ! TSM common blocks inclu |	      use tsmh, only:backls  !__CHARMM_ONLY##TSM ! TSM common
      use tsms_mod, only:qtsm  !##TSM			      |	      use tsms_mod, only:qtsm  !__CHARMM_ONLY##TSM
!      use heap  !##TSM					      |	!      use heap  !__CHARMM_ONLY##TSM
      character*22 methods(5)				      |	      character(len=22 methods(5)
      character*16 whoami				      |	      character(len=16 whoami
      character*8 keyword				      |	      character(len=8 keyword
      integer, allocatable :: islct(:), jslct(:) ! for atom s |	      int, allocatable :: islct(:), jslct(:) ! for atom selec
      integer nslct					      |	      int nslct
      integer i ,j, imode, mlen				      |	      int i ,j, imode, mlen
      integer qlinear, qspline, qbspline, qdst, qlinear_exact |	      int qlinear, qspline, qbspline, qdst, qlinear_exact
      logical :: qprint, qfree				      |	      bool :: qprint, qfree
      integer, allocatable :: backlist(:) ! for nominal compa |	      int, allocatable :: backlist(:) ! for nominal compatibi
      integer, pointer :: ifixed(:) ! fixed atom indices      |	      int, pointer :: ifixed(:) ! fixed atom indices
!      real*8 :: gtrmf					      |	!      float :: __GET_RM_F
!      integer gtrmi, indxa, indx			      |	!      int __GET_RM_I, __INDX_RM, __INDX
!      interface ! not needed because string is now a module  |	!      interface ! not needed beca__DEP_OUTPUT is now a modul
!       function itoa(i) ! V. Ovchinnikov 2010; convert integ |	!       function itoa(i) ! V. Ovchinnikov 2010; convert int t
!       integer :: i					      |	!       int :: i
!       character*(80) :: b				      |	!       character(len=(80) :: b
!       integer, pointer :: sm0k_fixed_atoms(:)		      |	!       int, pointer :: sm0k_fixed_atoms(:)
      if (indxa(comlyn,comlen,'LINE').gt.0) then	      |	      if (__INDX_RM(comlyn,comlen,'LINE').gt.0) then
      if ((indxa(comlyn,comlen,'CSPL').gt.0).or.              |	      if ((__INDX_RM(comlyn,comlen,'CSPL').gt.0).or.         
     &    (indxa(comlyn,comlen,'SPLI').gt.0)) then	      |	     &    (__INDX_RM(comlyn,comlen,'SPLI').gt.0)) then
      if (indxa(comlyn,comlen,'BSPL').gt.0) then	      |	      if (__INDX_RM(comlyn,comlen,'BSPL').gt.0) then
      if (indxa(comlyn,comlen,'DST').gt.0) then		      |	      if (__INDX_RM(comlyn,comlen,'DST').gt.0) then
       dst_cutoff=gtrmf(comlyn, comlen, 'WNCT', -1.0d0)	      |	       dst_cutoff=__GET_RM_F(comlyn, comlen, 'WNCT', -1.0d0)
        if (qprint) write(outu,664) whoami, whoami	      |	        if (qprint) write(_MSGBUF,664) whoami, whoami
      if (indxa(comlyn,comlen,'LIN2').gt.0) then	      |	      if (__INDX_RM(comlyn,comlen,'LIN2').gt.0) then
       if (qprint) write(outu,665) whoami, whoami	      |	       if (qprint) write(_MSGBUF,665) whoami, whoami
       def=gtrmf(comlyn, comlen, 'DEFI', 1.1d0)		      |	       def=__GET_RM_F(comlyn, comlen, 'DEFI', 1.1d0)
         call wrndie(0,whoami,                                |	         __WRN(whoami,                                       
       iterations=gtrmi(comlyn, comlen, 'ITER',10)	      |	       iterations=__GET_RM_I(comlyn, comlen, 'ITER',10)
      i=indxa(comlyn,comlen,'ORIE') ! find the position of `i |	      i=__INDX_RM(comlyn,comlen,'ORIE') ! find the position o
       j=indx(comlyn, comlen, 'SELE', 4)		      |	       j=__INDX(comlyn, comlen, 'SELE', 4)
        call wrndie(0,whoami,                                 |	        __WRN(whoami,                                        
       j=indxa(comlyn,comlen,'MASS') ! s		      |	       j=__INDX_RM(comlyn,comlen,'MASS') ! s
      i=indxa(comlyn,comlen,'MOVE') !			      |	      i=__INDX_RM(comlyn,comlen,'MOVE') !
       j=indx(comlyn, comlen, 'SELE', 4)		      |	       j=__INDX(comlyn, comlen, 'SELE', 4)
        call wrndie(0,whoami,                                 |	        __WRN(whoami,                                        
        call wrndie(0,whoami,                                 |	        __WRN(whoami,                                        
        call wrndie(0,whoami,                                 |	        __WRN(whoami,                                        
##IF TSM						      |	__CHARMM_ONLY##IF TSM
!       backlist=heap(j:j+natom-1) ! heap must have of intege |	!       backlist=heap(j:j+natom-1) ! heap must have of int ty
##ENDIF							      |	__CHARMM_ONLY##ENDIF
       call wrndie(0,whoami,'FIXED ATOM ARRAY CHANGED AFTER L |	       __WRN(whoami,'FIXED ATOM ARRAY CHANGED AFTER LAST '// 
       if (qtsm) qfree=qfree.and.backlist(i).eq.0 !##TSM      |	       if (qtsm) qfree=qfree.and.backlist(i).eq.0 !__CHARMM_O
         call wrndie(0,whoami,'ATOM '//itoa(i)//              |	         __WRN(whoami,'ATOM '//itoa(i)//                     
     &   ' IS FIXED OR IN A TSM BACKLIST. SKIPPING.') !##TSM  |	     &   ' IS FIXED OR IN A TSM BACKLIST. SKIPPING.') !__CHAR
     &   ' IS FIXED. SKIPPING.')                      !##.not |	     &   ' IS FIXED. SKIPPING.')                      !__CHAR
        call wrndie(0,whoami,                                 |	        __WRN(whoami,                                        
       call trima(methods(interp_method),mlen)		      |	       __TRIMA(methods(interp_method),mlen)
        write(outu,666) whoami,methods(interp_method)(1:mlen) |	        write(_MSGBUF,666) whoami,methods(interp_method)(1:ml
        write(outu,667) whoami,methods(interp_method)(1:mlen) |	        write(_MSGBUF,667) whoami,methods(interp_method)(1:ml
       if (iterations.gt.0) write(outu,668) whoami, iteration |	       if (iterations.gt.0) write(_MSGBUF,668) whoami, iterat
       if(interp_method.eq.dst) write(outu,6680) whoami,dst_c |	       if(interp_method.eq.dst) write(_MSGBUF,6680) whoami,ds
      call trima(keyword,mlen)				      |	      __TRIMA(keyword,mlen)
      write(outu,669) whoami, keyword(1:mlen)		      |	      write(_MSGBUF,669) whoami, keyword(1:mlen)
       if (repa_mass.eq.1) write(outu,672) whoami	      |	       if (repa_mass.eq.1) write(_MSGBUF,672) whoami
        call trima(keyword,mlen)			      |	        __TRIMA(keyword,mlen)
        write(outu,670) whoami, keyword(1:mlen)		      |	        write(_MSGBUF,670) whoami, keyword(1:mlen)
        if (orient_mass.eq.1) write(outu,671) whoami	      |	        if (orient_mass.eq.1) write(_MSGBUF,671) whoami
      use bestfit, only: RMSBestFit			      |	      __DEP_BESTFIT, only: RMSBestFit
!      use string					      |	!      __DEP_OUTPUT
      use multicom_ltm       !##MULTICOM		      |	      __DEP_MULTICOM       !__CHARMM_ONLY##MULTICOM
      use number 					      |	      __DEP_NUMBER 
      use dimens_fcm 					      |	      __DEP_SIZE 
      use stream 					      |	      __DEP_PARSER 
      use mpi  ! deal with other platforms later	      |	      __DEP_MPI  ! deal with other platforms later
      implicit none					      |	      __IMPNONE
      integer :: n ! NOTE: arrays as optional arguments are q |	      int :: n ! NOTE: arrays as optional arguments are quite
      real*8, optional :: var(*) ! ideally, n should give the |	      float, optional :: var(*) ! ideally, n should give the 
      integer :: RTYPE=MPI_REAL8			      |	      int :: RTYPE=MPI_REAL8
      integer :: stat(MPI_STATUS_SIZE)			      |	      int :: stat(MPI_STATUS_SIZE)
      integer :: ierr					      |	      int :: ierr
      integer :: me, ncpu				      |	      int :: me, ncpu
      integer :: i, j					      |	      int :: i, j
      real*8 :: t					      |	      float :: t
      logical :: qroot, qslave, qmanual			      |	      bool :: qroot, qslave, qmanual
      real*8 :: weights(nmove,3) ! for reparametrization      |	      float :: weights(nmove,3) ! for reparametrization
      real*8 :: u(3,3)=RESHAPE( (/1,0,0,0,1,0,0,0,1/), (/3,3/ |	      float :: u(3,3)=RESHAPE( (/1,0,0,0,1,0,0,0,1/), (/3,3/)
      real*8 :: rcurrent_com(3)=(/0d0,0d0,0d0/) ! COM vector  |	      float :: rcurrent_com(3)=(/0d0,0d0,0d0/) ! COM vector
      character*11 :: whoami				      |	      character(len=11 :: whoami
      use string					      |	      __DEP_OUTPUT
!        implicit none					      |	!        __IMPNONE
        integer :: n					      |	        int :: n
        real*8 :: rin(n), rout(n), wgt(n)		      |	        float :: rin(n), rout(n), wgt(n)
        integer, intent(in) ::  interp_method		      |	        int, intent(in) ::  interp_method
        integer :: max_iterations			      |	        int :: max_iterations
        real*8 :: tol, d_arclength(:), curvature(:)	      |	        float :: tol, d_arclength(:), curvature(:)
        real*8, optional :: dst_cutoff			      |	        float, optional :: dst_cutoff
        real*8, optional :: dr(n) ,r_bc_0(n), r_bc_1(n)	      |	        float, optional :: dr(n) ,r_bc_0(n), r_bc_1(n)
      use string					      |	      __DEP_OUTPUT
!        implicit none					      |	!        __IMPNONE
        integer :: n					      |	        int :: n
        real*8 :: rin(n), rout(n), wgt(n)		      |	        float :: rin(n), rout(n), wgt(n)
        integer, intent(in) ::  interp_method		      |	        int, intent(in) ::  interp_method
        integer :: max_iterations			      |	        int :: max_iterations
        real*8 :: tol, d_arclength(:), curvature(:)	      |	        float :: tol, d_arclength(:), curvature(:)
        real*8, optional :: dst_cutoff			      |	        float, optional :: dst_cutoff
        real*8, optional :: dr(n) ,r_bc_0(n), r_bc_1(n)	      |	        float, optional :: dr(n) ,r_bc_0(n), r_bc_1(n)
        integer :: n					      |	        int :: n
        real*8 :: rin(n), rout(n), wgt(n)		      |	        float :: rin(n), rout(n), wgt(n)
        real*8 :: d_arclength(:), curvature(:)		      |	        float :: d_arclength(:), curvature(:)
        real*8, optional :: drout(n) ! optional computation o |	        float, optional :: drout(n) ! optional computation of
        real*8 , optional :: r_bc_0(n), r_bc_1(n)   ! optiona |	        float , optional :: r_bc_0(n), r_bc_1(n)   ! optional
       call wrndie(0, whoami,                                 |	       __WRN( whoami,                                        
        if (imove(j).ne.0) call wrndie(0,whoami,              |	        if (imove(j).ne.0) __WRN(whoami,                     
      if (qslave) call PSND8(rcurrent_m,nmove*3)	      |	      if (qslave) __BROADCAST_LOCAL_8B(rcurrent_m,nmove*3)
      use bestfit, only: RMSBestFit			      |	      __DEP_BESTFIT, only: RMSBestFit
      use string					      |	      __DEP_OUTPUT
!      implicit none					      |	!      __IMPNONE
      use mpi 						      |	      __DEP_MPI 
      use stream 					      |	      __DEP_PARSER 
      use dimens_fcm 					      |	      __DEP_SIZE 
      use number 					      |	      __DEP_NUMBER 
      use multicom_ltm       !##MULTICOM		      |	      __DEP_MULTICOM       !__CHARMM_ONLY##MULTICOM
      integer, parameter :: linear=1, spline=2, bspline=3     |	      int, parameter :: linear=1, spline=2, bspline=3
      integer :: ifile, ofile, num_rep_in, num_rep_out	      |	      int :: ifile, ofile, num_rep_in, num_rep_out
      integer :: len_cv_in, len_cv_out, len_cor_in, len_cor_o |	      int :: len_cv_in, len_cv_out, len_cor_in, len_cor_out, 
      integer :: i,j,k, orient=0, repa_mass=0, orient_mass=0, |	      int :: i,j,k, orient=0, repa_mass=0, orient_mass=0, me
      real*8, allocatable :: rin_all(:,:,:), dr(:,:,:), rout_ |	      float, allocatable :: rin_all(:,:,:), dr(:,:,:), rout_a
      real*8, allocatable :: rr(:),rr_out(:),ds(:),s(:),t(:), |	      float, allocatable :: rr(:),rr_out(:),ds(:),s(:),t(:),r
      real*8 :: orient_weights(natom), weight(natom)	      |	      float :: orient_weights(natom), weight(natom)
      real*8 :: dum					      |	      float :: dum
!							      |	!
      character*80 :: name_cor_in, name_cor_out, dummy	      |	      character(len=80 :: name_cor_in, name_cor_out, dummy
      character*20 :: methods(4), method, form		      |	      character(len=20 :: methods(4), method, form
      character*18 :: whoami				      |	      character(len=18 :: whoami
      character*8  :: keyword				      |	      character(len=8  :: keyword
      character*4  :: ext				      |	      character(len=4  :: ext
      logical :: lresid=.false.				      |	      bool :: lresid=.false.
      logical :: qprint					      |	      bool :: qprint
      real*8 :: xdum(natom+1), ydum(natom+1), zdum(natom+1),  |	      float :: xdum(natom+1), ydum(natom+1), zdum(natom+1),  
      integer :: icntrl(20), error			      |	      int :: icntrl(20), error
      integer :: islct(natom), ifreea(natom), pairs(2,natom)  |	      int :: islct(natom), ifreea(natom), pairs(2,natom)
      use string					      |	      __DEP_OUTPUT
!       implicit none					      |	!       __IMPNONE
       integer :: nin, nout				      |	       int :: nin, nout
       real*8 :: xin(nin), yin(nin), xout(nout), yout(nout)   |	       float :: xin(nin), yin(nin), xout(nout), yout(nout)
       real*8, optional :: dydxout(nout) ! tangent computatio |	       float, optional :: dydxout(nout) ! tangent computation
       real*8 :: dydx(nout)				      |	       float :: dydx(nout)
      call trima(method, length)			      |	      __TRIMA(method, length)
       if (eqstwc(method(1:4),4,'LINE',4)) then		      |	       if (__STRNCMP(method(1:4),4,'LINE',4)) then
       elseif (eqstwc(method(1:4),4,'BSPL',4)) then	      |	       elseif (__STRNCMP(method(1:4),4,'BSPL',4)) then
       elseif (eqstwc(method(1:4),4,'SPLI',4)) then	      |	       elseif (__STRNCMP(method(1:4),4,'SPLI',4)) then
        call trima(methods(interp_method),length)	      |	        __TRIMA(methods(interp_method),length)
        write(outu,6770) whoami, methods(interp_method)(1:len |	        write(_MSGBUF,6770) whoami, methods(interp_method)(1:
         write(outu,6771) whoami, method(1:length), whoami    |	         write(_MSGBUF,6771) whoami, method(1:length), whoami
         write(outu,6772) whoami, whoami		      |	         write(_MSGBUF,6772) whoami, whoami
      if (indx(comlyn,comlen,'NIN',3).gt.0) then	      |	      if (__INDX(comlyn,comlen,'NIN',3).gt.0) then
       num_rep_in=gtrmi(comlyn, comlen, 'NIN', 0)	      |	       num_rep_in=__GET_RM_I(comlyn, comlen, 'NIN', 0)
        if (qprint) write(outu, 6781) whoami		      |	        if (qprint) write(_MSGBUF, 6781) whoami
         if (qprint) write(outu,6783)                         |	         if (qprint) write(_MSGBUF,6783)                     
        if (qprint) write(outu, 6784) whoami		      |	        if (qprint) write(_MSGBUF, 6784) whoami
      endif ! indx('NIN')				      |	      endif ! __INDX('NIN')
      if (indx(comlyn,comlen,'NOUT',4).gt.0) then	      |	      if (__INDX(comlyn,comlen,'NOUT',4).gt.0) then
       num_rep_out=gtrmi(comlyn, comlen, 'NOUT', 0)	      |	       num_rep_out=__GET_RM_I(comlyn, comlen, 'NOUT', 0)
        if (qprint) write(outu, 6782) whoami		      |	        if (qprint) write(_MSGBUF, 6782) whoami
         if (qprint) write(outu,6785)                         |	         if (qprint) write(_MSGBUF,6785)                     
        if (qprint) write(outu, 6786) whoami		      |	        if (qprint) write(_MSGBUF, 6786) whoami
      endif ! indx('NIN')				      |	      endif ! __INDX('NIN')
       if (qprint) write(outu, 6789) whoami		      |	       if (qprint) write(_MSGBUF, 6789) whoami
       if (qprint) write(outu, 6790) whoami		      |	       if (qprint) write(_MSGBUF, 6790) whoami
      if (indxa(comlyn,comlen,'PDB').gt.0) then		      |	      if (__INDX_RM(comlyn,comlen,'PDB').gt.0) then
        if (indxa(comlyn,comlen,'RESI').gt.0) lresid=.true.   |	        if (__INDX_RM(comlyn,comlen,'RESI').gt.0) lresid=.tru
      elseif ( (indxa(comlyn,comlen,'FILE').gt.0).or.         |	      elseif ( (__INDX_RM(comlyn,comlen,'FILE').gt.0).or.    
     &  (indxa(comlyn,comlen,'UNFO').gt.0)) then	      |	     &  (__INDX_RM(comlyn,comlen,'UNFO').gt.0)) then
      elseif ( (indxa(comlyn,comlen,'CARD').gt.0).or.         |	      elseif ( (__INDX_RM(comlyn,comlen,'CARD').gt.0).or.    
     &  (indxa(comlyn,comlen,'FORM').gt.0)) then	      |	     &  (__INDX_RM(comlyn,comlen,'FORM').gt.0)) then
       call trima(dummy,length)				      |	       __TRIMA(dummy,length)
       write(outu,6791) whoami,                               |	       write(_MSGBUF,6791) whoami,                           
       call trima(dummy,length)				      |	       __TRIMA(dummy,length)
       write(outu,6793) whoami,                               |	       write(_MSGBUF,6793) whoami,                           
      i=indxa(comlyn,comlen,'ORIE')			      |	      i=__INDX_RM(comlyn,comlen,'ORIE')
       j=indx(comlyn, comlen, 'SELE', 4)		      |	       j=__INDX(comlyn, comlen, 'SELE', 4)
        call wrndie(0,whoami,                                 |	        __WRN(whoami,                                        
       j=indxa(comlyn,comlen,'MASS') ! s		      |	       j=__INDX_RM(comlyn,comlen,'MASS') ! s
       if (repa_mass.eq.1) write(outu,6720) whoami	      |	       if (repa_mass.eq.1) write(_MSGBUF,6720) whoami
        call trima(keyword,mlen)			      |	        __TRIMA(keyword,mlen)
        write(outu,6700) whoami, keyword(1:mlen)	      |	        write(_MSGBUF,6700) whoami, keyword(1:mlen)
        if (orient_mass.eq.1) write(outu,6710) whoami	      |	        if (orient_mass.eq.1) write(_MSGBUF,6710) whoami
      if (qprint) write(outu,6974) whoami		      |	      if (qprint) write(_MSGBUF,6974) whoami
        call trima(dummy,length)			      |	        __TRIMA(dummy,length)
        call trima(dummy,length)			      |	        __TRIMA(dummy,length)
        call open_file(ifile,dummy,form,'READ')		      |	        __OPEN_FILE(ifile,dummy,form,'READ')
      call vclose(ifile,'KEEP',error)			      |	      __CLOSE_FILE(ifile,'KEEP',error)
      if (any(rin_all.eq.anum)) call wrndie(0,whoami,         |	      if (any(rin_all.eq.anum)) __WRN(whoami,                
        if (any(rout_all.eq.anum)) call wrndie(0,whoami,      |	        if (any(rout_all.eq.anum)) __WRN(whoami,             
         call trima(dummy,length)			      |	         __TRIMA(dummy,length)
         call trima(dummy,length)			      |	         __TRIMA(dummy,length)
         call open_file(ofile,dummy,form,'WRITE')	      |	         __OPEN_FILE(ofile,dummy,form,'WRITE')
        call vclose(ofile,'KEEP',error)			      |	        __CLOSE_FILE(ofile,'KEEP',error)
      use string					      |	      __DEP_OUTPUT
!      implicit none					      |	!      __IMPNONE
      use dimens_fcm 					      |	      __DEP_SIZE 
      use stream 					      |	      __DEP_PARSER 
      use multicom_ltm       !##MULTICOM		      |	      __DEP_MULTICOM       !__CHARMM_ONLY##MULTICOM
##IF TSM						      |	__CHARMM_ONLY##IF TSM
##ENDIF							      |	__CHARMM_ONLY##ENDIF
      use mpi                               !##MPI	      |	      __DEP_MPI                               !__CHARMM_ONLY#
      character*80 rform, dform, sform, fcform, cform	      |	      character(len=80 rform, dform, sform, fcform, cform
      integer :: klen=0, error, i, j			      |	      int :: klen=0, error, i, j
      integer, allocatable :: islct(:)			      |	      int, allocatable :: islct(:)
      logical :: found					      |	      bool :: found
      logical :: qprint, qfree				      |	      bool :: qprint, qfree
      integer, allocatable :: backlist(:) ! for nominal compa |	      int, allocatable :: backlist(:) ! for nominal compatibi
      integer, pointer :: ifixed(:)			      |	      int, pointer :: ifixed(:)
!							      |	!
      integer :: imode					      |	      int :: imode
      integer, parameter :: errTol=1.0e-9		      |	      int, parameter :: errTol=1.0e-9
      real*8 :: d, com(3)				      |	      float :: d, com(3)
      character*8 keyword				      |	      character(len=8 keyword
      character*16 whoami				      |	      character(len=16 whoami
!       integer, pointer :: sm0k_fixed_atoms(:)		      |	!       int, pointer :: sm0k_fixed_atoms(:)
      stat_iteration_counter=gtrmi(comlyn, comlen, 'COUN', -1 |	      stat_iteration_counter=__GET_RM_I(comlyn, comlen, 'COUN
       if (qprint) write(outu,639) whoami, stat_iteration_cou |	       if (qprint) write(_MSGBUF,639) whoami, stat_iteration_
       call wrndie(0,whoami,'FIXED ATOM ARRAY CHANGED AFTER L |	       __WRN(whoami,'FIXED ATOM ARRAY CHANGED AFTER LAST '// 
      keyword=nexta4(comlyn,comlen)			      |	      keyword=__NEXTA(comlyn,comlen)
      if (eqstwc(keyword(1:4),4,'ENER',4)) then		      |	      if (__STRNCMP(keyword(1:4),4,'ENER',4)) then
        keyword=nexta4(comlyn,comlen)			      |	        keyword=__NEXTA(comlyn,comlen)
        call trima(keyword,klen)			      |	        __TRIMA(keyword,klen)
           call wrndie(0,whoami,                              |	           __WRN(whoami,                                     
           call wrndie(0,whoami,                              |	           __WRN(whoami,                                     
         keyword=nexta4(comlyn,comlen)			      |	         keyword=__NEXTA(comlyn,comlen)
         call trima(keyword,klen)			      |	         __TRIMA(keyword,klen)
          write(outu,662 ) whoami,whoami,energy_fname(1:energ |	          write(_MSGBUF,662 ) whoami,whoami,energy_fname(1:en
          write(outu,663 ) whoami			      |	          write(_MSGBUF,663 ) whoami
         write(outu,664) whoami,(energy_names(i),i=1,num_ener |	         write(_MSGBUF,664) whoami,(energy_names(i),i=1,num_e
      j=indx(comlyn, comlen, 'SELE', 4)			      |	      j=__INDX(comlyn, comlen, 'SELE', 4)
        call wrndie(0,whoami,                                 |	        __WRN(whoami,                                        
       qstat_orient=(indxa(comlyn,comlen,'ORIE').gt.0)	      |	       qstat_orient=(__INDX_RM(comlyn,comlen,'ORIE').gt.0)
         if (qprint) write(outu,638) whoami		      |	         if (qprint) write(_MSGBUF,638) whoami
         call wrndie(0, whoami,                               |	         __WRN( whoami,                                      
       if (indxa(comlyn,comlen,'RMSD').gt.0) then ! request f |	       if (__INDX_RM(comlyn,comlen,'RMSD').gt.0) then ! reque
         call wrndie(0,whoami,                                |	         __WRN(whoami,                                       
         if (indxa(comlyn,comlen,'RAPP').gt.0) then ! APPEND? |	         if (__INDX_RM(comlyn,comlen,'RAPP').gt.0) then ! APP
          call open_file(rmsd0_funit, rmsd0_fname,            |	          __OPEN_FILE(rmsd0_funit, rmsd0_fname,              
          write(outu,660 ) whoami,rmsd0_fname(1:rmsd0_flen)   |	          write(_MSGBUF,660 ) whoami,rmsd0_fname(1:rmsd0_flen
          write(outu,661 ) whoami			      |	          write(_MSGBUF,661 ) whoami
       if (indxa(comlyn,comlen,'DELS').gt.0) then	      |	       if (__INDX_RM(comlyn,comlen,'DELS').gt.0) then
         call wrndie(0,whoami,                                |	         __WRN(whoami,                                       
         if (indxa(comlyn,comlen,'DAPP').gt.0) then ! APPEND? |	         if (__INDX_RM(comlyn,comlen,'DAPP').gt.0) then ! APP
          call open_file(dsdt_funit, dsdt_fname,              |	          __OPEN_FILE(dsdt_funit, dsdt_fname,                
          write(outu,650 ) whoami,dsdt_fname(1:dsdt_flen)     |	          write(_MSGBUF,650 ) whoami,dsdt_fname(1:dsdt_flen)
          write(outu,651 ) whoami			      |	          write(_MSGBUF,651 ) whoami
       if (indxa(comlyn,comlen,'RMSA').gt.0) then	      |	       if (__INDX_RM(comlyn,comlen,'RMSA').gt.0) then
         call wrndie(0,whoami,                                |	         __WRN(whoami,                                       
         if (indxa(comlyn,comlen,'RAAP').gt.0) then ! APPEND? |	         if (__INDX_RM(comlyn,comlen,'RAAP').gt.0) then ! APP
          call open_file(rmsd_ave_funit, rmsd_ave_fname,      |	          __OPEN_FILE(rmsd_ave_funit, rmsd_ave_fname,        
          write(outu,6500 ) whoami,rmsd_ave_fname(1:rmsd_ave_ |	          write(_MSGBUF,6500 ) whoami,rmsd_ave_fname(1:rmsd_a
          write(outu,6510 ) whoami			      |	          write(_MSGBUF,6510 ) whoami
##IF TSM						      |	__CHARMM_ONLY##IF TSM
!         backlist=heap(j:j+natom-1) ! heap must have of inte |	!         backlist=heap(j:j+natom-1) ! heap must have of int 
##ENDIF							      |	__CHARMM_ONLY##ENDIF
         if (qtsm) qfree=qfree.and.backlist(i).eq.0 !##TSM    |	         if (qtsm) qfree=qfree.and.backlist(i).eq.0 !__CHARMM
        stat_rmsd_mass=(indxa(comlyn,comlen,'MASS').gt.0)     |	        stat_rmsd_mass=(__INDX_RM(comlyn,comlen,'MASS').gt.0)
         if (qprint) write(outu,640) whoami		      |	         if (qprint) write(_MSGBUF,640) whoami
      if (indxa(comlyn,comlen,'ARCL').gt.0) then	      |	      if (__INDX_RM(comlyn,comlen,'ARCL').gt.0) then
         call wrndie(0,whoami,                                |	         __WRN(whoami,                                       
         if (indxa(comlyn,comlen,'AAPP').gt.0) then ! APPEND? |	         if (__INDX_RM(comlyn,comlen,'AAPP').gt.0) then ! APP
          call open_file(s_funit, s_fname,                    |	          __OPEN_FILE(s_funit, s_fname,                      
          write(outu,652) whoami,s_fname(1:s_flen)	      |	          write(_MSGBUF,652) whoami,s_fname(1:s_flen)
          write(outu,653) whoami			      |	          write(_MSGBUF,653) whoami
      if (indxa(comlyn,comlen,'CURV').gt.0) then	      |	      if (__INDX_RM(comlyn,comlen,'CURV').gt.0) then
         call wrndie(0,whoami,                                |	         __WRN(whoami,                                       
         if (indxa(comlyn,comlen,'CAPP').gt.0) then ! APPEND? |	         if (__INDX_RM(comlyn,comlen,'CAPP').gt.0) then ! APP
          call open_file(c_funit, c_fname,                    |	          __OPEN_FILE(c_funit, c_fname,                      
          write(outu,6521) whoami,c_fname(1:c_flen)	      |	          write(_MSGBUF,6521) whoami,c_fname(1:c_flen)
          write(outu,6531) whoami			      |	          write(_MSGBUF,6531) whoami
      use bestfit, only : RMSBestFit, rmsd		      |	      __DEP_BESTFIT, only : RMSBestFit, rmsd
      use string					      |	      __DEP_OUTPUT
!      implicit none					      |	!      __IMPNONE
      use dimens_fcm 					      |	      __DEP_SIZE 
      use stream 					      |	      __DEP_PARSER 
      use multicom_ltm       !##MULTICOM		      |	      __DEP_MULTICOM       !__CHARMM_ONLY##MULTICOM
      use number 					      |	      __DEP_NUMBER 
      use mpi 						      |	      __DEP_MPI 
      integer :: n					      |	      int :: n
      real*8, optional :: var(*)			      |	      float, optional :: var(*)
      character*8 :: keyword				      |	      character(len=8 :: keyword
      real*8 :: u(3,3), com(3)				      |	      float :: u(3,3), com(3)
      integer :: klen, i, j, k, ifile			      |	      int :: klen, i, j, k, ifile
      real*8 :: energy_values(enmax,SIZE_STRNG)! store data f |	      float :: energy_values(enmax,SIZE_STRNG)! store data fr
      real*8 :: energy_values_me(enmax)			      |	      float :: energy_values_me(enmax)
      integer :: me, error, fmt_len, fmt_e_len		      |	      int :: me, error, fmt_len, fmt_e_len
      character*80 :: fmt, fmt_ene			      |	      character(len=80 :: fmt, fmt_ene
      character*8 :: dummy				      |	      character(len=8 :: dummy
      real*8 :: energy_val				      |	      float :: energy_val
      logical :: found					      |	      bool :: found
      logical :: qprint, qroot, qmanual			      |	      bool :: qprint, qroot, qmanual
      real*8 :: rmsd0, rmsd0_all(SIZE_STRNG), dsdt, dsdt_all( |	      float :: rmsd0, rmsd0_all(SIZE_STRNG), dsdt, dsdt_all(S
      character*11 :: whoami				      |	      character(len=11 :: whoami
       call wrndie(0,whoami,                                  |	       __WRN(whoami,                                         
       call trima(fmt,fmt_len)				      |	       __TRIMA(fmt,fmt_len)
       call trima(fmt_ene,fmt_e_len)			      |	       __TRIMA(fmt_ene,fmt_e_len)
         call wrndie(0,whoami,                                |	         __WRN(whoami,                                       
          call trima(dummy, k)				      |	          __TRIMA(dummy, k)
          call open_file(ifile,                               |	          __OPEN_FILE(ifile,                                 
!        call mpi_gather(energy_values(1,me+1),enmax,MPI_DOUB |	!        call mpi_gather(energy_values(1,me+1),enmax,mpifloat
!     &                ,energy_values,enmax,MPI_DOUBLE_PRECIS |	!     &                ,energy_values,enmax,mpifloat,0,
        call mpi_gather(energy_values_me,enmax,MPI_DOUBLE_PRE |	        call mpi_gather(energy_values_me,enmax,mpifloat     &
     &                 ,energy_values,enmax,MPI_DOUBLE_PRECIS |	     &                 ,energy_values,enmax,mpifloat,0,     &
         call mpi_gather(rmsd0,1,MPI_DOUBLE_PRECISION         |	         call mpi_gather(rmsd0,1,mpifloat                   &
     &                ,rmsd0_all,1,MPI_DOUBLE_PRECISION,0,    |	     &                ,rmsd0_all,1,mpifloat,0,              &
           call vclose(rmsd0_funit, 'KEEP', error)	      |	           __CLOSE_FILE(rmsd0_funit, 'KEEP', error)
           call open_file(rmsd0_funit, rmsd0_fname,           |	           __OPEN_FILE(rmsd0_funit, rmsd0_fname,             
          call mpi_gather(dsdt,1,MPI_DOUBLE_PRECISION         |	          call mpi_gather(dsdt,1,mpifloat                   &
     &                ,dsdt_all,1,MPI_DOUBLE_PRECISION,0,     |	     &                ,dsdt_all,1,mpifloat,0,               &
           call vclose(dsdt_funit, 'KEEP', error)	      |	           __CLOSE_FILE(dsdt_funit, 'KEEP', error)
           call open_file(dsdt_funit, dsdt_fname,             |	           __OPEN_FILE(dsdt_funit, dsdt_fname,               
          call wrndie(0,whoami,                               |	          __WRN(whoami,                                      
          call mpi_gather(rmsd0,1,MPI_DOUBLE_PRECISION        |	          call mpi_gather(rmsd0,1,mpifloat                  &
     &                ,rmsd0_all,1,MPI_DOUBLE_PRECISION,0,    |	     &                ,rmsd0_all,1,mpifloat,0,              &
          call vclose(rmsd_ave_funit, 'KEEP', error)	      |	          __CLOSE_FILE(rmsd_ave_funit, 'KEEP', error)
          call open_file(rmsd_ave_funit, rmsd_ave_fname,      |	          __OPEN_FILE(rmsd_ave_funit, rmsd_ave_fname,        
          call wrndie(0,whoami,                               |	          __WRN(whoami,                                      
         call vclose(s_funit, 'KEEP', error)		      |	         __CLOSE_FILE(s_funit, 'KEEP', error)
         call open_file(s_funit, s_fname,                     |	         __OPEN_FILE(s_funit, s_fname,                       
          call wrndie(0,whoami,                               |	          __WRN(whoami,                                      
         call vclose(c_funit, 'KEEP', error)		      |	         __CLOSE_FILE(c_funit, 'KEEP', error)
         call open_file(c_funit, c_fname,                     |	         __OPEN_FILE(c_funit, c_fname,                       
          call wrndie(0,whoami,                               |	          __WRN(whoami,                                      
##ENDIF							      |	__CHARMM_ONLY##ENDIF
##ENDIF							      |	__CHARMM_ONLY##ENDIF
