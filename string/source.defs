#ifdef  __CHARMM
#ifdef __STRING_SERIAL
#//note that compiling string in serial mode was not originally indended; 
#//so that one could run various restraint simulations using the string code, serially;
#//however compatibility may be added incrementally in the future
#//undef __STRING_SERIAL
#endif

#define __DEP_ATOMID use chutil, only : atomid
#define __DEPMOD \
       use dimens_fcm ;\
       use consta ;\
       use stream ;\
       use machio ;\
       use exfunc ;\
       use parallel ;\
       use string ;\
       use number ;
#define __ATOMID(__I, __SID, __RIS, __RNM, __ANM) call atomid(__I, __SID, __RIS, __RNM, __ANM)

#define __DEP_MDOUT use reawri
#define __TRAJ_FILE_UNIT iuncrd
#define __RESTART_FILE_UNIT iunwri

#define __OPEN_FILE(__HANDLE, __FNAME, __FORM, __ACTION) call open_file(__HANDLE, __FNAME, __FORM, __ACTION)
#define __CLOSE_FILE(__HANDLE, __STATUS, __ERROR) call VCLOSE(__HANDLE, __STATUS, __ERROR)

#else
#////////////// CHARMM UNDEFINED /////////////
#ifdef __DEP_OUTPUT
#undef __DEP_OUTPUT
#endif
#define __DEP_OUTPUT use output,only:message,warning,plainmessage,output_init,output_done,fatal_warning,fout

#ifdef __ACEMD
#// for a minimal system in which the atom identities are missing
#define __DEP_ATOMID
#define __ATOMID(__I, __SID, __RID, __RNM, __ANM) __SID="UNKN";\
                                                  __RID="UNKN";\
                                                  __RNM="UNKN";\
                                                  __ANM="UNKN";
#else
#define __DEP_ATOMID use psf, only : atoms
#define __ATOMID(__I, __SID, __RID, __RNM, __ANM) __SID=atoms%segid(__I);  \
                                                  __RID=atoms%resid(__I);  \
                                                  __RNM=atoms%resname(__I);\
                                                  __ANM=atoms%aname(__I);
#endif


#define __DEPMOD use files; use parser


#define __BROADCAST_LOCAL_C(__WHAT, __HOWMANY)  __BROADCAST_LOCAL (__WHAT, __HOWMANY, MPI_CHARACTER ) 
#define __BROADCAST_LOCAL_8B(__WHAT, __HOWMANY) __BROADCAST_LOCAL (__WHAT, __HOWMANY, MPI_INTEGER8 ) 
#define __BROADCAST_LOCAL_4B(__WHAT, __HOWMANY) __BROADCAST_LOCAL (__WHAT, __HOWMANY, MPI_INTEGER4 ) 

#define __DEP_MDOUT use dmol

#define __OPEN_FILE(__HANDLE, __FNAME, __FORM, __ACTION) call files_open(__HANDLE, __FNAME, __FORM, __ACTION)
#define __CLOSE_FILE(__HANDLE,...) call files_close(__HANDLE)


#endif

#define __BROADCAST_STRING(__WHAT, __HOWMANY, __TYPE) call mpi_bcast(__WHAT,__HOWMANY,__TYPE,0,MPI_COMM_STRNG,ierror)
#ifndef __IAM
#define __IAM(__WHO) character(len=:), parameter :: whoami=__STRING(__WHO)
#endif

#define __FTSM_CALC(...) if (qver2.and.proj_on) then ; call ftsmv2_calc(__VA_ARGS__); else ; call ftsmv1_calc(__VA_ARGS__); endif

#define __MPI_ONLY

#/////////// for compile string routines as a serial library ////////////////////
#ifdef __STRING_SERIAL
#ifndef __STRING_NOSLAVES
#define __STRING_NOSLAVES
#endif
#// turn off mpi
#ifdef __MPI_ONLY
#undef __MPI_ONLY
#endif
#define __MPI_ONLY ! MPI_ONLY !
#ifdef __DEP_MPI
#undef __DEP_MPI
#endif
#define __DEP_MPI use mpi_compat_stub
#ifdef __DEP_MULTICOM
#undef __DEP_MULTICOM
#endif
#define __DEP_MULTICOM use multicom_serial_string
#ifdef __BROADCAST_STRING
#undef __BROADCAST_STRING
#endif
#define __BROADCAST_STRING(__WHAT, __HOWMANY, __TYPE ) continue
#endif

#ifdef __STRING_NOSLAVES
#ifdef __BROADCAST_LOCAL
#undef __BROADCAST_LOCAL
#endif
#define __BROADCAST_LOCAL(__WHAT, __HOWMANY, __TYPE ) continue
#endif

#define __MPI __MPI_ONLY

