!
!     CV_POSI_COM.MOD
!
!     ROUTINES FOR COLLECTIVE VARIABLE 'X-POSITION-COM', 'Y-POSITION-COM', 'Z-POSITION-COM'
!
      module cv_posi_com
!
__CHARMM_ONLY##IF STRINGM
!
      use cv_common
      use cv_types
      use cv_frames ! reference frames
      use ivector
      use ivector_list
!
      __IMPNONE
      private
!
      public cv_posi_com_add
      public cv_posi_com_calc
      public cv_posi_com_list
!
      contains
!ccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccc
!      this function does the job for x, y, and z positions
       function cv_posi_com_add(type,atom_list,k,gamma,weight,frame,vec) result(l)
       __DEP_OUTPUT
       __DEP_CONST
       __DEP_NUMBER
       __DEP_BESTFIT
       __DECLARE_MSGBUF
!
       float  :: k, gamma, weight
       int, optional :: frame ! reference frame
       type (int_vector) :: atom_list
       float, intent(in) :: vec(3)
!      locals
       int :: type, j, l, m, ind, num_int, ncom, ii, jj, ncomf
       int, pointer :: indf(:)
       bool :: found
       float :: vnorm
       character(len=1) :: pos
       type (int_vector) :: unique_amap_ptr ! contains a unique list of atom map pointers (to speed up gradient computation, etc)
!
       __IAM(CV_POSI_COM_ADD)
!
       l=0
       vnorm=norm3(vec)
!
!    check for duplicate CV (exact identical entry only)
       found=.false.
       do l=1, cv%num_cv
        if (cv%type(l).eq.type) then
! first, check integer private data (atom selection)
         ncom=atom_list%last
         found=ncom.eq.cv%priv(l)%p(1)
         ind=2
         do j=1,ncom
           if (found) found = (atom_list%i(j).eq.cv%amap%i(cv%priv(l)%p(ind)))
           ind=ind+1
         enddo
         if (found) found=(frame.eq.cv%amap%i(cv%priv(l)%p(ind)))
! second, check real private data (projection vector spec)
! the convention is that if a vector is determined from selection, its norm will be nonpositive (abs taken at calc)
         if (cv%priv(l)%pr(4).gt.0) then
          if (found) found=(vnorm.gt.0) ! check that norm is positive
          if (found) found=norm3( vec/vnorm - cv%priv(l)%pr(4)*cv%priv(l)%pr(1:3) ).lt.__ERRTOL ! check that vectors are the same
         else ! the value of the cv vector norm is zero (or negative, which means that it was initialized w/ zero)
          if (found) found=vnorm.eq.zero ! atom selections are the same, and both vectors are to be computed at first calc. assume a duplicate
         endif
        endif ! cv_type
        if (found) exit
       enddo
!
       if (.not.found) then ! (if found -- do nothing)
        l=__CV_COMMON_ADD(type)
        if  (l.gt.0) then
!     allocate private data : projection vector (real)
         allocate(cv%priv(l)%pr(4)) ; ! keep original vector spec, and also inverse norm for faster computation
         cv%priv(l)%pr(1:3)=vec
         if (vnorm.lt.__ERRTOL ) then
          write(_MSGBUF,'(A)')  whoami//' A VALID PROJECTION VECTOR WAS NOT SPECIFIED.'
          write(_MSGBUF(2),'(A)')  whoami//' WILL USE THE VECTOR TO SELECTION COM IN SPECIFIED FRAME [FIRST COMPUTED VALUE]'
          write(_MSGBUF(3),'(A)')  whoami//' MAKE SURE THAT THE FRAME IS DEFINED CORRECTLY PRIOR TO COMPUTATION [INCLUDING ALIGNMENT].'
         else
          vnorm=one/vnorm ! store reciprocal
         endif
         cv%priv(l)%pr(4)=vnorm
!     atom selection data (integer)
!     space needed:
         ncom=atom_list%last
         num_int = 1 + ncom + 1 ! number of ints needded for storage (last entry for reference frame VO 2.27)
!
         allocate(cv%priv(l)%p(num_int));
         cv%priv(l)%p(1)=ncom
!        now add atom indices
         ind=2
         do j=1,ncom
           m=atom_list%i(j)
           if (m.le.0) __WRN( whoami,' INVALID ATOM INDEX SPECIFIED.')
           cv%priv(l)%p(ind)=int_vlist_uaddu(cv%amap,m,l) ! add indices into unique map (which also stores this cv index)
           m=int_vector_uadd(unique_amap_ptr,cv%priv(l)%p(ind))
           ind=ind+1
         enddo
! check if a reference frame is specified, if it is valid, record
         if (present(frame)) then
          if (frame.eq.0) then ! absolute frame
           cv%priv(l)%p(ind)=frame
          elseif (frame.gt.0.and.frame.le.frames%num_frames) then
           cv%priv(l)%p(ind)=frame ! append frame index to end
! 10.2010 VO *************************************************************************
! since the CV depends on atom coords through the definition of a frame,
! we have to add the relevant atom lists in cv%amap with the index of this cv (l)
           ncomf=frames%priv(frame)%p(1);
           allocate(indf(ncomf));
           ii=2; jj=ii+ncomf-1;
           indf=frames%priv(frame)%p(ii:jj)
           do j=1, ncomf ! loop over frame atoms
             m=int_vector_uadd(cv%amap%v(indf(j)),l) ! add index of this cv
             m=int_vector_uadd(unique_amap_ptr,indf(j)) ! add index of the frame atom to the list of unique atom labels
           enddo
           deallocate(indf)
!*****************************************************************************************
          else ! all other values are invalid
 call wrndie(0,whoami,trim(' INVALID FRAME SPECIFIED. WILL USE FIXED COORDINATE SYSTEM.'))
           cv%priv(l)%p(ind)=0 ! set frame index to zero
          endif
         else ! frame not specified
          cv%priv(l)%p(ind)=0 ! set frame index to zero for absolute/lab frame
         endif
!
         m=unique_amap_ptr%last ! number of unique atoms this cv depends on
         allocate(cv%priv(l)%amap_ptr(m+1)) ! add one to include length of list
         cv%priv(l)%amap_ptr(1)=m;
         cv%priv(l)%amap_ptr(2:m+1)=unique_amap_ptr%i(1:m)
         call int_vector_done(unique_amap_ptr)
!
        else ! out of bounds
__WARN( whoami,'ERROR ADDING POSITION_COM CV. NOTHING DONE.')
        endif
       else ! found
__WARN( whoami,' POSITION_COM CV ALREADY PRESENT. NOTHING DONE.')
         l=0
       endif
       end function cv_posi_com_add
!ccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccc
!      this routine does the job for x, y, and z positions
       subroutine cv_posi_com_calc(i,x,y,z,mass,fx,fy,fz,calctheta,     &
     &                             deriv,addforce,fext)
!
       __CHARMM_ONLY use sm_var, only: Id3
       __DEP_BESTFIT
       __DEP_CONST
       __DEP_NUMBER
!
       float :: x(:), y(:), z(:), fx(:), fy(:), fz(:), mass(:)
       float, optional :: fext ! `external` force for planar dynamics (see smcv_addforce in smcv_master)
       int :: i, type ! cv index, cv type
       bool :: calctheta ! whether or not to calculate theta(x); if not, use theta=cv%r(i,instant)
                            ! note that if calctheta=.false., we don`t calculate the derivatives!
       bool :: deriv    ! whether or not to calculate derivatives w.r.t. x
       bool :: addforce ! whether or not to add forces on simulation atoms
!
       float :: dummy
!
       int, pointer, dimension(:) :: ind1, indf! , indpsf1
       float, pointer, dimension(:,:) :: r1
       float, pointer, dimension(:) ::  m1
!
       int :: ncom1, ncomf, ind ! , indpsf
       int :: j, k, ii, jj, frame
!      variables for cv and derivative calculations
       float :: com(3), f, w, totm1
       float :: A(3,3) ! orthogonal transformation matrix
       float :: dummy3(3) ! dummy vector
       float :: dA(3,3) ! derivative of A
       float :: p(3) ! position in the local reference frame
       float :: vec(3), vnorm ! projection vector and its norm
       bool :: qframe ! is a local coordinate frame defined for this CV
       int, pointer :: priv(:)
       __IAM(CV_POSI_COM_CALC)
!
!      do work:
! look up atom index in the private array of CV i; obtain the PSF index from amap
       ncom1=cv%priv(i)%p(1)
!
       allocate(ind1(ncom1),r1(3,ncom1),m1(ncom1))
!       allocate(indpsf1(ncom1))
!
!     extract indices into the atom map
       ii=2;    jj=ii+ncom1-1; ind1=cv%priv(i)%p(ii:jj)
!
!cccccccccccccccccccc get coordinates ccccccccccccccccccc
       do j=1, ncom1;
         ind=cv%amap%i(ind1(j)) ! actual psf index
!         indpsf1(j)=ind ;
         r1(1,j)=x(ind); r1(2,j)=y(ind); r1(3,j)=z(ind); m1(j)=mass(ind)
       enddo
!ccccccccccccccccccccccccccccccccccccccccccccccccccccccccc
!    now we have all the coordinates
       frame=cv%priv(i)%p(jj+1)
       qframe=(frame.gt.0)
!
       if (calctheta) then
        totm1=one/sum(m1);
!    normalize masses
        m1=m1*totm1;
!
        com=zero
!
        do j=1,ncom1;
         do k=1,3;
          com(k)=com(k)+r1(k,j)*m1(j); ! center of mass in absolute frame
         enddo
        enddo
!
        if (qframe) then ! if this position is relative to a local frame, obtain frame gradients
         call frames_calc(frame,x,y,z,mass,deriv)
!         A=transpose(frames%r(:,:,frame)); ! transformation matrix
         A=frames%r(:,:,frame); ! making transposition implicit
         com=com-frames%o(:,frame) !
!         p=matmul(A,com); ! components in local frame
         p=matmul(com,A); ! transposition implicit
        else
         A=Id3; ! identity
         p=com; ! trivial transformation
        endif
!
! check that the projection vector is defined properly
        if (cv%priv(i)%pr(4).eq.zero) then ! this is the first calculation; set vector from p
         vnorm=norm3(p)
         if (vnorm.gt.__ERRTOL) then ! only if norn nonzero
          cv%priv(i)%pr(1:3)=p
          cv%priv(i)%pr(4)=-one/vnorm ! keep negative as indicator
         else
          __WRN(whoami, 'CANNOT SET PROJECTION VECTOR: SELECTION COM IS AT FRAME ORIGIN.')
         endif
        endif
! obtain norm an projection vector
        vec = cv%priv(i)%pr(1:3) * abs(cv%priv(i)%pr(4)) ! normalized to one
!
        cv%r(i,previnst)=cv%r(i,instant)
        cv%r(i,instant)=dot_product(p,vec)
!cccccccccccccccccc now compute derivative
        if (deriv) then
!     compute derivatives w.r.t. COM components
!     initialize derivative arrays
!         do j=1,cv%amap%last
         priv=>cv%priv(i)%amap_ptr ! this should copy the pointers statically; the pointers point to the _same_ data
         do jj=2,priv(1)+1 ! only a subset of indices needs to be considered
          j=priv(jj)
!
          do ii=1,2
          cv%gradx(i,j,ii)=zero;cv%grady(i,j,ii)=zero;cv%gradz(i,j,ii)=zero
          enddo
         enddo
!
         if (qframe) then ! first, compute contribution from frame derivatives
!    extract frame indices (need to compute gradients w.r.t atoms that define the frame!)
          ncomf=frames%priv(frame)%p(1);
          allocate(indf(ncomf));
!
          ii=2; jj=ii+ncomf-1;
!
!           write(0,*) frame, ii,jj, size(frames%priv),
!     &            size(frames%priv(frame)%p), frames%priv(frame)%p(1)
!              if(frame.gt.size(frames%priv).or.
!     &          jj.gt.size(frames%priv(frame)%p))
!     &       stop
!
!
           indf=frames%priv(frame)%p(ii:jj)
!
!     derivatives wrt atoms that define the frame
!     loop over all atoms in the frame definition
!     note implicited transposition
          do j=1, ncomf ! loop over frame atoms
           ind=indf(j) ! index into atom map
           w=one/sqrt(mass(cv%amap%i(ind))) ! actual psf index
           f=frames%grado(ind,frame);
           dummy3=f*matmul(A,vec) ! precompute frame origin derivative contribution
!    NOTE : here compute vec \dot (dA^T * p) - vec \dot A do ; do is the derivative of frame origin 
!           the 1st term is the same as p\dot ( dA * vec) ; 
!    gradx
!           dA=transpose(frames%gradrx(:,:,ind,frame))
!           dummy=dot_product(vec,matmul(dA,p)-f*A(:,1))
           dA=frames%gradrx(:,:,ind,frame)
           dummy=dot_product(matmul(com,dA),vec)-dummy3(1)
           cv%gradx(i,ind,1)=dummy
           cv%gradx(i,ind,2)=dummy*w
!    grady
!           dA=transpose(frames%gradry(:,:,ind,frame))
!           dummy=dot_product(vec,matmul(dA,p)-f*A(:,2))
           dA=frames%gradry(:,:,ind,frame)
           dummy=dot_product(matmul(com,dA),vec)-dummy3(2)
           cv%grady(i,ind,1)=dummy
           cv%grady(i,ind,2)=dummy*w
!    gradz
!           dA=transpose(frames%gradrz(:,:,ind,frame))
!           dummy=dot_product(vec,matmul(dA,p)-f*A(:,3))
           dA=frames%gradrz(:,:,ind,frame)
           dummy=dot_product(matmul(com,dA),vec)-dummy3(3)
           cv%gradz(i,ind,1)=dummy
           cv%gradz(i,ind,2)=dummy*w
          enddo ! over frame atoms
          deallocate(indf)
         endif ! frame
!
!      __DBGOUT(*, whoiam, 'computed frame component')
!ccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccc
!     derivativer wrt actual position coordinates
!     loop over all atoms in the CV COM
         do j=1,ncom1
          ind=ind1(j)
          w=sqrt(totm1/m1(j)) ! for mass-weighting
! note the implicited transposition above, i.e. A here is no longer A^T, but A
          dummy3=m1(j)*matmul(A,vec) ! compute
!    gradx
!          dummy=dot_product(vec,A(:,1))*m1(j) ! here, A was A transpose
          cv%gradx(i,ind,1)=cv%gradx(i,ind,1)+dummy3(1)
          cv%gradx(i,ind,2)=cv%gradx(i,ind,2)+dummy3(1)*w
!    grady
!          dummy=dot_product(vec,A(:,2))*m1(j)
          cv%grady(i,ind,1)=cv%grady(i,ind,1)+dummy3(2)
          cv%grady(i,ind,2)=cv%grady(i,ind,2)+dummy3(2)*w
!    gradz
!          dummy=dot_product(vec,A(:,3))*m1(j)
          cv%gradz(i,ind,1)=cv%gradz(i,ind,1)+dummy3(3)
          cv%gradz(i,ind,2)=cv%gradz(i,ind,2)+dummy3(3)*w
         enddo
!ccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccc
        endif ! deriv
       else ! calctheta
        p(type)=cv%r(i,instant)
       endif
!  aardvark
!        write(6,*) whoiam, 'computed derivatives'
!
!      NOTE that the forces calculated here are NOT acting on the CV, as in
!      the evolution subroutine, but on the simulation atoms
       dummy=cv%r(i,zcur)-cv%r(i,instant) ! zcur contains reference coords (combination of main+comp)
! FB modification (FB statistics updated outside):
       dummy=max(zero, dummy - cv%fbwidth(i)) + min(zero, dummy + cv%fbwidth(i))
!
       f=cv%k(i)*dummy     !   note that f is not divided by 1/sqrt(mass)
       cv%r(i,forces2)=f
       if (addforce) then
        if (present(fext)) f=fext ! override for planar sampling
!        if (qframe) then
!    loop over all atom indices (easier to do this way, since the frame and CV atom indices may not be disjoint)
!    need to figure out a clever way of only looping over the relevant atoms  (SEE BELOW)
!        write(600+whoiam,*) dummy, f
!         do j=1,cv%amap%last
!          indpsf=cv%amap%i(j)
!          fx(indpsf)=fx(indpsf)-f*cv%gradx(i,j,1)
!          fy(indpsf)=fy(indpsf)-f*cv%grady(i,j,1)
!          fz(indpsf)=fz(indpsf)-f*cv%gradz(i,j,1)
!         enddo
!        else
!         do j=1,ncom1 ! just loop over the atoms of this CV
!          ind=ind1(j)
!          indpsf=indpsf1(j) ! index into psf
!          fx(indpsf)=fx(indpsf)-f*cv%gradx(i,ind,1)
!          fy(indpsf)=fy(indpsf)-f*cv%grady(i,ind,1)
!          fz(indpsf)=fz(indpsf)-f*cv%gradz(i,ind,1)
!         enddo
!        endif
! more efficient and conceptually correct way:
        priv=>cv%priv(i)%amap_ptr
        do ii=2, priv(1)+1
         jj=priv(ii)
         j=cv%amap%i(jj) ! psf index
         fx(j)=fx(j)-f*cv%gradx(i,jj,1)
         fy(j)=fy(j)-f*cv%grady(i,jj,1)
         fz(j)=fz(j)-f*cv%gradz(i,jj,1)
        enddo
       endif ! addforce
!     free memory
       deallocate(ind1,                                                 & ! indpsf1,
     &            r1,m1)
!
       end subroutine cv_posi_com_calc
!ccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccc
       subroutine cv_posi_com_list(i)
      __DEP_OUTPUT
      __DEP_MULTICOM
      __DEP_MPI
      __DEP_ATOMID
      __DEP_CONST
      use sm_var
!
       __DECLARE_MSGBUF
       int :: i, j, type, ii, jj, iatom
       character(len=8) :: sid, rid, ren, ac
       character(len=1) :: pos
       float :: vnorm, vec(3)
!
       int :: ncom1, frame
       int, pointer, dimension(:) :: ind1
       __IAM(CV_POSI_COM_LIST)
!
       if (MPI_COMM_STRNG.eq.MPI_COMM_NULL) return ! only replica heads stay
!
!    check type just in case
       type=cv%type(i)
       if (type.ne.posi_com) then
        __WRN(whoami,' WRONG CV TYPE RECEIVED.')
        return
       endif
!
       if (ME_STRNG.eq.0) then
        ncom1=cv%priv(i)%p(1)
!
        allocate(ind1(ncom1))
!
!     extract indices into the atom map
        ii=2;    jj=ii+ncom1-1; ind1=cv%priv(i)%p(ii:jj)
        frame=cv%priv(i)%p(jj+1)
!
        if (frame.ge.1) then
         write(_MSGBUF,'(A, I3)')                                          &
     &  _TAB//' POSITION-COM RELATIVE TO LOCAL FRAME ',frame
        else
         write(_MSGBUF,'(A)') _TAB//' POSITION-COM'
        endif
!
        vnorm=cv%priv(i)%pr(4)
        vec=cv%priv(i)%pr(1:3)
        if (abs(vnorm).lt.__ERRTOL) then
         write(_MSGBUF(2), '(A)') _TAB//' PROJECTION VECTOR WILL BE DEFINED AS THE FIRST COMPUTED POSITION OF SELECTION COM'
        elseif(vnorm.gt.0) then
         write(_MSGBUF(2),'(A,3'//real_fmt//',A)')  whoami//' THE PROJECTION VECTOR IS (', vec, ')'
        else ! <0
         write(_MSGBUF(2),'(A,3'//real_fmt//',A)')  whoami//' THE PROJECTION VECTOR WAS SET FROM INITIAL SELECTION COM POSITION AS (', vec, ')'
        endif
        __PRINT(_MSGBUF)
!
        do j=1, ncom1;
         iatom=cv%amap%i(ind1(j)) ! actual psf index
 __ATOMID(iatom, sid, rid, ren, ac)
         write(_MSGBUF,667) _TAB,j, iatom, sid, rid, ren, ac ; __PRINT(_MSGBUF)
        enddo
        deallocate(ind1)
       endif
!
 667  format(A,2I8,' ',4A)
!
       end subroutine cv_posi_com_list
!cccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccc
__CHARMM_ONLY##ENDIF
      end module cv_posi_com
!