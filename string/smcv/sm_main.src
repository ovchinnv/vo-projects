!CHARMM Element source/machdep/sm_main.src $Revision: 1.4 $
!
! string code (extends the ensemble code)
! documentation in string.doc
!
##IF PARALLEL
##IF STRINGM
!cccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccc
      SUBROUTINE sm_main(COMLYN,COMLEN)
      use sm0k
      use ftsm, only: ftsm_parse
      use string
!      implicit none
!-----------------------------------------------
! calls OK/CV parsers
!-----------------------------------------------
      CHARACTER*(*) COMLYN
      INTEGER COMLEN

! local variables
      character*8 keyword
      character*9 whoami
!     functions
!      logical eqstwc
!      character*4 nexta4
!
      data whoami /' SM_MAIN>'/
!
      keyword=nexta4(comlyn,comlen)
!     there are two parsers, 0K and CV
!cccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccc
      if (eqstwc(keyword(1:4),4,'ZERO',4)) then
        call sm0k_main(comlyn, comlen)
!ccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccc
      elseif (eqstwc(keyword(1:4),4,'COLV',4)) then
        call smcv(comlyn, comlen) ! SMCV parser
!ccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccc
      elseif (eqstwc(keyword(1:4),4,'FTSM',4)) then
        call ftsm_parse(comlyn, comlen) ! FTSM parser
!ccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccc
      elseif (eqstwc(keyword(1:4),4,'OPEN',4)) then
        call sm_open(comlyn, comlen, .true.) ! open a file on each replica
!ccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccc
      elseif (eqstwc(keyword(1:4),4,'CLOS',4)) then
        call sm_close(comlyn, comlen) ! open a file on each replica
!ccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccc
      else
            CALL WRNDIE(0, whoami,                                      &
     &       'UNRECOGNIZED SUBCOMMAND: '//keyword)
      endif
!
      return
      end subroutine sm_main
!ccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccc
       SUBROUTINE SM_OPEN(COMLYN,COMLEN, loud)
!-----------------------------------------------------------------------
! Opens 1 file per replica process
! TODO: Include checking to make sure each replica's file name is
! different (when opening with write access).
!-----------------------------------------------------------------------
! adaptation of RB's ensemble code; VO 8.09
! much of this code is duplicated from the main charmm open routine (vopen)
! however, at present, this duplication seems to be a better solution than
! generalizing vopen
       use smcv_var, only: smcv_initialized
       use sm0k, only: sm0k_initialized
       use ftsm_var, only: ftsm_initialized
!
      use string
!       implicit none

      use dimens_fcm 
      use consta 
      use stream 
      use machio 
      use exfunc 
!
      use string 
      use number 
      use mpi               !##MPI
!
      use multicom_ltm       !##MULTICOM
      use parallel 
!
       CHARACTER*(*) COMLYN
       INTEGER COMLEN
!
       INTEGER MXFILE, MXPREF, MXSUFF
       INTEGER FLEN, L, UNUM, UNUM2, IERROR, I
       LOGICAL ERR, QOPEN, QFORM, QWRITE, QENS
!
##IF UNIX OS2
       PARAMETER (MXFILE=128)
##ELSE
       PARAMETER (MXFILE=256)
##ENDIF
       INTEGER FMLEN, IPT, STSLEN, FACCL
       PARAMETER (FMLEN=11,STSLEN=8,FACCL=7)
       CHARACTER*(MXFILE) FILEX, JUNKNM, FNAM2
       CHARACTER*(FMLEN) FORMT
       CHARACTER*(STSLEN) FSTAT
       CHARACTER*(FACCL) FACC
!
       integer :: oldiol
       logical :: loud
       character*(9) :: whoami
       data whoami /' SM_OPEN>'/
!
       if (.not.(smcv_initialized                                       &
     &       .or.sm0k_initialized                                       &
     &       .or.ftsm_initialized)) then
        if (ME_GLOBAL.eq.0) call wrndie(0,whoami,                       &
     &   ' STRING METHOD NOT INITIALIZED. NOTHING DONE.')
        return
       endif
!
       if (ME_STRNG.ne.MPI_UNDEFINED) then ! only roots work
!      modify iolev
        oldiol=iolev
        iolev=1 ! so that vinquire works
! unum
        UNUM=GTRMI(COMLYN,COMLEN,'UNIT',-1)
        IF (UNUM.LT.0) THEN
         CALL WRNDIE(0,whoami,' NO UNIT NUMBER SPECIFIED')
         RETURN
        ENDIF
! filename
        CALL GTRMWA(COMLYN, COMLEN, 'NAME', 4, FILEX, MXFILE, FLEN)
        IF (FLEN.LE.0) THEN
         CALL WRNDIE(0, whoami, 'NO FILE NAME GIVEN')
        ENDIF
! remove quotes
        IPT=0
        DO I=1,FLEN
          IF(FILEX(I:I).NE.'"') THEN
             IPT=IPT+1
             FILEX(IPT:IPT)=FILEX(I:I)
          ENDIF
        ENDDO
        FILEX = FILEX(1:IPT)
        FLEN=IPT
!
        IF(LOWER) CALL CNVTLC(FILEX,FLEN)
!
        fnam2=filex
        call expnam(filex, flen, err)
!     unit already open?
        CALL VINQRE('UNIT',JUNKNM,MXFILE,I,QOPEN,QFORM,QWRITE,UNUM)
        IF (QOPEN) THEN
         IF(WRNLEV.GE.2.AND.IOLEV.GT.0.and.loud) WRITE(OUTU,'(2A)')     &
     &        whoami//' Unit already open.',                            &
     &        ' The old file will be closed first.'
         CLOSE(UNIT=UNUM)
         IFREEU(UNUM) = 0
        ENDIF
!     file already in use
        CALL VINQRE('FILE',FILEX,I,I,QOPEN,QFORM,QWRITE,UNUM2)
        IF (QOPEN) THEN
         IF(WRNLEV.GE.2.AND.IOLEV.GT.0.and.loud) WRITE(OUTU,'(A,/,2A)') &
     &    whoami//' ***** WARNING ***** another unit is already ',      &
     &    '         assigned to the file -',                            &
     &    ' it will be disconnected first.'
         CLOSE(UNIT=UNUM2)
         IFREEU(UNUM2) = 0
        ENDIF
!
! format
        IF (INDXA(COMLYN,COMLEN,'UNFO').GT.0) THEN
         FORMT='UNFORMATTED'
        ELSE IF (INDXA(COMLYN,COMLEN,'FILE').GT.0) THEN
         FORMT='UNFORMATTED'
        ELSE IF (INDXA(COMLYN,COMLEN,'FORM').GT.0) THEN
         FORMT='FORMATTED'
        ELSE IF (INDXA(COMLYN,COMLEN,'CARD').GT.0) THEN
         FORMT='FORMATTED'
        ELSE
         CALL WRNDIE(1,whoami,                                          &
     &    'NO FORMATTING SPECIFICATION, IT WILL BE OPENED UNFORMATTED')
         FORMT='UNFORMATTED'
        ENDIF
!
! status
        CALL GTRMWA(COMLYN, COMLEN, 'STAT', 4, FSTAT, STSLEN, L)
        IF (L.LE.0) THEN
            FSTAT = 'UNKNOWN'
        ENDIF
! access
        IF (INDXA(COMLYN,COMLEN,'APPE').GT.0) THEN
         FACC='APPEND'
        ELSE IF (INDXA(COMLYN,COMLEN,'READ').GT.0) THEN
         FACC='READ'
        ELSE IF (INDXA(COMLYN,COMLEN,'WRIT').GT.0) THEN
         FACC='WRITE'
        ELSE
          FACC='READ'
        ENDIF
        flen=mxfile
        call trima(fnam2,flen)
        if (loud) then
         do i=1, SIZE_STRNG
          if (i-1.eq.ME_STRNG) then
          WRITE (outu, '(2A,I3,3A,I3,4A)') whoami,' REPLICA: ',ME_STRNG,&
     &  ', FILE: ',fnam2(1:FLEN),', UNIT: ',UNUM,', FORMAT: ',FORMT,    &
     &  ', ACCESS: ', FACC
          endif
         enddo
        endif ! loud
!          if (MPI_COMM_STRNG.ne.MPI_COMM_NULL)       !##MPI
!     &     call MPI_BARRIER(MPI_COMM_STRNG, IERROR)  !##MPI
! open it
        IF (FACC.EQ.'APPEND') THEN
         OPEN(UNIT=UNUM,FILE=FILEX,FORM=FORMT,STATUS='OLD',             &
     &     ACCESS='SEQUENTIAL')
        ELSE IF (FACC.EQ.'READ') THEN
         OPEN(UNIT=UNUM,FILE=FILEX,FORM=FORMT,STATUS='OLD',             &
     &    ACCESS='SEQUENTIAL')
        ELSE IF (FACC.EQ.'WRITE') THEN
         OPEN(UNIT=UNUM,FILE=FILEX,FORM=FORMT,STATUS='UNKNOWN',         &
     &    ACCESS='SEQUENTIAL')
        END IF
! update ifreeu array
!
        INQUIRE(FILE=FILEX,OPENED=QOPEN,NUMBER=UNUM)
        IF (.NOT. QOPEN) THEN
          CALL WRNDIE(0, whoami, 'Could not open file')
        ELSE
!
!     put appropriate code in IFREEU array to play nicely
!     with rest of charmm; use +/8, 80
!        +80 string read formatted
!        +10 read formatted
!        +8  string write/append formatted
!        +1  write/append formatted
!        -1  write/append unformatted
!        -8  string write/append unformatted
!        -10 read unformatted
!        -80 string read unformatted
!       i.e. ifreeu(unum)%8 tells whether we have a string file
         IF (FORMT.EQ.'FORMATTED') THEN
           IFREEU(UNUM)=8
         ELSE
           IFREEU(UNUM)=-8
         ENDIF
         IF (FACC.EQ.'READ') IFREEU(UNUM)=IFREEU(UNUM)*10
        ENDIF
! restore iolev
        iolev=oldiol
       endif ! ME_STRNG undefined
!     propagate changes to slaves
!
       call PSNDC(COMLYN,1) ! updated command line (since slaves did not read)
       call PSND4(COMLEN,1)
!       call PSND4(IFREE(UNUM),1) ! slaves should know nothing about the open file
!
       END SUBROUTINE SM_OPEN
!cccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccc
       subroutine sm_close(comlyn, comlen)
!
       use smcv_var, only: smcv_initialized
       use sm0k, only: sm0k_initialized
       use ftsm_var, only: ftsm_initialized
!
      use string
!       implicit none
      use exfunc 
      use machio 
      use multicom_ltm       !##MULTICOM
      use parallel 
!
      use mpi 
!
       CHARACTER*(*) COMLYN
       INTEGER COMLEN
!
       INTEGER UNUM, IERROR
!
       character*(10) :: whoami
       data whoami /' SM_CLOSE>'/
!
       if (.not.(smcv_initialized                                       &
     &       .or.sm0k_initialized                                       &
     &       .or.ftsm_initialized)) then
        if (ME_GLOBAL.eq.0) call wrndie(0,whoami,                       &
     &   ' STRING METHOD NOT INITIALIZED. NOTHING DONE.')
        return
       endif
!
       UNUM=GTRMI(COMLYN,COMLEN,'UNIT',-1)
!
       if(ME_STRNG.eq.MPI_UNDEFINED) return ! only ensemble heads work
!
!       if ((MOD(IFREEU(UNUM),8).EQ.0).AND.
       if (IFREEU(UNUM).NE.0) THEN
        CLOSE(UNIT=UNUM)
        IFREEU(UNUM) = 0
       endif
!
       end subroutine sm_close
!cccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccc
##ELSE ! string not compiled
      subroutine sm_main(COMLYN,COMLEN)
!----------------------------------------------------------------------
      use stream 
      CHARACTER*(*) COMLYN
      INTEGER COMLEN
      WRITE (OUTU, '(A)') 'STRING METHOD NOT COMPILED'
      return
      end subroutine sm_main
##ENDIF
##ENDIF
