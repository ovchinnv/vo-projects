!
!     CV_RMSD.MOD
!
!     ROUTINES FOR COLLECTIVE VARIABLE `RMSD` : rms distance between atom groups after best fit
      module cv_rmsd
!
__CHARMM_ONLY##IF STRINGM
!
      use cv_common
      use ivector
      use ivector_list
!
      __IMPNONE
      private
      ! subroutines
      public cv_rmsd_add
      public cv_rmsd_calc
      public cv_rmsd_list
!
      contains
!ccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccc
       function cv_rmsd_add(ind_o,ind_f,r_o,r_f,ow,fw,_COMMON_ARGS,qrota_,qtrans_) result(l) ! note: i is the atom index in the PSF
! a note on convention : qorient = qrota .or. qtrans ; the two operands indicate (separately) whether
! rotational and translation fitting are to be performed, respectively
       use cv_types
       __DEP_OUTPUT
       __DEP_NUMBER
!
       float  :: _COMMON_ARGS
       int, pointer, intent(inout) :: ind_o(:), ind_f(:)
       float, pointer, intent(in)  :: r_o(:,:), r_f(:,:), ow(:), fw(:)
       bool, optional, intent(in) :: qrota_, qtrans_
!      locals
       int :: i, j, l, m, ind, num_int, norient, nforced, num_real, &
     &  qdiffrot ! .not. qdiffrot indicates that derivatives of rotation matrix need not be computed (oset=fset; ow=fw)
       int :: qtrans, qrota
       bool :: found, qorient
       float :: com(3)=zero ! to store com of orientation set
       type (int_vector) :: unique_amap_ptr ! contains a unique list of atom map pointers (to speed up gradient computation, etc)
!
       __IAM(CV_RMSD_ADD)
!
       if (present(qrota_))  then ; if (qrota_)  then ; qrota=1  ; else ; qrota=0  ; endif ; else ; qrota=1;  endif
       if (present(qtrans_)) then ; if (qtrans_) then ; qtrans=1 ; else ; qtrans=0 ; endif ; else ; qtrans=1; endif
       qorient=(qtrans+qrota).gt.0
!
! some consistency checks
!
       if (.not.(associated(r_f).and.                                   &
     &           associated(ind_f).and.                                 &
     &           associated(fw))) then
         __WRN(whoami, ' UNALLOCATED FORCED/RMSD POINTER ARRAY. ABORT.')
        return
       else
        nforced=size(ind_f)
        if (nforced.eq.0) then
         __WRN(whoami, ' NO FORCED/RMSD ATOMS FOUND. ABORT.')
         return
        elseif (nforced.gt.1) then
         call isort('i',nforced,ind_f,i) ! sort indices
        endif
       endif
!
       if (qorient) then
        if (.not.(associated(r_o).and.                                   &
     &           associated(ind_o).and.                                  &
     &           associated(ow))) then
         __WRN(whoami, ' UNALLOCATED ORIENTATION POINTER ARRAY. ABORT.')
         return
        endif
        norient=size(ind_o)
        if (norient.eq.0) then
         __WRN(whoami, ' SUPERPOSITION REQUESTED BUT NO ORIENTATION ATOMS FOUND. ABORT.')
         return
        elseif (norient.eq.1) then
         if (qrota.eq.1) then
          __WRN(whoami, ' ROTATIONAL SUPERPOSITION REQUIRES AT LEAST TWO ORIENTATION ATOMS. ABORT.')
          return
         endif
        elseif (norient.eq.2) then
         if (qrota.eq.1) then
          do i=1, nforced
           if ( all(ind_f(i).ne.ind_o) ) then
             __WRN(whoami, ' FOR ROTATIONAL SUPERPOSITION WITH TWO ORIENTATION ATOMS, ORIENTATION GROUP MUST CONTAIN THE RMSD GROUP. ABORT.')
            return
           endif
          enddo
         endif ! rota
        endif ! norient
        if (norient.gt.1) call isort('i',norient,ind_o,i) ! sort indices
       else
        norient=0
       endif ! qorient
!
! check whether the orientation/forcing sets identical
       if (qorient) then
        qdiffrot=1
        if (norient.eq.nforced) then
         if (all(ind_o.eq.ind_f).and.all(ow.eq.fw)) qdiffrot=0
        endif
       else
        qdiffrot=0
       endif ! qorient
!    check for duplicate CV (exact identical entry only)
       found=.false.
       do l=1, cv%num_cv
        if (cv%type(l).eq.rmsd) then
         found=(norient.eq.cv%priv(l)%p(1).and.                         &
     &          nforced.eq.cv%priv(l)%p(2).and.                         &
     &          qtrans.eq.cv%priv(l)%p(3).and.                          & ! translational superposition
     &          qrota.eq.cv%priv(l)%p(4).and.                           & ! rotational superposition
     &          qdiffrot.eq.cv%priv(l)%p(5))                              ! whether orientation and forcing sets are different
         ind=6
         do j=1,norient
           if (found) found=                                            &
     &         (ind_o(j).eq.cv%amap%i(cv%priv(l)%p(ind)))
           __INC(ind)
         enddo
!
         do j=1,nforced
           if (found) found=                                            &
     &         (ind_f(j).eq.cv%amap%i(cv%priv(l)%p(ind)))
           __INC(ind)
         enddo
!
        endif
        if (found) exit
       enddo
!
       if (.not.found) then
        l=__CV_COMMON_ADD(rmsd)
        if  (l.gt.0) then
!     allocate private data
!     space needed:
         num_int = 5 + norient + nforced ! number of ints needed for storage
!
         allocate(cv%priv(l)%p(num_int));
         cv%priv(l)%p(1)=norient
         cv%priv(l)%p(2)=nforced
         cv%priv(l)%p(3)=qtrans
         cv%priv(l)%p(4)=qrota
         cv%priv(l)%p(5)=qdiffrot
!        now add slave CV indices
         ind=6
         do j=1,norient
           m=ind_o(j)
           if (m.le.0) then
             __WRN( whoami,' NONPOSITIVE ATOM INDEX.')
           endif
           cv%priv(l)%p(ind)=int_vlist_uaddu(cv%amap,m,l) ! add indices into unique map
           m=int_vector_uadd(unique_amap_ptr,cv%priv(l)%p(ind))
           __INC(ind)
         enddo
!
         do j=1,nforced
           m=ind_f(j)
           if (m.le.0) then
             __WRN(whoami,' NONPOSITIVE ATOM INDEX.')
           endif
           cv%priv(l)%p(ind)=int_vlist_uaddu(cv%amap,m,l) ! add indices into unique map
           m=int_vector_uadd(unique_amap_ptr,cv%priv(l)%p(ind))
           __INC(ind)
         enddo
!    populate private real array
         num_real = 4 * ( norient + nforced ) + 3 ! number of reals needed for storage (incl COM of orientation group)
         allocate(cv%priv(l)%pr(num_real));
         ind=1
         do j=1,3
          com(j)=zero
          do i=1, norient
           cv%priv(l)%pr(ind)=r_o(i,j)
           __INC(ind)
           __INCR(com(j),ow(i)*r_o(i,j))
          enddo
         enddo
!
         do j=1,3
          do i=1, nforced
           cv%priv(l)%pr(ind)=r_f(i,j)
           __INC(ind)
          enddo
         enddo
!
         do i=1, norient
          cv%priv(l)%pr(ind)=ow(i)
          __INC(ind)
         enddo
!
         do i=1, nforced
          cv%priv(l)%pr(ind)=fw(i)
          __INC(ind)
         enddo
!
         cv%priv(l)%pr(ind:ind+2) = com
!
         m=unique_amap_ptr%last ! number of unique atoms this cv depends on
         allocate(cv%priv(l)%amap_ptr(m+1)) ! add one to include length of list
         cv%priv(l)%amap_ptr(1)=m;
         cv%priv(l)%amap_ptr(2:m+1)=unique_amap_ptr%i(1:m)
         call int_vector_done(unique_amap_ptr)
!          write(0,*) whoami, size(cv%priv(l)%amap_ptr(:)) !aa
!
        else ! out of bounds
         __WRN( whoami,' ERROR ADDING RMSD CV. NOTHING DONE.')
        endif
       else ! found
         __WRN( whoami,' RMSD CV ALREADY PRESENT. NOTHING DONE.')
         l=0
       endif
!
       end function cv_rmsd_add
!ccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccc
       subroutine cv_rmsd_calc(i,x,y,z,mass,fx,fy,fz,                   &
     &                             calctheta,deriv,addforce,fext)
       __DEP_BESTFIT
       __DEP_CONST
       __DEP_NUMBER
!
       float :: x(:), y(:), z(:),                                      &
     &           fx(:), fy(:), fz(:), mass(:)
       float, optional :: fext ! `external` force for planar dynamics (see smcv_addforce in smcv_master)
       int, intent(in) :: i
       bool :: calctheta ! whether or not to calculate theta(x); if not, use theta=cv%r(i,instant)
                            ! note that if calctheta=.false., we do not calculate the derivatives!
       bool :: deriv    ! whether or not to calculate derivatives w.r.t. x
       bool :: addforce ! whether or not to add forces on simulation atoms
!    locals
       float, parameter :: tol=1.0d-10
       bool :: qorient, qtrans, qrota, qdiffrot
       int :: j, k, ii, jj, ind, norient, nforced, obeg, oend, p, q
       float :: d, f, w, r1(3), r2(3), r_com(3), rt_com(3), theta, u(3,3)
       float :: dummy
       int, pointer :: priv(:)
       int, pointer :: ind_o(:), ind_f(:)
       float, pointer :: r_o(:,:), rt_o(:,:), ow(:),                   &
     &                    r_f(:,:), rt_f(:,:), fw(:), rt_rot_f(:,:)
       float, dimension(:,:,:,:), pointer :: ugrad
!
       norient=cv%priv(i)%p(1)
       nforced=cv%priv(i)%p(2)
       qtrans=(cv%priv(i)%p(3).ne.0)
       qrota=(cv%priv(i)%p(4).ne.0)
       qorient=qtrans.or.qrota
       qdiffrot=qorient.and.(cv%priv(i)%p(5).ne.0)
!
       if (qorient) then
        if (qdiffrot) then ! extract all indices and coordinates
         allocate(ind_o(norient)) ! indices into atom map
         allocate(rt_o(norient,3), r_o(norient,3))
         allocate(ow(norient))
         allocate(ind_f(nforced))
         allocate(rt_f(nforced,3), r_f(nforced,3))
         if (qrota) then
          allocate(rt_rot_f(nforced,3))
         else
          rt_rot_f=>rt_f
         endif
         allocate(fw(nforced))
! indices
         ii=6;    jj=ii+norient-1;  ind_o=cv%priv(i)%p(ii:jj)
         ii=jj+1; jj=ii+nforced-1;  ind_f=cv%priv(i)%p(ii:jj)
! o. coordinates
         jj=0;
         do j=1,3
          ii=jj+1; jj=ii+norient-1;  rt_o(:,j)=cv%priv(i)%pr(ii:jj)
         enddo
! f. coordinates
         do j=1,3
          ii=jj+1; jj=ii+nforced-1;  rt_f(:,j)=cv%priv(i)%pr(ii:jj)
         enddo
! o. weights
         ii=jj+1; jj=ii+norient-1;  ow(:)=cv%priv(i)%pr(ii:jj)
! f. weights
         ii=jj+1; jj=ii+nforced-1;  fw(:)=cv%priv(i)%pr(ii:jj)
! com
         ii=jj+1; jj=ii+2; rt_com=cv%priv(i)%pr(ii:jj)
        else ! orient, but not qdiffrot : no need to differentiate rotations
             ! note that orientation and forced groups are STILL present, along with norient/nforced
             ! i.e. even though nforced=norient
         allocate(ind_o(norient))
         allocate(rt_o(norient,3), r_o(norient,3))
         allocate(ow(norient))
! indices
         ii=6;    jj=ii+norient-1;  ind_o=cv%priv(i)%p(ii:jj)
! o. coordinates
         jj=0;
         do j=1,3
          ii=jj+1; jj=ii+norient-1;  rt_o(:,j)=cv%priv(i)%pr(ii:jj)
         enddo
! o. weights (skip forced atom coordinates)
         ii=jj+3*nforced+1; jj=ii+norient-1; ow(:)=cv%priv(i)%pr(ii:jj)
! com (skip forced weights)
         if (.not.qtrans) then ! com only needed in the absence of translational fitting
          ii=jj+nforced+1; jj=ii+2; rt_com=cv%priv(i)%pr(ii:jj)
         endif
! assume orientation atoms/weights are the same as forced atoms/weights (otherwise, diffrot should be 1)
         ind_f=>ind_o
         rt_f=>rt_o
         r_f=>r_o
         if (qrota) then
          allocate(rt_rot_f(nforced,3)) ! only needed for forced set
         else
          rt_rot_f=>rt_f
         endif
         fw=>ow
        endif ! diffrot
       else ! not qorient
        allocate(ind_f(nforced))
        allocate(rt_f(nforced,3), r_f(nforced,3))
        rt_rot_f=>rt_f
        allocate(fw(nforced))
! f. indices
        ii=6+norient;  jj=ii+nforced-1;  ind_f=cv%priv(i)%p(ii:jj)
! f. coordinates
        jj=3*norient;
        do j=1,3
         ii=jj+1; jj=ii+nforced-1;  rt_f(:,j)=cv%priv(i)%pr(ii:jj)
        enddo
! f. weights
         ii=jj+norient+1; jj=ii+nforced-1;  fw(:)=cv%priv(i)%pr(ii:jj)
       endif
!
!    set this CV energy to zero by default
!       cv%r(i,energy)=zero
!
       if (calctheta) then
!      load coordinates
!========================================================
        if (qorient) then
         obeg=1; oend=norient ! orientation atom index limits
         do k=1,norient
          ind=cv%amap%i(ind_o(k))
          r_o(k,1)=x(ind)
          r_o(k,2)=y(ind)
          r_o(k,3)=z(ind)
         enddo
!
         if (qdiffrot) then ! also use forced atoms (otherwise, they are the same as ro -- see above!)
          do k=1,nforced
           ind=cv%amap%i(ind_f(k))
           r_f(k,1)=x(ind)
           r_f(k,2)=y(ind)
           r_f(k,3)=z(ind)
          enddo
         endif
!       translate forced atoms to centroid
         if (qtrans) then
          r_com=zero
          do j=1,3 ; do k=1, norient;
           r_com(j) = r_com(j)+ow(k)*r_o(k,j)
          enddo ;    enddo
!
          r_o(:,1)=r_o(:,1)-r_com(1)
          r_o(:,2)=r_o(:,2)-r_com(2)
          r_o(:,3)=r_o(:,3)-r_com(3)
!
          if (qdiffrot) then ! also use forced atoms (otherwise, they are the same as ro -- see above!)
           r_f(:,1)=r_f(:,1)-r_com(1)
           r_f(:,2)=r_f(:,2)-r_com(2)
           r_f(:,3)=r_f(:,3)-r_com(3)
          endif ! qdiffrot
         endif ! qtrans
!
! write(666,*) rt_com
! write(666,*) sum(rt_o,1)/norient
! write(666,*) sum(r_o,1)/norient
! write(777,*) r_f
! write(888,*) rt_f
! 
! write(666,*) rmsd(r_f,rt_f,fw)
!     compute rotation matrix (and its gradient, if needed)
!     note that RMSbestfit subtracts com, so we do not have to do this here (with rt_o)
         if (qrota) then
          if (qdiffrot.and.deriv) then
           allocate(ugrad(3,3,3,norient))
           call RMSBestFit(rt_o,r_o,ow,u,obeg,oend,ugrad)
          else ! derivatives cancel out
           call RMSBestFit(rt_o,r_o,ow,u)
          endif
!     rotate target structure to overlap with current
          if (qtrans) then ! translational superposition -- coms subtracted out above (rt com is zero with qtrans)
           rt_rot_f=zero;
           do k=1,3; do j=1,3
            rt_rot_f(:,j)=rt_rot_f(:,j)+rt_f(:,k)*u(j,k)
           enddo;    enddo
          else ! translate rt to com, rotate, then translate back
           do j=1,3
            rt_rot_f(:,j)=rt_com(j)
            do k=1,3
             rt_rot_f(:,j)=rt_rot_f(:,j) + ( rt_f(:,k)-rt_com(k) )*u(j,k)
            enddo ! k
           enddo ! j
          endif ! qtrans
         endif ! qrota
!========================================================
        else ! not qorient
         do k=1,nforced
          ind=cv%amap%i(ind_f(k))
          r_f(k,1)=x(ind)
          r_f(k,2)=y(ind)
          r_f(k,3)=z(ind)
         enddo
        endif ! qorient
!========================================================
!
!    compute the RMSD
        theta=rmsd(r_f, rt_rot_f, fw)
!
        cv%r(i,previnst)=cv%r(i,instant)
        cv%r(i,instant)=theta
!
        if (deriv) then
!     initialize derivative arrays
         priv=>cv%priv(i)%amap_ptr ! this should copy the pointers statically; the pointers point to the _same_ data
         do jj=2,priv(1)+1         ! only a subset of indices needs to be considered
          j=priv(jj)
          do ii=1,2
           cv%gradx(i,j,ii)=zero;cv%grady(i,j,ii)=zero;cv%gradz(i,j,ii)=zero
          enddo
         enddo
!
         if (qdiffrot) then
          if (qtrans) then
!     compute COM contribution to gradient for orientation atoms:
!     also apply forces to forcing atoms
           r1(:)=zero;
           do k=1, nforced;
            ind=ind_f(k)
!x
            d = fw(k) * (r_f(k,1)-rt_rot_f(k,1))
            __INCR(cv%gradx(i,ind,1), d)
            __INCR(r1(1),d)
!y
            d = fw(k) * (r_f(k,2)-rt_rot_f(k,2))
            __INCR(cv%grady(i,ind,1), d)
            __INCR(r1(2),d)
!z
            d = fw(k) * (r_f(k,3)-rt_rot_f(k,3))
            __INCR(cv%gradz(i,ind,1), d)
            __INCR(r1(3),d)
           enddo
!     add forces to orientation atoms
           do j=obeg, oend
            ind=ind_o(j)
            __INCR(cv%gradx(i,ind,1),-r1(1)*ow(j))
            __INCR(cv%grady(i,ind,1),-r1(2)*ow(j))
            __INCR(cv%gradz(i,ind,1),-r1(3)*ow(j))
           enddo
          endif ! qtrans
!
          if (qrota) then ! quadratic computed only for rotational superposition
           if (qtrans) then ! translational superposition implies that COMs have been removed
!
            do j=1, nforced
             r2=fw(j)*r_f(j,:)
             do k=obeg, oend
              ind=ind_o(k)
!    note: am actually computing -forces here
              do p=1,3
               do q=1,3
                d=r2(p)*rt_f(j,q)
                __INCR(cv%gradx(i,ind,1), - ugrad(p,q,1,k) * d)
                __INCR(cv%grady(i,ind,1), - ugrad(p,q,2,k) * d)
                __INCR(cv%gradz(i,ind,1), - ugrad(p,q,3,k) * d)
               enddo ! q
              enddo ! p
             enddo ! k (orientation atoms)
            enddo ! j
!
           else ! not qtrans but qrota: need to subtract com from rt
            do j=1, nforced
             r2=fw(j) * ( r_f(j,:) - rt_com ) ! rt_com needs to be included here also
             do k=obeg, oend
              ind=ind_o(k)
!    note: am actually computing -forces here
              do p=1,3
               do q=1,3
                d=r2(p) * ( rt_f(j,q) - rt_com(q) )
                __INCR(cv%gradx(i,ind,1), - ugrad(p,q,1,k) * d)
                __INCR(cv%grady(i,ind,1), - ugrad(p,q,2,k) * d)
                __INCR(cv%gradz(i,ind,1), - ugrad(p,q,3,k) * d)
               enddo ! q
              enddo ! p
             enddo ! k (orientation atoms)
!     also add forces on the forcing/RMSD atoms:
             ind=ind_f(j)
             __INCR(cv%gradx(i,ind,1), (r_f(j,1)-rt_rot_f(j,1))*fw(j))
             __INCR(cv%grady(i,ind,1), (r_f(j,2)-rt_rot_f(j,2))*fw(j))
             __INCR(cv%gradz(i,ind,1), (r_f(j,3)-rt_rot_f(j,3))*fw(j))
            enddo ! j (forcing atoms)
           endif ! qtrans
          endif !qrota
!
         else ! not qdiffrot
!     apply forces to the forcing atoms
!     orientation atoms will feel a coupling force to rotations if qtrans=.false.
          do j=1,nforced
           ind=ind_f(j)
           cv%gradx(i,ind,1)=(r_f(j,1)-rt_rot_f(j,1))*fw(j)
           cv%grady(i,ind,1)=(r_f(j,2)-rt_rot_f(j,2))*fw(j)
           cv%gradz(i,ind,1)=(r_f(j,3)-rt_rot_f(j,3))*fw(j)
          enddo
         endif ! qdiffrot
!
!     scale derivatives by 1/theta and populate mass-weighted der. arrays
         if (theta.gt.tol) then
          d=one/theta
         else
          d=one ! avoid singularity at near zero separation
         endif
!
!      write(0,*) d !aa
         priv=>cv%priv(i)%amap_ptr
         do ii=2, priv(1)+1
          jj=priv(ii)
          j=cv%amap%i(jj) ! psf index
          w=sqrt(one/mass(j))
          cv%gradx(i,jj,1)=cv%gradx(i,jj,1)*d
          cv%gradx(i,jj,2)=cv%gradx(i,jj,1)*w
!
          cv%grady(i,jj,1)=cv%grady(i,jj,1)*d
          cv%grady(i,jj,2)=cv%grady(i,jj,1)*w
!
          cv%gradz(i,jj,1)=cv%gradz(i,jj,1)*d
          cv%gradz(i,jj,2)=cv%gradz(i,jj,1)*w
         enddo
        endif ! deriv
       else
        theta=cv%r(i,instant) ! assume valid theta has been computed in cv%r(i,instant)
       endif ! calctheta
!
!      NOTE that the forces calculated here are NOT acting on the CV, as in
!      the evolution subroutine, but on the simulation atoms
       dummy=cv%r(i,zcur)-theta ! zcur contains reference coords (combination of main+comp)
! FB modification (FB statistics updated outside):
       dummy=max(zero, dummy - cv%fbwidth(i)) + min(zero, dummy + cv%fbwidth(i))
!
       __CALC_CV_FORCE_ENERGY
!
       if (addforce) then
        if (present(fext)) f=fext ! override for planar sampling
!
        priv=>cv%priv(i)%amap_ptr
        do ii=2, priv(1)+1
         jj=priv(ii)
         j=cv%amap%i(jj) ! psf index
         fx(j)=fx(j)-f*cv%gradx(i,jj,1)
         fy(j)=fy(j)-f*cv%grady(i,jj,1)
         fz(j)=fz(j)-f*cv%gradz(i,jj,1)
        enddo
       endif ! addforce
!     free memory
       if (qorient) then
        deallocate(ind_o,r_o,rt_o,ow)
        if (qrota) deallocate(rt_rot_f)
        if (qdiffrot) then
         deallocate(ind_f,r_f,rt_f,fw)
         if (qrota.and.deriv) deallocate(ugrad)
        endif ! qdiffrot
       else
        deallocate(ind_f,r_f,rt_f,fw)
       endif ! qorient
!
       end subroutine cv_rmsd_calc
!cccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccc
       subroutine cv_rmsd_list(i)
       use cv_types
       __DEP_MULTICOM
       __DEP_MPI 
       __DEP_ATOMID
       __DEP_OUTPUT
!
 __DECLARE_MSGBUF
!
       int :: i, j, type, ii, jj, iatom
       character(len=8) :: sid, rid, ren, ac
!
       int :: norient, nforced
       bool :: qtrans, qrota, qdiffrot
       int, pointer, dimension(:) :: ind_o, ind_f
       __IAM(CV_RMSD_LIST)
!
       if (MPI_COMM_STRNG.eq.MPI_COMM_NULL) return ! only replica heads stay
!
!    check type just in case
       type=cv%type(i)
       if (type.ne.rmsd) then
        __WRN(whoami,' WRONG CV TYPE RECEIVED.')
       endif
!
       if (ME_STRNG.eq.0) then
        norient=cv%priv(i)%p(1)
        nforced=cv%priv(i)%p(2)
        qtrans=(cv%priv(i)%p(3).ne.0)
        qrota=(cv%priv(i)%p(4).ne.0)
        qdiffrot=(cv%priv(i)%p(5).ne.0)
!
! note that I currently cannot tell whether mass-weighting is requested
! am also not printing the weights
!
        ii=6; jj=ii+norient-1; ! both ii and jj must be defined for the two cases below
!
        if (qtrans.or.qrota) then
         allocate(ind_o(norient))
         ind_o=cv%priv(i)%p(ii:jj)
         write(_MSGBUF,'(A)') _TAB//' RMSD FROM REFERENCE, ORIENTATION ATOMS' ; __PRINT(_MSGBUF)
         do j=1, norient;
          iatom=cv%amap%i(ind_o(j))
          __ATOMID(iatom, sid, rid, ren, ac)
          write(_MSGBUF,667) _TAB,j, iatom, sid, rid, ren, ac             ; __PRINT(_MSGBUF)
         enddo
         deallocate(ind_o)
         if (qtrans) then
          write(_MSGBUF,'(A)') _TAB//' SUPERPOSITION INCLUDES TRANSLATIONAL ALIGNMENT'; __PRINT(_MSGBUF)
         endif
         if (qrota) then
          write(_MSGBUF,'(A)') _TAB//' SUPERPOSITION INCLUDES ROTATIONAL ALIGNMENT'; __PRINT(_MSGBUF)
         endif
!
         if (.not.qdiffrot) then
          write(_MSGBUF,'(A)')_TAB//' FORCED AND ORIENTATION ATOMS ARE THE SAME'  ; __PRINT(_MSGBUF)
         endif
!
        endif ! qtrans .or. qrota
!
        if (qdiffrot.or. .not.(qtrans .or. qrota) ) then
         allocate(ind_f(nforced))
         ii=jj+1; jj=ii+nforced-1; ind_f=cv%priv(i)%p(ii:jj)
         write(_MSGBUF,'(A)') _TAB//' RMSD FROM REFERENCE, FORCED ATOMS'     ; __PRINT(_MSGBUF)
         do j=1, nforced;
          iatom=cv%amap%i(ind_f(j)) ! actual psf index
          __ATOMID(iatom, sid, rid, ren, ac)
          write(_MSGBUF,667) _TAB,j, iatom, sid, rid, ren, ac            ; __PRINT(_MSGBUF)
         enddo
         deallocate(ind_f)
        endif
       endif ! ME_STRING
!
 667  format(A,2I8,' ',4A)
!
       end subroutine cv_rmsd_list
!cccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccc
__CHARMM_ONLY##ENDIF
      end module cv_rmsd
!
