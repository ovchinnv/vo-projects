##IF STRINGM						      |	__CHARMM_ONLY##IF STRINGM
##IF PARALLEL						      |	__CHARMM_ONLY##IF PARALLEL
      use cv_base ! `base' cv class			      |	      use cv_common ! `base' cv class
      use string					      |	      __DEP_OUTPUT
!       implicit none					      |	!       __IMPNONE
       real*8  :: k, gamma, weight			      |	       float  :: k, gamma, weight
       integer :: i, j, l, m, ind, num_int, ncom(2)	      |	       int :: i, j, l, m, ind, num_int, ncom(2)
       logical :: found, cv_dist_com_add		      |	       bool :: found, cv_dist_com_add
       character*17 :: whoami				      |	       character(len=17 :: whoami
        l=cv_base_add(k,gamma,weight,dist_com) ! get a new cv |	        l=cv_common_add(k,gamma,weight,dist_com) ! get a new 
         num_int = 2 + sum(ncom) ! number of integers needded |	         num_int = 2 + sum(ncom) ! number of ints needded for
           if (m.le.0) call wrndie(0, whoami,                 |	           if (m.le.0) __WRN( whoami,                        
         call wrndie(0, whoami,                               |	         __WRN( whoami,                                      
         call wrndie(0, whoami,                               |	         __WRN( whoami,                                      
      use string					      |	      __DEP_OUTPUT
!       implicit none					      |	!       __IMPNONE
       real*8 :: x(:), y(:), z(:),                            |	       float :: x(:), y(:), z(:),                            
       real*8, optional :: fext ! `external' force for planar |	       float, optional :: fext ! `external' force for planar 
       integer :: i ! cv index				      |	       int :: i ! cv index
       logical :: calctheta ! whether or not to calculate the |	       bool :: calctheta ! whether or not to calculate theta(
       logical :: deriv    ! whether or not to calculate deri |	       bool :: deriv    ! whether or not to calculate derivat
       logical :: addforce ! whether or not to add forces on  |	       bool :: addforce ! whether or not to add forces on sim
       real*8, parameter :: tol=1.0e-10			      |	       float, parameter :: tol=1.0e-10
       real*8 :: dummy					      |	       float :: dummy
       integer, allocatable, dimension(:) :: ind1, ind2	      |	       int, allocatable, dimension(:) :: ind1, ind2
       real*8, allocatable, dimension(:)  :: x1, x2	      |	       float, allocatable, dimension(:)  :: x1, x2
       real*8, allocatable, dimension(:)  :: y1, y2	      |	       float, allocatable, dimension(:)  :: y1, y2
       real*8, allocatable, dimension(:)  :: z1, z2	      |	       float, allocatable, dimension(:)  :: z1, z2
       real*8, allocatable, dimension(:)  :: m1, m2	      |	       float, allocatable, dimension(:)  :: m1, m2
       integer :: ncom1, ncom2, ind ! , indpsf		      |	       int :: ncom1, ncom2, ind ! , indpsf
       integer :: j, ii, jj				      |	       int :: j, ii, jj
       real*8 :: theta,                                       |	       float :: theta,                                       
       integer, pointer :: priv(:)			      |	       int, pointer :: priv(:)
      use string					      |	      __DEP_OUTPUT
!       implicit none					      |	!       __IMPNONE
      use stream 					      |	      __DEP_PARSER 
      use multicom_ltm       !##MULTICOM		      |	      __DEP_MULTICOM       !__CHARMM_ONLY##MULTICOM
      use mpi 						      |	      __DEP_MPI 
      use chutil, only : atomid				      |	      __DEP_ATOMID, only : atomid
       integer :: i, j, type, ii, jj, iatom		      |	       int :: i, j, type, ii, jj, iatom
       character*8 :: sid, rid, ren, ac			      |	       character(len=8 :: sid, rid, ren, ac
       character*18 :: whoami				      |	       character(len=18 :: whoami
       integer :: ncom1, ncom2				      |	       int :: ncom1, ncom2
       integer, allocatable, dimension(:) :: ind1, ind2	      |	       int, allocatable, dimension(:) :: ind1, ind2
        call wrndie(0,whoami,' WRONG CV TYPE RECEIVED.')      |	        __WRN(whoami,' WRONG CV TYPE RECEIVED.')
        write(outu,'(A)') '\t DISTANCE-COM, GROUP 1'	      |	        write(_MSGBUF,'(A)') '\t DISTANCE-COM, GROUP 1'
         write(outu,667) '\t',j, iatom, sid, rid, ren, ac     |	         write(_MSGBUF,667) '\t',j, iatom, sid, rid, ren, ac
        write(outu,'(A)') '\t DISTANCE-COM, GROUP 2'	      |	        write(_MSGBUF,'(A)') '\t DISTANCE-COM, GROUP 2'
         write(outu,667) '\t',j, iatom, sid, rid, ren, ac     |	         write(_MSGBUF,667) '\t',j, iatom, sid, rid, ren, ac
##ENDIF							      |	__CHARMM_ONLY##ENDIF
##ENDIF							      |	__CHARMM_ONLY##ENDIF
