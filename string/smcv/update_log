##IF PARALLEL						      |	__CHARMM_ONLY##IF PARALLEL
##IF STRINGM						      |	__CHARMM_ONLY##IF STRINGM
      use cv_base					      |	      use cv_common
      use string					      |	      __DEP_OUTPUT
!      implicit none					      |	!      __IMPNONE
      use stream 					      |	      __DEP_PARSER 
      use multicom_ltm       !##MULTICOM		      |	      __DEP_MULTICOM       !__CHARMM_ONLY##MULTICOM
      use mpi 						      |	      __DEP_MPI 
      real*8 :: x(:), y(:), z(:),                             |	      float :: x(:), y(:), z(:),                             
      integer :: iteration ! MD iteration		      |	      int :: iteration ! MD iteration
      real*8 :: s					      |	      float :: s
      character*11 :: whoami				      |	      character(len=11 :: whoami
      logical :: qgrp					      |	      bool :: qgrp
      integer :: i, bug, qfac				      |	      int :: i, bug, qfac
      if (.not.cv_base_grad_initialized) call cv_base_grad_in |	      if (.not.cv_common_grad_initialized) call cv_common_gra
      if (.not.cv_base_weights_initialized) then	      |	      if (.not.cv_common_weights_initialized) then
       call wrndie(0, whoami,                                 |	       __WRN( whoami,                                        
      if (planar_on.and..not.cv_base_dz_initialized) then     |	      if (planar_on.and..not.cv_common_dz_initialized) then
       call wrndie(0, whoami,                                 |	       __WRN( whoami,                                        
       call cv_base_compute_dr()			      |	       call cv_common_compute_dr()
      if (planar_on.and..not.cv_base_k_initialized) then      |	      if (planar_on.and..not.cv_common_k_initialized) then
       call wrndie(0, whoami,                                 |	       __WRN( whoami,                                        
        if (prnlev.ge.3) write(outu, 6765) whoami, whoami, wh |	        if (prnlev.ge.3) write(_MSGBUF, 6765) whoami, whoami,
       call cv_base_compute_k()				      |	       call cv_common_compute_k()
         if (prnlev.ge.3.and..not.string_noprint) write(outu, |	         if (prnlev.ge.3.and..not.string_noprint) write(_MSGB
           call cv_base_evolve_expo(evolve_expo_mem, evolve_n |	           call cv_common_evolve_expo(evolve_expo_mem, evolve
           call cv_base_evolve_expo( 1d0-1d0/num_ave_cv_sampl |	           call cv_common_evolve_expo( 1d0-1d0/num_ave_cv_sam
           call cv_base_smooth_hist(evolve_smooth_d, evolve_n |	           call cv_common_smooth_hist(evolve_smooth_d, evolve
       call MPI_ALLREDUCE(cv%M(1,1,1),cv%M(1,1,2),max_cv_base |	       call MPI_ALLREDUCE(cv%M(1,1,1),cv%M(1,1,2),max_cv_comm
     &          MPI_DOUBLE_PRECISION, MPI_SUM, MPI_COMM_LOCAL |	     &          mpifloat, MPI_SUM, MPI_COMM_LOCAL, bug)
          call cv_base_compute_Minv()			      |	          call cv_common_compute_Minv()
          call cv_base_evolve_smcv(evolve_step) ! Euler strin |	          call cv_common_evolve_smcv(evolve_step) ! Euler str
!       call cv_base_compute_wgt() ! compute weight from M    |	!       call cv_common_compute_wgt() ! compute weight from M
         if (cv_base_voronoi_initialized)                     |	         if (cv_common_voronoi_initialized)                  
           if (prnlev.ge.3.and..not.string_noprint) write(out |	           if (prnlev.ge.3.and..not.string_noprint) write(_MS
           if (cv_base_voronoi_initialized)                   |	           if (cv_common_voronoi_initialized)                
         if (prnlev.ge.3.and..not.string_noprint) write(outu, |	         if (prnlev.ge.3.and..not.string_noprint) write(_MSGB
           if (prnlev.ge.3) write(outu,'(2A)')                |	           if (prnlev.ge.3) write(_MSGBUF,'(2A)')            
      use string					      |	      __DEP_OUTPUT
!      implicit none					      |	!      __IMPNONE
      use multicom_ltm       !##MULTICOM		      |	      __DEP_MULTICOM       !__CHARMM_ONLY##MULTICOM
      use consta 					      |	      __DEP_CONST 
      use mpi 						      |	      __DEP_MPI 
      real*8 :: x(:), y(:), z(:), mass(:),                    |	      float :: x(:), y(:), z(:), mass(:),                    
      real*8, optional :: t				      |	      float, optional :: t
      real*8 :: dummy					      |	      float :: dummy
      real*8 :: q0(4),q1(4),q12(4),W			      |	      float :: q0(4),q1(4),q12(4),W
      integer :: k					      |	      int :: k
      integer :: i, j, qbeg, qend, ibeg, iend, bug	      |	      int :: i, j, qbeg, qend, ibeg, iend, bug
      real*8 :: s, one_m_s, r, r1, fpre, f, fpara, fperp, qno |	      float :: s, one_m_s, r, r1, fpre, f, fpara, fperp, qnor
      logical :: deriv, addforce, addforce2, calctheta, qgrp  |	      bool :: deriv, addforce, addforce2, calctheta, qgrp
      character*15 :: whoami				      |	      character(len=15 :: whoami
           call wrndie(0, whoami, 'UNKNOWN CV SPECIFIED.')    |	           __WRN( whoami, 'UNKNOWN CV SPECIFIED.')
           call wrndie(0,' SMCV_ADDFORCE>','UNKNOWN CV SPECIF |	           __WRN(' SMCV_ADDFORCE>','UNKNOWN CV SPECIFIED.')
      use string					      |	      __DEP_OUTPUT
!      implicit none					      |	!      __IMPNONE
      use multicom_ltm       !##MULTICOM		      |	      __DEP_MULTICOM       !__CHARMM_ONLY##MULTICOM
      use consta 					      |	      __DEP_CONST 
      use mpi 						      |	      __DEP_MPI 
      real*8 :: x(:), y(:), z(:), mass(:) ! mass(size(x,1))   |	      float :: x(:), y(:), z(:), mass(:) ! mass(size(x,1))
      logical :: update_average ! whether the current dataset |	      bool :: update_average ! whether the current dataset sh
      integer :: i, j, k, imap, ibeg, iend, kbeg, kend, bug   |	      int :: i, j, k, imap, ibeg, iend, kbeg, kend, bug
      real*8 :: u, v, t, t1, dot_pr			      |	      float :: u, v, t, t1, dot_pr
      logical :: deriv, calctheta, qgrp, qgrp1		      |	      bool :: deriv, calctheta, qgrp, qgrp1
      real*8, allocatable :: gradi(:), gradj(:)		      |	      float, allocatable :: gradi(:), gradj(:)
      real*8 cvlist(cv%num_cv) ! for new M tensor computation |	      float cvlist(cv%num_cv) ! for new M tensor computation
      integer :: cvlistsize, ii, jj			      |	      int :: cvlistsize, ii, jj
      character*15 :: whoami				      |	      character(len=15 :: whoami
      if (.not.cv_base_grad_initialized) call cv_base_grad_in |	      if (.not.cv_common_grad_initialized) call cv_common_gra
       call wrndie(0, whoami, 'NO CV DEFINED.')		      |	       __WRN( whoami, 'NO CV DEFINED.')
      j=cv_base_add_hist() ! determine index into the history |	      j=cv_common_add_hist() ! determine index into the histo
         call wrndie(0, whoami, 'UNKNOWN CV SPECIFIED.')      |	         __WRN( whoami, 'UNKNOWN CV SPECIFIED.')
      use string					      |	      __DEP_OUTPUT
!      implicit none					      |	!      __IMPNONE
      use multicom_ltm       !##MULTICOM		      |	      __DEP_MULTICOM       !__CHARMM_ONLY##MULTICOM
      use consta 					      |	      __DEP_CONST 
      use stream 					      |	      __DEP_PARSER 
      use mpi 						      |	      __DEP_MPI 
      real*8 :: x(:), y(:), z(:), mass(:) ! mass(size(x,1))   |	      float :: x(:), y(:), z(:), mass(:) ! mass(size(x,1))
      integer :: itime					      |	      int :: itime
      integer :: i, j, ibeg, iend, bug, stat(MPI_STATUS_SIZE) |	      int :: i, j, ibeg, iend, bug, stat(MPI_STATUS_SIZE)
      logical :: calctheta, deriv, qgrp			      |	      bool :: calctheta, deriv, qgrp
      integer :: which   ! replica with which the exchange wa |	      int :: which   ! replica with which the exchange was at
      logical :: success ! whether the exchange attempt was s |	      bool :: success ! whether the exchange attempt was succ
      integer :: nodelist(nstring) ! holds new string replica |	      int :: nodelist(nstring) ! holds new string replica ord
      integer :: itype ! MPI_INTEGER type		      |	      int :: itype ! MPI_INTEGER type
      real*8 :: r_send(1:cv%num_cv, 1:5) ! cv values to send  |	      float :: r_send(1:cv%num_cv, 1:5) ! cv values to send t
      real*8 :: r_recv(1:cv%num_cv, 1:5) ! cv values to recei |	      float :: r_recv(1:cv%num_cv, 1:5) ! cv values to receiv
      real*8 :: dummy1, dummy2, dE_me, dE		      |	      float :: dummy1, dummy2, dE_me, dE
      character*150 :: fnames(5)              ! for storing o |	      character(len=150 :: fnames(5)              ! for stori
      character*150 :: new_fnames(5)          ! for storing s |	      character(len=150 :: new_fnames(5)          ! for stori
      logical :: openun(5), qform, qwrite		      |	      bool :: openun(5), qform, qwrite
      integer :: oldiol					      |	      int :: oldiol
!      real*8 :: dEG(nstring) !aa			      |	!      float :: dEG(nstring) !aa
      character*20 :: whoami				      |	      character(len=20 :: whoami
      if (.not.cv_base_rex_initialized) call cv_base_rex_init |	      if (.not.cv_common_rex_initialized) call cv_common_rex_
       call wrndie(0, whoami, 'NO CV DEFINED.')		      |	       __WRN( whoami, 'NO CV DEFINED.')
         call wrndie(0, whoami, 'UNKNOWN CV SPECIFIED.')      |	         __WRN( whoami, 'UNKNOWN CV SPECIFIED.')
        call MPI_SENDRECV(r_send, 5*cv%num_cv, MPI_DOUBLE_PRE |	        call MPI_SENDRECV(r_send, 5*cv%num_cv, mpifloat,    &
     &   which, which, r_recv, 5*cv%num_cv, MPI_DOUBLE_PRECIS |	     &   which, which, r_recv, 5*cv%num_cv, mpifloat,       &
!     3) calculate string energies (code adopted from cv_base |	!     3) calculate string energies (code adopted from cv_comm
        call cv_base_rex_compute_dE(r_recv(:,1), dE_me)	      |	        call cv_common_rex_compute_dE(r_recv(:,1), dE_me)
        call MPI_SENDRECV(dE_me, 1, MPI_DOUBLE_PRECISION,     |	        call MPI_SENDRECV(dE_me, 1, mpifloat,               &
     &   which, which, dE, 1, MPI_DOUBLE_PRECISION,           |	     &   which, which, dE, 1, mpifloat,                     &
       itype=MPI_INTEGER                       !##.not.INTEGE |	       itype=MPI_INTEGER                       !__CHARMM_ONLY
       itype=MPI_INTEGER8                      !##INTEGER8    |	       itype=MPI_INTEGER8                      !__CHARMM_ONLY
         call trima(new_fnames(1), i)			      |	         call __TRIMA(new_fnames(1), i)
         call trima(new_fnames(2), i)			      |	         call __TRIMA(new_fnames(2), i)
!        call MPI_ALLGATHER(dE, 1, MPI_DOUBLE_PRECISION,      |	!        call MPI_ALLGATHER(dE, 1, mpifloat,
!     &   dEG, 1, MPI_DOUBLE_PRECISION, MPI_COMM_STRNG, bug)  |	!     &   dEG, 1, mpifloat, MPI_COMM_STRNG, bug)
       call PSND4(success,1)				      |	       call __BROADCAST_LOCAL_4B(success,1)
       call PSND4(nodelist,nstring)             !##.not.INTEG |	       call __BROADCAST_LOCAL_4B(nodelist,nstring)           
       call PSND8(nodelist,nstring)             !##INTEGER8   |	       call __BROADCAST_LOCAL_8B(nodelist,nstring)           
       if (success) call PSND8(r_recv,cv%num_cv*5)	      |	       if (success) call __BROADCAST_LOCAL_8B(r_recv,cv%num_c
       call PSND4(mestring,1)             !##.not.INTEGER8    |	       call __BROADCAST_LOCAL_4B(mestring,1)             !__C
       call PSND8(mestring,1)             !##INTEGER8	      |	       call __BROADCAST_LOCAL_8B(mestring,1)             !__C
      use string					      |	      __DEP_OUTPUT
!      implicit none					      |	!      __IMPNONE
      real*8 :: rx(:), ry(:), rz(:)			      |	      float :: rx(:), ry(:), rz(:)
      integer, optional :: c				      |	      int, optional :: c
!							      |	!
      integer :: col					      |	      int :: col
!							      |	!
      integer :: i					      |	      int :: i
      real*8 :: dcv					      |	      float :: dcv
      character*20 :: whoami				      |	      character(len=20 :: whoami
      if (.not.cv_base_grad_initialized) call cv_base_grad_in |	      if (.not.cv_common_grad_initialized) call cv_common_gra
       call wrndie(0,whoami,'NO CV DEFINED.')		      |	       __WRN(whoami,'NO CV DEFINED.')
        case default; call wrndie(0,whoami,'UNKNOWN CV SPECIF |	        case default; __WRN(whoami,'UNKNOWN CV SPECIFIED.')
      use string					      |	      __DEP_OUTPUT
!      implicit none					      |	!      __IMPNONE
      real*8 :: rx(:), ry(:), rz(:)			      |	      float :: rx(:), ry(:), rz(:)
      integer, optional :: c				      |	      int, optional :: c
      integer :: col					      |	      int :: col
      real*8 :: dummy					      |	      float :: dummy
      integer :: i					      |	      int :: i
      character*21 :: whoami				      |	      character(len=21 :: whoami
      if (.not.cv_base_grad_initialized) call cv_base_grad_in |	      if (.not.cv_common_grad_initialized) call cv_common_gra
       call wrndie(0,whoami,'NO CV DEFINED.')		      |	       __WRN(whoami,'NO CV DEFINED.')
        case default; call wrndie(0,whoami,'UNKNOWN CV SPECIF |	        case default; __WRN(whoami,'UNKNOWN CV SPECIFIED.')
      use string					      |	      __DEP_OUTPUT
!      implicit none					      |	!      __IMPNONE
      real*8 :: x(:), y(:), z(:), mass(:) ! mass(size(x,1))   |	      float :: x(:), y(:), z(:), mass(:) ! mass(size(x,1))
      integer, optional :: c				      |	      int, optional :: c
!							      |	!
      integer :: i					      |	      int :: i
      logical :: calcz, deriv				      |	      bool :: calcz, deriv
      character*11 :: whoami				      |	      character(len=11 :: whoami
      if (.not.cv_base_grad_initialized) call cv_base_grad_in |	      if (.not.cv_common_grad_initialized) call cv_common_gra
       call wrndie(0,whoami,'NO CV DEFINED.')		      |	       __WRN(whoami,'NO CV DEFINED.')
        case default; call wrndie(0,whoami,'UNKNOWN CV SPECIF |	        case default; __WRN(whoami,'UNKNOWN CV SPECIFIED.')
        call cv_base_fill(i,cv%r(i,instant),c)		      |	        call cv_common_fill(i,cv%r(i,instant),c)
        call cv_base_fill(i,cv%r(i,instant))		      |	        call cv_common_fill(i,cv%r(i,instant))
      use string					      |	      __DEP_OUTPUT
!      implicit none					      |	!      __IMPNONE
      real*8 :: x(:), y(:), z(:), mass(:) ! mass(size(x,1))   |	      float :: x(:), y(:), z(:), mass(:) ! mass(size(x,1))
      real*8 :: h					      |	      float :: h
      real*8, pointer :: error(:,:), smcv_test_grad_fd(:,:)   |	      float, pointer :: error(:,:), smcv_test_grad_fd(:,:)
      real*8 :: grad(cv%num_cv,cv%amap%last,3) ! temporary gr |	      float :: grad(cv%num_cv,cv%amap%last,3) ! temporary gra
      integer :: i, j, jj				      |	      int :: i, j, jj
      real*8 :: dummy					      |	      float :: dummy
      character*19 :: whoami				      |	      character(len=19 :: whoami
       call wrndie(0,whoami,'NO CV DEFINED.')		      |	       __WRN(whoami,'NO CV DEFINED.')
       call wrndie(0,whoami,'COORDINATE PERTURBATION ZERO.')  |	       __WRN(whoami,'COORDINATE PERTURBATION ZERO.')
      use string					      |	      __DEP_OUTPUT
!      implicit none					      |	!      __IMPNONE
      use multicom_ltm       !##MULTICOM		      |	      __DEP_MULTICOM       !__CHARMM_ONLY##MULTICOM
      use mpi 						      |	      __DEP_MPI 
      real*8 :: x(:), y(:), z(:), mass(:) ! mass(size(x,1))   |	      float :: x(:), y(:), z(:), mass(:) ! mass(size(x,1))
      real*8, pointer :: error(:,:), smcv_test_parallel(:,:)  |	      float, pointer :: error(:,:), smcv_test_parallel(:,:)
      real*8 :: grad(cv%num_cv,cv%amap%last,3) ! temporary gr |	      float :: grad(cv%num_cv,cv%amap%last,3) ! temporary gra
!							      |	!
      integer :: i					      |	      int :: i
      logical :: qcv, qfr, qqt				      |	      bool :: qcv, qfr, qqt
      logical :: qgrp					      |	      bool :: qgrp
      real*8 :: dummy(size(x,1))			      |	      float :: dummy(size(x,1))
      character*20 :: whoami				      |	      character(len=20 :: whoami
       call wrndie(0,whoami,'NO CV DEFINED.')		      |	       __WRN(whoami,'NO CV DEFINED.')
      call cv_base_neq_work_init()			      |	      call cv_common_neq_work_init()
      use string					      |	      __DEP_OUTPUT
!      implicit none					      |	!      __IMPNONE
      use multicom_ltm       !##MULTICOM		      |	      __DEP_MULTICOM       !__CHARMM_ONLY##MULTICOM
       real*8 :: x(:), y(:), z(:), mass(:) ! mass(size(x,1))  |	       float :: x(:), y(:), z(:), mass(:) ! mass(size(x,1))
      logical :: calcz, deriv, addforce			      |	      bool :: calcz, deriv, addforce
      integer :: i					      |	      int :: i
      real*8 :: rtemp(cv%num_cv) ! for storing current CV val |	      float :: rtemp(cv%num_cv) ! for storing current CV valu
      character*23 :: whoami				      |	      character(len=23 :: whoami
         call wrndie(0, whoami, 'UNKNOWN CV SPECIFIED.')      |	         __WRN( whoami, 'UNKNOWN CV SPECIFIED.')
      cv%voronoi_whereami=cv_base_voronoi_compute(rtemp)      |	      cv%voronoi_whereami=cv_common_voronoi_compute(rtemp)
      use string					      |	      __DEP_OUTPUT
!      implicit none					      |	!      __IMPNONE
      use multicom_ltm       !##MULTICOM		      |	      __DEP_MULTICOM       !__CHARMM_ONLY##MULTICOM
      use mpi 						      |	      __DEP_MPI 
      real*8 :: x(:), y(:), z(:)			      |	      float :: x(:), y(:), z(:)
      real*8 :: mass(:) ! assumed shape			      |	      float :: mass(:) ! assumed shape
!      real*8 :: mass(size(x,1)) ! assumed size		      |	!      float :: mass(size(x,1)) ! assumed size
      integer :: itime ! timestep -- needed by new version of |	      int :: itime ! timestep -- needed by new version of Vor
      integer :: i, j, k, l, m, which, me		      |	      int :: i, j, k, l, m, which, me
      integer*4 :: bug					      |	      int4mpi :: bug
      integer*4 :: length(nstring-1)			      |	      int4mpi :: length(nstring-1)
      integer*4 :: request(nstring-1)			      |	      int4mpi :: request(nstring-1)
      logical :: smcv_voronoi_compute ! returns false if thet |	      bool :: smcv_voronoi_compute ! returns false if theta_i
      logical :: calcz, deriv, addforce			      |	      bool :: calcz, deriv, addforce
      real*8 :: rtemp(cv%num_cv) ! for storing current CV val |	      float :: rtemp(cv%num_cv) ! for storing current CV valu
!							      |	!
      integer, allocatable :: vtemp(:), vtemp2(:)        ! fo |	      int, allocatable :: vtemp(:), vtemp2(:)        ! for ga
      integer*4 :: stat(MPI_STATUS_SIZE)		      |	      int4mpi :: stat(MPI_STATUS_SIZE)
      logical :: voronoi_update				      |	      bool :: voronoi_update
      logical :: success, qgrp, qstring, ready(nstring-1), ok |	      bool :: success, qgrp, qstring, ready(nstring-1), ok
      real*8 :: P_accept_cross				      |	      float :: P_accept_cross
!      real*8 :: flux(nstring, nstring), ! normalized probabi |	!      float :: flux(nstring, nstring), ! normalized probabil
!      integer :: permut(nstring), d, code ! for LU decomposi |	!      int :: permut(nstring), d, code ! for LU decomposition
      character*22 :: whoami				      |	      character(len=22 :: whoami
       call wrndie(0, whoami, 'NO CV DEFINED.')		      |	       __WRN( whoami, 'NO CV DEFINED.')
     &     MPI_INTEGER,                                       |	     &     MPI_INTEGER,                                      
     &     MPI_INTEGER8,                                      |	     &     MPI_INTEGER8,                                     
                call MPI_Get_count(stat,MPI_INTEGER,length(m) |	                call MPI_Get_count(stat,MPI_INTEGER,length(m)
                call MPI_Get_count(stat,MPI_INTEGER8,length(m |	                call MPI_Get_count(stat,MPI_INTEGER8,length(m
     &      MPI_INTEGER,                                      |	     &      MPI_INTEGER,                                     
     &      MPI_INTEGER8,                                     |	     &      MPI_INTEGER8,                                    
         call wrndie(0, whoami, 'UNKNOWN CV SPECIFIED.')      |	         __WRN( whoami, 'UNKNOWN CV SPECIFIED.')
     &     MPI_INTEGER,                                       |	     &     MPI_INTEGER,                                      
     &     MPI_INTEGER8,                                      |	     &     MPI_INTEGER8,                                     
         call MPI_Get_count(stat,MPI_INTEGER,length(1),bug)   |	         call MPI_Get_count(stat,MPI_INTEGER,length(1),bug)  
         call MPI_Get_count(stat,MPI_INTEGER8,length(1),bug)  |	         call MPI_Get_count(stat,MPI_INTEGER8,length(1),bug) 
     &      MPI_INTEGER,                                      |	     &      MPI_INTEGER,                                     
     &      MPI_INTEGER8,                                     |	     &      MPI_INTEGER8,                                    
      which=cv_base_voronoi_compute(rtemp)		      |	      which=cv_common_voronoi_compute(rtemp)
        if (qgrp) call PSND4(success,1)			      |	        if (qgrp) call __BROADCAST_LOCAL_4B(success,1)
      use string					      |	      __DEP_OUTPUT
!      implicit none					      |	!      __IMPNONE
      use multicom_ltm       !##MULTICOM		      |	      __DEP_MULTICOM       !__CHARMM_ONLY##MULTICOM
      use mpi 						      |	      __DEP_MPI 
!      real*8 :: dx(:), dy(:), dz(:), xcomp(:), ycomp(:), zco |	!      float :: dx(:), dy(:), dz(:), xcomp(:), ycomp(:), zcom
      real*8 :: x(:), y(:), z(:), xcomp(:), ycomp(:), zcomp(: |	      float :: x(:), y(:), z(:), xcomp(:), ycomp(:), zcomp(:)
      real*8 :: mass(:) ! mass(size(x,1))		      |	      float :: mass(:) ! mass(size(x,1))
      integer :: i, iteration				      |	      int :: i, iteration
      logical :: calcz, deriv, addforce			      |	      bool :: calcz, deriv, addforce
      real*8 :: rnew(cv%num_cv) ! for storing current CV valu |	      float :: rnew(cv%num_cv) ! for storing current CV value
      real*8 :: rold(cv%num_cv) ! for storing additional (old |	      float :: rold(cv%num_cv) ! for storing additional (old)
      real*8 :: A(3,3,frames%num_frames), o(3,frames%num_fram |	      float :: A(3,3,frames%num_frames), o(3,frames%num_frame
      character*27 :: whoami				      |	      character(len=27 :: whoami
       call wrndie(0, whoami, 'NO CV DEFINED.')		      |	       __WRN( whoami, 'NO CV DEFINED.')
          call wrndie(0, whoami, 'UNKNOWN CV SPECIFIED.')     |	          __WRN( whoami, 'UNKNOWN CV SPECIFIED.')
          call wrndie(0, whoami, 'UNKNOWN CV SPECIFIED.')     |	          __WRN( whoami, 'UNKNOWN CV SPECIFIED.')
       call cv_base_voronoi_smart_update(rnew,rold)	      |	       call cv_common_voronoi_smart_update(rnew,rold)
      use string					      |	      __DEP_OUTPUT
!      implicit none					      |	!      __IMPNONE
      use stream 					      |	      __DEP_PARSER 
      use multicom_ltm       !##MULTICOM		      |	      __DEP_MULTICOM       !__CHARMM_ONLY##MULTICOM
      use mpi 						      |	      __DEP_MPI 
      integer :: i					      |	      int :: i
      character*11 :: whoami				      |	      character(len=11 :: whoami
      logical :: qprint					      |	      bool :: qprint
       if (qprint) write(outu,666) whoami,i		      |	       if (qprint) write(_MSGBUF,666) whoami,i
          call wrndie(0, whoami, 'UNEXPECTED CV SPECIFIED.')  |	          __WRN( whoami, 'UNEXPECTED CV SPECIFIED.')
      use string					      |	      __DEP_OUTPUT
!      implicit none             ! note that this routine cle |	!      __IMPNONE             ! note that this routine clears 
      use mpi 						      |	      __DEP_MPI 
      use multicom_ltm       !##MULTICOM		      |	      __DEP_MULTICOM       !__CHARMM_ONLY##MULTICOM
      real*8 :: x(:), y(:), z(:), mass(:) ! mass(size(x,1))   |	      float :: x(:), y(:), z(:), mass(:) ! mass(size(x,1))
      logical :: qgrp					      |	      bool :: qgrp
      integer :: bug					      |	      int :: bug
      if (.not. cv_base_Minv_initialized)                     |	      if (.not. cv_common_Minv_initialized)                  
      call cv_base_compute_wgt() ! compute weights from M inv |	      call cv_common_compute_wgt() ! compute weights from M i
      use string					      |	      __DEP_OUTPUT
!      implicit none             ! note that this routine cle |	!      __IMPNONE             ! note that this routine clears 
      use mpi 						      |	      __DEP_MPI 
      use multicom_ltm       !##MULTICOM		      |	      __DEP_MULTICOM       !__CHARMM_ONLY##MULTICOM
      real*8 :: x(:), y(:), z(:), mass(:) ! mass(size(x,1))   |	      float :: x(:), y(:), z(:), mass(:) ! mass(size(x,1))
      logical :: inverse ! should inverse be computed?	      |	      bool :: inverse ! should inverse be computed?
      logical :: qgrp					      |	      bool :: qgrp
      integer :: bug					      |	      int :: bug
      call cv_base_clear_hist() ! clear history		      |	      call cv_common_clear_hist() ! clear history
       call MPI_ALLREDUCE(cv%M(1,1,1),cv%M(1,1,2),max_cv_base |	       call MPI_ALLREDUCE(cv%M(1,1,1),cv%M(1,1,2),max_cv_comm
     & MPI_DOUBLE_PRECISION, MPI_SUM, MPI_COMM_LOCAL, bug)    |	     & mpifloat, MPI_SUM, MPI_COMM_LOCAL, bug)
      if (inverse) call cv_base_compute_Minv(inverse_LU)      |	      if (inverse) call cv_common_compute_Minv(inverse_LU)
      call cv_base_clear_hist() ! clear history		      |	      call cv_common_clear_hist() ! clear history
      use string					      |	      __DEP_OUTPUT
!      implicit none					      |	!      __IMPNONE
      real*8, intent (in)  :: x(:), y(:), z(:), mass(:) ! mas |	      float, intent (in)  :: x(:), y(:), z(:), mass(:) ! mass
      real*8 :: diff					      |	      float :: diff
      real*8 :: temp(cv%num_cv, cv%num_cv)		      |	      float :: temp(cv%num_cv, cv%num_cv)
      logical :: qlu					      |	      bool :: qlu
      use string					      |	      __DEP_OUTPUT
!      implicit none					      |	!      __IMPNONE
      use mpi 						      |	      __DEP_MPI 
      use multicom_ltm       !##MULTICOM		      |	      __DEP_MULTICOM       !__CHARMM_ONLY##MULTICOM
      real*8 :: x(:), y(:), z(:), mass(:) ! mass(size(x,1))   |	      float :: x(:), y(:), z(:), mass(:) ! mass(size(x,1))
      integer :: ibeg, iend, i, bug			      |	      int :: ibeg, iend, i, bug
      integer*4 :: qfac, ffac				      |	      int4mpi :: qfac, ffac
!      real*8, allocatable :: trash(:,:,:,:,:)		      |	!      float, allocatable :: trash(:,:,:,:,:)
!     & cv%amap%last, MPI_DOUBLE_PRECISION, frames%o,	      |	!     & cv%amap%last, mpifloat, frames%o,
!     & MPI_DOUBLE_PRECISION, MPI_COMM_LOCAL, bug)	      |	!     & mpifloat, MPI_COMM_LOCAL, bug)
     &     fr_send_count(ME_LOCAL+1)*ffac, MPI_DOUBLE_PRECISI |	     &     fr_send_count(ME_LOCAL+1)*ffac, mpifloat,        &
     &     MPI_DOUBLE_PRECISION, MPI_COMM_LOCAL, bug)	      |	     &     mpifloat, MPI_COMM_LOCAL, bug)
!     &     fr_send_count(ME_LOCAL+1)*ffac, MPI_DOUBLE_PRECIS |	!     &     fr_send_count(ME_LOCAL+1)*ffac, mpifloat,
!     &     MPI_DOUBLE_PRECISION, MPI_COMM_LOCAL, bug)	      |	!     &     mpifloat, MPI_COMM_LOCAL, bug)
     &     qt_send_count(ME_LOCAL+1)*qfac, MPI_DOUBLE_PRECISI |	     &     qt_send_count(ME_LOCAL+1)*qfac, mpifloat,        &
     &     MPI_DOUBLE_PRECISION, MPI_COMM_LOCAL, bug)	      |	     &     mpifloat, MPI_COMM_LOCAL, bug)
##ENDIF							      |	__CHARMM_ONLY##ENDIF
##ENDIF							      |	__CHARMM_ONLY##ENDIF
