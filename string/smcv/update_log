##IF STRINGM						      |	__CHARMM_ONLY##IF STRINGM
      use cv_base ! `base' cv class			      |	      use cv_common ! `base' cv class
      use string					      |	      __DEP_OUTPUT
!       implicit none					      |	!       __IMPNONE
       real*8  :: k, gamma, weight			      |	       float  :: k, gamma, weight
       integer, optional :: frame ! reference frame	      |	       int, optional :: frame ! reference frame
       integer :: type, j, l, m, ind, num_int, ncom, ii, jj,  |	       int :: type, j, l, m, ind, num_int, ncom, ii, jj, ncom
       integer, allocatable :: indf(:)			      |	       int, allocatable :: indf(:)
       logical :: found, cv_posi_com_add		      |	       bool :: found, cv_posi_com_add
       character*17 :: whoami				      |	       character(len=17 :: whoami
       character*1 :: pos				      |	       character(len=1 :: pos
       logical :: ok					      |	       bool :: ok
         call wrndie(0, whoami, 'UNKNOWN CV TYPE. NOTHING DON |	         __WRN( whoami, 'UNKNOWN CV TYPE. NOTHING DONE.')
        l=cv_base_add(k,gamma,weight,type) ! get a new cv ind |	        l=cv_common_add(k,gamma,weight,type) ! get a new cv i
         num_int = 1 + ncom + 1 ! number of integers needded  |	         num_int = 1 + ncom + 1 ! number of ints needded for 
           if (m.le.0) call wrndie(0, whoami,                 |	           if (m.le.0) __WRN( whoami,                        
           call wrndie(0, whoami,                             |	           __WRN( whoami,                                    
         call wrndie(0, whoami,                               |	         __WRN( whoami,                                      
         call wrndie(0,' CV_POSI_COM_ADD>',                   |	         __WRN(' CV_POSI_COM_ADD>',                          
      use string					      |	      __DEP_OUTPUT
!       implicit none					      |	!       __IMPNONE
       real*8 :: x(:), y(:), z(:), fx(:), fy(:), fz(:), mass( |	       float :: x(:), y(:), z(:), fx(:), fy(:), fz(:), mass(:
       real*8, optional :: fext ! `external' force for planar |	       float, optional :: fext ! `external' force for planar 
       integer :: i, type ! cv index, cv type		      |	       int :: i, type ! cv index, cv type
       logical :: calctheta ! whether or not to calculate the |	       bool :: calctheta ! whether or not to calculate theta(
       logical :: deriv    ! whether or not to calculate deri |	       bool :: deriv    ! whether or not to calculate derivat
       logical :: addforce ! whether or not to add forces on  |	       bool :: addforce ! whether or not to add forces on sim
       real*8 :: dummy					      |	       float :: dummy
       integer, allocatable, dimension(:) :: ind1, indf! , in |	       int, allocatable, dimension(:) :: ind1, indf! , indpsf
       real*8, allocatable, dimension(:,:)  :: r1	      |	       float, allocatable, dimension(:,:)  :: r1
       real*8, allocatable, dimension(:) ::  m1		      |	       float, allocatable, dimension(:) ::  m1
       integer :: ncom1, ncomf, ind ! , indpsf		      |	       int :: ncom1, ncomf, ind ! , indpsf
       integer :: j, k, ii, jj, frame			      |	       int :: j, k, ii, jj, frame
       real*8 :: com(3), f, w, totm1			      |	       float :: com(3), f, w, totm1
       real*8 :: A(3,3) ! orthogonal transformation matrix    |	       float :: A(3,3) ! orthogonal transformation matrix
       real*8 :: dA(3,3) ! derivative of A		      |	       float :: dA(3,3) ! derivative of A
       real*8 :: p(3) ! position in the local reference frame |	       float :: p(3) ! position in the local reference frame
       logical :: qframe ! is a local coordinate frame define |	       bool :: qframe ! is a local coordinate frame defined f
       integer, pointer :: priv(:)			      |	       int, pointer :: priv(:)
      use string					      |	      __DEP_OUTPUT
!       implicit none					      |	!       __IMPNONE
      use stream 					      |	      __DEP_PARSER 
      use multicom_ltm       !##MULTICOM		      |	      __DEP_MULTICOM       !__CHARMM_ONLY##MULTICOM
      use mpi 						      |	      __DEP_MPI 
       integer :: i, j, type, ii, jj, iatom		      |	       int :: i, j, type, ii, jj, iatom
       character*8 :: sid, rid, ren, ac			      |	       character(len=8 :: sid, rid, ren, ac
       character*18 :: whoami				      |	       character(len=18 :: whoami
       character*1 :: pos				      |	       character(len=1 :: pos
       integer :: ncom1, frame				      |	       int :: ncom1, frame
       integer, allocatable, dimension(:) :: ind1	      |	       int, allocatable, dimension(:) :: ind1
         call wrndie(0, whoami,                               |	         __WRN( whoami,                                      
         write(outu,'(A, I3)')                                |	         write(_MSGBUF,'(A, I3)')                            
         write(outu,'(A)') '\t '//pos//' POSITION-COM'	      |	         write(_MSGBUF,'(A)') '\t '//pos//' POSITION-COM'
         write(outu,667) '\t',j, iatom, sid, rid, ren, ac     |	         write(_MSGBUF,667) '\t',j, iatom, sid, rid, ren, ac
##ENDIF							      |	__CHARMM_ONLY##ENDIF
