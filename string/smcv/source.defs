#// OPENMP parallelization is partial and hasty ; it does not seem to hold promise in speeding things up significantly
#// in fact, the sode runs more slowly with OMP
#// I will need to decide whether further perallelization efforts are worthwhile
#//undef __OMP
! for openmm local thread variables
#ifdef __OMP
#define _U _
#define __AREDUCE(_W,_I) _W(_I)=_W(_I)+__U(_W)(_I)
#define __REDUCE(_W) _W=_W+__U(_W) ! thread reduction
#else
#define _U
#endif
#define __U(_WHAT) __CONCAT(_WHAT,_U)

#//for naming
#define __NM(_S) __CONCAT3(_N,_,_S)
#define __SUB(_S) subroutine __NM(_S)
#define __FUN(_S) function __NM(_S)


#ifdef __CHARMM
#define __kboltzmann kboltz
#else
#define __kboltzmann kboltzmann
#endif

#define _COMMON_ARGS k,gamma,weight
#define __CV_COMMON_ADD(__TYPE) cv_common_add(type=__TYPE, k=k, gamma=gamma, weight=weight)

#define __CALC_CV_FORCE_ENERGY \
 f=cv%k(i)*dummy ;\
 cv%r(i,forces2)=f ;\
 cv%r(i,energy) = half * f * dummy

#define __WRAP_ANGLE(_IN, _OUT) _OUT=modulo(_IN, TWOPI) ; if (_OUT.gt.PI) __INCR(_OUT,-TWOPI)

#define __PBC
#ifdef __PBC
#define __PBCDIST(_DIST,_PER) _DIST=modulo(_DIST, _PER);if((_DIST)*2 .gt. (_PER)) __DECR(_DIST,_PER)
#define __PBC_DIST(_DIST,_PER) __PBCDIST(_DIST,_PER)
#define __DISTPBC(_DIST,_PER) __PBCDIST(_DIST,_PER)
#define __DIST_PBC(_DIST,_PER) __PBCDIST(_DIST,_PER)
#endif

#define __WINXSLOG
#define __WXSLOGTXT
