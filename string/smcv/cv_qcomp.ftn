!
!     CV_QCOMP.MOD
!
!     QUATERNION COMPONENTS; USES CV_QUATERNION
      module cv_qcomp
!
__CHARMM_ONLY##IF STRINGM
!
      use cv_common
      use cv_types
      use cv_quaternion
      use cv_frames
      use ivector
      use ivector_list
!
      __IMPNONE
      private
      ! subroutines
      public cv_qcomp_add
      public cv_qcomp_calc
      public cv_qcomp_list
!
      contains
!ccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccc
       function cv_qcomp_add(type,fr1,fr2,k,gamma,weight) result(l) ! note: i is the atom index in the PSF
       __DEP_OUTPUT
 __DECLARE_MSGBUF
       int :: type, fr1, fr2
       float  :: k, gamma, weight
!      locals
       int :: i, j, l
       int :: f1, f2, ii, jj, ncomf
       int, pointer :: indf(:)
       bool :: found
       character(len=1) :: pos
!
       __IAM(CV_QCOMP_ADD)
!
!    check that input options are valid
       l=0
!cccccccccccccccc  check frame indices ccccccccccccccccccccccccccccccccc
       if (fr1.ge.0.and.fr1.le.frames%num_frames) then
        f1=fr1
       else
        __WRN( whoami,' INVALID FRAME SPECIFIED. WILL USE FIXED COORDINATE SYSTEM.')
        f1=0
       endif
!
       if (fr2.ge.0.and.fr2.le.frames%num_frames) then
        f2=fr2
       else
        __WRN( whoami,' INVALID FRAME SPECIFIED. WILL USE FIXED COORDINATE SYSTEM.')
        f2=0
       endif
!ccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccc
       if ( f1.eq.f2 ) then
        __WRN(whoami,' FRAMES CANNOT BE THE SAME. NOTHING DONE.')
        return
       endif
!ccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccc
!    check that the type is valid
       select case (type)
        case (qcomp_1); pos='1'
        case (qcomp_2); pos='2'
        case (qcomp_3); pos='3'
        case (qcomp_4); pos='4'
        case default;
         __WRN( whoami, 'UNKNOWN CV TYPE. NOTHING DONE.')
         return
       end select
!ccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccc
!   check if the quaternion corresponding to f1 and f2 is present
       do j=1, quat%num_quat
        found=( (f1.eq.quat%priv(j)%p(1).and.                           &
     &           f2.eq.quat%priv(j)%p(2)).or.                           &
!     &
     &         (f1.eq.quat%priv(j)%p(2).and.                            & ! frames interchanged (a quaternion and its additive inverse are considered equivalent)
     &          f2.eq.quat%priv(j)%p(1)))
        if (found) exit
       enddo
!
!    add quaternion, if necessary
       if ( .not. found ) then
         j=quat_add(f1, f2)
         if  (j.eq.0) then
          __WRN( whoami,' COULD NOT ADD QUATERNION. NOTHING DONE.')
          return
         endif
       endif
!    check for duplicate CV (exact identical entry only)
       found=.false.
       do i=1, cv%num_cv
        if (cv%type(i).eq.type) then
         if (j.eq.cv%priv(i)%p(1)) then
            __WRN( whoami,' QUAT_'//pos//' CV ALREADY PRESENT. NOTHING DONE.')
            return
         endif
        endif
       enddo
!
       l=__CV_COMMON_ADD(type)
       if  (l.gt.0) then
!    add quaternion index
        allocate(cv%priv(l)%p(1));
        cv%priv(l)%p(1)=j
!    10.2010 VO *************************************************************************
!    since the CV depends on atom coords through the definition of a frame,
!    we have to add the relevant atom lists in cv%amap with the index of this cv (l)
        if (f1.gt.0) then
          ncomf=frames%priv(f1)%p(1);
          allocate(indf(ncomf));
          ii=2; jj=ii+ncomf-1;
          indf=frames%priv(f1)%p(ii:jj)
          do j=1, ncomf ! loop over frame atoms
            i=int_vector_uadd(cv%amap%v(indf(j)),l) ! add index of this cv
          enddo
          deallocate(indf)
         endif
!
         if (f2.gt.0) then
          ncomf=frames%priv(f2)%p(1);
          allocate(indf(ncomf));
          ii=2; jj=ii+ncomf-1;
          indf=frames%priv(f2)%p(ii:jj)
          do j=1, ncomf ! loop over frame atoms
            i=int_vector_uadd(cv%amap%v(indf(j)),l) ! add index of this cv
          enddo
          deallocate(indf)
        endif
!****************************************************************************************
       else ! out of bounds
        __WARN( whoami,' ERROR ADDING QCOMP_',pos,'CV. NOTHING DONE.')
       endif
       end function cv_qcomp_add
!ccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccc
       subroutine cv_qcomp_calc(i,x,y,z,mass,fx,fy,fz,                  &
     &                             calctheta,deriv,addforce,fext)
!
       __DEP_CONST
       __DEP_NUMBER
!
       float :: x(:), y(:), z(:),                                      &
     &           fx(:), fy(:), fz(:), mass(:)
       float, optional :: fext ! `external` force for planar dynamics (see smcv_addforce in smcv_master)
       int :: i
       bool :: calctheta ! whether or not to calculate theta(x); if not, use theta=cv%r(i,instant)
                            ! note that if calctheta=.false., we do not calculate the derivatives either
       bool :: deriv    ! whether or not to calculate derivatives w.r.t. x
       bool :: addforce ! whether or not to add forces on simulation atoms
!
       int :: iq, indpsf, j, jj
       int :: pos
       float :: dummy, w, f
!
       int, pointer :: priv(:) ! will point to the amap pointer array of parent quaternion
!
!      extract quaternion index
       iq=cv%priv(i)%p(1);
!
!    set this CV energy to zero by default
!       cv%r(i,energy)=zero
!
       if (calctheta) then
!    check that the type is valid
        select case (cv%type(i))
         case (qcomp_1); pos=1
         case (qcomp_2); pos=2
         case (qcomp_3); pos=3
         case (qcomp_4); pos=4
        end select
!
!      do work:
!
!    calculate quaternion derivatives
        call quat_calc(iq, x, y, z, mass, deriv)
!
        cv%r(i,previnst)=cv%r(i,instant)
        cv%r(i,instant)=quat%q(pos,iq)
        if (deriv) then ! brute force way
!
!         do j=1,cv%amap%last
         priv=>quat%priv(iq)%amap_ptr ! point to map pointers of parent quaternion
         do jj=2,priv(1)+1
          j=priv(jj)
          w=one/sqrt(mass(cv%amap%i(j))) ! mass weight
!
          dummy=quat%gradqx(pos,j,iq)
          cv%gradx(i,j,1)=dummy
          cv%gradx(i,j,2)=dummy*w
!
          dummy=quat%gradqy(pos,j,iq)
          cv%grady(i,j,1)=dummy
          cv%grady(i,j,2)=dummy*w
!
          dummy=quat%gradqz(pos,j,iq)
          cv%gradz(i,j,1)=dummy
          cv%gradz(i,j,2)=dummy*w
         enddo
        endif ! deriv
       endif ! calctheta
!
!      NOTE that the forces calculated here are NOT acting on the CV, as in
!      the evolution subroutine, but on the simulation atoms
!
!      determine whether the negative quaternion is closer (hacky)
!      note that we are assuming that quaternions are defined ( smcv_compute_frames_quat routine in smcv_master ensures this)
!      NOTE that negating a quaternion requires negating the derivatives as well; this is obvious from quaternion calc routine
       dummy=dot_product(cv%r(i-pos+1:i-pos+4,zcur),quat%q(:,iq))
       if (dummy .lt. zero) then ! take negative of cv%r(i), which is the equivalent rotation
        dummy=-(cv%r(i,zcur)+cv%r(i,instant)) ! note: we are inverting the quaternion (-cv_inst) _and_, effectively, its gradient (by prepending '-')
       else
        dummy=cv%r(i,zcur)-cv%r(i,instant)
       endif
!
! FB modification (FB statistics updated outside):
       dummy=max(zero, dummy - cv%fbwidth(i)) + min(zero, dummy + cv%fbwidth(i))
!
       __CALC_CV_FORCE_ENERGY
!
       if (addforce) then
        if (present(fext)) f=fext ! override for planar sampling
!    extract quaternion index
        iq=cv%priv(i)%p(1);
        priv=>quat%priv(iq)%amap_ptr ! point to map pointers of parent quaternion
        do jj=2, priv(1)+1
          j=priv(jj)
          indpsf=cv%amap%i(j)
          fx(indpsf)=fx(indpsf)-f*cv%gradx(i,j,1)
          fy(indpsf)=fy(indpsf)-f*cv%grady(i,j,1)
          fz(indpsf)=fz(indpsf)-f*cv%gradz(i,j,1)
        enddo
       endif ! addforce
!
      end subroutine cv_qcomp_calc
!ccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccc
       subroutine cv_qcomp_list(i)
       __DEP_OUTPUT
       __DEP_MULTICOM       !__CHARMM_ONLY##MULTICOM
       __DEP_MPI 
 __DECLARE_MSGBUF
!
       int :: i
       int :: iq
       character(len=1) :: pos
       __IAM(CV_QCOMP_LIST)
!
!
       if (MPI_COMM_STRNG.eq.MPI_COMM_NULL) return ! only replica heads stay
!
!    check type
       select case (cv%type(i))
        case (qcomp_1); pos='W'
        case (qcomp_2); pos='X'
        case (qcomp_3); pos='Y'
        case (qcomp_4); pos='Z'
        case default;
         __WRN( whoami, 'UNKNOWN CV TYPE. NOTHING DONE.')
         return
       end select
!
       if (ME_STRNG.eq.0) then
        iq=cv%priv(i)%p(1)
        write(_MSGBUF,'(A)')   _TAB//' '//pos//'-COMPONENT OF' ; 
        __PRINT(_MSGBUF)
        call quat_list(iq)
       endif
!
       end subroutine cv_qcomp_list
!cccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccc
__CHARMM_ONLY##ENDIF
      end module cv_qcomp
!
