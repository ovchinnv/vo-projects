! a collection of subroutines to ccall the SMCV code from ACEMD plugin interface
!
#define __CSUB(__NAME, ...) subroutine __NAME (__VA_ARGS__) bind(c, name=__STRING(__NAME))
#define __BINDC use, intrinsic :: iso_c_binding
!
#define _ME smcv_init_from_acemd
__CSUB(_ME, n, mass, charge, inputname, outputname)
 __BINDC
 use minimal_system
 __DEP_CONST
 __DEP_PARSER
 __IMPNONE
 int( __FCINT), intent(in) :: n
 real(__FCFLOAT), intent(in), dimension(n) :: mass, charge
 character(kind=__FCCHAR, len=1), intent(in) :: inputname, outputname
!
 character(len=:), allocatable :: ifname, ofname
 int :: i, fid
 __IAM(_ME)
!
! initialize
! process file names
! input file
  i=1
  do
   if ( inputname(i:i)==C_NULL_CHAR ) exit;
  enddo
  allocate(character(len=i-1) :: ifname); ifname=inputname(1:i)
! output file
  i=1
  do
   if ( outputname(i:i)==C_NULL_CHAR ) exit;
  enddo
  allocate(character(len=i-1) :: ofname); ofname=outputname(1:i)
!
 call output_init(ofname) ; __DEALL(ofname);
!
 if (n<0) then
  __WRN(whoami, 'NUMBER OF ATOMS MUST BE POSITIVE (RECEIVED '//itoa(n)//')')
  return
 else

  __FREE(r)
  __FREE(rcomp)
  __FREE(m)
  __FREE(q)
  __MESSAGE(whoami, 'INITIALIZING SMCV PLUGIN WITH '//itoa(n)//' ATOMS');
  allocate(r(3,n), rcomp(3,n), m(n), q(n))
  m=mass
  q=charge
! open input file
  fid=-1
  call files_open(fid, ifname, 'FORMATTED', 'READ')
! parse input file

  initialized=.true.
!
 endif

end subroutine _ME
