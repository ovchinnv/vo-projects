
Description.

Finite-Temperature String Method (FTSM).
-----------------------------------------------------------------------------------------

Command Syntax.

STRIng FTSM [INITialize]                                                                |
            [DONE]                                                                      |
            [ADD [ORIEnt|RMSD] <atom selection>]                                        |
            [LIST]                                                                      |
            [CLEAr [ORIEnt|RMSD]]                                                       |
            [REPArametrize  [{DEFI <real>}] -
                            [{ITER <int>}] -
                            [{LINE | SPLI | BSPL | DST [{WNCT <real>}] | LIN2}]         |
            [ORIE <atom selection> {MASS}]                                              |
            [TEST [GRAD {STEP <real>}|PARA]                                             |
            [FILL {COL<int>} {COMP} ]                                                   |
            [COMM [ALLGather|HYPERcube|GATHERBroadcast]]                                |
            [PRINt [COR|DCD] {UNIT <int>} {NAME <character*>} {COL}]                    |
            [READ  [COR|DCD] {UNIT <int>} {NAME <character*>} {COL}]                    |
            [SWAP <int> <int>]                                                          |
            [COPY <int> <int>]                                                          |
            [SET  [ORIE <atom_selection>]  | -
                  [RMSD <atom_selection>]  | -
                  [KPAR <real> {ANGStrom}] | -
                  [KPRP <real> {ANGStrom}] | -
                  [KRMS <real> {ANGStrom}] | -
                  [DPRP <real> {ANGStrom} {REP <int>} ] -
                  [DRMS <real> {REP <int>} {UPPE} ] -
                  [MASS {yes|on|true|t|YES|ON|TRUE|T|no|off|false|f|NO|OFF|FALSE|F}] - |
                  [PROJ {yes|on|true|t|YES|ON|TRUE|T|no|off|false|f|NO|OFF|FALSE|F}] - |
                  [VCUT <real> {REP <int>} ] ]                                         |
            [VOROnoi [VMAP [CALC] | -
                           [PRIN [{UNIT <int>}] [NAME <character*>] ] -
                           [READ [{UNIT <int>}] [NAME <character*>] ] -
                           [CLEA] ] | -
                     [READ [UNIT <int>] [NAME <character*>] ] -
                     [PRINt[UNIT <int>] [NAME <character*>] ] ]                        |
            [DYNAmics[{NOPR}] -
                     [{VORO}] -
                     [{UPDA [UPDF <int>] {REPA} ] -
                     [{STAT [STAF]}] -
                     [{EVOL [EVOF <int>] -
                            [{EVOS <int>}] -
                            [{EXPO {MEMO <real>} | AVER [NAVE <int>] {MAXAVE <int>}}]}]-
                     [{RSTR [REEQ <int>]}] -
                     [{REX [REXF <int>] [REXT <real>]}] -
                     <regular dynamics options>]                                       |
            [STATistics [{COUNt <int>]} -
                        [{RMSD [RNAM <character*>] [{RAPP}]} ] -
                        [{ARCL [ANAM <character*>] [{AAPP}]} ] -
                        [{CURV [CVNM <character*>] [{CAPP}]} ] -
                        [{DIST [DNAM <character*>] [{DAPP}]} ] -
                        [{FREE [FENM <character*>] [{FAPP}] [{NOCV}] }] -
                        [{FORC [FCNM <character*>] [{FCAP}] }] -
                        [{CENT [CNAM <character*>] [{CEAP}] }]
                        [{REXM [RXNM <character*>] [{RXOL <character*>}]}] -
                        [{REXL [{RXNM <character*>}] [{ROFF <int>}] [{RXAP}]}] -
                        [{VORO [VNAM <character*>]} ] -
                        [{VMAP [{VNAM <character*>}]} ] -
                        [{VLOG [{VNAM <character*>}]} [{VOFF <int>}] [{VLAP}]}]

Command Description.
--------------------------------------------------------------------------

[INIT] Initialize the finite-temperature string module. Substitution
parameters ?MESTRING and ?NSTRING will be set to correspond to the
string rank of each CPU group, and to the total number of string
replicas, respectively.
--------------------------------------------------------------------------

[DONE] Finalize the finite-temperature string module
--------------------------------------------------------------------------

[REPA] Call reparametriation (Repa) module.  The supported
reparametrization methods are the same as those descibed for the
zero-temperature string method (SM0K), except that keywords ORIE, MASS
and MOVE are not supported (similar functionality is configured by other
means described below)
--------------------------------------------------------------------------

[ADD [ORIEnt|RMSD] <atom selection>] Add a center-of-mass (COM) position
vector computed from the atom selection to the reaction set (i.e.
coordinates that define the string). ORIEnt will add to the orientation
set (groups which will define the best-fit superposition); RMSD will add
to the forcing set (groups between which the distances are computed
after alignment.  NOTE: an empty orientation set implies that best-fit
alignments will not be performed.  COM groups should be nonoverlapping,
otherwise the metric tensor will not, generally, be close to the
corresponding inverse mass tensor (see ref. [1] for a discussion of the
metric tensor), which will probably lead to inaccurate free energies;
however this condition is not checked in the code.

--------------------------------------------------------------------------

[LIST] List currently defined orientation and forcing sets.
--------------------------------------------------------------------------

[CLEAr [ORIEnt|RMSD]] Clear orientation or forcing set.
--------------------------------------------------------------------------

[ORIE <atom selection> {MASS}] Perform best-fit superposition of the
instantaneous coordinates, such that the root-mean-squared distance
(RMSD) between instantaneous coodinates of string image (i>0) and (i-1)
are minimum.  MASS speficies that mass-weighting is to be used.
--------------------------------------------------------------------------

[TEST [GRAD {STEP <real>}|PARA] Test gradients of the string restraint
potentials by finite difference if GRAD is specified; test parallel
force computation when PARA is specified. STEP sets the finite
difference interval to use with GRAD. Parallel force computation test
will work only when more than one CPU is assigned to a string image.
--------------------------------------------------------------------------

[FILL {COL<int>} {COMP} ] Calculate values of the COM positions from
instantaneous coordinates and put into string column specified by
COL<int>.  This is how an initial string is defined in the beginning of
a set of optimizations.  Omission of COL<int> will result in the main
column (#2) being populated.  Reference coordinates for statistics (see
e.g. STAT RMSD) are assumed to be in column #8.  There are currently 22
coordinate sets, which are used for various parts of the FTSM
calculations; the user should not normally need to use the columns other
than the main and the reference. COMP specified that CHARMM comparison
coordinates are to be used for computing COM positions.
--------------------------------------------------------------------------

[COMM [ALLGather|HYPERcube|GATHERBroadcast]] Specify parallel
communication scheme for gathering gradients computed in parallel. ALLG
uses MPI_allgather ; HYPER uses an internal hypercube subroutine
implemented via MPI_SendRecv ; GATHERB uses MPI_Gather to local root
followed by MPI_Bcast. This choice should not normally have a large
impact on performance. The default method is hypercube.
--------------------------------------------------------------------------

[PRINt [COR|DCD] {UNIT <int>} {NAME <character*>} {COL}] Write current
string coordinates to file from the column specified by COL. COR and DCD
specify CHARMM coordinate and trajectory format, respectively. If COM
groups contain more than one atom, the coordinate of the COM group will
be output as the coordinate of the first atom in the COM group.  It is
possible to define multiple COM groups with the same first atom.
However, this possibility is not considered at present (see short
discussion above following ADD).

--------------------------------------------------------------------------
[READ  [COR|DCD] {UNIT <int>} {NAME <character*>} {COL}] Read string
coordinates from file into the column specified by COL. COR and DCD
specify CHARMM coordinate and trajectory format, respectively. If COM
groups contain more than one atom, the coordinate of the COM group will
be found as the coordinate of the first atom in the COM group.
--------------------------------------------------------------------------

[SWAP <int> <int>] Swap string coordinates in the specified columns.
--------------------------------------------------------------------------

[COPY <int> <int>] Copy string coordinates from the first column to the
second column.
--------------------------------------------------------------------------

[SET ORIE <atom_selection>] In addition to the ADD command for
(iteratively) defining atom groups (see above), this command is a
shortcut for defining the entire ORIEntation set, albeit with one atom
per group, i.e. the number of groups is the number of atoms in the atom
selection, and the COM position of the group is the postion of the
corresponding (single) atom in the group.

[SET RMSD <atom_selection>] Same as above, but defines the forcing group

[SET KPAR <real> {ANGStrom}] Set force constant for plane restraint
(i.e. force acting parallel to the path; see ref. [1] for definition of
restraint potentials).  ANGSstrom indicates that the distance unit in
the force constant are Angstrom.  If unspecified, the distance unit is
equal to twice the distance between adjacent string replicas.

[SET KPRP <real> {ANGStrom}] Set force constant for in-plane restraint
(i.e. force acting perpendicular to the path for limiting). This option
is used for limiting the transition tube width. ANGStrom option as
above.

[SET KRMS <real> {ANGStrom}] Set force constant for a regular RMSD
restraint, whereby the MD replica is restrained to the string image via
U = krms/2 || RMSD (x , x0) - RMSD0 ||^2 (where x includes an implicit
best-fit rotation).  This potential corresponds approximately to the
behavior in the replica path functionality. Although the free energies
cannot be computed,  the RMSD potential is useful for path
equilibration. ANGStrom option as above.

[SET DPRP <real> {ANGStrom} {REP <int>} ] Set the reference distance for
the in-plane restraint perpendicular to the path; used for limiting the
transition tube width, as the MD replica will be restrained to a
vicinity of the path.  REP allows the use of different values for
different replicas, although this flexibility is not often used.
ANGStrom option as above.

[SET DRMS <real> {REP <int>} {UPPE} ] Set the reference RMSD0 for the
RMSD restraint above; if omitted, the default value of zero is used. If
UPPE is specified, the restraint is only active when the computed
RMSD(x) exceeds the reference value. I.e. this corresponds to the
one-sided RMSD potential U = krms/2 max(0,|| RMSD (x , x0) - RMSD0||)^2

[SET MASS {yes|on|true|t|YES|ON|TRUE|T|no|off|false|f|NO|OFF|FALSE|F}]
When set to on, all distances will be calclulated after mass-weighting
the string coordinates; best-fit superposition will also use mass
weights.  When off, uniform weights will be used.

[SET PROJection
{yes|on|true|t|YES|ON|TRUE|T|no|off|false|f|NO|OFF|FALSE|F}] When set to
on, coordinate vectors pointing from the string image to the
instantaneous MD replica are projected onto the path tangent. This
allows the imposition of restraints to the distance to the hyperplane
normal to the string.  This option should normally be on for FTSM to
allow the coputation of free energies.  The force constants
corresponding to the  parallel and perpendicular force are KPAR and KPRP
defined above.  When set to off, the MD replica is restrained to the
corresponding image using RMSD restraints (see KRMS above).

[SET VCUT <real> {REP <int>} ] Set the maximum allowed distance from the
string in the plane perpendicular to the string tangent that the
instantaneous MD replica is allowed to travel in Voronoi simulations.
This allows one to limit the transition tube width in Voronoi
calculations, and is the constrained counterpart of DPRP/KPRP above.
REP<i> will set the Voronoi cutoff distance on replica <i> only.
------------------------------------------------------------------------

[VOROnoi VMAP CALC] Compute the Voronoi map, which lists the Voronoi
cell in which each instantaneous string coordinate set resides.  In the
present implementation, the functionality is used to ascertain that each
instantaneous replica corresponds to the correct string image; i.e. MD
replica on node (i) is closest to the string image (i), in which case
the Voronoi map will consist ot two identical rows with entries 1 ... N, 
where N is the number of string images. Instantaneous coordinates and
string coordinates must be defined prior to invoking this command.

[VOROnoi VMAP PRIN [{UNIT <int>}] [NAME <character*>] ] Print Voronoi
map to file with provided NAME and (optionally) provided unit number.

[VOROnoi VMAP READ [{UNIT <int>}] [NAME <character*>] ] Read Voronoi map
from file with provided NAME and (optionally) provided unit number.

[VOROnoi VMAP CLEA] Clear the Voronoi map if it has been READ or
CALCulated.  This will force the Voronoi map to be recomputed at the
beginning of dynamics.  This option is important due to the present
CHARMM implementation of Voronoi calculations.  The integrator will
issue warnings if an MD replica is found outside its corresponding
Voronoi cell; however, each replica is technically allowed to leave its
cell for one iteration, at which point its (half-kick) momenta (the
Verlet integrator is assumed) are reversed to return it to its home
cell. In particular, is it possible that a replica will be outside of
its cell at the timestep at which the restart file is written, in which
case, the Voronoi map will be flagged as incorrect unless it is CLEARed
prior to dynamics.

[VOROnoi PRINt[{UNIT <int>}] [NAME <character*>] ] Print matrix C_ij
with the number of Voronoi crossing attempts from cell (i) to cell (j)
to file with provided NAME and (optionally) provided unit number.  This
file can be quickly postprocesed for a fast calculation of free energies
of the tessellation.

[VOROnoi READ [{UNIT <int>}] [NAME <character*>] ] Read matrix C_ij with
the number of Voronoi crossing attempts from cell (i) to cell (j) to
file with provided NAME and (optionally) provided unit number. This
command is useful for restarting a Voronoi calculation with previously
accumulated crossing statistics.

------------------------------------------------------------------------
[DYNAmics] The STRIng FTSM DYNAmics command will parse options relevant
for the FTSM and subsequently call the regular dynamics integrator.
Currently, FTSM support is limited to the default Verlet leapfrog
integrator (dynamc module). The following, all optional, keywords are
supported.

[{STAF <int>}] Number of steps to skip between successive outputs of
statistics. STAT options must be set prior to dynamics.

[{NOPRint}] Reduce output from FTSM during dynamics.

[{VORO}] For each FTSM replica, dynamics will be constrained to the
corresponding Voronoi cell by reversing momenta at cell boundaries. This
allows computing the free energy of the Voronoi tessellation and the
MFPT between different Voronoi cells.

[{UPDA [UPDF <int>] {REPA}] When UPDA is present string coordinates will
be  updated from the running averages computed by option EVOL. UPDF
specifies the frequency of updating (i.e. number of the intervening
dynamics steps). REPA indicates that a raperametrization is to be
performed after each update. REPA options must be set prior to dynamics.

[{EVOL [EVOF <int>] [{EVOS <int>}] [{EXPO {MEMO <real>}|AVER [NAVE
<int>] {MAXAVE <int>}}]}] Specify string evolution options. EVOL turns
on string evolution during dynamics. 

EVOF <int> specifies the frequency at which the evolution is to be
performed. A reasonable value for EVOF is 10, implying, essentially that
every 10th structure during dynamics will be added to a running average.

EVOS <int> specifies the number of dynamics steps after each update (if
UPDA is set) during which evolution is temporarily turned off. This can
be used to set an equilibration period after each update.  A reasonable
choice is to use the value for REEQ (see below) which specifies the
number of dynamics steps over which the restraint potentials are
adjusted to new string coordinates after an update.

EXPO {MEMO} specifies that evolution will use the exponential averaging,
i.e.,  PHI(N+1) =  <rMEMO> *PHI(N) + (1-<rMEMO>) * X_INST, where PHI(N)
are the string coordinates at the Nth evolution call, X_INST are the
instantaneous MD coordinates (after best-fit superpostion, if the
orientation set is non-empty), and MEMO is a memory parameter in the
range [0, 1]. Reasonable values for MEMO are 0.999 - 0.9999.

EXPO AVER {NAVE <int>} {MAXAVE <int>} Evolution will use simple
averaging, i.e., PHI(N)=AVERAGE_{i=0}^{N}(X_i).  To dampen oscillations
at the beginning of a simulation, NAVE can be used to set an artificial
number of samples in the average. That is, the average is updated using 
PHI(N+1) = ( NAVE * PHI(N) + X_INST ) / (NAVE++) ; therefore a high
value for NAVE will decrease | PHI(N+1)-PHI(N) |. Specifying MAXAVE <i>
will prevent NAVE from exceeding <i>; this effectively transforms this
evolution method to EXPOnential evolution described above.  MAXAVE is
zero by default.

RSTR [REEQ <int>] RSTR specifies that FTSM restraints are to be turned
on during dynamics. The type of restraint is determined by PROJection
[on|off] (see above). REEQ specifies the number of simulation steps
during which the restraint potentials will switch to using UPDAted
string coordinates from previous string coordinates (during each update,
if updates are on). This option prevents abrupt changes in the
restraints which can lead to instability. Values in the range 10 -- 500
are reasonable, depending on the system.

REX [REXF <int>] [REXT <real>] Instructs the code to attempt to swap MD
coordinates between adjacent replicas at frequency REXF <i> using
temperature REXT <r> in the Metropolis criterion.  This option can
significantly improve the convergence of free energy profiles but
requires that the force constants in the restraining potentials be
sufficiently low to facilitate frequent exchanges (a success rate of at
least 10% is recommended).  REXT can be increased beyond the simulation
temperature to facilitate exchanges, but this will cause the
thermodynamic ensemble to deviate from the Boltzmann distribution.

[STATistics] Call statistics module. Specify statistics options when
arguments are present. When called without arguments, an instance of
statistics output will be written out. The FTSM STAT module has similar
syntax to the zero-temperature (SM0K) STAT module.

[COUNt <int>] specifies iteration counted for statistics output.  The
default value is 0.  This number is incremented after every call to
statistics, and  is printed in the output files corresponding to RMSD,
ARCL, CURV, DIST, FREE and FORCE.

[RMSD RNAM <character*> [RAPP]] sets up output of RMSD values between the
replica coordinates at the current iteration and the coordinates present in 
the comparison set (usually the initial string).  At each call to string 
statistics, a line will be added to the file with the name specified in
[RNAM <character*>], with the columns in the file corresponding to different 
replicas.  If RAPP is specified, output will be appended to the file.
If RNAM is omitted, RMSD output is directed to the output stream.
This subcommand is useful for gauging convergence of the string.

[ARCL ANAM <character*> [AAPP]] sets up output of the distance between 
the adjacent replicas (such that their sum yields the string length)  at
the current iteration.  At each call to string statistics, a line will
be added to the file with the name specified with [ANAM <character*>]. 
If AAPP is specified, output will be appended to the file.

[CURV CVNM <character*> [CAPP]] sets up output of the approximate string
curvature  at each string image (the curvature is approximate because it
is computed under the assuption that the distance between adjacent
string replicas is exactly equal). At each call to string statistics, a
line will be added to the file with the name specified with [CVNM
<character*>].  If CAPP is specified, output will be appended to the
file.

NOTE: arclength and curvature are computed by the reparametrization
routine; therefore REPA must be active during dynamics to output ARCL
and CURV statistics (otherwise the corresponding files will have zeros).
If reparametrization is not desired, it can be used with 'REPA ITER 0',
which will force the routine to be called but will not allow it to
perform any reparametrization iterations.

DIST [DNAM <character*>] [{DAPP}]] sets up output of the coordinate
projections onto the string at each string image. At each call to string
statistics, one or two lines will be added to the file with the name
specified with [DNAM <character*>], depending in whether PROJ is on|off. 
If DAPP is specified, output will be appended to the file.
The output can be understood from the following diagram
            r
           /| }perpendicular distance
   ---p---o---q---
      \_____/
         d -- projection onto q-p
      \_______/
          D --  displacement vector q-p

where r is the instantaneous coordinate assigned to string image o, p
and q are the adjacent string images. If PROJ is on, the first line is
the normalized projection of r-o onto q-p, i.e.
 (r-p) . (q-p)
 ------------- = d/||D|| \def delta
  ||q-p||^2

and the second line is the normalized distance to the string, i.e. 
  || ( r-p - d(q-p)/||D||) || / ||D||
  
These are the variables that are restrained in FTSM calculations  when
PROJ is on. For example, for internal string points, delta is restrained
to 0.5, and for the left and right endpoints, to 0 and 1, respectively.
Note that ||D|| equals twice the string length increment ds. If PROJ is
off, ||r-o|| will be printed.  In the above discussion, best-fit
rotations are implicit when the orientation set is nonempty.

FREE [FENM <character*>] [{FAPP}] [{NOCV}] sets up output of the free
energy (FE). At each call to string statistics, a line will be added to
the file with the name specified with [FENM <character*>].  If FAPP is
specified, output will be appended to the file.  If NOCV is specified,
curvature contributions will not be included in the FE output.

FORC [FCNM <character*>] [{FCAP}] sets up output of the thermodynamic
forces that can be integrated to obtain the free energy. If PROJ is on,
at each call to string statistics, three lines will be added to the file
with the name specified with [FENM <character*>] (only two lines are
added if FREE energy output is requested as above and NOCV is
specified). If FAPP is specified, output will be appended to the file. 
The first line contains the forces acting on the parallel projection
variable (delta above).  The ds metric is already included in the force, 
so the FE at replica (i) can be computed (to first order) simply as (sum
force_{j=1}^i ), although second-order (or higher) integration schemes
such as the trapezoid rule are preferable. The second line contains the
curvature contribution to the force (-\xi} in ref [1]. It can be added
to the projection force to account for the curvature, if desired. If
NOCV is specified with FREE energy output (above) this line will be
omitted.  The third line lists the forces acting on the distance from
the string used to limit transition tube width.  If is provided for
information ans is not useful for computing the FE. If PROJ is off, the
force acting on the RMSD variable (see section in KRMS above). This
force is provided for information and cannot be used to compute the free
energy.

CENT [CNAM <character*>] [{CEAP}] sets up output of the string images in
trajectory (.dcd) format.  At each statistics call N coordinate sets
will be written consecutively to the specified file, where N is the
number of string images.  If COM groups contain more than one atom, the
coordinate of the COM group will be output as the coordinate of the first
atom in the COM group.  It is possible to define multiple COM groups
with the same first atom. However, this possibility is not considered at
present (see short discussion above following ADD).

REXM [RXNM <character*>] [{RXOL <character*>}] sets up output of the
replica exchange map, which the curent string image to which each MD
replica is currently assigned (in the replica exchange functionality,
the MD replica coordinates are allowed to `travel` between string images
according to the Metropolis criterion to facilitate equilibration) RXNM
is the name of the replica map file to which extension .map will be
appended. RXOL allows the specification of an existing replica map (e.g.
from a previous dynamics run) so that replica jump dynamics can be
monitored continuously across restarts.

REXL [{RXNM <character*>}] [{ROFF <int>}] [{RXAP}] sets up output of the
replica exchange log, which contains a record of all the successful swap
attempts. Each line lists the timestep at which the jump was performed
and the two replicas whose coordinates have been swapped.  ROFF is an
offset added to the timestep counter to provide continuous time
evolution from previous runs. RXAP indicates that an existing log file
is to be appended to.

VORO [VNAM <character*>] specify name of file to which to print the
matrix of crossing attempte C_ij  (see VOROnoi commands above). The
extension '.dat' will be appended to the file name.

VMAP [{VNAM <character*>}] specify name of file to which to print the
Voronoi map (see VOROnoi commands above). The extension '.map' will be
appended to the file name.

VLOG [{VNAM <character*>}] [{VOFF <int>}] [{VLAP}] specifies the name of
the binary Voronoi log file which contains the time record of all
crossing attempts.  This file is written in binary format because it can
become very large in order to accumulate sufficient statistics to
compute free energies and mean first passage times. The file is post-
processed using the MATLAB/Octave script vcalc.m given in the support
drectory. Briefly, each record in the file contains a variable number of
entries, each entry being composed of 5 integers: (1) the iteration (or
timestep) number, (2) string replica ID, (3) ID of the Voronoi cell from
which the crossing attempt is being made, (4) the ID of the Voronoi cell
to which the crossing attempt is being made, (5) the ID of the cell in
which the replica resides after crossing attempt (i.e. whether the
replca was reflected or allowed to cross). The present version of the
code does not allow crossing; every replica is reflected, and all
crossing attempts `fail`; however, this need not be the case more
generally, and this feature may be included in future releases.  From
the time record of crossing attempts, the free energy and reaction rates
can be approximated according to refs. [3-4].  VOFF provides an optional
offset for the timestep to preserve time-continuity of the crossing
dynamics. VLAP indicates that an existing log gile is to be appended to
(however, the postprocessing script vcalc.m can accept multiple
successive log files). The extension '.log' will be appended to the file
name specified by VNAM.

NOTE : The base file name specified by VNAM is shared by the the VORO
output options above, and needs to be specified only once.

