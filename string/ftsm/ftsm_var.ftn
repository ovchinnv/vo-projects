!
!     FTSM_VAR.MOD
!
!     VARIABLES FOR THE FINITE TEMPERATURE STRING METHOD
      module ftsm_var
!
__CHARMM_ONLY##IF STRINGM
!
      __CHARMM_ONLY __DEP_KINDS
      __CHARMM_ONLY use chm_types
      __DEP_NUMBER
      use ivector
      use ivector_list
      use rvector_list
! note that SMCV and FTSM should not be used simultaneously
! see module smcv_common for the description of the variables below
!
      use sm_var, only:                                                 &
     &   nstring, mestring,                                             &
     &   repa_initialized, smcv_initialized,                            &
     &   linear, spline, bspline, dst, linear_exact, interp_method,     &
     &   interp_methods, name_interp_methods, num_interp_methods,       &
     &   iterations, def,                                               &
     &   dst_cutoff,                                                    &
     &   ds, curv,                                                      & ! arclength and curvature
     &   stat_iteration_counter,                                        &
     &   output_rmsd0,                                                  &
     &   output_arclength,                                              &
     &   output_curvature,                                              &
     &   output_fe,                                                     &
     &   output_forces,                                                 &
     &   output_rex_map,                                                &
     &   output_rex_log,                                                &
     &   output_M,                                                      &
     &   output_window_ave,                                             &
     &   output_window_xs_log,                                          &
     &   output_restraint_energy,                                       &
!
__CHARMM_ONLY  &   Id3,                                                 &
!
     &   stat_initialized,                                              &
!
     &   forces_fname, rex_fname, restraint_energy_fname,               &
     &   rmsd0_fname, s_fname, fe_fname, c_fname, M_fname,              &
!
     &   rmsd0_funit, s_funit,                                          &
     &   fe_funit, c_funit,                                             &
     &   forces_funit, rex_funit, vlog_funit, window_funit,             &
     &   restraint_energy_funit,                                        &
!
     &   rform, sform, feform, cform, fform, rxlform, vlform, windowform,&
     &   restraint_eform,                                               &
!
     &   forces_flen, rmsd0_flen, s_flen, fe_flen, c_flen, rex_flen,    &
     &   M_flen, restraint_energy_flen, &
! for Voronoi dynamics 1/2013
     &   output_voronoi_hist, output_voronoi_map, output_voronoi_log,   &
     &   voronoi_flen, voronoi_fname, window_fname, window_flen
!
      use sm_config, only:                                              &
     & ftsm_on, repa_on, restrained_on, unrestrained_on,                &
     & restraint_force_on,                                              &
     & stat_on,                                                         &
     & string_noprint, restraint_force_on,                              &
     & calc_bestfit_grad_para,                                          &
     & allgather_method, allgather_, gather_bcast_, hypercube_,         &
     & evolve_freq, stat_freq,                                          &
     & restrained_eq_steps, restrained_eq0, evolve_nskip,               &
     & unrestrained_eq_steps, unrestrained_eq0,                         & 
     & olditeration,                                                    &
     & evolve_aver_on,                                                  & ! in this context, whether the evolution corresponds to averaging the simulation structure
!                      ! when false, evolve_expo_on is used, which implies a fixed exponential filter width
     & evolve_expo_on,                                                  &
     & evolve_expo_mem,                                                 &
     & finite_difference_d,                                             &
     & parallel_tolerance,                                              &
     & repl_x_on,                                                       &
     & repl_x_freq,                                                     &
     & rextime_offset,                                                  &
! for Voronoi dynamics 1/2013
     & vtime_offset,                                                    &
     & voronoi_hist_on, voronoi_allow_cross,                            &
     & voronoi_update_freq, voronoi_nocross_ini, calc_voronoi_para,     &
     & compute_whereami __CHARMM_ONLY , ione, itwo, ithree      ! ugly fix for CHARMM constants
!
       type (int_vector), save :: ftsm_window_log       ! logs the history of window crossings in windowed simulations
       int :: ftsm_window_whereami = INT(__NAN)
!
       float, pointer, save :: fe(:), feav(:) ! free energy arrays
       float, save :: avforce(3)=zero             ! average parallel (1) curvature (2) and (3) perpendicular force;
       float, save :: ftsm_restraint_energy(2)=zero  ! instantaneous ( 1-parallel; 2-perpendicular ) restraint energy
       float, save :: window_ave_pos              ! average position inside double half-harmonic window (only if corresponding restraint active)
       float, save :: repl_x_temp                 ! temperature for replica exchange
       int, save :: num_evolve_samples=0          ! number of samples in the averaged image
       int, save :: max_evolve_samples=0          ! maximum number of allowed samples before wraparound (if > 0)
       int, save :: num_force_samples=0           ! number of force samples
       int, save :: num_M_samples=0               ! number of samples in the running average of M tensor
       int, save :: num_J_samples=0               ! number of samples in the Jacobian
       int, save :: window_num_ave=0          ! number of samples in windowing restraint
       bool, save :: ftsm_initialized=.false.
#ifdef __CHARMM
       bool, save :: ftsm_nbond_image_data_initialized=.false.
#endif
       bool, save :: evolve_ftsm_on=.false.,                            & ! is string evolution on?
     &               update_on=.false.,                                 & ! image updating on?
     &               ftsm_mini_on=.false.,                              & ! image minimization on?
     &               ftsm_reconnect_on=.false.                            ! try to reconnect path during updates ?
       bool, save :: output_centers=.false. ! center of the transition tube (these are coordinate files)
       bool, save :: output_connect_map=.false. ! whether to output ftsm path connectivity map
       bool, save :: output_connect_log=.false. ! whether to output ftsm path connectivity log
       bool, save :: output_dist=.false. ! whether to output distance to the string (dpar, dprp, or drms)
       bool, save :: qdiffrot=.false.      ! whether the orientation atoms are different from forcing atoms, in which case store them separately
       bool, save :: qorient=.false. ! whether images are to be oriented in the bestfit sense
       bool, save :: proj_on=.false. ! whether the string evolves only along the direction perpendicular to itself
       bool, save :: window_on=.false. ! whether the restraint used for proj_on uses a double half-harmonic potential
       bool, save :: fe_curvature=.true.    ! whether to compute curvature contribution to the free energy
!
       bool, save :: output_J=.false. ! whether to compute FTSM Jacobian 
!
       character(len=80), save :: centers_fname='', dist_fname='', J_fname='', connect_fname=''
       int, save :: centers_funit=-1, centers_flen=0, dist_funit=-1, dist_flen=0, &
     &              J_flen=0, connect_funit=-1, connect_flen=0
       int, save :: window_offset=0, connect_offset=0;
       character(len=80), save :: cenform, distform, connectform
!
       int, save :: norient=0, nforced=0,                           & ! orientation and forcing atoms
     &                  nany=0, nboth=0                               ! any atoms, overlapping atoms
       int, save :: update_freq=0                                     ! frequency for performing image update
!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!! coordinate variables below
       float, save, pointer, dimension (:,:,:) ::                   &
     &        r_f,                                                  & ! forcing (rall`s will not always be associated so beware)
     &        r_o                                                     ! orientation
       float, save, pointer, dimension(:,:,:,:,:) :: Mtensor          ! metric tensor (stats only)
       float, save, pointer, dimension(:,:) :: rcom                   ! COM coordinates
       float, save :: Jacobian(2) ! FTSM Jacobian
!     weights
       float, save, pointer :: orientWeights(:), forcedWeights(:)
!    indices
       int, save, pointer :: iatom_o(:), iatom_f(:)                  ! contains psf atomid indices
       type (int_vector), pointer :: iatom_a                         ! a vector of all of the atom indices usde by ftsm
!    COM index lists (ftsm_com_on version)
       type (int_vlist), pointer :: iatoms_o, iatoms_f               ! psf atomid lists for computing COMs
       type (real_vlist), pointer :: wgts_o, wgts_f                  ! weights corresponding to iatoms for computing COMs
!
       int, save, pointer :: iatom_both(:,:)                         ! index pairs that correspond to the same PSF atoms
                                                                     ! in the case of COM coordinates (ftsm_com_on) iatom_both 
                                                                     ! contains index pairs into atom lists

!     define indices into r array:
       int, parameter, public ::    left=1,                             &
     &                              center=2,                           &
     &                              right=3,                            &
     &                              left_old=4,                         & ! old structures are saved to provide smooth transitions after evolution
     &                              center_old=5,                       &
     &                              right_old=6,                        &
     &                              center_new=7,                       &
     &                              ref=8,                              &
     &                              instant=9,                          &
     &                              rave=11,                            &
     &                              dummy=10,                           &
     &                              vpar=12,                            &
     &                              vperp=13,                           &
     &                              fpar=14,                            &
     &                              fperp=15,                           &
     &                              left_rot=16,                        &
     &                              center_rot=17,                      &
     &                              right_rot=18,                       &
     &                              left_cur=19,                        &
     &                              center_cur=20,                      &
     &                              right_cur=21,                       &
     &                              scratch=22,                         &
     &                              scratch2=23
!
! 4.16 : note below: variables with '_' appended are 'unscaled' variables given at input
! the variables w/o underscores are their counterparts scaled in internal (code) units of 2D
       float, save :: krms=0d0, &
     &                kpara=zero, kperp=zero, kpara_=zero, kperp_=zero, &
     &                dpar0=half, dperp0=zero, dperp0_=zero,            &
     &                dperp0i, dperp0f, dperp0i_, dperp0f_,             & ! initial and final dperp (optional)
     &                dperp_adjust_iter,                                & ! iterations to adjust to final (optional)
     &                drms0=zero,dpar,dperp,drms,          &
     &                dpar0i, dpar0f,                      &
     &                dwin_=half, dwin=fourth,             & ! width of window in double half-harmonic window restraint (1 means D, i.e. interreplica distance)
     &                ftsm_ini_iteration=-1,               & ! initial iteration (computed by ftsm_main)
     &                fe_curv=0d0 ! instantaneous curvature contribution to the free energy
      bool, save :: qrms_upper_bound=.false.
      bool, save :: qkpara_angstrom=.false., &  ! whether the distance is specified in Ang (unscaled vs scaled, as implemented originally)
     &              qkperp_angstrom=.false., &  ! as above
     &              qdperp_angstrom=.false., &
     &              qdperpf_angstrom=.false., &
     &              qdwin_angstrom=.false.
!
       int, parameter, public :: num_sets=23 ! num of parameters above
       int4mpi, save :: MPI_RTMD_TYPE, MPI_RTMD_TYPE_
!
       character(len=8), parameter, public :: real_format='(E23.15)'
       character(len=5), parameter, public :: int_format='(I10)'
       __CHARMM_ONLY character(len=1), parameter, public :: tab=char(9)
!
! disabling for now -- limited compiler compatibility
!       abstract interface ! for procedure ftsm_calc
!        subroutine ftsm_calculate(x,y,z,deriv,t)
!         __CHARMM_ONLY __DEP_KINDS
!         float, intent(in) :: x(:), y(:), z(:)
!         bool :: deriv
!         float, intent(in), optional :: t
!        end subroutine ftsm_calculate
!       end interface
!
       bool :: qver2 = .true.         ! whether to use ftsm version 2
       bool :: ftsm_scaledist=.true.  ! whether to use scaled RMSD in FTSM ; currently implemented only with ftsm version 2
       bool :: ftsm_com_on=.true.     ! whether to use COM of atom groups in FTSM rather than individual atom positions
       bool :: ftsm_compute_qdiffrot=.true. ! whether need to determine if o/f atom groups are identical
       bool :: ftsm_reset_dpar0f=.false. ! whether to recompute reference location for dpar; valid only with ftsm in unscaled coordinates
!       float :: ftsm_flim_coeff = 20d0 ! for limiting force magnitude if a degenerate fluctuating alignment creates large forces
       float :: ftsm_flim_coeff = -1d0 ! (<0 =>off) : for limiting force magnitude if a degenerate fluctuating alignment creates large forces
       __CHARMM_ONLY float, parameter :: sqrt3 = sqrt( three )
!      (NOTE : ftsm paper describes unscaled version, but scaled version is ``neater`` because the projection reference is fixed at 1/2 rather
!              than at L/(M-1), which changes because L -- the string length -- changes during evolution/reparametrization)
!       procedure (ftsm_calculate), pointer :: ftsm_calc=>NULL()
!
__CHARMM_ONLY##ENDIF
!
      end module ftsm_var
