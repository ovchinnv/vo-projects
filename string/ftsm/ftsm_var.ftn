!
!     FTSM_VAR.MOD
!
!     VARIABLES FOR THE FINITE TEMPERATURE STRING METHOD
__CHARMM_ONLY##IF STRINGM
!
      module ftsm_var
      __CHARMM_ONLY __DEP_KINDS
      __CHARMM_ONLY use chm_types_ltm
!
! note that SMCV and FTSM should not be used simultaneously
! see module smcv_common for the description of the variables below
!
      use sm_var, only:                                              &
     &   nstring, mestring,                                             &
     &   repa_initialized, smcv_initialized,                            &
     &   linear, spline, bspline, dst, linear_exact, interp_method,     &
     &   iterations, def,                                               &
     &   dst_cutoff,                                                    &
     &   ds, curv,                                                      & ! arclength and curvature
     &   stat_iteration_counter,                                        &
     &   output_rmsd0,                                                  &
     &   output_arclength,                                              &
     &   output_curvature,                                              &
     &   output_fe,                                                     &
     &   output_forces,                                                 &
     &   output_rex_map,                                                &
     &   output_rex_log,                                                &
!
     &   stat_initialized,                                              &
!
     &   forces_fname, rex_fname,                                       &
     &   rmsd0_fname, s_fname, fe_fname, c_fname,                       &
!
     &   rmsd0_funit, s_funit,                                          &
     &   fe_funit, c_funit,                                             &
     &   forces_funit, rex_funit,                                       &
!
     &   rform, sform, feform, cform, fform, rxlform,                   &
!
     &   forces_flen, rmsd0_flen, s_flen, fe_flen, c_flen, rex_flen
!
      use sm_config, only:                                              &
     & ftsm_on, repa_on, restrained_on,                                 &
     & stat_on,                                                         &
     & string_noprint, restraint_force_on,                              &
     & calc_bestfit_grad_para,                                          &
     & evolve_freq, stat_freq,                                          &
     & restrained_eq_steps, restrained_eq0, evolve_nskip,               &
     & olditeration,                                                    &
     & evolve_aver_on,                                                  & ! in this context, whether the evolution corresponds to averaging the simulation structure
!                      ! when false, evolve_expo_on is used, which implies a fixed exponential filter width
     & evolve_expo_on,                                                  &
     & evolve_expo_mem,                                                 &
     & finite_difference_d,                                             &
     & parallel_tolerance,                                              &
     & repl_x_on,                                                       &
     & repl_x_freq,                                                     &
     & rextime_offset
!
       float, allocatable, save :: fe(:), feav(:) ! free energy arrays
       float, save :: avforce(2)                  ! average parallel (1) and (2) perpendicular force;
       float, save :: repl_x_temp                 ! temperature for replica exchange
       int, save :: num_evolve_samples=0          ! number of samples in the averaged image
       int, save :: max_evolve_samples=0          ! maximum number of allowed samples before wraparound (if > 0)
       int, save :: num_fe_samples=0              ! number of f.e. curves in average
       int, save :: num_force_samples=0           ! number of force samples
       bool, save :: ftsm_initialized=.false., &
     &               ftsm_mini_initialized=.false.
#ifdef __CHARMM
       bool, save :: ftsm_nbond_image_data_initialized=.false.
#endif
       bool, save :: evolve_ftsm_on=.false.,                            & ! is string evolution on?
     &                  update_on=.false.,                              & ! image updating on?
     &                  ftsm_mini_on=.false.                              ! image minimization on?
       bool, save :: output_centers=.false. ! center of the transition tube (these are coordinate files)
       bool, save :: qdiffrot=.false.      ! whether the orientation atoms are different from forcing atoms, in which case store them separately
       bool, save :: qorient=.false. ! whether images are to be oriented in the bestfit sense
       bool, save :: proj_on=.false. ! whether the string evolves only along the direction perpendicular to itself
       character(len=80), save :: centers_fname=''
       int, save :: centers_funit=-1, centers_flen=0
       character(len=80), save :: cenform
!
       int, save :: norient=0, nforced=0,                           & ! orientation and forcing atoms
     &                  nany=0, nboth=0                               ! any atoms, overlapping atoms
       int, save :: update_freq=0                                     ! frequency for performing image update
!
       int, save :: ftsm_mini_method=0      ! minimization method
       int, parameter :: sd=1, conj=2       ! minimization method codes
       int, save :: ftsm_mini_iterations=10 ! minimizer iterations
       float, save :: ftsm_mini_step        ! minimization step
#ifdef __CHARMM
       type(nonbondDataStructure) :: ftsm_nbond_copy
       type(imageDataStructure)   :: ftsm_image_copy
#endif
!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!! coordinate variables below
       float, save, pointer ::                                      &
     &        r_f(:,:,:),                                           &! forcing
     &        r_o(:,:,:)                                             ! orientation
       float, save, pointer :: rcom(:,:)
!     weights
       float, save, pointer :: orientWeights(:), forcedWeights(:)
!    indices
       int, save, pointer :: iatom_o(:), iatom_f(:), iatom_a(:)
       int, save, pointer :: iatom_both(:,:)                         ! index pairs that correspond to the same PSF atoms

!     define indices into r array:
       int, parameter, public ::    left=1,                             & !
     &                              center=2,                           & !
     &                              right=3,                            & !
     &                              left_old=4,                         & ! old structures are saved to provide smooth transitions after evolution
     &                              center_old=5,                       & !
     &                              right_old=6,                        & !
     &                              center_new=7,                       & !
     &                              ref=8,                              & !
     &                              rave=9,                             & !
     &                              dummy=10,                           & !
     &                              instant=11,                         & !
     &                              vpar=12,                            & !
     &                              vperp=13,                           & !
     &                              fpar=14,                            & !
     &                              fperp=15,                           & !
     &                              left_rot=16,                        & !
     &                              center_rot=17,                      & !
     &                              right_rot=18,                       & !
     &                              left_cur=19,                        &
     &                              center_cur=20,                      &
     &                              right_cur=21
!
       float, save :: krms=0d0, kpara=0d0, kperp=0d0,                  &
     &                dpar0=0.5d0,dperp0=0d0,drms0=0d0,dpar,dperp,drms
!
       int, parameter, public :: num_sets=21 ! num of parameters above
       int4mpi, save :: MPI_RTMD_TYPE, MPI_RTMD_TYPE_
!
       character(len=8), parameter, public :: real_format='(E23.15)'
       character(len=5), parameter, public :: int_format='(I10)'
!
      end module ftsm_var
!
__CHARMM_ONLY##ENDIF
