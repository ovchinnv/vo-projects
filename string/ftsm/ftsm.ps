%!PS-Adobe-3.0
%%Title: ftsm.ftn
%%For: surgeon
%%Creator: a2ps version 4.14
%%CreationDate: Sat Mar  9 15:59:52 2013
%%BoundingBox: 24 24 588 768
%%DocumentData: Clean7Bit
%%Orientation: Landscape
%%Pages: 42
%%PageOrder: Ascend
%%DocumentMedia: Letter 612 792 0 () ()
%%DocumentNeededResources: font Courier
%%+ font Courier-Bold
%%+ font Courier-BoldOblique
%%+ font Courier-Oblique
%%+ font Helvetica
%%+ font Helvetica-Bold
%%+ font Symbol
%%+ font Times-Bold
%%+ font Times-Roman
%%DocumentProcessColors: Black 
%%DocumentSuppliedResources: procset a2ps-a2ps-hdr
%%+ procset a2ps-black+white-Prolog
%%+ encoding ISO-8859-1Encoding
%%EndComments
/a2psdict 200 dict def
a2psdict begin
%%BeginProlog
%%Copyright: (c) 1988, 89, 90, 91, 92, 93 Miguel Santana
%%Copyright: (c) 1995, 96, 97, 98 Akim Demaille, Miguel Santana
% Check PostScript language level.
/languagelevel where {
  pop /gs_languagelevel languagelevel def
} {
  /gs_languagelevel 1 def
} ifelse

% EPSF import as in the Red Book
/BeginInclude {
  /b4_Inc_state save def    		% Save state for cleanup
  /dict_count countdictstack def	% Count objects on dict stack
  /op_count count 1 sub def		% Count objects on operand stack 
  userdict begin
    0 setgray 0 setlinecap
    1 setlinewidth 0 setlinejoin
    10 setmiterlimit [ ] 0 setdash newpath
    gs_languagelevel 1 ne {
      false setstrokeadjust false setoverprint 
    } if
} bind def

/EndInclude {
  count op_count sub { pos } repeat	% Clean up stacks
  countdictstack dict_count sub { end } repeat
  b4_Inc_state restore
} bind def

/BeginEPSF {
  BeginInclude
  /showpage { } def
} bind def

/EndEPSF {
  EndInclude
} bind def

% Page prefeed
/page_prefeed {         % bool -> -
  statusdict /prefeed known {
    statusdict exch /prefeed exch put
  } {
    pop
  } ifelse
} bind def

/deffont {
  findfont exch scalefont def
} bind def

/reencode_font {
  findfont reencode 2 copy definefont pop def
} bind def

% Function c-show (str => -)
% centers text only according to x axis.
/c-show { 
  dup stringwidth pop
  2 div neg 0 rmoveto
  show
} bind def

% Function l-show (str => -)
% prints texts so that it ends at currentpoint
/l-show {
  dup stringwidth pop neg 
  0 
  rmoveto show
} bind def

% center-fit show (str w => -)
% show centered, and scale currentfont so that the width is less than w
/cfshow {
  exch dup stringwidth pop
  % If the title is too big, try to make it smaller
  3 2 roll 2 copy
  gt
  { % if, i.e. too big
    exch div
    currentfont exch scalefont setfont
  } { % ifelse
    pop pop 
  }
  ifelse
  c-show			% center title
} bind def

% Return the y size of the current font
% - => fontsize
/currentfontsize {
  currentfont /FontType get 0 eq {
    currentfont /FontMatrix get 3 get
  }{
    currentfont /FontMatrix get 3 get 1000 mul
  } ifelse
} bind def

% reencode the font
% <encoding-vector> <fontdict> -> <newfontdict>
/reencode { %def
  dup length 5 add dict begin
    { %forall
      % <vector> <key> <val>
      1 index /FID ne 
      { def }{ pop pop } ifelse
    } forall
    /Encoding exch def % -

    % Use the font's bounding box to determine the ascent, descent,
    % and overall height; don't forget that these values have to be
    % transformed using the font's matrix.
    % We use `load' because sometimes BBox is executable, sometimes not.
    % Since we need 4 numbers an not an array avoid BBox from being executed
    /FontBBox load aload pop
    FontMatrix transform /Ascent exch def pop
    FontMatrix transform /Descent exch def pop
    /FontHeight Ascent Descent sub def

    % Get the underline position and thickness if they're defined.
    % Use 1 if they are not defined.
    currentdict /FontInfo 2 copy known
    { get
      /UnderlinePosition 2 copy % <FontInfo> /UP <FontInfo> /UP
      2 copy known
      { get }{ pop pop 1 } ifelse
      0 exch FontMatrix transform exch pop
      def % <FontInfo>

      /UnderlineThickness 2 copy % <FontInfo> /UT <FontInfo> /UT
      2 copy known
      { get }{ pop pop 1 } ifelse
      0 exch FontMatrix transform exch pop
      def % <FontInfo>
      pop % -
    }{ pop pop
    } ifelse

    currentdict
  end 
} bind def

% composite fonts for ASCII-EUC mixed string
% Version 1.2 1/31/1990
% Orignal Ken'ichi HANDA (handa@etl.go.jp)
% Modified Norio Katayama (katayama@rd.nacsis.ac.jp),1998
% Extend & Fix Koji Nakamaru (maru@on.cs.keio.ac.jp), 1999
% Anyone can freely copy, modify, distribute this program.

/copyfont {	% font-dic extra-entry-count  copyfont  font-dic
	1 index maxlength add dict begin
	{	1 index /FID ne 2 index /UniqueID ne and
		{def} {pop pop} ifelse
	} forall
	currentdict
	end
} bind def

/compositefont { % ASCIIFontName EUCFontName RomanScale RomanOffset Rot(T/F) compositefont font
    /RomanRotation exch def
    /RomanOffset exch def
    /RomanScale exch def
    userdict /fixeucfont_dict known not {
	userdict begin
	    /fixeucfont_dict 2 dict begin
		/UpperByteEncoding [
		    16#00 1 16#20 { pop 0 } for
		    16#21 1 16#28 { 16#20 sub } for
		    16#29 1 16#2F { pop 0 } for
		    16#30 1 16#74 { 16#27 sub } for
		    16#75 1 16#FF { pop 0 } for
		] def
	        /LowerByteEncoding [
		    16#00 1 16#A0 { pop /.notdef } for
		    16#A1 1 16#FE { 16#80 sub 16 2 string cvrs
				    (cXX) dup 1 4 -1 roll
				    putinterval cvn } for
		    /.notdef
		] def
		currentdict
	    end def
	end
    } if
    findfont dup /FontType get 0 eq {
	14 dict begin
	    %
	    % 7+8 bit EUC font
	    %
	    12 dict begin
		/EUCFont exch def
		/FontInfo (7+8 bit EUC font) readonly def
		/PaintType 0 def
		/FontType 0 def
		/FontMatrix matrix def
		% /FontName
		/Encoding fixeucfont_dict /UpperByteEncoding get def
		/FMapType 2 def
		EUCFont /WMode known
		{ EUCFont /WMode get /WMode exch def }
		{ /WMode 0 def } ifelse
		/FDepVector [
		    EUCFont /FDepVector get 0 get
		    [ 16#21 1 16#28 {} for 16#30 1 16#74 {} for ]
		    {
			13 dict begin
			    /EUCFont EUCFont def
			    /UpperByte exch 16#80 add def	
			    % /FontName
			    /FontInfo (EUC lower byte font) readonly def
			    /PaintType 0 def
			    /FontType 3 def
			    /FontMatrix matrix def
			    /FontBBox {0 0 0 0} def
			    /Encoding
				fixeucfont_dict /LowerByteEncoding get def
			    % /UniqueID
			    % /WMode
			    /BuildChar {
				gsave
				exch dup /EUCFont get setfont
				/UpperByte get
				2 string
				dup 0 4 -1 roll put
				dup 1 4 -1 roll put
				dup stringwidth setcharwidth
				0 0 moveto show
				grestore
			    } bind def
			    currentdict
			end
			/lowerbytefont exch definefont
		    } forall
		] def
		currentdict
	    end
	    /eucfont exch definefont
	    exch
	    findfont 1 copyfont dup begin
		RomanRotation {
			/FontMatrix FontMatrix
			[ 0 RomanScale neg RomanScale 0 RomanOffset neg 0 ]
			matrix concatmatrix def
		}{
			/FontMatrix FontMatrix
			[ RomanScale 0 0 RomanScale 0 RomanOffset ] matrix concatmatrix
			def
			/CDevProc
			    {pop pop pop pop 0 exch -1000 exch 2 div 880} def
		} ifelse
	    end
	    /asciifont exch definefont
	    exch
	    /FDepVector [ 4 2 roll ] def
	    /FontType 0 def
	    /WMode 0 def
	    /FMapType 4 def
	    /FontMatrix matrix def
	    /Encoding [0 1] def
	    /FontBBox {0 0 0 0} def
%	    /FontHeight 1.0 def % XXXX
	    /FontHeight RomanScale 1.0 ge { RomanScale }{ 1.0 } ifelse def
	    /Descent -0.3 def   % XXXX
	    currentdict
	end
	/tmpfont exch definefont
	pop
	/tmpfont findfont
    }{
	pop findfont 0 copyfont
    } ifelse
} def	

/slantfont {	% FontName slant-degree  slantfont  font'
    exch findfont 1 copyfont begin
    [ 1 0 4 -1 roll 1 0 0 ] FontMatrix exch matrix concatmatrix
    /FontMatrix exch def
    currentdict
    end
} def

% Function print line number (<string> # -)
/# {
  gsave
    sx cw mul neg 2 div 0 rmoveto
    f# setfont
    c-show
  grestore
} bind def

% -------- Some routines to enlight plain b/w printings ---------

% Underline
% width --
/dounderline {
  currentpoint
  gsave
    moveto
    0 currentfont /Descent get currentfontsize mul rmoveto
    0 rlineto
    stroke
  grestore
} bind def

% Underline a string
% string --
/dounderlinestring {
  stringwidth pop
  dounderline
} bind def

/UL {
  /ul exch store
} bind def

% Draw a box of WIDTH wrt current font
% width --
/dobox {
  currentpoint
  gsave
    newpath
    moveto
    0 currentfont /Descent get currentfontsize mul rmoveto
    dup 0 rlineto
    0 currentfont /FontHeight get currentfontsize mul rlineto
    neg 0 rlineto
    closepath
    stroke
  grestore
} bind def

/BX {
  /bx exch store
} bind def

% Box a string
% string --
/doboxstring {
  stringwidth pop
  dobox
} bind def

%
% ------------- Color routines ---------------
%
/FG /setrgbcolor load def

% Draw the background
% width --
/dobackground {
  currentpoint
  gsave
    newpath
    moveto
    0 currentfont /Descent get currentfontsize mul rmoveto
    dup 0 rlineto
    0 currentfont /FontHeight get currentfontsize mul rlineto
    neg 0 rlineto
    closepath
    bgcolor aload pop setrgbcolor
    fill
  grestore
} bind def

% Draw bg for a string
% string --
/dobackgroundstring {
  stringwidth pop
  dobackground
} bind def


/BG {
  dup /bg exch store
  { mark 4 1 roll ] /bgcolor exch store } if
} bind def


/Show {
  bg { dup dobackgroundstring } if
  ul { dup dounderlinestring } if
  bx { dup doboxstring } if
  show
} bind def

% Function T(ab), jumps to the n-th tabulation in the current line
/T {
  cw mul x0 add
  bg { dup currentpoint pop sub dobackground } if
  ul { dup currentpoint pop sub dounderline } if
  bx { dup currentpoint pop sub dobox } if
  y0 moveto
} bind def

% Function n: move to the next line
/n {
  /y0 y0 bfs sub store
  x0 y0 moveto
} bind def

% Function N: show and move to the next line
/N {
  Show
  /y0 y0 bfs sub store
  x0 y0 moveto
} bind def

/S {
  Show
} bind def

%%BeginResource: procset a2ps-a2ps-hdr 2.0 2
%%Copyright: (c) 1988, 89, 90, 91, 92, 93 Miguel Santana
%%Copyright: (c) 1995, 96, 97, 98 Akim Demaille, Miguel Santana
% Function title: prints page header.
% <ct> <rt> <lt> are passed as argument
/title { 
  % 1. Draw the background
  x v get y v get moveto
  gsave
    0 th 2 div neg rmoveto 
    th setlinewidth
    0.95 setgray
    pw 0 rlineto stroke
  grestore
  % 2. Border it
  gsave
    0.7 setlinewidth
    pw 0 rlineto
    0 th neg rlineto
    pw neg 0 rlineto
    closepath stroke
  grestore
  % stk: ct rt lt
  x v get y v get th sub 1 add moveto
%%IncludeResource: font Helvetica
  fHelvetica fnfs 0.8 mul scalefont setfont
  % 3. The left title
  gsave
    dup stringwidth pop fnfs 0.8 mul add exch % leave space took on stack
    fnfs 0.8 mul hm rmoveto
    show			% left title
  grestore
  exch
  % stk: ct ltw rt
  % 4. the right title
  gsave
    dup stringwidth pop fnfs 0.8 mul add exch % leave space took on stack
    dup
    pw exch stringwidth pop fnfs 0.8 mul add sub
    hm
    rmoveto
    show			% right title
  grestore
  % stk: ct ltw rtw
  % 5. the center title
  gsave
    pw 3 1 roll
    % stk: ct pw ltw rtw
    3 copy 
    % Move to the center of the left room
    sub add 2 div hm rmoveto
    % What is the available space in here?
    add sub fnfs 0.8 mul sub fnfs 0.8 mul sub
    % stk: ct space_left
%%IncludeResource: font Helvetica-Bold
  fHelvetica-Bold fnfs scalefont setfont
    cfshow
  grestore
} bind def

% Function border: prints virtual page border
/border { %def
  gsave				% print four sides
    0 setgray
    x v get y v get moveto
    0.7 setlinewidth		% of the square
    pw 0 rlineto
    0 ph neg rlineto
    pw neg 0 rlineto
    closepath stroke
  grestore
} bind def

% Function water: prints a water mark in background
/water { %def
  gsave
    scx scy moveto rotate
%%IncludeResource: font Times-Bold
  fTimes-Bold 100 scalefont setfont
    .97 setgray
    dup stringwidth pop 2 div neg -50 rmoveto
    show
  grestore
} bind def

% Function rhead: prints the right header
/rhead {  %def
  lx ly moveto
  fHelvetica fnfs 0.8 mul scalefont setfont
  l-show
} bind def

% Function footer (cf rf lf -> -)
/footer {
  fHelvetica fnfs 0.8 mul scalefont setfont
  dx dy moveto
  show

  snx sny moveto
  l-show
  
  fnx fny moveto
  c-show
} bind def
%%EndResource
%%BeginResource: procset a2ps-black+white-Prolog 2.0 1

% Function T(ab), jumps to the n-th tabulation in the current line
/T { 
  cw mul x0 add y0 moveto
} bind def

% Function n: move to the next line
/n { %def
  /y0 y0 bfs sub store
  x0 y0 moveto
} bind def

% Function N: show and move to the next line
/N {
  Show
  /y0 y0 bfs sub store
  x0 y0 moveto
}  bind def

/S {
  Show
} bind def

/p {
  false UL
  false BX
  fCourier bfs scalefont setfont
  Show
} bind def

/sy {
  false UL
  false BX
  fSymbol bfs scalefont setfont
  Show
} bind def

/k {
  false UL
  false BX
  fCourier-Oblique bfs scalefont setfont
  Show
} bind def

/K {
  false UL
  false BX
  fCourier-Bold bfs scalefont setfont
  Show
} bind def

/c {
  false UL
  false BX
  fCourier-Oblique bfs scalefont setfont
  Show
} bind def

/C {
  false UL
  false BX
  fCourier-BoldOblique bfs scalefont setfont
  Show 
} bind def

/l {
  false UL
  false BX
  fHelvetica bfs scalefont setfont
  Show
} bind def

/L {
  false UL
  false BX
  fHelvetica-Bold bfs scalefont setfont
  Show 
} bind def

/str{
  false UL
  false BX
  fTimes-Roman bfs scalefont setfont
  Show
} bind def

/e{
  false UL
  true BX
  fHelvetica-Bold bfs scalefont setfont
  Show
} bind def

%%EndResource
%%EndProlog
%%BeginSetup
%%IncludeResource: font Courier
%%IncludeResource: font Courier-Oblique
%%IncludeResource: font Courier-Bold
%%IncludeResource: font Times-Roman
%%IncludeResource: font Symbol
%%IncludeResource: font Courier-BoldOblique
%%BeginResource: encoding ISO-8859-1Encoding
/ISO-8859-1Encoding [
/.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef 
/.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef 
/.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef 
/.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef 
/space /exclam /quotedbl /numbersign /dollar /percent /ampersand /quoteright 
/parenleft /parenright /asterisk /plus /comma /minus /period /slash 
/zero /one /two /three /four /five /six /seven 
/eight /nine /colon /semicolon /less /equal /greater /question 
/at /A /B /C /D /E /F /G 
/H /I /J /K /L /M /N /O 
/P /Q /R /S /T /U /V /W 
/X /Y /Z /bracketleft /backslash /bracketright /asciicircum /underscore 
/quoteleft /a /b /c /d /e /f /g 
/h /i /j /k /l /m /n /o 
/p /q /r /s /t /u /v /w 
/x /y /z /braceleft /bar /braceright /asciitilde /.notdef 
/.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef 
/.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef 
/.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef 
/.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef 
/space /exclamdown /cent /sterling /currency /yen /brokenbar /section 
/dieresis /copyright /ordfeminine /guillemotleft /logicalnot /hyphen /registered /macron 
/degree /plusminus /twosuperior /threesuperior /acute /mu /paragraph /bullet 
/cedilla /onesuperior /ordmasculine /guillemotright /onequarter /onehalf /threequarters /questiondown 
/Agrave /Aacute /Acircumflex /Atilde /Adieresis /Aring /AE /Ccedilla 
/Egrave /Eacute /Ecircumflex /Edieresis /Igrave /Iacute /Icircumflex /Idieresis 
/Eth /Ntilde /Ograve /Oacute /Ocircumflex /Otilde /Odieresis /multiply 
/Oslash /Ugrave /Uacute /Ucircumflex /Udieresis /Yacute /Thorn /germandbls 
/agrave /aacute /acircumflex /atilde /adieresis /aring /ae /ccedilla 
/egrave /eacute /ecircumflex /edieresis /igrave /iacute /icircumflex /idieresis 
/eth /ntilde /ograve /oacute /ocircumflex /otilde /odieresis /divide 
/oslash /ugrave /uacute /ucircumflex /udieresis /yacute /thorn /ydieresis 
] def
%%EndResource
% Initialize page description variables.
/sh 612 def
/sw 792 def
/llx 24 def
/urx 768 def
/ury 588 def
/lly 24 def
/#copies 1 def
/th 15.000000 def
/fnfs 11 def
/bfs 7.060185 def
/cw 4.236111 def

% Dictionary for ISO-8859-1 support
/iso1dict 8 dict begin
  /fCourier ISO-8859-1Encoding /Courier reencode_font
  /fCourier-Bold ISO-8859-1Encoding /Courier-Bold reencode_font
  /fCourier-BoldOblique ISO-8859-1Encoding /Courier-BoldOblique reencode_font
  /fCourier-Oblique ISO-8859-1Encoding /Courier-Oblique reencode_font
  /fHelvetica ISO-8859-1Encoding /Helvetica reencode_font
  /fHelvetica-Bold ISO-8859-1Encoding /Helvetica-Bold reencode_font
  /fTimes-Bold ISO-8859-1Encoding /Times-Bold reencode_font
  /fTimes-Roman ISO-8859-1Encoding /Times-Roman reencode_font
currentdict end def
/bgcolor [ 0 0 0 ] def
/bg false def
/ul false def
/bx false def
% The font for line numbering
/f# /Helvetica findfont bfs .6 mul scalefont def
/fSymbol /Symbol findfont def
/hm fnfs 0.25 mul def
/pw
   cw 86.400000 mul
def
/ph
   520.335631 th add
def
/pmw urx llx sub pw 2 mul sub 1 div def
/pmh 0 def
/v 0 def
/x [
  0
  dup pmw add pw add
] def
/y [
  pmh ph add 0 mul ph add
  dup
] def
/scx sw 2 div def
/scy sh 2 div def
/snx urx def
/sny lly 2 add def
/dx llx def
/dy sny def
/fnx scx def
/fny dy def
/lx snx def
/ly ury fnfs 0.8 mul sub def
/sx 5 def
/tab 8 def
/x0 0 def
/y0 0 def
%%EndSetup

%%Page: (1-2) 1
%%BeginPageSetup
/pagesave save def
sh 0 translate 90 rotate
%%EndPageSetup
iso1dict begin
gsave
llx lly 12 add translate
/v 0 store
/x0 x v get 2.965278 add sx cw mul add store
/y0 y v get bfs th add sub store
x0 y0 moveto
0 T (!CHARMM Element source/stringm/ftsm.src $Revision: 0 $) p n
0 T (!) N
0 T (! finite-temperature string / NEB code) N
0 T (! documentation will be provided in stringm.doc) N
0 T (!) N
0 T (__CHARMM_ONLY##IF STRINGM) N
0 T (!) N
0 T (      module ftsm ! finite-temperature string method) N
0 T (      __CHARMM_ONLY __DEP_KINDS) N
(10) # (      use ftsm_var) N
0 T (      use ftsm_voronoi) N
0 T (      __DEP_BESTFIT ! , only : RMSBestFit, rmsd) N
0 T (!) N
0 T (      private) N
0 T (!ccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccc) N
0 T (!     SUBROUTINES) N
0 T (!) N
0 T (      public ftsm_parse) N
0 T (      public ftsm_main) N
(20) # (      private ftsm_calc) N
0 T (      private ftsm_compute_fe_fd) N
0 T (      private ftsm_repa) N
0 T (      private ftsm_mini) N
0 T (      private ftsm_swap_bc) N
0 T (      private ftsm_update_overlap_coor) N
0 T (      private ftsm_save_com) N
0 T (      private ftsm_init) N
0 T (      private ftsm_done) N
0 T (      private ftsm_repa_init) N
(30) # (      private ftsm_mini_init) N
0 T (      private ftsm_list_atoms) N
0 T (      private ftsm_set_weights) N
0 T (      private ftsm_swap) N
0 T (      private ftsm_fill) N
0 T (      private ftsm_lift) N
0 T (      private ftsm_compute_overlap_ind) N
0 T (      private ftsm_define_rtmd_type) N
0 T (      private ftsm_write_dcd) N
0 T (      private ftsm_read_dcd) N
(40) # (      private ftsm_write_cor) N
0 T (      private ftsm_read_cor) N
0 T (      private ftsm_stat_init) N
0 T (      private ftsm_stat) N
0 T (      private ftsm_test_grad) N
0 T (      private ftsm_test_parallel) N
0 T (      private ftsm_check) N
0 T (      private ftsm_addforce) N
0 T (      private ftsm_evolve) N
0 T (      private ftsm_repl_exchange) N
(50) # (!) N
0 T (      contains) N
0 T (!) N
0 T (      subroutine ftsm_parse\(COMLYN,COMLEN\)) N
0 T (      use ftsm_rex, only: ftsm_rex_set_temp) N
0 T (      use ftsm_voronoi, only: ftsm_voronoi_map, ftsm_voronoi_initialized, ftsm_v) N
0 T (oronoi_whereami) N
0 T (!----------------------------------------------------------------------) N
0 T (! command parser for the finite temperature string) N
0 T (!----------------------------------------------------------------------) N
0 T (      __DEP_OUTPUT) N
(60) # (      __DEP_PARSER ) N
0 T (      __DEP_NUMBER ) N
0 T (      __DEP_MULTICOM) N
0 T (      __DEP_CONST ) N
0 T (      __DEP_MPI ) N
0 T (      __DEP_SELECT) N
0 T (      __DEP_COORDINATES) N
0 T (      __DEP_SIZE) N
0 T (!) N
0 T (#ifdef __CHARMM) N
(70) # (      use ctitla ) N
0 T (! need BNBND, BIMAG for ftsm_mini) N
0 T (      use bases_fcm, only : BNBND, BIMAG) N
(ftsm.ftn) (Page 1/83) (Mar 09, 13 15:34) title
border
/v 1 store
/x0 x v get 2.965278 add sx cw mul add store
/y0 y v get bfs th add sub store
x0 y0 moveto
0 T (#endif) p n
0 T (!ccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccc) N
0 T (      __IMPNONE) N
0 T (!) N
0 T (      character\(len=*\) :: comlyn) N
0 T (      int :: comlen) N
0 T (! local variables) N
(80) # (      int :: ivver, ivv2, iorig, ileap ! for dynamics) N
0 T (      int :: error, klen, strl) N
0 T (!) N
0 T (      character\(len=16\) :: keyword) N
0 T (      character\(len=80\) :: fname) N
0 T (      character\(len=6\) :: whoami) N
0 T (      float :: zval, k, step, voro_cut) N
0 T (      int :: ifile, c1, c2, qcor, qdcd, flen,            &) N
0 T (     &           num_ave_samples, irep, i, imode,        &) N
0 T (     &           iorie, irmsd, ierror, me) N
(90) # (!) N
0 T (#ifdef __CHARMM) N
0 T (      int :: oldiol, isele) N
0 T (      int :: iselct\(natom\)) N
0 T (#else) N
0 T (      int :: natom) N
0 T ( __DECLARE_DMOL_SELECT) N
0 T (#endif) N
0 T (      float, pointer :: fd_error\(:,:\)) N
0 T (!) N
(100) # (      bool :: qroot, qslave, qprint, qcomp, voronoi_check_map, ok) N
0 T (!) N
0 T ( __DECLARE_MSGBUF) N
0 T (!) N
0 T (#include "../../mpitype.def") N
0 T (!) N
0 T (      data whoami /' FTSM>'/) N
0 T (!) N
0 T (      keyword=__NEXTA\(comlyn,comlen\)) N
0 T (!) N
(110) # (      qroot=MPI_COMM_STRNG.ne.MPI_COMM_NULL) N
0 T (      qslave=\(\(MPI_COMM_LOCAL.ne.MPI_COMM_NULL\).and.SIZE_LOCAL.gt.1\)) N
0 T (      qprint=qroot.and.ME_STRNG.eq.0) N
0 T (!) N
0 T (! check for smcv initialization; quit if initialized) N
0 T (      if \(smcv_initialized\) then) N
0 T (       __WRN\(whoami,' SMCV IS ON AND CANNOT BE USED WITH FTSM. NOTHING DONE.'\)) N
0 T (       return) N
0 T (      endif) N
0 T (!ccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccc) N
(120) # (      if \(__STRNCMP\(keyword,'INIT',4\)\) then) N
0 T (        call ftsm_init\(\)) N
0 T (        return) N
0 T (      endif) N
0 T (!ccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccc) N
0 T (      if \(.not.ftsm_initialized\) then) N
0 T (        call ftsm_init\(\)) N
0 T (      endif) N
0 T (!cccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccc) N
0 T (      if \(__STRNCMP\(keyword,'DONE',4\)\) then) N
(130) # (        call ftsm_done\(\)) N
0 T (!cccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccc) N
0 T (      elseif \(__STRNCMP\(keyword,'REPA',4\)\) then) N
0 T (       if \(comlen.gt.0\) then ! this is an initialization call!) N
0 T (        call ftsm_repa_init\(comlyn, comlen\)) N
0 T (       else) N
0 T (        if \(ftsm_check\(qorient\)\) call ftsm_repa\(\)) N
0 T (       endif) N
0 T (!ccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccc) N
0 T (      elseif \(__STRNCMP\(keyword,'MINI',4\)\) then) N
(140) # (       if \(comlen.gt.0 .or. .not. ftsm_mini_initialized \) then ! this is an init) N
0 T (ialization call) N
0 T (        call ftsm_mini_init\(comlyn, comlen\)) N
0 T (       else) N
0 T (        if \(ftsm_check\(qorient\)\) then) N
0 T (         if \(qorient.and.any\(__XX\(iatom_o\).eq.__NAN\)\) then) N
(ftsm.ftn) (Page 2/83) (Mar 09, 13 15:34) title
border
grestore
(Printed by surgeon) rhead
(ftsm.ftn) (1/42) (Saturday March 09, 2013) footer
end % of iso1dict
pagesave restore
showpage
%%Page: (3-4) 2
%%BeginPageSetup
/pagesave save def
sh 0 translate 90 rotate
%%EndPageSetup
iso1dict begin
gsave
llx lly 12 add translate
/v 0 store
/x0 x v get 2.965278 add sx cw mul add store
/y0 y v get bfs th add sub store
x0 y0 moveto
0 T (         __WRN\(whoami,'MAIN ORIENTATION X-SET HAS UNDEFINED VALUES. NOTHING DONE) p n
0 T (.'\)) N
0 T (         else) N
0 T (          call ftsm_mini\(__XX\(1:natom\), __YY\(1:natom\), __ZZ\(1:natom\) &) N
0 T (#ifdef __CHARMM) N
0 T (     &                                         ,WMAIN\(1:natom\), BNBND, BIMAG    ) N
0 T ( &) N
(150) # (#endif) N
0 T (     &                                         \)) N
0 T (         endif ! qorient) N
0 T (        endif ! ftsm_check) N
0 T (       endif ! comlen) N
0 T (!ccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccc) N
0 T (      elseif \(__STRNCMP\(keyword,'STAT',4\)\) then) N
0 T (       if \(comlen.gt.0\) then ! this is an initialization call!) N
0 T (        call ftsm_stat_init\(comlyn, comlen\)) N
0 T (       else) N
(160) # (        call ftsm_stat\(\)) N
0 T (       endif) N
0 T (!ccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccc) N
0 T (      elseif \(__STRNCMP\(keyword,'DYNA',4\)\) then) N
0 T (#ifdef __CHARMM) N
0 T (!ccccc will assume that other distributions specify dynamics elsewhere ccccccc) N
0 T (       ivver=__INDX_RM\(comlyn, comlen, 'VVER'\)) N
0 T (       ivv2=__INDX_RM\(comlyn, comlen, 'VV2'\)) N
0 T (       iorig=__INDX_RM\(comlyn, comlen, 'ORIG'\)) N
0 T (       ileap=__INDX_RM\(comlyn, comlen, 'LEAP'\)) N
(170) # (       if \(\(ivver+ivv2+iorig\).gt.0\) then) N
0 T (        __WRN\( whoami,'ONLY LEAP-FROG DYNAMICS ARE SUPPORTED. NOTHING DONE'\)) N
0 T (        return) N
0 T (       endif) N
0 T (!      force LEAP DYNAMICS) N
0 T (       call joinwd\(comlyn, mxcmsz, comlen, 'LEAP ', 5\)) N
0 T (#endif) N
0 T (!ccccccccccccccc PARSE OTHER DYNAMICS OPTIONS) N
0 T (! code from SMCV) N
0 T (       voronoi_hist_on=\(__INDX_RM\(comlyn,comlen,'VORO'\).gt.0\)) N
(180) # (       if \(voronoi_hist_on\) then) N
0 T (        voro_cut=zero) N
0 T (        if \(__INDX\(comlyn, comlen, 'VCUT',4\).gt.0\) then) N
0 T (         voro_cut=__GET_RM_F\(comlyn,comlen,'VCUT',zero\)) N
0 T (         if \(voro_cut.le.zero\) then) N
0 T (          __WRN\(whoami,'VCUT MUST BE POSITIVE. NOT SET.'\)) N
0 T (         else) N
0 T (          call ftsm_voronoi_set_cutoff\(voro_cut\)) N
0 T (         endif) N
0 T (        endif) N
(190) # (        voronoi_allow_cross=\(__INDX_RM\(comlyn,comlen, 'VCRS'\).gt.0\)) N
0 T (        if \(voronoi_allow_cross\) then) N
0 T (         voronoi_update_freq=__GET_RM_I\(comlyn,comlen,'VCRF',0\)) N
0 T (         if \(voronoi_update_freq.le.0\) then) N
0 T (          __WRN\(whoami,'MUST SPECIFY POSITIVE VCRF. VORONOI CELL CROSSING DISABL) N
0 T (ED.'\)) N
0 T (          voronoi_allow_cross=.false.) N
0 T (         elseif \(__INDX\(comlyn, comlen, 'VINI',4\).gt.0\) then ! if vini is presen) N
0 T (t) N
0 T (          voronoi_nocross_ini=__GET_RM_I\(comlyn,comlen,'VINI',0\) ! get it) N
0 T (          if \(voronoi_nocross_ini.le.0\) then) N
0 T (           __WRN\(whoami,'NONPOSITIVE VINI SPECIFIED. WILL SET TO ZERO.'\)) N
(200) # (           voronoi_nocross_ini=0) N
0 T (          endif ! voronoi_nocross_ini>0) N
0 T (         else) N
0 T (          voronoi_nocross_ini=0) N
0 T (         endif ! voronoi_nocross_ini present) N
0 T (        endif ! voronoi_allow_cross) N
0 T (!) N
0 T (!    initialize Voronoi data) N
0 T (        if \(.not.ftsm_voronoi_initialized\) call ftsm_voronoi_init\(\)) N
0 T (!    standard V. calculation case -- no crossing) N
(210) # (        compute_whereami=.false.) N
0 T (        if \(.not.voronoi_allow_cross\) then) N
0 T (!    create standard map \(unless map is present\)) N
0 T (         if \(all\(ftsm_voronoi_map.eq.-1\)\) then) N
(ftsm.ftn) (Page 3/83) (Mar 09, 13 15:34) title
border
/v 1 store
/x0 x v get 2.965278 add sx cw mul add store
/y0 y v get bfs th add sub store
x0 y0 moveto
0 T (          ftsm_voronoi_map=\(/ \(i, i=1, nstring\) /\)) p n
0 T (          compute_whereami=.true. ! will be computed by dynamc routine) N
0 T (         endif) N
0 T (        endif) N
0 T (!) N
0 T (        voronoi_check_map=\(__INDX_RM\(comlyn,comlen, 'CHCK'\).gt.0\)) N
(220) # (!) N
0 T (!    compute whereami) N
0 T (!) N
0 T (        if \(voronoi_check_map\) then) N
0 T (         if \(qprint\) then) N
0 T (          write\(_MSGBUF, 660\) whoami ; __PRINT\(_MSGBUF\)) N
0 T (         endif) N
0 T ( 660  FORMAT\(A,' CHECKING VORONOI MAP AGAINST CURRENT COORDINATES.'\)) N
0 T (!) N
0 T (         compute_whereami=.false.) N
(230) # (         call ftsm_voronoi_whereami_compute\(__X,__Y,__Z\)) N
0 T (!) N
0 T (         if \(all\(ftsm_voronoi_map.ne.-1\)\) then ! does the map have valid entries) N
0 T (           me=ftsm_voronoi_map\(mestring+1\)) N
0 T (!    compare me and whereami:) N
0 T (           if \(qroot\) then) N
0 T (            if\(SIZE_STRNG.gt.1\) then) N
0 T (             call MPI_ALLREDUCE\(me.eq.ftsm_voronoi_whereami, ok,          &) N
0 T (     &         1, mpibool, MPI_LAND, MPI_COMM_STRNG, ierror\)) N
0 T (            else) N
(240) # (             ok=me.eq.ftsm_voronoi_whereami) N
0 T (            endif) N
0 T (           endif ! qroot) N
0 T (           if \(qslave\) then ) N
0 T (            __BROADCAST_LOCAL_4B\(ok,1\)) N
0 T (           endif) N
0 T (           if \(.not.ok\) then) N
0 T (            __WRN\(whoami,'VORONOI MAP INCONSISTENT WITH CURRENT COORDINATES. ABO) N
0 T (RTING.'\)) N
0 T (            return) N
0 T (           endif ! .not. ok) N
(250) # (         else ! voronoi map invalid \(or was not read\); proceed anyway using curr) N
0 T (ent whereami) N
0 T (          __WRN\( whoami,'VORONOI MAP CONTAINS INVALID ENTRIES.'\)) N
0 T (         endif ! ftsm_voronoi_map.ne.-1) N
0 T (!) N
0 T (        else) N
0 T (         ftsm_voronoi_whereami=ftsm_voronoi_map\(mestring+1\)) N
0 T (        endif ! voronoi_check_map) N
0 T (!) N
0 T (       endif ! voronoi_hist_on) N
0 T (!      reset internal interation counter for ftsm_master) N
(260) # (       olditeration=0) N
0 T (!) N
0 T (       update_on=\(__INDX_RM\(comlyn,comlen, 'UPDA'\).gt.0\)) N
0 T (       if \(update_on\) then) N
0 T (        update_freq=__GET_RM_I\(comlyn,comlen,'UPDF',0\)) N
0 T (        if \(update_freq.le.0\) then) N
0 T (         __WRN\( whoami,'UPDATE FREQUENCY INVALID OR UNSPECIFIED. WILL NOT UPDATE) N
0 T (.'\)) N
0 T (         update_on=.false.) N
0 T (        else) N
0 T (         repa_on=\(__INDX_RM\(comlyn,comlen, 'REPA'\).gt.0\)) N
(270) # (         ftsm_mini_on=\(__INDX_RM\(comlyn,comlen, 'MINI'\).gt.0\)) N
0 T (        endif) N
0 T (       endif) N
0 T (!) N
0 T (       stat_on=\(__INDX_RM\(comlyn,comlen, 'STAT'\).gt.0\)) N
0 T (       if \(stat_on\) then) N
0 T (        stat_freq=__GET_RM_I\(comlyn,comlen,'STAF',0\)) N
0 T (        if \(stat_freq.le.0\) then) N
0 T (         __WRN\( whoami,'STATISTICS FREQUENCY INVALID OR UNSPECIFIED.'\)) N
0 T (         stat_on=.false.) N
(280) # (        endif) N
0 T (       endif ! stat_on) N
0 T (!) N
0 T (       evolve_ftsm_on=\(__INDX_RM\(comlyn,comlen, 'EVOL'\).gt.0\)) N
(ftsm.ftn) (Page 4/83) (Mar 09, 13 15:34) title
border
grestore
(Printed by surgeon) rhead
(ftsm.ftn) (2/42) (Saturday March 09, 2013) footer
end % of iso1dict
pagesave restore
showpage
%%Page: (5-6) 3
%%BeginPageSetup
/pagesave save def
sh 0 translate 90 rotate
%%EndPageSetup
iso1dict begin
gsave
llx lly 12 add translate
/v 0 store
/x0 x v get 2.965278 add sx cw mul add store
/y0 y v get bfs th add sub store
x0 y0 moveto
0 T (       if \(evolve_ftsm_on\) then) p n
0 T (        evolve_freq=__GET_RM_I\(comlyn,comlen,'EVOF',0\)) N
0 T (        if \(evolve_freq.le.0\) then) N
0 T (         __WRN\( whoami,'EVOLUTION FREQUENCY INVALID OR UNSPECIFIED. WILL NOT EVO) N
0 T (LVE.'\)) N
0 T (         evolve_ftsm_on=.false.) N
0 T (        endif) N
(290) # (       endif ! evolve_ftsm_on) N
0 T (!) N
0 T (       if \(evolve_ftsm_on\) then ! still on \(see above\)) N
0 T (        evolve_nskip=__GET_RM_I\(comlyn,comlen,'EVOS',0\)) N
0 T (!) N
0 T (! ----- types of evolution) N
0 T (!) N
0 T (        evolve_expo_on=\(__INDX_RM\(comlyn,comlen,'EXPO'\).gt.0\) ! use exponential ) N
0 T (convolution) N
0 T (        if \(evolve_expo_on\) then) N
0 T (         evolve_expo_mem=__GET_RM_F\(comlyn,comlen,'MEMO',0.999d0\)) N
(300) # (        endif) N
0 T (!) N
0 T (        evolve_aver_on=\(__INDX_RM\(comlyn,comlen,'AVER'\).gt.0\) ! r_ref=mean\(r_ins) N
0 T (t\)) N
0 T (        if \(evolve_aver_on\) then) N
0 T (         num_evolve_samples=0) N
0 T (         max_evolve_samples=0) N
0 T (!        setting this large will dampen initial fluctuations) N
0 T (         if \(__INDX\(comlyn, comlen,'NAVE' ,4\).gt.0\) then) N
0 T (          num_ave_samples=__GET_RM_I\(comlyn,comlen,'NAVE',-1\)) N
0 T (          if \(num_ave_samples.gt.0\) then) N
(310) # (            num_evolve_samples=num_ave_samples) N
0 T (          else) N
0 T (           __WRN\(whoami, 'INVALID NUMBER OF SAMPLES SPECIFIED. WILL SET TO ZERO.) N
0 T ('\)) N
0 T (          endif ! num_samples) N
0 T (         endif ! NAVE) N
0 T (!) N
0 T (         if \(__INDX\(comlyn, comlen,'MAXAVE',6\).gt.0\) then) N
0 T (          num_ave_samples=__GET_RM_I\(comlyn,comlen,'MAXAVE',-1\)) N
0 T (          if \(num_ave_samples.gt.0\) then) N
0 T (            max_evolve_samples=num_ave_samples) N
(320) # (          else) N
0 T (  __WRN\(whoami,'INVALID MAXIMUM NUMBER OF SAMPLES SPECIFIED. WILL SET TO ZERO.'\)) N
0 T (          endif ! num_samples) N
0 T (         endif ! MAXAVE) N
0 T (        endif ! evolve_aver) N
0 T (!) N
0 T (        i=0) N
0 T (        if \(evolve_expo_on\)   i=i+1) N
0 T (        if \(evolve_aver_on\)   i=i+1) N
0 T (!) N
(330) # (        if \(i.gt.1\) then) N
0 T (         __WRN\( whoami,'MORE THAN ONE EVOLUTION SCHEME REQUESTED. WILL USE EXPO.) N
0 T ('\)) N
0 T (         evolve_expo_on=.true.) N
0 T (         evolve_aver_on=.false.) N
0 T (        endif) N
0 T (!) N
0 T (        if \(i.eq.0\) then) N
0 T (         __WRN\( whoami,'EVOLUTION SCHEME UNSPECIFIED. WILL USE EXPO.'\)) N
0 T (         evolve_expo_on=.true.) N
0 T (         evolve_aver_on=.false.) N
(340) # (        endif) N
0 T (       endif ! evolve_ftsm_on) N
0 T (!) N
0 T (       if \(update_on.and..not.\(evolve_ftsm_on.or.repa_on.or.ftsm_mini_on\)\) then) N
0 T (        __WRN\( whoami,'EVOLUTION, REPARAMETRIZATION AND MINIMIZATION ARE ALL DIS) N
0 T (ABLED. UPDATE IS OFF.'\)) N
0 T (        update_on=.false.) N
0 T (       endif) N
0 T (!) N
0 T (       restrained_on=\(__INDX_RM\(comlyn,comlen, 'RSTR'\).gt.0\)) N
0 T (       if \(restrained_on\) then) N
(350) # (        restrained_eq_steps=__GET_RM_I\(comlyn,comlen,'REEQ',0\)) N
(ftsm.ftn) (Page 5/83) (Mar 09, 13 15:34) title
border
/v 1 store
/x0 x v get 2.965278 add sx cw mul add store
/y0 y v get bfs th add sub store
x0 y0 moveto
0 T (        if \(restrained_eq_steps.lt.0\) then) p n
0 T (          __WRN\(whoami,'REEQ CANNOT BE NEGATIVE. WILL SET TO ZERO.'\)) N
0 T (          restrained_eq_steps=0) N
0 T (        endif) N
0 T (        restrained_eq0=0) N
0 T (       endif) N
0 T (!) N
0 T (       repl_x_on=\(__INDX_RM\(comlyn,comlen,'REX'\).gt.0\)) N
0 T (       if \(repl_x_on\) then) N
(360) # (        repl_x_freq=__GET_RM_I\(comlyn,comlen,'REXF',0\)) N
0 T (        repl_x_temp=__GET_RM_F\(comlyn,comlen,'REXT',0d0\)) N
0 T (!) N
0 T (        if \(repl_x_freq.le.0\) then) N
0 T (          __WRN\(whoami,'MUST SPECIFY POSITIVE REXF. REPLICA EXCHANGE IS OFF.'\)) N
0 T (          repl_x_on=.false.) N
0 T (        elseif \(repl_x_temp.le.0\) then) N
0 T (          __WRN\(whoami,'MUST SPECIFY POSITIVE REXT. REPLICA EXCHANGE IS OFF.'\)) N
0 T (          repl_x_on=.false.) N
0 T (        else) N
(370) # (          call ftsm_rex_set_temp\(repl_x_temp\)) N
0 T (        endif) N
0 T (       endif ! repl_x_on) N
0 T (!) N
0 T (       if \(update_on.or.repl_x_on\) then ! decrease output) N
0 T (         string_noprint=\(__INDX_RM\(comlyn,comlen,'NOPR'\).gt.0\)) N
0 T (       endif) N
0 T (!--------------- DONE PARSING DYNAMICS OPTIONS -----) N
0 T (!    print summary) N
0 T (!cccccccccccccccccc STRING METHOD OPTIONS cccccccccccccccccccccc) N
(380) # (       if \(qprint\) then) N
0 T (        WRITE \(_MSGBUF,'\(2A\)'\) whoami, ' STRING METHOD ENABLED.'; __PRINT\(_MSGBU) N
0 T (F\)) N
0 T (        if \(evolve_ftsm_on\) then) N
0 T (            WRITE \(_MSGBUF,'\(/,2A,/,2A,I7,A\)'\)                          &) N
0 T (     &      whoami, ' STRING EVOLUTION ENABLED.',                       &) N
0 T (     &      whoami, ' WILL EVOLVE AFTER EVERY ',                        &) N
0 T (     &      evolve_freq,' ITERATIONS.'; __PRINT\(_MSGBUF\)) N
0 T (            if \(restrained_on.and.evolve_nskip.gt.0\) then) N
0 T (             WRITE \(_MSGBUF,'\(2A,I7,A\)'\)                                 &) N
0 T (     &       whoami, ' THE FIRST', evolve_nskip,                         &) N
(390) # (     &       ' ITERATIONS WILL NOT CONTRIBUTE TO AVERAGES.'; ) N
0 T (             __PRINT\(_MSGBUF\)) N
0 T (            endif) N
0 T (            if \(evolve_expo_on\) then) N
0 T (               write\(_MSGBUF,671\) whoami, whoami, evolve_expo_mem ; __PRINT\(_MSG) N
0 T (BUF\)) N
0 T ( 671  format\(A,' STRING EVOLUTION WILL BE OF THE FORM:',/,              &) N
0 T (     &       A,' R\(N+1\)=A*R\(N\)+\(1-A\)*RINST, A=',F9.5,'.'\)) N
0 T (            elseif \(evolve_aver_on\) then) N
0 T (               write\(_MSGBUF,6710\) whoami, whoami, num_evolve_samples ; __PRINT\() N
0 T (_MSGBUF\)) N
0 T ( 6710 format\(A,' CV EVOLUTION WILL BE OF THE FORM:',/,                  &) N
(400) # (     & A,' R\(N\)=AVERAGE_0^{N}\(RINST\).  INITIAL NUMBER OF SAMPLES IS ',  &) N
0 T (     & I9,'.'\)) N
0 T (             if \(max_evolve_samples.gt.0\)                               &) N
0 T (     &          write\(_MSGBUF, 6711\) whoami, max_evolve_samples ; __PRINT\(_MSGBU) N
0 T (F\)) N
0 T ( 6711 format\(A, ' ONLY THE MOST RECENT ', I9,' SAMPLES WILL BE USED.'\)) N
0 T () N
0 T (            endif) N
0 T (        endif ! evolve_ftsm_on) N
0 T (!ccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccc) N
0 T (        if \(update_on\) then) N
(410) # (          WRITE \(_MSGBUF,666\) whoami, update_freq ;      __PRINT\(_MSGBUF\)) N
0 T ( 666  format\(A,' WILL UPDATE IMAGES AFTER EVERY ',I7,' ITERATIONS.'\)) N
0 T (         if \(ftsm_mini_on\) then) N
0 T ( 669  format\(A,' WILL MINIMIZE STRING DURING UPDATE '\)) N
0 T (          WRITE \(_MSGBUF,669\) whoami ) N
0 T (          __PRINT\(_MSGBUF\)) N
0 T (         endif ! mini) N
0 T (         if \(repa_on\) then) N
0 T ( 667  format\(A,' WILL REPARAMETRIZE STRING DURING UPDATE '\)) N
0 T (          WRITE \(_MSGBUF,667\) whoami ) N
(ftsm.ftn) (Page 6/83) (Mar 09, 13 15:34) title
border
grestore
(Printed by surgeon) rhead
(ftsm.ftn) (3/42) (Saturday March 09, 2013) footer
end % of iso1dict
pagesave restore
showpage
%%Page: (7-8) 4
%%BeginPageSetup
/pagesave save def
sh 0 translate 90 rotate
%%EndPageSetup
iso1dict begin
gsave
llx lly 12 add translate
/v 0 store
/x0 x v get 2.965278 add sx cw mul add store
/y0 y v get bfs th add sub store
x0 y0 moveto
(420) # (          __PRINT\(_MSGBUF\)) p n
0 T (         endif) N
0 T (        endif ! update_on) N
0 T (!ccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccc) N
0 T (        if \(restrained_on\) then) N
0 T (            WRITE \(_MSGBUF,'\(2A\)'\)                                         &) N
0 T (     &      whoami, ' WILL USE RESTRAINED DYNAMICS.' ;   __PRINT\(_MSGBUF\)) N
0 T (!) N
0 T (            write\(_MSGBUF,665\) whoami, restrained_eq_steps ;   __PRINT\(_MSGBUF\)) N
0 T ( 665  format\(A, ' WILL ADJUST TO NEW RESTRAINTS OVER ',I11, ' STEPS.'\)) N
(430) # (!) N
0 T (!       proj_on is necessary to compute free energies) N
0 T (         if \(proj_on\) then) N
0 T (            write \(_MSGBUF,'\(2A\)'\) whoami,                                 &) N
0 T (     & ' WILL RESTRAIN SYSTEM TO PLANE PERPENDICULAR TO PATH.' ; __PRINT\(_MSGBUF) N
0 T (\)) N
0 T (         else) N
0 T (            write \(_MSGBUF,'\(2A\)'\) whoami,                                 &) N
0 T (     & ' WILL RESTRAIN SYSTEM TO PATH IMAGE.'//                         &) N
0 T (     & ' \(FE/MFPT CANNOT BE COMPUTED\).' ; __PRINT\(_MSGBUF\)) N
0 T (         endif ! proj_on) N
(440) # (        else) N
0 T (         ) N
0 T (        endif !restrained) N
0 T (!cccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccc) N
0 T (        if \(stat_on\) then) N
0 T (            write\(_MSGBUF,668\) whoami, stat_freq ;                __PRINT\(_MSGBU) N
0 T (F\)) N
0 T ( 668  format\(A, ' WILL OUTPUT STRING STATISTICS AFTER EVERY ',I7, ' STEPS.'\)) N
0 T (        endif) N
0 T (!cccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccc) N
0 T (        if \(repl_x_on\) then) N
(450) # (            write\(_MSGBUF,691\) whoami, whoami, repl_x_freq, repl_x_temp) N
0 T (            __PRINT\(_MSGBUF\)) N
0 T ( 691  format\(A, ' WILL ATTEMPT TO EXCHANGE NEIGHBORING REPLICAS ',/     &) N
0 T (     &       A, ' ONCE IN EVERY ',I6,' ITERATIONS AT ',F11.3, ' K.'\)) N
0 T (        endif ! repl_x_on) N
0 T (!ccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccc) N
0 T (        if \(voronoi_hist_on\) then) N
0 T (            write\(_MSGBUF,670\) whoami ; __PRINT\(_MSGBUF\)) N
0 T ( 670  format\(A, ' WILL COMPUTE FREE ENERGY ALONG STRING USING VORONOI TESSELLATI) N
0 T (ON.' \)) N
0 T (         if \(voronoi_allow_cross\) then) N
(460) # (          write\(_MSGBUF,601\) whoami ; __PRINT\(_MSGBUF\)) N
0 T (          write\(_MSGBUF,602\) whoami, whoami, voronoi_update_freq ; __PRINT\(_MSGB) N
0 T (UF\)) N
0 T (          if \(voronoi_nocross_ini.gt.0\) then) N
0 T (           write\(_MSGBUF, 603\) whoami, whoami, voronoi_nocross_ini ; __PRINT\(_MS) N
0 T (GBUF\)) N
0 T (          endif) N
0 T ( 601  format\(A, ' WILL ALLOW REPLICAS TO CROSS BETWEEN V. CELLS.'\)) N
0 T ( 602  format\(A, ' WILL UPDATE CROSSING STATISTICS ONCE IN EVERY',/,     &) N
0 T (     &      A, I6, ' ITERATIONS.'\)) N
0 T ( 603  format\(A, ' WILL DISALLOW CROSSING DURING THE INITIAL ',/,A,I6,   &) N
0 T (     &       ' ITERATIONS.'\)) N
(470) # (         endif) N
0 T (         if \(voro_cut.gt.zero\) then ) N
0 T (          write\(_MSGBUF,'\(2A,/2A,F11.7,A\)'\)            &) N
0 T (     & whoami,' STRING WILL BE RESTRICTED TO STAY WITHIN ',             &) N
0 T (     & whoami,' THE WEIGHTED DISTANCE ',voro_cut,' OF THE CELL CENTERS.' ; ) N
0 T (         __PRINT\(_MSGBUF\)) N
0 T (         endif) N
0 T (         if \(restrained_on\) then ) N
0 T (          write\(_MSGBUF,'\(2A,/2A\)'\)   &) N
0 T (     &      whoami, ' STRING DYNAMICS SHOULD BE USED WITH CAUTION',     &) N
(480) # (     &      whoami, ' DURING VORONOI FE COMPUTATION.' ; __PRINT\(_MSGBUF\)) N
0 T (         endif) N
0 T (         if \(update_on\) then) N
0 T (          if \(.not.voronoi_allow_cross\) then) N
0 T (           write\(_MSGBUF,'\(2A,/2A\)'\)                                       &) N
0 T (     &    whoami, ' STRING UPDATE DURING VORONOI FE COMPUTATION IS',     &) N
0 T (     &    whoami, ' EXPERIMENTAL AND SHOULD BE USED WITH CAUTION ' ; __PRINT\(_MS) N
0 T (GBUF\)) N
(ftsm.ftn) (Page 7/83) (Mar 09, 13 15:34) title
border
/v 1 store
/x0 x v get 2.965278 add sx cw mul add store
/y0 y v get bfs th add sub store
x0 y0 moveto
0 T (          else) p n
0 T (           write\(_MSGBUF,'\(2A,/2A,/2A\)'\)                                   &) N
0 T (     &    whoami, ' STRING CANNOT BE UPDATED ON THE FLY',     &) N
(490) # (     &    whoami, ' IF VORONOI CELL CROSSING IS ALLOWED.',      &) N
0 T (     &    whoami, ' VORONOI CELL CROSSING WILL BE OFF.' ; __PRINT\(_MSGBUF\)) N
0 T (           voronoi_allow_cross=.false.) N
0 T (          endif ! voronoi_allow_cross) N
0 T (         endif ! update_on) N
0 T (        endif ! voronoi_hist_on) N
0 T (!ccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccc) N
0 T (       endif ! qprint) N
0 T (!cccccccccccccccccccccccccccccccccccccccccccccccccccccccccccc) N
0 T (       call ftsm_save_com\(\)       ! recompute COM in case weights changed) N
(500) # (       call ftsm_swap_bc\(.true.\)  ! update boundary replicas \(with new COM-free ) N
0 T (structures\)) N
0 T (!      turn on string for dynamics) N
0 T (       ftsm_on=.true.) N
0 T (!      call dynamics parser) N
0 T (       call dynopt\(comlyn, comlen\)) N
0 T (!cccccc turn off string for regular dynamics ccccccc) N
0 T (       ftsm_on=.false.) N
0 T (       repa_on=.false. ! turn off after dynamics because SM0K also uses this fla) N
0 T (g; therefore a subsequent minimization would call reparametrization) N
0 T (!ccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccc) N
0 T (cccc) N
0 T (!ccccccccccccccccccc ADDITIONAL VORONOI OPTIONS cccccccccccccccccccccccccccccccc) N
0 T (cccc) N
(510) # (      elseif \(__STRNCMP\(keyword,'VORO',4\)\) then) N
0 T (!    get voronoi command) N
0 T (       keyword=__NEXTA\(comlyn,comlen\)) N
0 T (       if \(__STRNCMP\(keyword,'VMAP',4\)\) then) N
0 T (        if \(__INDX_RM\(comlyn, comlen, 'CALC'\).gt.0\) then) N
0 T (          if \(qprint\) then ; write\(_MSGBUF,6010\) whoami ; ) N
0 T (          __PRINT\(_MSGBUF\) ; endif) N
0 T ( 6010 format\(A,' WILL CALCULATE VORONOI MAP FROM MAIN COORDINATES.'\)) N
0 T (          call ftsm_voronoi_whereami_compute\(__X,__Y,__Z\)) N
0 T (!    put 'whereami' into the map) N
(520) # (          if \(qroot.and.SIZE_STRNG.gt.1\) then) N
0 T (           call MPI_ALLGATHER\(ftsm_voronoi_whereami, 1, mpiint,       &) N
0 T (     &      ftsm_voronoi_map, 1, mpiint, MPI_COMM_STRNG, ierror\)) N
0 T (          else) N
0 T (           ftsm_voronoi_map\(mestring+1\)=ftsm_voronoi_whereami) N
0 T (          endif) N
0 T (          if \(qslave\) then) N
0 T (#ifdef __CHARMM) N
0 T (          __BROADCAST_LOCAL_4B\(ftsm_voronoi_map,nstring\)  !__CHARMM_ONLY##.not.I) N
0 T (NTEGER8) N
0 T (          __BROADCAST_LOCAL_8B\(ftsm_voronoi_map,nstring\)  !__CHARMM_ONLY##INTEGE) N
0 T (R8) N
(530) # (#elif defined \(__DMOL\)) N
0 T (          __BROADCAST_LOCAL\(ftsm_voronoi_map,nstring,mpiint\)) N
0 T (#endif) N
0 T (!) N
0 T (          endif) N
0 T (!    print cccccccccccccccccccccccccccccccccccccccccccccccccccccccccccc) N
0 T (        elseif \(__INDX_RM\(comlyn, comlen, 'PRIN'\).gt.0\) then) N
0 T (          ifile=__GET_RM_I\(comlyn,comlen,'UNIT',-1\)) N
0 T (          __GET_RM_A\(COMLYN,COMLEN,'NAME',4,FNAME,80,FLEN\)) N
0 T (!        note: FNAME will be UPPER CASE) N
(540) # (          if \(qroot\) then) N
0 T (           if \(flen.GT.0\) then) N
0 T (            if \(qprint\) then ) N
0 T (             __OPEN_FILE\(ifile,fname,'FORMATTED','WRITE'\)) N
0 T (             write\(_MSGBUF,6011\) whoami, fname\(1:flen\) ; __PRINT\(_MSGBUF\)) N
0 T (            endif) N
0 T ( 6011 format\(A,' WRITING VORONOI MAP TO FILE ',A,'.'\)) N
0 T (            call ftsm_voronoi_print_map\(ifile\)) N
0 T (            if \(qprint\) then ; __CLOSE_FILE\(ifile,'KEEP',ierror\) ; endif) N
0 T (           else) N
(550) # (            __WRN\(whoami,'FILE NAME NOT SPECIFIED. NOTHING DONE.'\)) N
0 T (           endif ! flen) N
0 T (          endif ! qroot) N
0 T (!    read ccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccc) N
(ftsm.ftn) (Page 8/83) (Mar 09, 13 15:34) title
border
grestore
(Printed by surgeon) rhead
(ftsm.ftn) (4/42) (Saturday March 09, 2013) footer
end % of iso1dict
pagesave restore
showpage
%%Page: (9-10) 5
%%BeginPageSetup
/pagesave save def
sh 0 translate 90 rotate
%%EndPageSetup
iso1dict begin
gsave
llx lly 12 add translate
/v 0 store
/x0 x v get 2.965278 add sx cw mul add store
/y0 y v get bfs th add sub store
x0 y0 moveto
0 T (        elseif \(__INDX_RM\(comlyn, comlen, 'READ'\).gt.0\) then) p n
0 T (          ifile=__GET_RM_I\(comlyn,comlen,'UNIT',-1\)) N
0 T (          __GET_RM_A\(COMLYN,COMLEN,'NAME',4,FNAME,80,FLEN\)) N
0 T (!        note: FNAME will be UPPER CASE) N
0 T (          if \(flen.GT.0\) then) N
0 T (            if \(qprint\) then ) N
(560) # (            __OPEN_FILE\(ifile,fname,'FORMATTED','WRITE'\)) N
0 T (             write\(_MSGBUF,6013\) whoami, fname\(1:flen\) ; __PRINT\(_MSGBUF\)) N
0 T (            endif) N
0 T (!) N
0 T ( 6013 format\(A,' READING VORONOI MAP FROM FILE ',A,'.'\)) N
0 T (            call ftsm_voronoi_read_map\(ifile\)) N
0 T (            if \(qprint\) then ; __CLOSE_FILE\(ifile,'KEEP',ierror\) ; endif) N
0 T (           else) N
0 T (            __WRN\(whoami,'FILE NAME NOT SPECIFIED. NOTHING DONE.'\)) N
0 T (           endif ! flen) N
(570) # (        endif ! 'CALC') N
0 T (!ccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccc) N
0 T (       elseif \(__STRNCMP\(keyword,'READ',4\)\) then) N
0 T (!    read "restart" file that contains \(1\) crossing_attempt \(2\) crossing_accepts) N
0 T ( \(3\) occupancy) N
0 T (         ifile=__GET_RM_I\(comlyn,comlen,'UNIT',-1\)) N
0 T (         __GET_RM_A\(COMLYN,COMLEN,'NAME',4,FNAME,80,FLEN\)) N
0 T (!        note: FNAME will be UPPER CASE) N
0 T (         if \(flen.GT.0\) then) N
0 T (          if \(qprint\) then) N
0 T (           __OPEN_FILE\(ifile,fname,'FORMATTED','WRITE'\)) N
(580) # (           write\(_MSGBUF,6014\) whoami, fname\(1:flen\) ; __PRINT\(_MSGBUF\) ) N
0 T (          endif) N
0 T ( 6014 format\(A,' READING VORONOI CROSSING DATA FROM FILE ',A,'.'\)) N
0 T (          call ftsm_voronoi_read_data\(ifile\)) N
0 T (          if \(qprint\) then ; __CLOSE_FILE\(ifile,'KEEP',ierror\) ; endif) N
0 T (         else) N
0 T (          __WRN\(whoami,'FILE NAME NOT SPECIFIED. NOTHING DONE.'\)) N
0 T (         endif ! flen) N
0 T (!cccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccc) N
0 T (       elseif \(__STRNCMP\(keyword,'PRIN',4\)\) then) N
(590) # (         ifile=__GET_RM_I\(comlyn,comlen,'UNIT',-1\)) N
0 T (         __GET_RM_A\(COMLYN,COMLEN,'NAME',4,FNAME,80,FLEN\)) N
0 T (!        note: FNAME will be UPPER CASE) N
0 T (         if \(flen.gt.0\) then) N
0 T (           if \(qprint\) then) N
0 T (            __OPEN_FILE\(ifile,fname,'FORMATTED','WRITE'\)) N
0 T (            write\(_MSGBUF,6015\) whoami, fname\(1:flen\) ; __PRINT\(_MSGBUF\)) N
0 T ( 6015 format\(A,' WRITING VORONOI CROSSING DATA TO FILE ',A,'.'\)) N
0 T (           endif) N
0 T (           call ftsm_voronoi_print_data\(ifile\)) N
(600) # (           if \(qprint\) then ; __CLOSE_FILE\(ifile,'KEEP',ierror\) ; endif) N
0 T (         else) N
0 T (            __WRN\(whoami,'FILE NAME NOT SPECIFIED. NOTHING DONE.'\)) N
0 T (         endif ! flen) N
0 T (       endif ! VMAP) N
0 T (!ccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccc) N
0 T (ccccccccccccccccc) N
0 T (      elseif \(__STRNCMP\(keyword,'FILL',4\)\) then ! set path from current coordina) N
0 T (tes) N
0 T (!) N
0 T (       qcomp=\(__INDX_RM\(comlyn, comlen, 'COMP'\).gt.0\)) N
0 T (!) N
(610) # (       if \(qcomp\) then) N
0 T (        if \(qprint\) then ; write\(_MSGBUF,6657\) whoami ; __PRINT\(_MSGBUF\) ; endif) N
0 T ( 6657 format\(/A,' WILL DEFINE PATH FROM COMPARISON COORDINATES.'\)) N
0 T (        call ftsm_fill\(__XCOMP,__YCOMP,__ZCOMP\)) N
0 T (       else ! ~qcomp -- use main coordinates) N
0 T (        if \(qprint\) then ; write\(_MSGBUF,6660\) whoami ; __PRINT\(_MSGBUF\) ; endif) N
0 T ( 6660 format\(/A,' WILL DEFINE PATH FROM MAIN COORDINATES.'\)) N
0 T (        call ftsm_fill\(__X,__Y,__Z\)) N
0 T (       endif ! qcomp) N
0 T (!ccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccc) N
0 T (ccccccccccccccccc) N
(620) # (!     the option below will be useful to perform usual charmm operations on the ) N
0 T (STRING \(if desired\)) N
0 T (      elseif \(__STRNCMP\(keyword,'LIFT',4\)\) then ! force string into current coor) N
(ftsm.ftn) (Page 9/83) (Mar 09, 13 15:34) title
border
/v 1 store
/x0 x v get 2.965278 add sx cw mul add store
/y0 y v get bfs th add sub store
x0 y0 moveto
0 T (dinates) p n
0 T (!) N
0 T (       qcomp=\(__INDX_RM\(comlyn, comlen, 'COMP'\).gt.0\)) N
0 T (!) N
0 T (       if \(qcomp\) then) N
0 T (        if \(qprint\) then ; write\(_MSGBUF,6658\) whoami ; __PRINT\(_MSGBUF\) ; endif) N
0 T ( 6658 format\(/A,' WILL COPY STRING INTO COMPARISON COORDINATES.'\)) N
0 T (        if \(qorient.and.any\(__XXCOMP\(iatom_o\).eq.__NAN\)\) then) N
0 T (         __WRN\(whoami,'COMPARISON ORIENTATION X-SET HAS UNDEFINED VALUES. NOTHIN) N
0 T (G DONE.'\)) N
(630) # (        else) N
0 T (         call ftsm_lift\(__XCOMP,__YCOMP,__ZCOMP\)) N
0 T (        endif) N
0 T (       else ! ~qcomp -- use main coordinates) N
0 T (        if \(qprint\) then ; write\(_MSGBUF,6661\) whoami ; __PRINT\(_MSGBUF\) ; endif) N
0 T ( 6661 format\(/A,' WILL COPY STRING INTO MAIN COORDINATES.'\)) N
0 T (        if \(qorient.and.any\(__XX\(iatom_o\).eq.__NAN\)\) then) N
0 T (         __WRN\(whoami,'MAIN ORIENTATION X-SET HAS UNDEFINED VALUES. NOTHING DONE) N
0 T (.'\)) N
0 T (        else) N
0 T (         call ftsm_lift\(__X,__Y,__Z\)) N
(640) # (        endif) N
0 T (       endif ! qcomp) N
0 T (!ccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccc) N
0 T (ccccccccccccccccc) N
0 T (      elseif \(__STRNCMP\(keyword,'TEST',4\)\) then !) N
0 T (       if \(__INDX_RM\(comlyn,comlen,'GRAD'\).gt.0\) then ! finite-difference gradie) N
0 T (nt test) N
0 T (! check fd spec) N
0 T (        step=__GET_RM_F\(comlyn, comlen, 'STEP', finite_difference_d\)) N
0 T (        if \(qprint\) then ) N
0 T (         write\(_MSGBUF, 7001\) whoami,whoami,step,whoami,whoami ) N
0 T (         __PRINT\(_MSGBUF\)) N
(650) # ( 7001  format\(/A,' WILL TEST GRADIENTS USING FINITE DIFFERENCES',       &) N
0 T (     &        /A,' USING DX = DY = DZ = ',F15.9,'.',                    &) N
0 T (     &        /A,' MAIN COORDINATE SET MUST BE DEFINED.',               &) N
0 T (     &        /A,' WILL OVERWRITE FORCE/GRAD ARRAYS'\)) N
0 T (        endif) N
0 T (        if \(any\(__X.eq.__NAN\)\) then) N
0 T (         __WRN\(whoami,'MAIN X SET HAS UNDEFINED VALUES. NOTHING DONE.'\)) N
0 T (        else) N
0 T (         fd_error=>ftsm_test_grad_fd\(__X,__Y,__Z,step\)) N
0 T (!          write\(me_global+100,*\) fd_error) N
(660) # (         if \(qprint\) then) N
0 T (          if \(proj_on\) then) N
0 T (           write\(_MSGBUF,7006\) whoami, whoami, whoami, whoami ; __PRINT\(_MSGBUF\)) N
0 T ( 7002  format\(/A,' TOP:    NORMALIZED PROJECTION ONTO PATH',            &) N
0 T (     &        /A,' BOTTOM: DISTANCE PERPENDICULAR TO PATH',             &) N
0 T (     &        /A,' DGRAD_X_MAX, DGRAD_Y_MAX, DGRAD_Z_MAX',              &) N
0 T (     &        /A,' ======================================'\)) N
0 T (           do i=1,2) N
0 T (            write\(_MSGBUF,'\(A,3'//real_format//'F15.9\)'\)                   &) N
0 T (     &                  whoami,fd_error\(i,:\) ; __PRINT\(_MSGBUF\)) N
(670) # (           enddo) N
0 T (          else ! projection off) N
0 T (           write\(_MSGBUF,7013\) whoami, whoami, whoami ; __PRINT\(_MSGBUF\)) N
0 T ( 7013  format\(/A,' DISTANCE TO PATH POINT:',                            &) N
0 T (     &        /A,' DGRAD_X_MAX, DGRAD_Y_MAX, DGRAD_Z_MAX',              &) N
0 T (     &        /A,' ======================================'\)) N
0 T (            write\(_MSGBUF,'\(A,3'//real_format//'F15.9\)'\)                   &) N
0 T (     &                  whoami,fd_error\(1,:\) ; __PRINT\(_MSGBUF\)) N
0 T (          endif ! projection) N
0 T (         endif ! qprint) N
(680) # (!     decide whether the test was passed) N
0 T (         zval=abs\(maxval\(fd_error\)\)) N
0 T (         if \(zval.lt.abs\(step\)*one\) then) N
0 T (          write\(_MSGBUF,7003\) whoami, zval, whoami ; __PRINT\(_MSGBUF\)) N
0 T (         else) N
0 T (          write\(_MSGBUF,7004\) whoami, zval, whoami ; __PRINT\(_MSGBUF\)) N
0 T (          __WRN\(whoami,'FINITE DERIVATIVE TEST FAILED.'\)) N
0 T (         endif ! report test result) N
0 T ( 7003 format\(/A, ' THE MAXIMUM GRADIENT ERROR IS ',F15.9,', ',          &) N
0 T (     &       /A, ' WHICH IS SMALLER THAN STEP. TEST PASSED.'\)) N
(ftsm.ftn) (Page 10/83) (Mar 09, 13 15:34) title
border
grestore
(Printed by surgeon) rhead
(ftsm.ftn) (5/42) (Saturday March 09, 2013) footer
end % of iso1dict
pagesave restore
showpage
%%Page: (11-12) 6
%%BeginPageSetup
/pagesave save def
sh 0 translate 90 rotate
%%EndPageSetup
iso1dict begin
gsave
llx lly 12 add translate
/v 0 store
/x0 x v get 2.965278 add sx cw mul add store
/y0 y v get bfs th add sub store
x0 y0 moveto
(690) # ( 7004 format\(/A, ' THE MAXIMUM GRADIENT ERROR IS ',F15.9,', ',          &) p n
0 T (     &       /A, ' WHICH IS NO SMALLER THAN STEP. TEST FAILED.'\)) N
0 T (         if \(associated\(fd_error\)\) deallocate\(fd_error\) ! test_grad returns a po) N
0 T (inter to an array of abs errors) N
0 T (        endif) N
0 T (       endif ! grad) N
0 T (!) N
0 T (       if \(__INDX_RM\(comlyn,comlen,'PARA'\).gt.0\) then ! parallel communication t) N
0 T (est) N
0 T (        if \(qprint\) write\(_MSGBUF, 7005\) whoami,whoami,whoami ; __PRINT\(_MSGBUF\)) N
0 T ( 7005  format\(/A,' WILL COMPARE PARALLEL AND SERIAL FORCE COMPUTATION', &) N
0 T (     &        /A,' MAIN COORDINATE SET MUST BE DEFINED.',               &) N
(700) # (     &        /A,' WILL OVERWRITE FORCE/GRAD ARRAYS'\)) N
0 T (        if \(any\(__X.eq.__NAN\)\) then) N
0 T (         __WRN\(whoami,' MAIN X SET HAS UNDEFINED VALUES. NOTHING DONE.'\)) N
0 T (        else) N
0 T (         fd_error=>ftsm_test_parallel\(__X,__Y,__Z\) ! use the same array as above) N
0 T (         if \(qprint\) then) N
0 T (          if \(proj_on\) then) N
0 T (           write\(_MSGBUF,7006\) whoami, whoami, whoami, whoami ; __PRINT\(_MSGBUF\)) N
0 T ( 7006  format\(/A,' TOP:    NORMALIZED PROJECTION ONTO PATH',            &) N
0 T (     &        /A,' BOTTOM: DISTANCE PERPENDICULAR TO PATH',             &) N
(710) # (     &        /A,' DGRAD_X_MAX, DGRAD_Y_MAX, DGRAD_Z_MAX, VALUE',       &) N
0 T (     &        /A,' ============================================'\)) N
0 T (           do i=1, 2) N
0 T (            write\(_MSGBUF,'\(A,4'//real_format//'F15.9\)'\)                   &) N
0 T (     &                  whoami,fd_error\(i,:\) ; __PRINT\(_MSGBUF\)) N
0 T (           enddo) N
0 T (          else ! not proj_on) N
0 T (           write\(_MSGBUF,7010\) whoami, whoami, whoami ; __PRINT\(_MSGBUF\)) N
0 T ( 7010  format\(/A,' DISTANCE TO PATH POINT:',                            &) N
0 T (     &        /A,' DGRAD_X_MAX, DGRAD_Y_MAX, DGRAD_Z_MAX, VALUE',       &) N
(720) # (     &        /A,' ============================================'\)) N
0 T (            write\(_MSGBUF,'\(A,4'//real_format//'F15.9\)'\)                   &) N
0 T (     &                  whoami,fd_error\(1,:\) ; __PRINT\(_MSGBUF\)) N
0 T (          endif ! proj_on) N
0 T (         endif ! qprint) N
0 T (!     decide whether the test was passed) N
0 T (         zval=abs\(maxval\(fd_error\)\)) N
0 T (         if \(zval.lt.parallel_tolerance\) then) N
0 T (          write\(_MSGBUF,7007\) whoami, zval, whoami, parallel_tolerance ; __PRINT) N
0 T (\(_MSGBUF\)) N
0 T (         else) N
(730) # (          write\(_MSGBUF,7008\) whoami, zval, whoami, parallel_tolerance ; __PRINT) N
0 T (\(_MSGBUF\)) N
0 T (          __WRN\(whoami,'PARALLEL COMPUTATION TEST FAILED.'\)) N
0 T (         endif ! report test result) N
0 T ( 7007 format\(/A, ' THE MAXIMUM ERROR IS ',E12.5,', ',                   &) N
0 T (     &       /A, ' WHICH IS SMALLER THAN ',E12.5,'. TEST PASSED.'\)) N
0 T ( 7008 format\(/A, ' THE MAXIMUM ERROR IS ',E12.5,', ',                   &) N
0 T (     &       /A, ' WHICH IS NO SMALLER THAN ',E12.5,'. TEST FAILED.'\)) N
0 T (         if \(associated\(fd_error\)\) deallocate\(fd_error\) ! pointer to an array of) N
0 T ( abs errors) N
0 T (        endif) N
0 T (       endif ! para) N
(740) # (!) N
0 T (! other tests will go below this line) N
0 T (!ccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccc) N
0 T (ccccccccccccccccc) N
0 T (! specify parallel calculation options) N
0 T (      elseif \(__STRNCMP\(keyword,'PARA',4\)\) then) N
0 T (       do while \(comlen .gt. 1\)) N
0 T (        keyword=__NEXTA\(comlyn, comlen\)) N
0 T (        select case\(keyword\)) N
0 T (           case\('YES','ON','TRUE','T','yes','on','true','t'\)) N
0 T (            keyword='ENABLED '; calc_bestfit_grad_para=.true.) N
(750) # (            if \(qprint\) then ) N
0 T (             write\(_MSGBUF,7009\) whoami, 'FORCES', keyword ; __PRINT\(_MSGBUF\)) N
0 T (            endif) N
0 T (           case\('NO','OFF','FALSE','F','no','off','false','f'\)) N
0 T (            keyword='DISABLED' ; calc_bestfit_grad_para=.false.) N
0 T (            if \(qprint\) then) N
0 T (             write\(_MSGBUF,7009\) whoami, 'FORCES', keyword ; __PRINT\(_MSGBUF\)) N
(ftsm.ftn) (Page 11/83) (Mar 09, 13 15:34) title
border
/v 1 store
/x0 x v get 2.965278 add sx cw mul add store
/y0 y v get bfs th add sub store
x0 y0 moveto
0 T (            endif) p n
0 T (           case default) N
0 T (            __WRN\(whoami,'UNKNOWN OPTION SPECIFIED'\)) N
(760) # (          end select) N
0 T (       enddo ! comlen) N
0 T ( 7009  format\(/A, ' PARALLEL COMPUTATION OF ',A,' ',A\)) N
0 T (!) N
0 T (!ccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccc) N
0 T (ccccccccccccccccc) N
0 T (! specify whether to use custom allgather hypercube) N
0 T (      elseif \(__STRNCMP\(keyword,'COMM',4\)\) then) N
0 T (       do while \(comlen .gt. 1\)) N
0 T (        keyword=__NEXTA\(comlyn, comlen\)) N
0 T (        select case\(keyword\)) N
(770) # (           case\('allg','ALLG','ALLGATHE','allgathe'\)) N
0 T (            keyword='ALLGATHER'; allgather_method=allgather_) N
0 T (            if \(qprint\) then ) N
0 T (             write\(_MSGBUF,7012\) whoami, keyword ; __PRINT\(_MSGBUF\)) N
0 T (            endif) N
0 T (           case\('hycu','HYCU','HYPER','hyper','hcube','HCUBE'\)) N
0 T (            keyword='HYPERCUBE' ; allgather_method=hypercube_) N
0 T (            if \(qprint\) then) N
0 T (             write\(_MSGBUF,7012\) whoami, keyword ; __PRINT\(_MSGBUF\)) N
0 T (            endif) N
(780) # (           case\('gatherb','GATHERB','gather','GATHER','bcast','BCAST'\)) N
0 T (            keyword='GATHER + BCAST' ; allgather_method=gather_bcast_) N
0 T (            if \(qprint\) then) N
0 T (             write\(_MSGBUF,7012\) whoami, keyword ; __PRINT\(_MSGBUF\)) N
0 T (            endif) N
0 T (           case default) N
0 T (            __WRN\(whoami,'UNKNOWN OPTION SPECIFIED'\)) N
0 T (          end select) N
0 T (       enddo ! comlen) N
0 T ( 7012  format\(/A, ' WILL COMMUNICATE FTSM FORCES USING ',A\)) N
(790) # (!) N
0 T (!cccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccc) N
0 T (      elseif \(__STRNCMP\(keyword,'PRIN',4\)\) then) N
0 T (!      can write both coordinate files and a global dcd file) N
0 T (!      local is specified with 'COR'; global is the default) N
0 T (#ifdef __CHARMM) N
0 T (       qcor=__INDX_RM\(comlyn,comlen,'COR'\); qcor = min\(qcor,1\)) N
0 T (#else) N
0 T (       qcor=__INDX_RM\(comlyn,comlen,'CHM'\); qcor = min\(qcor,1\)) N
0 T (#endif) N
(800) # (       qdcd=__INDX_RM\(comlyn,comlen,'DCD'\); qdcd = min\(qdcd,1\)) N
0 T (!) N
0 T (       if \(\(qcor+qdcd\) .gt. 1\) then) N
0 T (        __WRN\( whoami,' MORE THAN ONE OUTPUT FORMAT REQUESTED. WILL USE DCD.'\)) N
0 T (        qcor=0; qdcd=1;) N
0 T (       endif) N
0 T (!) N
0 T (!      prepare file) N
0 T (!-----------------------------------------------------------------------------) N
0 T (       ifile=__GET_RM_I\(comlyn,comlen,'UNIT',-1\)) N
(810) # (       CALL GTRMWD\(COMLYN,COMLEN,'NAME',4,FNAME,80,FLEN\)) N
0 T (!        note: FNAME will be UPPER CASE) N
0 T (!---------------------------------- OPEN FILE --------------------------------) N
0 T (       if \(qroot\) then) N
0 T (#ifdef __CHARMM) N
0 T (        oldiol=iolev) N
0 T (#endif) N
0 T (        if \(qdcd.eq.0\) then ! no dcd -- local write) N
0 T (#ifdef __CHARMM) N
0 T (         iolev=1 ! open file on all nodes) N
(820) # (#endif) N
0 T (         if \(flen.gt.0\) __OPEN_FILE\(ifile,fname,'FORMATTED','WRITE'\)) N
0 T (        else) N
0 T (         if \(qprint\) then ! write one dcd file \(root does this\)) N
0 T (          if \(flen.gt.0\) __OPEN_FILE\(ifile,fname,'UNFORMATTED','WRITE'\) ! open b) N
0 T (inary fle for DCD) N
0 T (         endif) N
0 T (! broadcast ifile so that all roots know whether handle is valid) N
0 T (         __BROADCAST_STRING\(ifile,1,mpiint\)) N
(ftsm.ftn) (Page 12/83) (Mar 09, 13 15:34) title
border
grestore
(Printed by surgeon) rhead
(ftsm.ftn) (6/42) (Saturday March 09, 2013) footer
end % of iso1dict
pagesave restore
showpage
%%Page: (13-14) 7
%%BeginPageSetup
/pagesave save def
sh 0 translate 90 rotate
%%EndPageSetup
iso1dict begin
gsave
llx lly 12 add translate
/v 0 store
/x0 x v get 2.965278 add sx cw mul add store
/y0 y v get bfs th add sub store
x0 y0 moveto
0 T (        endif) p n
0 T (#ifdef __CHARMM) N
(830) # (        if \(ifile .eq. -1\) then) N
0 T (         if \(qdcd .eq. 0 \) ifile=__OSTREAM ! write to output stream \(rather dirt) N
0 T (y, but keep for now\)) N
0 T (        endif) N
0 T (#endif) N
0 T (        if \(ifile.ge.0\) then) N
0 T (!---------------------------- assume file is open, write -----------------------) N
0 T (--) N
0 T (!     check for column spec) N
0 T (         c1=__GET_RM_I\(comlyn, comlen, 'COL', -1\)) N
0 T (         if \(c1.gt.0\) then) N
0 T (          if \(qprint\) then ; write\(_MSGBUF,6679\) whoami, c1 ; __PRINT\(_MSGBUF\) ;) N
0 T ( endif) N
(840) # ( 6679 format\(/A,' WRITING COORDINATES FROM COLUMN ',I3\)) N
0 T (          if \(qdcd.gt.0\) then ; call ftsm_write_dcd\(IFILE=ifile,COL=c1\) ;) N
0 T (          else ; call ftsm_write_cor\(ifile,c1\) ; endif) N
0 T (         else) N
0 T (          if \(qprint\) then ; write\(_MSGBUF,6689\) whoami ; __PRINT\(_MSGBUF\) ; end) N
0 T (if) N
0 T ( 6689 format\(/A,' WRITING COORDINATES FROM DEFAULT COLUMN.'\)) N
0 T (          if \(qdcd.gt.0\) then ; call ftsm_write_dcd\(IFILE=ifile\) ;) N
0 T (          else ; call ftsm_write_cor\(ifile\) ; endif) N
0 T (         endif ! c1) N
0 T (         if \(qdcd.eq.0.or.qprint\) then) N
(850) # (          if \(flen.gt.0\) __CLOSE_FILE\(ifile,'KEEP',error\)) N
0 T (         endif) N
0 T (        endif ! ifile) N
0 T (#ifdef __CHARMM) N
0 T (        iolev=oldiol) N
0 T (#endif) N
0 T (       endif ! qroot) N
0 T (!ccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccc) N
0 T (cccc) N
0 T (      elseif \(__STRNCMP\(keyword,'READ',4\)\) then) N
0 T (!      can read from both coordinate files and a global dcd file \(see above\)) N
(860) # (!      can also read a frame in the DCD: specify FRAM for frame;) N
0 T (       qcor=__INDX_RM\(comlyn,comlen,'COR'\); qcor = min\(qcor,1\)) N
0 T (       qdcd=__INDX_RM\(comlyn,comlen,'DCD'\); qdcd = min\(qdcd,1\)) N
0 T (!) N
0 T (       if \(\(qcor+qdcd\) .gt. 1\) then) N
0 T (        __WRN\( whoami,'MORE THAN ONE INPUT FORMAT REQUESTED. WILL USE DCD.'\)) N
0 T (        qcor=0; qdcd=1;) N
0 T (       endif) N
0 T (!) N
0 T (!      prepare file) N
(870) # (       ifile=__GET_RM_I\(comlyn,comlen,'UNIT',-1\)) N
0 T (       __GET_RM_A\(COMLYN,COMLEN,'NAME',4,FNAME,80,FLEN\)) N
0 T (!        note: flen will be UPPER CASE) N
0 T (!     check for column spec \(which coordinate set to read into\)) N
0 T (       c1=__GET_RM_I\(comlyn, comlen, 'COL', 0\)) N
0 T (!cccccccccccccccccccccccccccc OPEN FILE ccccccccccccccccccccccc) N
0 T (       if \(qroot\) then) N
0 T (#ifdef __CHARMM) N
0 T (        oldiol=iolev) N
0 T (#endif) N
(880) # (        if \(qdcd.eq.0\) then) N
0 T (#ifdef __CHARMM) N
0 T (         iolev=1 ! open file on all processors) N
0 T (#endif) N
0 T (         if \(flen.gt.0\) __OPEN_FILE\(ifile,fname,'FORMATTED','READ'\)) N
0 T (        else) N
0 T (         if \(qprint\) then ! binary dcd file) N
0 T (          if \(flen.gt.0\) __OPEN_FILE\(ifile,fname,'UNFORMATTED','READ'\) ! open bi) N
0 T (nary fle for DCD) N
0 T (         endif) N
0 T (! broadcast ifile so that all roots know whether handle is valid) N
(890) # (         __BROADCAST_STRING\(ifile,1,mpiint\)) N
0 T (        endif) N
0 T (#ifdef __CHARMM) N
0 T (        if\(ifile .le. -1 \) then ) N
0 T (         if \(qdcd.eq.0 \) then) N
(ftsm.ftn) (Page 13/83) (Mar 09, 13 15:34) title
border
/v 1 store
/x0 x v get 2.965278 add sx cw mul add store
/y0 y v get bfs th add sub store
x0 y0 moveto
0 T (          ifile=__ISTREAM ! read local files from input file) p n
0 T (          call rdtitl\(titleb,ntitlb,ifile,0\) ! 0 = card format) N
0 T (         endif ! qdcd) N
0 T (        endif ! ifile) N
0 T (#endif) N
(900) # (       endif ! qroot) N
0 T (!cccccccccccccccccc assume file is open, read ccccccccccccccccccc) N
0 T (! broadcast ifile so that all slaves also know whether handle is valid) N
0 T (! because they need to enter read_cor) N
0 T (       if \(qslave\) then ; __BROADCAST_LOCAL\(ifile,1,mpiint\) ; endif) N
0 T (       if \(ifile.ge.0\) then) N
0 T (        if \(c1.gt.0\) then ! column spec) N
0 T (         if \(qprint\) then ; write\(_MSGBUF,6699\) whoami, c1 ; __PRINT\(_MSGBUF\) ; ) N
0 T (endif) N
0 T ( 6699 format\(A,' READING COORDINATES INTO COLUMN ',I3\)) N
0 T (         if \(qdcd.gt.0\) then ; if \(qroot\) call ftsm_read_dcd\(ifile, c1\);) N
(910) # (         else; call ftsm_read_cor\(ifile,c1\) ;  endif) N
0 T (       else) N
0 T (         if \(qprint\) then ; write\(_MSGBUF,6709\) whoami ; __PRINT\(_MSGBUF\) ; endi) N
0 T (f) N
0 T ( 6709 format\(A,' READING COORDINATES INTO DEFAULT COLUMN.'\)) N
0 T (         if \(qdcd.gt.0\) then ; if \(qroot\) call ftsm_read_dcd\(ifile\);) N
0 T (         else ; call ftsm_read_cor\(ifile\) ; ) N
0 T (         endif) N
0 T (        endif ! c1) N
0 T (       endif) N
0 T (!cccccccccccccccc close file ccccccccccccccccccccccccccccccccccccc) N
(920) # (       if \(qroot\) then) N
0 T (        if \(qdcd.eq.0.or.qprint\) then) N
0 T (         if \(flen.gt.0\) __CLOSE_FILE\(ifile,'KEEP',error\)) N
0 T (        endif ! qdcd) N
0 T (#ifdef __CHARMM) N
0 T (        iolev=oldiol) N
0 T (#endif) N
0 T (       endif ! qroot) N
0 T (!) N
0 T (!     broadcast to slaves \(although cread routine will send coords to slaves, to) N
0 T (o\)) N
(930) # (       if \(c1.le.0\) c1=center ! assume "default column") N
0 T (       if \(c1.eq.center\) then) N
0 T (        call ftsm_swap_bc\(.true.\)) N
0 T (        r_f\(:,:,left_old:right_old\)=r_f\(:,:,left:right\)) N
0 T (        r_f\(:,:,center_new\)=r_f\(:,:,center\)) N
0 T (        if \(qorient.and.qdiffrot\) then) N
0 T (         r_o\(:,:,left_old:right_old\)=r_o\(:,:,left:right\)) N
0 T (         r_o\(:,:,center_new\)=r_o\(:,:,center\)) N
0 T (        endif) N
0 T (       else) N
(940) # (        if \(MPI_COMM_LOCAL.ne.MPI_COMM_NULL.and.SIZE_LOCAL.gt.1\) then) N
0 T (#ifdef __CHARMM) N
0 T (         __BROADCAST_LOCAL_4B\(r_f\(:,:,c1\), 3*nforced\) !##SINGLE       ! forcing ) N
0 T (coordinates) N
0 T (         __BROADCAST_LOCAL_8B\(r_f\(:,:,c1\), 3*nforced\) !##.not.SINGLE) N
0 T (#else) N
0 T (         __BROADCAST_LOCAL\(r_f\(:,:,c1\), 3*nforced, mpifloat\) ! forcing coordinat) N
0 T (es) N
0 T (#endif) N
0 T (         if \(qdiffrot\) then ) N
0 T (#ifdef __CHARMM) N
0 T (          __BROADCAST_LOCAL_8B\(r_o\(:,:,c1\), 3*norient\) !##SINGLE      ! send ori) N
0 T (entation coordinates \(only if distinct from forcing\)) N
(950) # (          __BROADCAST_LOCAL_8B\(r_o\(:,:,c1\), 3*norient\) !##.not.SINGLE) N
0 T (#else) N
0 T (          __BROADCAST_LOCAL\(r_o\(:,:,c1\), 3*norient, mpifloat\) ! send orientation) N
0 T ( coordinates \(only if distinct from forcing\)) N
0 T (#endif) N
0 T (         endif) N
0 T (        endif) N
0 T (       endif) N
0 T (!ccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccc) N
0 T (ccccc) N
0 T (      elseif \(__STRNCMP\(keyword,'SWAP',4\)\) then ! swap two columns) N
0 T (!       read column spec) N
(ftsm.ftn) (Page 14/83) (Mar 09, 13 15:34) title
border
grestore
(Printed by surgeon) rhead
(ftsm.ftn) (7/42) (Saturday March 09, 2013) footer
end % of iso1dict
pagesave restore
showpage
%%Page: (15-16) 8
%%BeginPageSetup
/pagesave save def
sh 0 translate 90 rotate
%%EndPageSetup
iso1dict begin
gsave
llx lly 12 add translate
/v 0 store
/x0 x v get 2.965278 add sx cw mul add store
/y0 y v get bfs th add sub store
x0 y0 moveto
(960) # (        c1=__NEXTI\(comlyn, comlen\)) p n
0 T (        c2=__NEXTI\(comlyn, comlen\)) N
0 T (        if \(qprint\) then ; write\(_MSGBUF,6729\) whoami, c1, c2 ; __PRINT\(_MSGBUF\)) N
0 T ( ; endif) N
0 T ( 6729 format\(/A,' WILL SWAP COLUMNS ',I3,' AND ',I3,' '\)) N
0 T (        call ftsm_swap\(c1, c2\)) N
0 T (!ccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccc) N
0 T (ccccc) N
0 T (      elseif \(__STRNCMP\(keyword,'COPY',4\)\) then ! copy form c1 to c2) N
0 T (!       read column spec) N
0 T (        c1=__NEXTI\(comlyn, comlen\)) N
0 T (        c2=__NEXTI\(comlyn, comlen\)) N
(970) # (        if \(qprint\) then ; write\(_MSGBUF,6739\) whoami, c1, c2 ; __PRINT\(_MSGBUF\)) N
0 T ( ; endif) N
0 T ( 6739 format\(/A,' WILL COPY COLUMN ',I3,' TO ',I3,' '\)) N
0 T (        call ftsm_copy\(c1,c2\)) N
0 T (!ccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccc) N
0 T (cccccc) N
0 T (      elseif \(__STRNCMP\(keyword,'SET ',4\)\) then ! modify k, etc) N
0 T (!ccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccc) N
0 T (cccccc) N
0 T (        iorie=__INDX_RM\(comlyn, comlen, 'ORIE'\)) N
0 T (        irmsd=__INDX_RM\(comlyn, comlen, 'RMSD'\)) N
0 T (!) N
0 T (        if \(iorie.gt.0\) then) N
(980) # (!    process orientation atom selection) N
0 T (!    determine whether a selection keyword follows orie) N
0 T (         isele=__INDX\(comlyn, comlen, 'SELE' ,4\)) N
0 T (         if \(isele.ge.iorie\) then) N
0 T (!) N
0 T (#ifdef __CHARMM) N
0 T (          iselct=0) N
0 T (! process selection) N
0 T (          IMODE=0) N
0 T (          CALL SELRPN\(COMLYN,COMLEN,iselct,NATOM,1,IMODE,               &) N
(990) # (     &      .FALSE.,1,' ',0,RESID,RES,IBASE,SEGID,NICTOT,NSEG,          &) N
0 T (     &      .TRUE.,X,Y,Z,.TRUE.,1,WMAIN\)) N
0 T (          IF\(IMODE.NE.0\) THEN) N
0 T (           __WRN\(whoami,'ORIENTATION ATOMS SELECTION ERROR'\)) N
0 T (           RETURN) N
0 T (          ENDIF) N
0 T (          norient=count\( iselct.gt.0 \)) N
0 T (#elif defined\(__DMOL\)) N
0 T (#include "../../dmol_select_macro.def") N
0 T (          if \(associated\(iselct\)\) then ; norient=size\(iselct\) ; else ; norient=0) N
0 T ( ; endif) N
(1000) # (#endif) N
0 T (!) N
0 T (! currently we require at least three atoms for orientation) N
0 T (!) N
0 T (          if \(norient.lt.3\) then) N
0 T (           __WRN\(whoami,' FEWER THAN THREE ATOMS SELECTED FOR ORIENTATION. ABORT) N
0 T (.'\)) N
0 T (           return) N
0 T (          endif) N
0 T (!) N
0 T (          qorient=.true.) N
(1010) # (!) N
0 T (          if \(qdiffrot\) then; if \(associated\(r_o\)\) deallocate\(r_o\)) N
0 T (                             if\(associated\(iatom_o\)\) deallocate\(iatom_o\)) N
0 T (          else              ; nullify\(r_o\) ; nullify\(iatom_o\)) N
0 T (          endif) N
0 T (          if \(associated\(orientWeights\)\) deallocate\(orientWeights\)) N
0 T (!) N
0 T (          allocate\(iatom_o\(norient\)\); iatom_o=0) N
0 T (          allocate\(orientWeights\(norient\)\);) N
0 T (          orientWeights=one/norient ! default behavior) N
(1020) # (!    build index array) N
0 T (          norient=0) N
0 T (!) N
0 T (#ifdef __CHARMM) N
0 T (          do i=1,natom) N
0 T (           if \(iselct\(i\).gt.0\) then) N
(ftsm.ftn) (Page 15/83) (Mar 09, 13 15:34) title
border
/v 1 store
/x0 x v get 2.965278 add sx cw mul add store
/y0 y v get bfs th add sub store
x0 y0 moveto
0 T (            norient=norient+1) p n
0 T (            iatom_o\(norient\)=i) N
0 T (           endif) N
0 T (          enddo) N
(1030) # (#else) N
0 T (          iatom_o=iselct) N
0 T (          if \(associated\(iselct\)\) deallocate\(iselct\)) N
0 T (#endif) N
0 T (!) N
0 T (!    determine whether the new orientation set is the same as the existing forci) N
0 T (ng set) N
0 T (!) N
0 T (          qdiffrot=.not. \( norient .eq. nforced \)) N
0 T (          if \(.not.qdiffrot\)  qdiffrot=.not.\(associated\(iatom_f\)\)) N
0 T (          if \(.not.qdiffrot\)  qdiffrot=any\(iatom_f.ne.iatom_o\)) N
(1040) # (!) N
0 T (          if \(.not.qdiffrot\) then) N
0 T (           deallocate\(iatom_o\); iatom_o=>iatom_f; r_o=>r_f;) N
0 T (          else) N
0 T (           allocate\(r_o\(norient,3,num_sets\)\); r_o=__NAN;) N
0 T (           if \(nforced.gt.0\) call ftsm_compute_overlap_ind\(\)  ! compute overlap ) N
0 T (indices in iatom_both) N
0 T (          endif) N
0 T (!) N
0 T (          if \(.not. associated\(rcom\)\) allocate\(rcom\(3,num_sets\)\)) N
0 T (          rcom=0d0 ! must be zero initially) N
(1050) # (!) N
0 T (! print summary) N
0 T (          if \(qprint\) then) N
0 T (            write\(_MSGBUF,100\) whoami, norient ; __PRINT\(_MSGBUF\)) N
0 T ( 100  format\(A,' WILL ORIENT STRUCTURES BASED ON ',i5,' ATOMS'\)) N
0 T (            write\(_MSGBUF,101\) whoami ;  ; __PRINT\(_MSGBUF\)) N
0 T ( 101  format\(A,' ORIENTATION WEIGHTS UNIFORM.'\)) N
0 T (            if \(qdiffrot\) then) N
0 T (             write\(_MSGBUF,102\) whoami) N
0 T (            else) N
(1060) # (             write\(_MSGBUF,103\) whoami) N
0 T (            endif) N
0 T (            __PRINT\(_MSGBUF\)) N
0 T ( 102  format \(A, ' ORIENTATION AND FORCING ATOMS ARE DIFFERENT'\)) N
0 T ( 103  format \(A, ' ORIENTATION AND FORCING ATOMS ARE IDENTICAL'\)) N
0 T (          endif ! qprint) N
0 T (         else) N
0 T (          __WRN\(whoami,' ATOM SELECTION MUST BE SPECIFIED AFTER ORIE.'\)) N
0 T (          return) N
0 T (         endif) N
(1070) # (         call ftsm_define_rtmd_type\(\)) N
0 T (!ccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccc) N
0 T (        elseif \(irmsd.gt.0\) then) N
0 T (!    process forcing atom selection) N
0 T (!    determine whether a selection keyword follows 'rmsd') N
0 T (         isele=__INDX\(comlyn, comlen, 'SELE' ,4\)) N
0 T (         if \(isele.gt.irmsd\) then) N
0 T (!) N
0 T (#ifdef __CHARMM) N
0 T (          iselct=0) N
(1080) # (          IMODE=0) N
0 T (          CALL SELRPN\(COMLYN,COMLEN,iselct,NATOM,1,IMODE,               &) N
0 T (     &      .FALSE.,1,' ',0,RESID,RES,IBASE,SEGID,NICTOT,NSEG,          &) N
0 T (     &      .TRUE.,X,Y,Z,.TRUE.,1,WMAIN\)) N
0 T (          IF\(IMODE.NE.0\) THEN) N
0 T (           __WRN\(whoami,'RMSD ATOMS SELECTION ERROR'\)) N
0 T (           RETURN) N
0 T (          ENDIF) N
0 T (          nforced=count\( iselct.gt.0 \)) N
0 T (#elif defined\(__DMOL\)) N
(1090) # (#include "../../dmol_select_macro.def") N
0 T (          if \(associated\(iselct\)\) then ; nforced=size\(iselct\) ; else ; nforced=0) N
0 T ( ; endif) N
0 T (#endif) N
0 T (!) N
0 T (          if \(nforced.le.0\) then) N
0 T (           __WRN\(whoami, 'NO RMSD ATOMS SELECTED. ABORT.'\)) N
(ftsm.ftn) (Page 16/83) (Mar 09, 13 15:34) title
border
grestore
(Printed by surgeon) rhead
(ftsm.ftn) (8/42) (Saturday March 09, 2013) footer
end % of iso1dict
pagesave restore
showpage
%%Page: (17-18) 9
%%BeginPageSetup
/pagesave save def
sh 0 translate 90 rotate
%%EndPageSetup
iso1dict begin
gsave
llx lly 12 add translate
/v 0 store
/x0 x v get 2.965278 add sx cw mul add store
/y0 y v get bfs th add sub store
x0 y0 moveto
0 T (           return) p n
0 T (          endif) N
0 T (!) N
0 T (!) N
(1100) # (          if \(qdiffrot\) then; if \(associated\(r_f\)\) deallocate\(r_f\)) N
0 T (                             if\(associated\(iatom_f\)\) deallocate\(iatom_f\)) N
0 T (          else              ; nullify\(r_f\) ; nullify\(iatom_f\)) N
0 T (          endif) N
0 T (          if \(associated\(forcedWeights\)\) deallocate\(forcedWeights\)) N
0 T (!) N
0 T (          allocate\(iatom_f\(nforced\)\); iatom_f=0) N
0 T (          allocate\(forcedWeights\(nforced\)\);) N
0 T (          forcedWeights=1d0/nforced ! default behavior) N
0 T (!    build index array) N
(1110) # (          nforced=0) N
0 T (!) N
0 T (#ifdef __CHARMM) N
0 T (          do i=1,natom) N
0 T (           if \(iselct\(i\).gt.0\) then) N
0 T (            nforced=nforced+1) N
0 T (            iatom_f\(nforced\)=i) N
0 T (           endif) N
0 T (          enddo) N
0 T (#else) N
(1120) # (          iatom_f=iselct) N
0 T (          if \(associated\(iselct\)\) deallocate\(iselct\)) N
0 T (#endif) N
0 T (!) N
0 T (!    determine whether the new orientation set is the same as the existing forci) N
0 T (ng set) N
0 T (!) N
0 T (          qdiffrot=.not. \( norient .eq. nforced \)) N
0 T (          if \(.not.qdiffrot\)  qdiffrot=.not.\(associated\(iatom_o\)\)) N
0 T (          if \(.not.qdiffrot\)  qdiffrot=any\(iatom_f.ne.iatom_o\)) N
0 T (!) N
(1130) # (          if \(.not.qdiffrot\) then) N
0 T (           deallocate\(iatom_f\); iatom_f=>iatom_o; r_f=>r_o;) N
0 T (          else) N
0 T (           allocate\(r_f\(nforced,3,num_sets\)\); r_f=__NAN;) N
0 T (           if \(norient.gt.0\) call ftsm_compute_overlap_ind\(\)  ! compute overlap ) N
0 T (indices in iatom_both) N
0 T (          endif) N
0 T (! print summary) N
0 T (          if \(qprint\) then) N
0 T (            write\(_MSGBUF,104\) whoami, nforced ; __PRINT\(_MSGBUF\)) N
0 T ( 104  format\(A,' WILL APPLY FORCES TO ',i5,' ATOMS'\)) N
(1140) # (            write\(_MSGBUF,105\) whoami ; __PRINT\(_MSGBUF\)) N
0 T ( 105  format\(A,' FORCING WEIGHTS UNIFORM.'\)) N
0 T (            if \(qdiffrot\) then) N
0 T (             write\(_MSGBUF,102\) whoami) N
0 T (            else) N
0 T (             write\(_MSGBUF,103\) whoami) N
0 T (            endif) N
0 T (            __PRINT\(_MSGBUF\)) N
0 T (          endif ! qprint) N
0 T (         else) N
(1150) # (          __WRN\(whoami,'ATOM SELECTION MUST BE SPECIFIED AFTER RMSD.'\)) N
0 T (          return) N
0 T (         endif) N
0 T (!*************************************************************) N
0 T (!      set k parallel to path \(for off-path dynamics\)) N
0 T (        elseif \(__INDX\(comlyn,comlen,'KPAR',4\).gt.0\) then) N
0 T (          k=__GET_RM_F\(comlyn,comlen,'KPAR',-1d0\)) N
0 T (          if \(k.ge.0d0\) then) N
0 T (           kpara=k) N
0 T (           if \(qprint\) then ; write\(_MSGBUF,6756\) whoami, k ; __PRINT\(_MSGBUF\) ;) N
0 T ( endif) N
(1160) # ( 6756 format\(A,' SETTING PARALLEL RESTRAINT FORCE CONSTANT TO ',F11.5\)) N
0 T (          else) N
0 T (           if \(qprint\) then ; write\(_MSGBUF,6757\) whoami, k ; __PRINT\(_MSGBUF\) ;) N
0 T ( endif) N
0 T ( 6757 format\(A,' INVALID FORCE CONSTANT SPECIFIED: ',F11.5\)) N
0 T (          endif) N
(ftsm.ftn) (Page 17/83) (Mar 09, 13 15:34) title
border
/v 1 store
/x0 x v get 2.965278 add sx cw mul add store
/y0 y v get bfs th add sub store
x0 y0 moveto
0 T (!*************************************************************) p n
0 T (!      set k perpendicular to path \(for off-path dynamics\)) N
0 T (        elseif \(__INDX\(comlyn,comlen,'KPRP',4\).gt.0\) then) N
0 T (          k=__GET_RM_F\(comlyn,comlen,'KPRP',-one\)) N
0 T (          if \(k.ge.0d0\) then) N
(1170) # (           kperp=k) N
0 T (           if \(qprint\) then  ; write\(_MSGBUF,6746\) whoami, k ; __PRINT\(_MSGBUF\) ) N
0 T (; endif) N
0 T ( 6746 format\(A,' SETTING PERPENDICULAR RESTRAINT FORCE CONSTANT TO '    &) N
0 T (     &       ,F11.5\)) N
0 T (          else) N
0 T (           if \(qprint\) then ; write\(_MSGBUF,6757\) whoami, k ; __PRINT\(_MSGBUF\) ;) N
0 T ( endif) N
0 T (          endif) N
0 T (!**************************************************************) N
0 T (        elseif \(__INDX\(comlyn,comlen,'KRMS',4\).gt.0\) then) N
0 T (          k=__GET_RM_F\(comlyn,comlen,'KRMS',-one\)) N
(1180) # (          if \(k.ge.0d0\) then) N
0 T (           krms=k) N
0 T (           if \(qprint\) then ; write\(_MSGBUF,6752\) whoami, k ; __PRINT\(_MSGBUF\) ;) N
0 T ( endif) N
0 T ( 6752 format\(A,' SETTING RMSD RESTRAINT FORCE CONSTANT TO '             &) N
0 T (     &       ,F11.5\)) N
0 T (          else) N
0 T (           if \(qprint\) then ; write\(_MSGBUF,6757\) whoami, k ; __PRINT\(_MSGBUF\) ;) N
0 T ( endif) N
0 T (          endif) N
0 T (!***************************************************************) N
0 T (        elseif \(__INDX_RM\(comlyn,comlen,'MASS'\).gt.0\) then ! mass-weighting) N
(1190) # (          keyword=__NEXTA\(comlyn, comlen\)) N
0 T (          klen=len\(keyword\)) N
0 T (          __TRIMA\(keyword,klen\)) N
0 T (#ifndef __CHARMM) N
0 T ( natom=__NATOM) N
0 T (#endif) N
0 T (          select case\(keyword\(1:klen\)\)) N
0 T (           case\('YES','ON','TRUE','T','yes','on','true','t'\)) N
0 T (            if \(qprint\) then ; write\(_MSGBUF,8001\) whoami, 'SET FROM ATOM MASSES) N
0 T (' ; __PRINT\(_MSGBUF\) ; endif) N
0 T (            call ftsm_set_weights\(__MASS, natom\) ! send masses) N
(1200) # (           case\('NO','OFF','FALSE','F','no','off','false','f'\)) N
0 T (            if \(qprint\) then ; write\(_MSGBUF,8001\) whoami, 'WILL BE UNIFORM'    ) N
0 T (  ; __PRINT\(_MSGBUF\) ; endif) N
0 T (            call ftsm_set_weights\( \(/ \(1d0, i=1,natom\) /\), natom\) ! uniform) N
0 T (#ifdef __CHARMM) N
0 T (           case\('WMAIN', 'wmain'\)) N
0 T (            if \(qprint\) then ; write\(_MSGBUF,8001\) whoami, 'SET FROM WMAIN ARRAY) N
0 T (' ; __PRINT\(_MSGBUF\) ; endif) N
0 T (            call ftsm_set_weights\(wmain, natom\) ! send masses) N
0 T (           case\('WCOMP', 'wcomp'\)) N
0 T (            if \(qprint\) then ; write\(_MSGBUF,8001\) whoami, 'SET FROM WCOMP ARRAY) N
0 T (' ; __PRINT\(_MSGBUF\) ; endif) N
0 T (            call ftsm_set_weights\(wcomp, natom\) ! send masses) N
(1210) # (#elif defined \(__DMOL\)) N
0 T (           case\('BFACTOR', 'bfactor', 'BFACT', 'bfact'\)) N
0 T (            if \(qprint\) then ; write\(_MSGBUF,8001\) whoami, 'SET FROM BFACTOR ARR) N
0 T (AY' ; __PRINT\(_MSGBUF\) ; endif) N
0 T (            call ftsm_set_weights\(bfactor, natom\) ! send masses) N
0 T (           case\('OCCU', 'occu','OCCUPANCY', 'occupancy'\)) N
0 T (            if \(qprint\) then ; write\(_MSGBUF,8001\) whoami, 'SET FROM OCCUPANCY A) N
0 T (RRAY' ; __PRINT\(_MSGBUF\) ; endif) N
0 T (            call ftsm_set_weights\(occupancy, natom\) ! send masses) N
0 T (#endif) N
0 T (           case default) N
0 T (            __WRN\(whoami,'UNKNOWN OPTION SPECIFIED'\)) N
(1220) # (          end select) N
0 T ( 8001 format\(A,' WEIGHTS ',A,'.'\)) N
0 T (!*********************************************************************) N
0 T (        elseif \(__INDX_RM\(comlyn,comlen,'PROJ'\).gt.0\) then ! mass-weighting) N
0 T (          keyword=__NEXTA\(comlyn, comlen\)) N
0 T (          klen=len\(keyword\)) N
0 T (          __TRIMA\(keyword,klen\)) N
0 T (          select case\(keyword\(1:klen\)\)) N
(ftsm.ftn) (Page 18/83) (Mar 09, 13 15:34) title
border
grestore
(Printed by surgeon) rhead
(ftsm.ftn) (9/42) (Saturday March 09, 2013) footer
end % of iso1dict
pagesave restore
showpage
%%Page: (19-20) 10
%%BeginPageSetup
/pagesave save def
sh 0 translate 90 rotate
%%EndPageSetup
iso1dict begin
gsave
llx lly 12 add translate
/v 0 store
/x0 x v get 2.965278 add sx cw mul add store
/y0 y v get bfs th add sub store
x0 y0 moveto
0 T (           case\('YES','ON','TRUE','T','yes','on','true','t'\)) p n
0 T (            proj_on=.true.) N
(1230) # (            if \(qprint\) then ; write \(_MSGBUF,'\(2A\)'\) whoami,                   ) N
0 T ( &) N
0 T (     & ' WILL RESTRAIN SYSTEM TO PLANE PERPENDICULAR TO PATH.' ; __PRINT\(_MSGBUF) N
0 T (\) ; endif) N
0 T (           case\('NO','OFF','FALSE','F','no','off','false','f'\)) N
0 T (            proj_on=.false.) N
0 T (            if \(qprint\) then ; write \(_MSGBUF,'\(2A\)'\) whoami,           &) N
0 T (     & ' WILL RESTRAIN SYSTEM TO PATH IMAGE.'//                         &) N
0 T (     & ' \(FE/MFPT CANNOT BE COMPUTED\).' ; __PRINT\(_MSGBUF\) ; endif) N
0 T (           case default) N
0 T (            __WRN\(whoami,'UNKNOWN OPTION SPECIFIED'\)) N
0 T (          end select) N
(1240) # (!*********************************************************************) N
0 T (        elseif \(__INDX\(comlyn,comlen,'DPAR',4\).gt.0\) then ! normalized distance ) N
0 T (parallel to vector between neighboring replicas at which this system is restrain) N
0 T (ed) N
0 T (          zval=__GET_RM_F\(comlyn, comlen, 'DPAR', -1.0d0\)) N
0 T (!    check replica spec) N
0 T (          irep=__GET_RM_I\(comlyn, comlen, 'REP', -1\)) N
0 T (          if \(irep.lt.0.or.irep.ge.nstring\) then) N
0 T (           if \(qprint\) then ; write\(_MSGBUF, 6773\) whoami, whoami, zval ; __PRIN) N
0 T (T\(_MSGBUF\) ; endif) N
0 T (           dpar0=zval) N
0 T (          else) N
0 T (           if \(qprint\) then ; write\(_MSGBUF,6774\) whoami, irep, zval ; __PRINT\(_) N
0 T (MSGBUF\) ; endif) N
(1250) # (           if \(mestring.eq.irep\) dpar0=zval ! note: permitting any value) N
0 T (          endif ! irep) N
0 T ( 6773 format\(A,' REPLICA NUMBER INVALID OR UNSPECIFIED.',               &) N
0 T (     &      /A,' WILL SET RERERENCE VALUE FOR PARALLEL RESTRAINT ',     &) N
0 T (     &         '  TO ',F7.3,' ON ALL REPLICAS.'\)) N
0 T ( 6774 format\(A,' WILL SET RERERENCE VALUE FOR PARALLEL RESTRAINT ',     &) N
0 T (     &   'ON REPLICA ',I5,' TO ',F7.3,'.'\)) N
0 T (        ! DPAR) N
0 T (!********************************************************************) N
0 T (        elseif \(__INDX\(comlyn,comlen,'DPRP',4\).gt.0\) then ! distance perpendicul) N
0 T (ar to vector between neighboring replicas at which this system is restrained) N
(1260) # (          zval=__GET_RM_F\(comlyn, comlen, 'DPRP', -1.0d0\)) N
0 T (!    check replica spec) N
0 T (          irep=__GET_RM_I\(comlyn, comlen, 'REP', -1\)) N
0 T (          if \(irep.lt.0.or.irep.ge.nstring\) then) N
0 T (           if \(qprint\) then ; write\(_MSGBUF, 6776\) whoami, whoami, zval ; __PRIN) N
0 T (T\(_MSGBUF\) ; endif) N
0 T (           dperp0=zval) N
0 T (          else) N
0 T (           if \(qprint\) then ; write\(_MSGBUF,6775\) whoami, irep, zval ; __PRINT\(_) N
0 T (MSGBUF\) ; endif) N
0 T (           if \(mestring.eq.irep\) dperp0=zval ! note: permitting any value) N
0 T (          endif ! irep) N
(1270) # ( 6776 format\(A,' REPLICA NUMBER INVALID OR UNSPECIFIED.',               &) N
0 T (     &      /A,' WILL SET OFFSET DISTANCE FOR PERPENDICULAR RESTRAINT', &) N
0 T (     &         ' TO ',E10.3,' ON ALL REPLICAS.'\)) N
0 T ( 6775 format\(A,' WILL SET OFFSET DISTANCE FOR PERPENDICULAR RESTRAINT ',&) N
0 T (     &   'ON REPLICA ',I5,' TO ',E10.3,'.'\)) N
0 T (!********************************************************************) N
0 T (        elseif \(__INDX\(comlyn,comlen,'DRMS',4\).gt.0\) then ! RMS distance between) N
0 T ( simulation and reference structure) N
0 T (          zval=__GET_RM_F\(comlyn, comlen, 'DRMS', -1.0d0\)) N
0 T (!    check replica spec) N
0 T (          irep=__GET_RM_I\(comlyn, comlen, 'REP', -1\)) N
(1280) # (          if \(irep.lt.0.or.irep.ge.nstring\) then) N
0 T (           if \(qprint\) then ; write\(_MSGBUF, 6777\) whoami, whoami, zval ; __PRIN) N
0 T (T\(_MSGBUF\) ; endif) N
0 T (           drms0=zval) N
0 T (          else) N
0 T (           if \(qprint\) then ; write\(_MSGBUF,6778\) whoami, irep, zval ; __PRINT\(_) N
0 T (MSGBUF\) ; endif) N
0 T (           if \(mestring.eq.irep\) drms0=zval ! note: permitting any value) N
0 T (          endif ! irep) N
0 T ( 6777 format\(A,' REPLICA NUMBER INVALID OR UNSPECIFIED.',               &) N
0 T (     &      /A,' WILL SET REFERENCE VALUE FOR RMSD RESTRAINT ',         &) N
(ftsm.ftn) (Page 19/83) (Mar 09, 13 15:34) title
border
/v 1 store
/x0 x v get 2.965278 add sx cw mul add store
/y0 y v get bfs th add sub store
x0 y0 moveto
0 T (     &         '  TO ',F7.3,' ON ALL REPLICAS.'\)) p n
(1290) # ( 6778 format\(A,' WILL SET REFERENCE VALUE FOR RMSD RESTRAINT ',         &) N
0 T (     &   'ON REPLICA ',I5,' TO ',F7.3,'.'\)) N
0 T (        endif) N
0 T (!) N
0 T (!      done with 'SET' parsing) N
0 T (!cccccccccccccccccccccccccccccccccccc CV WEIGHTS ccccccccccccccccccccccccccccccc) N
0 T (ccccc) N
0 T (      elseif \(__STRNCMP\(keyword,'LIST',4\)\) then ! list forcing and orientation a) N
0 T (toms) N
0 T (       if \(qprint\) then ; write\(_MSGBUF,6762\) whoami ; __PRINT\(_MSGBUF\) ; endif) N
0 T ( 6762 format\(/A,' WILL LIST REPLICA ATOMS.'\)) N
0 T (       call ftsm_list_atoms\(\)) N
(1300) # (!ccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccc) N
0 T (c) N
0 T (      else) N
0 T (            __WARN\(whoami,'UNRECOGNIZED SUBCOMMAND: ',keyword\)) N
0 T (      endif) N
0 T (!) N
0 T (      end subroutine ftsm_parse) N
0 T (!ccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccc) N
0 T (      subroutine ftsm_init\(\)) N
0 T (      __DEP_OUTPUT) N
0 T (      __DEP_PARSER ) N
(1310) # (      __DEP_MULTICOM       __CHARMM_ONLY !##MULTICOM) N
0 T (      __DEP_MPI ) N
0 T (!) N
0 T (      __IMPNONE) N
0 T ( __DECLARE_MSGBUF) N
0 T (#include "../../mpitype.def") N
0 T (      int :: ierror) N
0 T (      bool :: qroot, qslave) N
0 T (      character\(len=11\) :: whoami) N
0 T (!) N
(1320) # (      data whoami /' FTSM_INIT>'/) N
0 T (!) N
0 T (!      do a basic communicator check:) N
0 T (      if \(ME_LOCAL.eq.0.and.ME_STRNG.eq.MPI_UNDEFINED\) then) N
0 T (        write\(_MSGBUF, 111\) whoami, ME_GLOBAL, whoami ; __PRINT\(_MSGBUF\)) N
0 T ( 111  FORMAT\(A, ' WORLD REPLICA ',I5, ' HAS ZERO GROUP ID',             &) N
0 T (     & /,A,' BUT INVALID STRING ID \(MAY BE OK\).'\)) N
0 T (      elseif \(ME_STRNG.ne.MPI_UNDEFINED.and.                            &) N
0 T (     &  \(ME_LOCAL.ne.0.or.MPI_COMM_LOCAL.eq.MPI_COMM_NULL\)\) then) N
0 T (        write\(_MSGBUF, 112\) whoami, ME_GLOBAL, whoami ; __PRINT\(_MSGBUF\)) N
(1330) # ( 112  FORMAT\(A, ' WORLD REPLICA ',I5, ' HAS A VALID STRING ID',         &) N
0 T (     & /,A,' BUT A NONZERO GROUP ID. ABORTING.'\)) N
0 T (       return) N
0 T (      endif) N
0 T (!) N
0 T (      qroot=ME_STRNG.ne.MPI_UNDEFINED) N
0 T (      qslave=ME_LOCAL.ne.MPI_UNDEFINED ! \(also includes roots\)) N
0 T (!) N
0 T (      if \(ftsm_initialized\) then) N
0 T (       if \(qroot\) then) N
(1340) # (        if \(ME_STRNG.eq.0\) then) N
0 T (          write\(_MSGBUF,'\(2A\)'\)                                            &) N
0 T (     &    whoami, ' FTSM ALREADY INITIALIZED. CALL "DONE" TO CLEAN UP.' ; __PRIN) N
0 T (T\(_MSGBUF\);) N
0 T (        endif ! ME_STRNG) N
0 T (       endif ! qroot) N
0 T (       return) N
0 T (      endif) N
0 T (!) N
0 T (      nstring=1 ! safe \(hopefully\) default) N
0 T (      mestring=-1 ! safe \(hopefully\) default) N
(1350) # (!) N
0 T (      if \(qroot\) then) N
0 T (        nstring=SIZE_STRNG) N
0 T (        mestring=ME_STRNG) N
0 T (      endif) N
0 T (#ifdef __CHARMM) N
0 T (!      broadcast string size to all slave nodes) N
0 T (      __BROADCAST_LOCAL_8B\(nstring, 1\)    !##INTEGER8) N
(ftsm.ftn) (Page 20/83) (Mar 09, 13 15:34) title
border
grestore
(Printed by surgeon) rhead
(ftsm.ftn) (10/42) (Saturday March 09, 2013) footer
end % of iso1dict
pagesave restore
showpage
%%Page: (21-22) 11
%%BeginPageSetup
/pagesave save def
sh 0 translate 90 rotate
%%EndPageSetup
iso1dict begin
gsave
llx lly 12 add translate
/v 0 store
/x0 x v get 2.965278 add sx cw mul add store
/y0 y v get bfs th add sub store
x0 y0 moveto
0 T (      __BROADCAST_LOCAL_8B\(mestring, 1\)   !##INTEGER8) p n
0 T (!) N
(1360) # (      __BROADCAST_LOCAL_4B\(nstring, 1\)    !##.not.INTEGER8) N
0 T (      __BROADCAST_LOCAL_4B\(mestring, 1\)   !##.not.INTEGER8) N
0 T (!      set envorinment variable) N
0 T (      call setmsi\('NSTRING',nstring\)) N
0 T (      call setmsi\('MESTRING',mestring\)) N
0 T (#else) N
0 T (      __BROADCAST_LOCAL\(nstring, 1, mpiint\)) N
0 T (      __BROADCAST_LOCAL\(mestring, 1, mpiint\)) N
0 T (#endif) N
0 T (!) N
(1370) # (      if \(qroot\) then) N
0 T (        if \(ME_STRNG.eq.0\) then) N
0 T (          write\(_MSGBUF,'\(2A,I5, A\)'\)                                      &) N
0 T (     &    whoami, ' FOUND ',nstring,' REPLICAS.' ; __PRINT\(_MSGBUF\)) N
0 T (        endif) N
0 T (      endif) N
0 T (!) N
0 T (      MPI_RTMD_TYPE =MPI_DATATYPE_NULL) N
0 T (      MPI_RTMD_TYPE_=MPI_DATATYPE_NULL) N
0 T (!    initialize free energy arrays) N
(1380) # (      if \(allocated\(fe\)\) deallocate\(fe\)) N
0 T (      if \(allocated\(feav\)\) deallocate\(feav\)) N
0 T (      if \(allocated\(ds\)\) deallocate\(ds\)) N
0 T (      if \(allocated\(curv\)\) deallocate\(curv\)) N
0 T (      allocate\(fe\(nstring\), feav\(nstring\),                              &) N
0 T (     &         ds\(nstring-1\), curv\(nstring-2\)\)) N
0 T () N
0 T (      fe=0d0; feav=0d0; avforce=0d0; ds=0d0; curv=0d0) N
0 T (!) N
0 T (      num_evolve_samples=0) N
(1390) # (      num_fe_samples=0) N
0 T (      num_force_samples=0) N
0 T (!    set default restraint positions) N
0 T (!) N
0 T (      if \(mestring.eq.0\) then) N
0 T (       dpar0=0d0) N
0 T (      elseif \(mestring.eq.nstring-1\) then) N
0 T (       dpar0=1d0) N
0 T (      else) N
0 T (       dpar0=0.5d0) N
(1400) # (      endif) N
0 T (!) N
0 T (      dperp0=0.5d0) N
0 T (      drms0=0d0) N
0 T (!) N
0 T (      qorient=.false.) N
0 T (      qdiffrot=.false.) N
0 T (!) N
0 T (      nullify\(rall_o, rall_new_o, rall_f, rall_new_o, rcom_all\)) N
0 T (!) N
(1410) # (      ftsm_initialized=.true.) N
0 T (!) N
0 T (      end subroutine ftsm_init) N
0 T (!cccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccc) N
0 T (      subroutine ftsm_done\(\)) N
0 T (      use ftsm_rex, only: ftsm_rex_done) N
0 T (      use ftsm_voronoi, only : ftsm_voronoi_done) N
0 T (!) N
0 T (      __DEP_OUTPUT) N
0 T (      __DEP_PARSER ) N
(1420) # (      __DEP_MULTICOM       __CHARMM_ONLY !##MULTICOM) N
0 T (      __DEP_MPI ) N
0 T (!) N
0 T ( __DECLARE_MSGBUF) N
0 T (!) N
0 T (      character\(len=11\) :: whoami) N
0 T (!) N
0 T (      data whoami /' FTSM_DONE>'/) N
0 T (!) N
0 T (      if \(MPI_COMM_STRNG.ne.MPI_COMM_NULL.and.ME_STRNG.eq.0\) then ) N
(1430) # (       write\(_MSGBUF,'\(2A,I5, A\)'\) whoami, ' CLEANING UP.' ; __PRINT\(_MSGBUF\)) N
(ftsm.ftn) (Page 21/83) (Mar 09, 13 15:34) title
border
/v 1 store
/x0 x v get 2.965278 add sx cw mul add store
/y0 y v get bfs th add sub store
x0 y0 moveto
0 T (      endif) p n
0 T (!) N
0 T (      nstring=-1) N
0 T (      mestring=-1) N
0 T (#ifdef __CHARMM) N
0 T (!      set envorinment variable) N
0 T (      call setmsi\('NSTRING',nstring\)) N
0 T (      call setmsi\('MESTRING',mestring\)) N
0 T (#endif) N
(1440) # (!) N
0 T (!    deallocate arrays) N
0 T (!) N
0 T (      nforced=0) N
0 T (      if \(associated\(r_f\)\) deallocate\(r_f\)) N
0 T (      if \(associated\(iatom_f\)\) deallocate\(iatom_f\)) N
0 T (      if \(associated\(iatom_a\)\) deallocate\(iatom_a\)) N
0 T (      if \(associated\(orientWeights\)\) deallocate\(orientWeights\)) N
0 T (      if \(associated\(forcedWeights\)\) deallocate\(forcedWeights\)) N
0 T (      if \(associated\(rall_f\)\) deallocate\(rall_f\)) N
(1450) # (      if \(associated\(rall_new_f\)\) deallocate\(rall_new_f\)) N
0 T (!) N
0 T (      if \(qdiffrot\) then) N
0 T (       if \(associated\(r_o\)\) deallocate\(r_o\);) N
0 T (       if \(associated\(rall_o\)\) deallocate\(rall_o\);) N
0 T (       if \(associated\(rall_new_o\)\) deallocate\(rall_new_o\);) N
0 T (       if \(associated\(iatom_o\)\) deallocate\(iatom_o\);) N
0 T (       if \(associated\(iatom_both\)\) deallocate\(iatom_both\)) N
0 T (      endif) N
0 T (!) N
(1460) # (      nullify\(r_o\)) N
0 T (      nullify\(iatom_o\)) N
0 T (      norient=0) N
0 T (      nboth=0) N
0 T (!) N
0 T (      if \(associated\(iatom_a\)\) deallocate\(iatom_a\)) N
0 T (      nany=0) N
0 T (!) N
0 T (      if \(associated\(rcom\)\) deallocate\(rcom\)) N
0 T (      if \(associated\(rcom_all\)\) deallocate\(rcom_all\)) N
(1470) # (      if \(allocated\(ds\)\) deallocate\(ds\)) N
0 T (      if \(allocated\(curv\)\) deallocate\(curv\)) N
0 T (      if \(allocated\(fe\)\) deallocate\(fe\)) N
0 T (      if \(allocated\(feav\)\) deallocate\(feav\)) N
0 T (!) N
0 T (      num_evolve_samples=0) N
0 T (      num_fe_samples=0) N
0 T (      num_force_samples=0) N
0 T (!) N
0 T (      qdiffrot=.false.) N
(1480) # (      qorient=.false.) N
0 T (!) N
0 T (      call ftsm_define_rtmd_type\(\) ! deallocate MPI type for transmitting forces) N
0 T ( \(this is the effect when norient=0\)) N
0 T (!) N
0 T (      call ftsm_rex_done\(\)) N
0 T (!) N
0 T (      call ftsm_mini_done\(\) ! deallocate minimization structures \(if any\)) N
0 T (!) N
0 T (      call ftsm_voronoi_done\(\)) N
0 T (!) N
(1490) # (      ftsm_initialized=.false.) N
0 T (!) N
0 T (      end subroutine ftsm_done) N
0 T (!cccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccc) N
0 T (      subroutine ftsm_repa_init\(comlyn, comlen\)) N
0 T (!) N
0 T (      __DEP_OUTPUT) N
0 T (      __DEP_PARSER ) N
0 T (      __DEP_MULTICOM       __CHARMM_ONLY !##MULTICOM) N
0 T (      __DEP_MPI ) N
(1500) # (      __IMPNONE) N
0 T (!) N
0 T ( __DECLARE_MSGBUF) N
(ftsm.ftn) (Page 22/83) (Mar 09, 13 15:34) title
border
grestore
(Printed by surgeon) rhead
(ftsm.ftn) (11/42) (Saturday March 09, 2013) footer
end % of iso1dict
pagesave restore
showpage
%%Page: (23-24) 12
%%BeginPageSetup
/pagesave save def
sh 0 translate 90 rotate
%%EndPageSetup
iso1dict begin
gsave
llx lly 12 add translate
/v 0 store
/x0 x v get 2.965278 add sx cw mul add store
/y0 y v get bfs th add sub store
x0 y0 moveto
0 T (!) p n
0 T (      CHARACTER\(LEN=*\) :: COMLYN) N
0 T (      int :: COMLEN) N
0 T (      character\(len=16\) :: whoami) N
0 T (      bool :: qprint, qroot) N
0 T (!) N
0 T (      data whoami /' FTSM_REPA_INIT>'/) N
(1510) # (!) N
0 T (      qroot=MPI_COMM_STRNG.ne.MPI_COMM_NULL) N
0 T (      qprint=qroot.and.ME_STRNG.eq.0) N
0 T (!) N
0 T (      if \(qprint\) then ; write\(_MSGBUF,8002\) whoami ; __PRINT\(_MSGBUF\) ; endif) N
0 T (      call smcv_repa_init\(comlyn, comlen\)) N
0 T (!) N
0 T ( 8002 format\(/A,' USING SMCV INITIALIZATION ROUTINE'\)) N
0 T (!) N
0 T (      end subroutine ftsm_repa_init) N
(1520) # (!cccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccc) N
0 T (      subroutine ftsm_mini_init\(comlyn, comlen\)) N
0 T (      use ftsm_var) N
0 T (      __DEP_OUTPUT) N
0 T (      __DEP_PARSER ) N
0 T (      __DEP_MULTICOM       !__CHARMM_ONLY##MULTICOM) N
0 T (      __DEP_MPI ) N
0 T (      __DEP_NUMBER) N
0 T (#ifdef __CHARMM) N
0 T (      use datstr) N
(1530) # (#endif) N
0 T (!cccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccc) N
0 T (      __IMPNONE) N
0 T (!) N
0 T (      character\(len=*\) :: comlyn) N
0 T (      int :: comlen) N
0 T (!) N
0 T (      character\(len=16\) :: whoami) N
0 T (      character\(len=8\) :: keyword) N
0 T (!) N
(1540) # (      int :: isd=0, iconj=0, mlen) N
0 T (!) N
0 T (!) N
0 T (      bool :: qroot, qprint) N
0 T (!) N
0 T ( __DECLARE_MSGBUF) N
0 T (!) N
0 T (      character\(len=20\) :: methods\(2\), method) N
0 T (      data methods/ 'STEEPEST DESCENT','CONJUGATE GRADIENT'/) N
0 T () N
(1550) # (      data whoami /' FTSM_MINI_INIT>'/) N
0 T (!) N
0 T (      qroot=MPI_COMM_STRNG.ne.MPI_COMM_NULL) N
0 T (      qprint=qroot.and.ME_STRNG.eq.0) N
0 T (!) N
0 T (      ftsm_mini_method=0) N
0 T (      ftsm_mini_initialized=.false.) N
0 T (!) N
0 T (      isd=__INDX_RM\(comlyn, comlen, 'SD'\) ; if \(isd.gt.0\) ftsm_mini_method=sd) N
0 T (      iconj=__INDX_RM\(comlyn, comlen, 'CONJ'\) ; if \(iconj.gt.0\) ftsm_mini_method) N
0 T (=conj) N
(1560) # (!) N
0 T (      if \(\(iconj\).gt.0\) then) N
0 T (        __WRN\(whoami,' ONLY SD MINIMIZATION IS CURRENTLY SUPPORTED. NOTHING DONE) N
0 T ('\)) N
0 T (        return) N
0 T (      endif) N
0 T (!ccccccc CHECK FOR MULTIPLE OR MISSING OPTIONS) N
0 T (      if \(\(abs\(isd\)+abs\(iconj\)\) .eq. 0\) then) N
0 T (       if \(qprint\) then  ; write\(_MSGBUF,665\) whoami ; __PRINT\(_MSGBUF\) ; endif ) N
0 T (! qprint) N
0 T ( 665   FORMAT\(A,' MINIMIZATION METHOD NOT SPECIFIED. WILL USE STEEPEST DESCENT.') N
0 T (\)) N
0 T (       ftsm_mini_method=sd) N
(1570) # (      elseif \(\(isd+iconj\) .gt. 1\) then) N
0 T (       __WRN\(whoami,'MORE THAN ONE MINIMIZATION METHOD SPECIFIED. NOTHING DONE'\)) N
(ftsm.ftn) (Page 23/83) (Mar 09, 13 15:34) title
border
/v 1 store
/x0 x v get 2.965278 add sx cw mul add store
/y0 y v get bfs th add sub store
x0 y0 moveto
0 T (       return) p n
0 T (      endif) N
0 T (!) N
0 T (      ftsm_mini_step=__GET_RM_F\(comlyn, comlen, 'STEP', one*0.01\) ! cast to corr) N
0 T (ect kind) N
0 T (      if \(ftsm_mini_step.lt.zero\) then) N
0 T (         __WRN\(whoami,'MINIMIZATION STEP MUST NOT BE NEGATIVE. SET TO 0.01 .'\)) N
0 T (         ftsm_mini_step=0.01) N
0 T (      endif) N
(1580) # (!     number of minimization steps) N
0 T (      ftsm_mini_bath_iterations=__GET_RM_I\(comlyn, comlen, 'BITER', ione*50\)) N
0 T (      if \(ftsm_mini_bath_iterations.lt.0\) then) N
0 T (         __WRN\(whoami,'NUMBER OF MINIMIZATION ITERATIONS CANNOT BE NEGATIVE. NOT) N
0 T (HING DONE.'\)) N
0 T (         return) N
0 T (      endif) N
0 T (!) N
0 T (      ftsm_mini_forced_iterations=__GET_RM_I\(comlyn, comlen, 'SITER', ione*10\)) N
0 T (      if \(ftsm_mini_forced_iterations.lt.0\) then) N
0 T (         __WRN\(whoami,'NUMBER OF MINIMIZATION ITERATIONS CANNOT BE NEGATIVE. NOT) N
0 T (HING DONE.'\)) N
(1590) # (         return) N
0 T (      endif) N
0 T (!) N
0 T (!     print summary) N
0 T (!) N
0 T (      if \(qprint\) then) N
0 T (       mlen=len_trim\(methods\(ftsm_mini_method\)\)) N
0 T (       write\(_MSGBUF\(1\),667\) whoami, methods\(ftsm_mini_method\)\(1:mlen\)) N
0 T (       write\(_MSGBUF\(3\),669\) whoami, ftsm_mini_bath_iterations, ftsm_mini_forced) N
0 T (_iterations) N
0 T (       write\(_MSGBUF\(2\),668\) whoami, ftsm_mini_step) N
(1600) # (       __PRINT\(_MSGBUF\)) N
0 T (!) N
0 T ( 667  format\(A,'  WILL MINIMIZE STRING USING ',A,' MINIMIZATION'\)) N
0 T ( 669  format\(A,'  FOR ',I5,' BATH ITERATIONS AND ',I5,' STRING ITERATIONS'\)) N
0 T ( 668  format\(A,'  WITH INITIAL STEP ',F10.5\)) N
0 T (!) N
0 T (      endif) N
0 T (!) N
0 T (      ftsm_mini_initialized=.true.) N
0 T (      __CHARMM_ONLY ftsm_nbond_image_data_initialized=.false. ! data for computi) N
0 T (ng energy using CHARMM) N
(1610) # (!) N
0 T (      end subroutine ftsm_mini_init) N
0 T (!cccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccc) N
0 T (      subroutine ftsm_mini_done\(\)) N
0 T (#ifdef __CHARMM) N
0 T (      use datstr, only : FREEDT_nbond, FREEDT_image) N
0 T (      call FREEDT_nbond\(ftsm_nbond_copy\)) N
0 T (      call FREEDT_image\(ftsm_image_copy\)) N
0 T (      ftsm_nbond_image_data_initialized=.false.) N
0 T (#endif) N
(1620) # (      ftsm_mini_method=0) N
0 T (      ftsm_mini_initialized=.false.) N
0 T (      end subroutine ftsm_mini_done) N
0 T (!cccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccc) N
0 T (      subroutine ftsm_list_atoms\(\)) N
0 T (      __DEP_OUTPUT) N
0 T (      __DEP_PARSER ) N
0 T (      __DEP_MULTICOM       __CHARMM_ONLY !##MULTICOM) N
0 T (      __DEP_MPI ) N
0 T (      __DEP_ATOMID) N
(1630) # (!) N
0 T (      __IMPNONE) N
0 T ( __DECLARE_MSGBUF) N
0 T (!) N
0 T (      int :: j) N
0 T (      character\(len=8\) :: sid, rid, ren, ac) N
0 T (      character\(len=17\) :: whoami) N
0 T (!) N
0 T (      data whoami /' FTSM_LIST_ATOMS>'/) N
0 T (!) N
(ftsm.ftn) (Page 24/83) (Mar 09, 13 15:34) title
border
grestore
(Printed by surgeon) rhead
(ftsm.ftn) (12/42) (Saturday March 09, 2013) footer
end % of iso1dict
pagesave restore
showpage
%%Page: (25-26) 13
%%BeginPageSetup
/pagesave save def
sh 0 translate 90 rotate
%%EndPageSetup
iso1dict begin
gsave
llx lly 12 add translate
/v 0 store
/x0 x v get 2.965278 add sx cw mul add store
/y0 y v get bfs th add sub store
x0 y0 moveto
(1640) # (      if \(MPI_COMM_STRNG.eq.MPI_COMM_NULL\) return ! only replica heads stay) p n
0 T (!) N
0 T (      if \(ME_STRNG.eq.0\) then) N
0 T (!) N
0 T (       write\(_MSGBUF,'\(A\)'\) '\\t ORIENTATION ATOMS:') N
0 T (        do j=1, norient;) N
0 T (         __ATOMID\(iatom_o\(j\), sid, rid, ren, ac\)) N
0 T (         write\(_MSGBUF,667\) '\\t',j, iatom_o\(j\), sid, rid, ren, ac) N
0 T (        enddo) N
0 T (!) N
(1650) # (        if \(qdiffrot\) then) N
0 T (         write\(_MSGBUF,'\(A\)'\) '\\t FORCING ATOMS') N
0 T (         do j=1, nforced;) N
0 T (          __ATOMID\(iatom_f\(j\), sid, rid, ren, ac\)) N
0 T (          write\(_MSGBUF,667\) '\\t',j, iatom_f\(j\), sid, rid, ren, ac ; __PRINT\(_MS) N
0 T (GBUF\)) N
0 T (         enddo) N
0 T (        else) N
0 T (         write\(_MSGBUF,'\(A\)'\) '\\t FORCING AND ORIENTATION ATOMS ARE THE SAME' ; ) N
0 T (__PRINT\(_MSGBUF\)) N
0 T (        endif) N
0 T (      endif ! ME_STRING) N
(1660) # (!) N
0 T ( 667  format\(A,2I8,' ',4A\)) N
0 T (!) N
0 T (      end subroutine ftsm_list_atoms) N
0 T (!cccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccc) N
0 T (      subroutine ftsm_set_weights\(w,n\)) N
0 T (      __DEP_OUTPUT) N
0 T (      __DEP_NUMBER) N
0 T (      __DEP_PARSER) N
0 T (      __DEP_MULTICOM       __CHARMM_ONLY !##MULTICOM) N
(1670) # (!) N
0 T (      __IMPNONE) N
0 T (      int :: i, j, n) N
0 T (      float :: w\(n\), a) N
0 T (      character\(len=18\) :: whoami) N
0 T (!) N
0 T ( __DECLARE_MSGBUF) N
0 T (!) N
0 T (      data whoami /' FTSM_SET_WEIGHTS>'/) N
0 T (!) N
(1680) # (      if \(ME_STRNG.eq.0.and.ME_LOCAL.eq.0\) then) N
0 T (       write\(_MSGBUF,668\)                                               &) N
0 T (     & whoami,' A CHANGE IN THE ORIENTATION WEIGHTS REQUIRES ',         &) N
0 T (     & whoami,' REDEFINING IMAGES \(e.g. USING FILL\)' ; __PRINT\(_MSGBUF\)) N
0 T (      endif) N
0 T ( 668  format\(/2A,/2A\)) N
0 T (!) N
0 T (      if \(norient.eq.0.and.nforced.eq.0\) then) N
0 T (       __WRN\(whoami,'NO STRING ATOMS FOUND. NOTHING DONE.'\)) N
0 T (       return) N
(1690) # (      endif) N
0 T (!) N
0 T (!      if \(norient.eq.0\)) N
0 T (!     & __WRN\(whoami,'NO ORIENTATION ATOMS FOUND.'\)) N
0 T (      if \(associated\(orientWeights\).and.associated\(iatom_o\)\) then) N
0 T (       do i=1,norient) N
0 T (        j=iatom_o\(i\)) N
0 T (        if \(j.le.n\) then) N
0 T (         orientWeights\(i\)=w\(j\)) N
0 T (        else) N
(1700) # (         __WRN\(whoami,'WEIGHT ARRAY BOUNDS EXCEEDED. ABORT.'\)) N
0 T (         return) N
0 T (        endif) N
0 T (       enddo) N
0 T (!) N
0 T (       a=sum\(orientWeights\);) N
0 T (       if \(a.gt.__ERRTOL\) then ; orientWeights=orientWeights/a;) N
0 T (       else) N
0 T (        __WRN\(whoami,'SUM OF ORIENTATION WEIGHTS IS VERY SMALL. ABORT.'\)) N
0 T (        return) N
(1710) # (       endif) N
(ftsm.ftn) (Page 25/83) (Mar 09, 13 15:34) title
border
/v 1 store
/x0 x v get 2.965278 add sx cw mul add store
/y0 y v get bfs th add sub store
x0 y0 moveto
0 T (!) p n
0 T (      endif ! weights associated) N
0 T (!) N
0 T (!      if \(nforced.eq.0\)) N
0 T (!     & __WRN\(whoami,'NO FORCED ATOMS FOUND.'\)) N
0 T (      if \(associated\(forcedWeights\).and.associated\(iatom_f\)\) then) N
0 T (       do i=1,nforced) N
0 T (        j=iatom_f\(i\)) N
0 T (        if \(j.le.n\) then) N
(1720) # (         forcedWeights\(i\)=w\(j\)) N
0 T (        else) N
0 T (         __WRN\(whoami,'WEIGHT ARRAY BOUNDS EXCEEDED. ABORT.'\)) N
0 T (         return) N
0 T (        endif) N
0 T (       enddo) N
0 T (!) N
0 T (       a=sum\(forcedWeights\);) N
0 T (       if \(a.gt.__ERRTOL\) then ; forcedWeights=forcedWeights/a;) N
0 T (       else) N
(1730) # (        __WRN\(whoami,'SUM OF FORCING WEIGHTS IS VERY SMALL. ABORT.'\)) N
0 T (        return) N
0 T (       endif) N
0 T (!) N
0 T (      endif ! weights associated) N
0 T (!) N
0 T (      end subroutine ftsm_set_weights) N
0 T (!) N
0 T (!cccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccc) N
0 T (      subroutine ftsm_swap\(c1,c2\)) N
(1740) # (!      __DEP_OUTPUT) N
0 T (      __IMPNONE) N
0 T (      int :: c1, c2) N
0 T (      float :: com\(3\)) N
0 T (      character\(len=11\) :: whoami) N
0 T (      int :: i,j) N
0 T (!) N
0 T (      data whoami /' FTSM_SWAP>'/) N
0 T (!) N
0 T (      if \(.not.ftsm_check\(qorient\)\) return) N
(1750) # (!) N
0 T (      if \(c1.gt.num_sets.or.c2.gt.num_sets\) then) N
0 T (       __WRN\(whoami,'INVALID COLUMN SPECIFIED. ABORT.'\)) N
0 T (       return) N
0 T (      else) N
0 T (       if \(qdiffrot\) then) N
0 T (        r_o\(:,:,dummy\)=r_o\(:,:,c1\)) N
0 T (        r_o\(:,:,c1\)=r_o\(:,:,c2\)) N
0 T (        r_o\(:,:,c2\)=r_o\(:,:,dummy\)) N
0 T (       endif) N
(1760) # (       r_f\(:,:,dummy\)=r_f\(:,:,c1\)) N
0 T (       r_f\(:,:,c1\)   =r_f\(:,:,c2\)) N
0 T (       r_f\(:,:,c2\)   =r_f\(:,:,dummy\)) N
0 T (!) N
0 T (       com       =rcom\(:,c1\)) N
0 T (       rcom\(:,c1\)=rcom\(:,c2\)) N
0 T (       rcom\(:,c2\)=com) N
0 T (!) N
0 T (      endif) N
0 T (!) N
(1770) # (      end subroutine ftsm_swap) N
0 T (!cccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccc) N
0 T (      subroutine ftsm_copy\(c1,c2\)) N
0 T (      __DEP_NUMBER ) N
0 T (!) N
0 T (      __IMPNONE) N
0 T (      int :: c1, c2) N
0 T (      character\(len=11\) :: whoami) N
0 T (      int :: i,j) N
0 T (!) N
(1780) # (      data whoami /' FTSM_COPY>'/) N
0 T (!) N
0 T (      if \(.not.ftsm_check\(qorient\)\) return) N
0 T (!) N
(ftsm.ftn) (Page 26/83) (Mar 09, 13 15:34) title
border
grestore
(Printed by surgeon) rhead
(ftsm.ftn) (13/42) (Saturday March 09, 2013) footer
end % of iso1dict
pagesave restore
showpage
%%Page: (27-28) 14
%%BeginPageSetup
/pagesave save def
sh 0 translate 90 rotate
%%EndPageSetup
iso1dict begin
gsave
llx lly 12 add translate
/v 0 store
/x0 x v get 2.965278 add sx cw mul add store
/y0 y v get bfs th add sub store
x0 y0 moveto
0 T (      if \(c1.gt.num_sets.or.c2.gt.num_sets\) then) p n
0 T (       __WRN\(whoami,'INVALID COLUMN SPECIFIED. ABORT.'\)) N
0 T (       return) N
0 T (      else) N
0 T (       if \(qdiffrot\) r_o\(:,:,c2\)=r_o\(:,:,c1\)) N
0 T (       r_f\(:,:,c2\)=r_f\(:,:,c1\)) N
(1790) # (       rcom\(:,c2\) =rcom\(:,c1\)) N
0 T (      endif) N
0 T (!) N
0 T (      end subroutine ftsm_copy) N
0 T (!) N
0 T (!cccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccc) N
0 T (      subroutine ftsm_fill\(x,y,z\)) N
0 T (      __DEP_NUMBER ) N
0 T (      __DEP_MULTICOM       __CHARMM_ONLY !##MULTICOM) N
0 T (!      __DEP_MPI ) N
(1800) # (!) N
0 T (      __IMPNONE) N
0 T (!) N
0 T (      float :: x\(:\), y\(:\), z\(:\)) N
0 T (      character\(len=11\) :: whoami) N
0 T (      int :: i,j,n) N
0 T (      bool :: qroot, qslave) N
0 T (      float, pointer, dimension\(:,:\) :: rl, rc, rr) N
0 T (      int :: me) N
0 T (!) N
(1810) # (      data whoami /' FTSM_FILL>'/) N
0 T (!) N
0 T (      n=min\(size\(x\), size\(y\), size\(z\)\)) N
0 T (!) N
0 T (!      qroot=MPI_COMM_STRNG.ne.MPI_COMM_NULL) N
0 T (!      qslave=\(\(MPI_COMM_LOCAL.ne.MPI_COMM_NULL\).and.SIZE_LOCAL.gt.1\)) N
0 T (!) N
0 T (      if \(.not.ftsm_check\(qorient\)\) return) N
0 T (!) N
0 T (      if \(any\(x.eq.__NAN\).or.any\(y.eq.__NAN\).or.any\(z.eq.__NAN\)\) then) N
(1820) # (       __WRN\(whoami,'COORDINATE SET HAS UNDEFINED VALUES. NOTHING DONE.'\)) N
0 T (       return) N
0 T (      else ! if \(qroot\) then) N
0 T (       do i=1,nforced) N
0 T (        j=iatom_f\(i\)) N
0 T (        if \(j.le.n\) then) N
0 T (         r_f\(i,1,center\)=x\(j\)) N
0 T (         r_f\(i,2,center\)=y\(j\)) N
0 T (         r_f\(i,3,center\)=z\(j\)) N
0 T (        else) N
(1830) # (         __WRN\(whoami,'COORDINATE ARRAY BOUNDS EXCEEDED. ABORT.'\)) N
0 T (         return) N
0 T (        endif) N
0 T (       enddo) N
0 T (!) N
0 T (       if \(qdiffrot\) then) N
0 T (        do i=1,norient) N
0 T (         j=iatom_o\(i\)) N
0 T (         if \(j.le.n\) then) N
0 T (          r_o\(i,1,center\)=x\(j\)) N
(1840) # (          r_o\(i,2,center\)=y\(j\)) N
0 T (          r_o\(i,3,center\)=z\(j\)) N
0 T (         else) N
0 T (          __WRN\(whoami,'COORDINATE ARRAY BOUNDS EXCEEDED. ABORT.'\)) N
0 T (          return) N
0 T (         endif) N
0 T (        enddo) N
0 T (       endif ! qdiffrot) N
0 T (      endif ! x.eq.__NAN) N
0 T (!     remove and save center of mass of orientation atoms) N
(1850) # (!) N
0 T (      call ftsm_save_com\(\)) N
0 T (!) N
0 T (      call ftsm_swap_bc\(.true.\) ! .true. : send to slaves) N
0 T (!) N
0 T (      r_f\(:,:,left_old:right_old\)=r_f\(:,:,left:right\)) N
0 T (      r_f\(:,:,center_new\)=r_f\(:,:,center\)) N
(ftsm.ftn) (Page 27/83) (Mar 09, 13 15:34) title
border
/v 1 store
/x0 x v get 2.965278 add sx cw mul add store
/y0 y v get bfs th add sub store
x0 y0 moveto
0 T (      if \(qdiffrot\) then) p n
0 T (       r_o\(:,:,left_old:right_old\)=r_o\(:,:,left:right\)) N
0 T (       r_o\(:,:,center_new\)=r_o\(:,:,center\)) N
(1860) # (      endif) N
0 T (!) N
0 T (!     now send to slaves) N
0 T (!) N
0 T (!      if \(qslave\) then) N
0 T (!       call __BROADCAST_LOCAL_8B\(r_f,9*nforced\) ! send three adjacent sets) N
0 T (!       if \(qdiffrot\) call __BROADCAST_LOCAL_8B\(r_o,9*norient\)) N
0 T (!      endif ! qslave) N
0 T (!) N
0 T (      end subroutine ftsm_fill) N
(1870) # (!) N
0 T (!cccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccc) N
0 T (      subroutine ftsm_compute_overlap_ind\(\) ! compute overlap indices in iatom_b) N
0 T (oth) N
0 T (      __IMPNONE) N
0 T (      int :: i, j) N
0 T (      int, allocatable :: temp\(:,:\)) N
0 T (!) N
0 T (!   note: both index arrays are assumed to be sorted !) N
0 T (!) N
0 T (      if \(associated\(iatom_both\)\) deallocate\(iatom_both\)) N
(1880) # (      nboth=0) N
0 T (      if \( .not. \( qorient .and. qdiffrot .and. ftsm_check\(qorient\)\)\) return) N
0 T (!) N
0 T (      i=1; j=1) N
0 T (      allocate\(temp\(2,max\(nforced, norient\)\)\)) N
0 T (      do while \(i.le.nforced .and. j.le.norient\)) N
0 T (!) N
0 T (       do while \(  j.lt.norient .and. \( iatom_f\(i\) .gt. iatom_o\(j\) \) \)) N
0 T (        j=j+1) N
0 T (       enddo) N
(1890) # (       if \(iatom_f\(i\).eq.iatom_o\(j\)\) then) N
0 T (        nboth=nboth+1;) N
0 T (        temp\(1,nboth\)=i; temp\(2,nboth\)=j;) N
0 T (        j=j+1; ! i-indices are unique, so safe to increment j) N
0 T (       endif) N
0 T (       i=i+1) N
0 T (      enddo) N
0 T (!) N
0 T (      if \(nboth.gt.0\) then) N
0 T (       allocate\(iatom_both\(2,nboth\)\)) N
(1900) # (       iatom_both\(:,1:nboth\)=temp\(:,1:nboth\)) N
0 T (      endif) N
0 T (      deallocate\(temp\)) N
0 T (!) N
0 T (      end subroutine ftsm_compute_overlap_ind) N
0 T (!ccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccc) N
0 T (      subroutine ftsm_define_rtmd_type\(\)) N
0 T (      use sm_config, only: sizeofreal) N
0 T (      __DEP_MPI ) N
0 T (      __DEP_NUMBER) N
(1910) # (!) N
0 T (      __IMPNONE) N
0 T (!) N
0 T (      int4mpi :: error, norient_mpi) N
0 T (      integer\(kind=MPI_ADDRESS_KIND\) :: lb, extent) N
0 T (!) N
0 T (!    create custom type for gathering array of shape \(norient,3\), in rows) N
0 T (!    taken from rtmd code) N
0 T (!) N
0 T (      if \(MPI_RTMD_TYPE.ne.MPI_DATATYPE_NULL\)                           &) N
(1920) # (     &  call mpi_type_free\(MPI_RTMD_TYPE, error\)) N
0 T (      if \(MPI_RTMD_TYPE_.ne.MPI_DATATYPE_NULL\)                          &) N
0 T (     & call mpi_type_free\(MPI_RTMD_TYPE_, error\)) N
0 T (!) N
0 T (      if \(norient.gt.0\) then) N
0 T (       lb=0) N
0 T (       extent=sizeofreal) N
0 T (       norient_mpi=norient) N
0 T (       call mpi_type_vector\(3, 1, norient_mpi,                         &) N
(ftsm.ftn) (Page 28/83) (Mar 09, 13 15:34) title
border
grestore
(Printed by surgeon) rhead
(ftsm.ftn) (14/42) (Saturday March 09, 2013) footer
end % of iso1dict
pagesave restore
showpage
%%Page: (29-30) 15
%%BeginPageSetup
/pagesave save def
sh 0 translate 90 rotate
%%EndPageSetup
iso1dict begin
gsave
llx lly 12 add translate
/v 0 store
/x0 x v get 2.965278 add sx cw mul add store
/y0 y v get bfs th add sub store
x0 y0 moveto
0 T (     &   MPI_DOUBLE_PRECISION, MPI_RTMD_TYPE_, error\)) p n
(1930) # (!    corresponding resized type) N
0 T (       call mpi_type_create_resized\(MPI_RTMD_TYPE_,lb,extent,           &) N
0 T (     &   MPI_RTMD_TYPE, error\)) N
0 T (       call mpi_type_commit\(MPI_RTMD_TYPE, error\)) N
0 T (      endif) N
0 T (!) N
0 T (      end subroutine ftsm_define_rtmd_type) N
0 T (!ccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccc) N
0 T (      function ftsm_test_grad_fd\(x,y,z,h\) result\(error\)) N
0 T (      __IMPNONE) N
(1940) # (      float :: x\(:\), y\(:\), z\(:\)) N
0 T (      float :: h) N
0 T (      float, pointer :: error\(:,:\)) N
0 T (      int :: i, j, jj) N
0 T (      float :: d, ap, am, bp, bm) N
0 T (      float :: s) N
0 T (!) N
0 T (      character\(len=19\) :: whoami) N
0 T (      data whoami /' FTSM_TEST_GRAD_FD>'/) N
0 T (!) N
(1950) # (      allocate\(error\(2,3\)\)) N
0 T (      ap=0d0; am=0d0; bp=0d0; bm=0d0; error\(1,1\)=9999d0) N
0 T (!) N
0 T (      if \(.not.ftsm_check\(qorient\)\) return) N
0 T (!) N
0 T (      if \(h.eq.0d0\) then) N
0 T (       __WRN\(whoami,'COORDINATE PERTURBATION ZERO.'\)) N
0 T (       return) N
0 T (      endif) N
0 T (!) N
(1960) # (      s=1d0) N
0 T (!      s=0.5d0) N
0 T (! compute projection and derivatives analytically) N
0 T (      call ftsm_calc\(x,y,z,.true.,s\)) N
0 T (!) N
0 T (! IMPORTANT: if the o and f atoms are different and overlapping, the o and f gra) N
0 T (dient arrays) N
0 T (! will each have partial contributions to the total derivative for the overlappi) N
0 T (ng atoms) N
0 T (! \(whereas, the FD calculation will include both contributions\)) N
0 T (! therefore, I am "reducing" the different gradient contributions below \(which i) N
0 T (nvalidates) N
0 T (! the contents of the arrays\); the need to do this arises because I chose to kee) N
0 T (p two) N
(1970) # (! possibly overlapping coordinate arrays, even though the corresponding atoms ar) N
0 T (e unique) N
0 T (!) N
0 T (      if \(qdiffrot\) then) N
0 T (       do i=1, nboth) N
0 T (         r_o\(iatom_both\(2,i\), :, fpar\) =                                &) N
0 T (     &   r_o\(iatom_both\(2,i\), :, fpar\) + r_f\(iatom_both\(1,i\), :, fpar\)) N
0 T (         r_f\(iatom_both\(1,i\), :, fpar\) = r_o\(iatom_both\(2,i\), :, fpar\)) N
0 T (       enddo) N
0 T (       if \(proj_on\) then) N
0 T (        do i=1, nboth) N
(1980) # (         r_o\(iatom_both\(2,i\), :, fperp\) =                               &) N
0 T (     &   r_o\(iatom_both\(2,i\), :, fperp\) + r_f\(iatom_both\(1,i\), :, fperp\)) N
0 T (         r_f\(iatom_both\(1,i\), :, fperp\) = r_o\(iatom_both\(2,i\), :, fperp\)) N
0 T (        enddo) N
0 T (       endif) N
0 T (      endif) N
0 T (!) N
0 T (! no need for this because not overwriting force arrays) N
0 T (!      r_f\(:,:,left_cur\)=r_f\(:,:,fpar\)) N
0 T (!      if \(qdiffrot\) r_o\(:,:,left_cur\)=r_o\(:,:,fpar\)) N
(1990) # (!      if \(proj_on\) then) N
0 T (!       r_f\(:,:,right_cur\)=r_f\(:,:,fperp\)) N
0 T (!       if \(qdiffrot\) r_o\(:,:,right_cur\)=r_o\(:,:,fperp\)) N
0 T (!      endif) N
0 T (!) N
0 T (!        write\(mestring+500,*\) dpar, dperp) N
0 T (!        write\(mestring+500,*\) r_f\(:,2,fpar\)) N
(ftsm.ftn) (Page 29/83) (Mar 09, 13 15:34) title
border
/v 1 store
/x0 x v get 2.965278 add sx cw mul add store
/y0 y v get bfs th add sub store
x0 y0 moveto
0 T (!) p n
0 T (! loop over all coordinates and compute finite differences) N
0 T (      error=0d0) N
(2000) # (!) N
0 T (      do jj=1, nforced) N
0 T (       j=iatom_f\(jj\)) N
0 T (! x-derivatives *******************************************) N
0 T (       d=x\(j\) ; x\(j\)=d-h) N
0 T (       call ftsm_calc\(x,y,z,.false.,s\)) N
0 T (       if \(proj_on\) then; am=dpar;  bm=dperp; else; am=drms ; endif) N
0 T (       x\(j\)=d+h) N
0 T (       call ftsm_calc\(x,y,z,.false.,s\) ! overwrite zold cv value array \(warn abo) N
0 T (ut this elsewhere\)) N
0 T (       if \(proj_on\) then; ap=dpar;  bp=dperp; else; ap=drms ; endif) N
(2010) # (       x\(j\)=d ! restore correct value) N
0 T (! compute largest absolute error) N
0 T (!         r_f\(jj,1,dummy\)=0.5d0/h*\(bp-bm\) ! aa) N
0 T (!) N
0 T (       error\(1,1\) = max \(error\(1,1\),                                    &) N
0 T (     &         abs\(0.5d0/h*\(ap-am\)-r_f\(jj,1,fpar\) \) \)) N
0 T (       if \(proj_on\)                                                     &) N
0 T (     & error\(2,1\) = max \(error\(2,1\),                                    &) N
0 T (     &        abs\(0.5d0/h*\(bp-bm\)-r_f\(jj,1,fperp\) \) \)) N
0 T (! y-derivatives *******************************************) N
(2020) # (       d=y\(j\) ; y\(j\)=d-h) N
0 T (       call ftsm_calc\(x,y,z,.false.,s\)) N
0 T (       if \(proj_on\) then; am=dpar;  bm=dperp; else; am=drms ; endif) N
0 T (       y\(j\)=d+h) N
0 T (       call ftsm_calc\(x,y,z,.false.,s\) ! overwrite zold cv value array \(warn abo) N
0 T (ut this elsewhere\)) N
0 T (       if \(proj_on\) then; ap=dpar;  bp=dperp; else; ap=drms ; endif) N
0 T (       y\(j\)=d ! restore correct value) N
0 T (! compute largest absolute error) N
0 T (!         r_f\(jj,2,dummy\)=0.5d0/h*\(ap-am\) ! aa) N
0 T (!) N
(2030) # (       error\(1,2\) = max \(error\(1,2\),                                    &) N
0 T (     &          abs\(0.5d0/h*\(ap-am\)-r_f\(jj,2,fpar\) \) \)) N
0 T (       if \(proj_on\)                                                     &) N
0 T (     & error\(2,2\) = max \(error\(2,2\),                                    &) N
0 T (     &         abs\(0.5d0/h*\(bp-bm\)-r_f\(jj,2,fperp\) \) \)) N
0 T (! z-derivatives *******************************************) N
0 T (       d=z\(j\) ; z\(j\)=d-h) N
0 T (       call ftsm_calc\(x,y,z,.false.,s\)) N
0 T (       if \(proj_on\) then; am=dpar;  bm=dperp; else; am=drms ; endif) N
0 T (       z\(j\)=d+h) N
(2040) # (       call ftsm_calc\(x,y,z,.false.,s\) ! overwrite zold cv value array \(warn abo) N
0 T (ut this elsewhere\)) N
0 T (       if \(proj_on\) then; ap=dpar;  bp=dperp; else; ap=drms ; endif) N
0 T (       z\(j\)=d ! restore correct value) N
0 T (! compute largest absolute error) N
0 T (       error\(1,3\) = max \(error\(1,3\),                                    &) N
0 T (     &         abs\(0.5d0/h*\(ap-am\)-r_f\(jj,3,fpar\) \) \)) N
0 T (       if \(proj_on\)                                                     &) N
0 T (     & error\(2,3\) = max \(error\(2,3\),                                    &) N
0 T (     &         abs\(0.5d0/h*\(bp-bm\)-r_f\(jj,3,fperp\) \) \)) N
0 T (      enddo ! forced atoms) N
(2050) # (!) N
0 T (!        write\(mestring+500,*\) r_f\(:,2,dummy\) ! aaa) N
0 T (!           close\(mestring+500\)) N
0 T (! orientation atoms:) N
0 T (      if \(qorient.and.qdiffrot\) then) N
0 T (       do jj=1, norient) N
0 T (        j=iatom_o\(jj\)) N
0 T (! x-derivatives *******************************************) N
0 T (        d=x\(j\) ; x\(j\)=d-h) N
0 T (        call ftsm_calc\(x,y,z,.false.,s\)) N
(2060) # (        if \(proj_on\) then; am=dpar;  bm=dperp; else; am=drms ; endif) N
0 T (        x\(j\)=d+h) N
0 T (        call ftsm_calc\(x,y,z,.false.,s\) ! overwrite zold cv value array \(warn ab) N
0 T (out this elsewhere\)) N
0 T (        if \(proj_on\) then; ap=dpar;  bp=dperp; else; ap=drms ; endif) N
0 T (        x\(j\)=d ! restore correct value) N
0 T (! compute largest absolute error) N
(ftsm.ftn) (Page 30/83) (Mar 09, 13 15:34) title
border
grestore
(Printed by surgeon) rhead
(ftsm.ftn) (15/42) (Saturday March 09, 2013) footer
end % of iso1dict
pagesave restore
showpage
%%Page: (31-32) 16
%%BeginPageSetup
/pagesave save def
sh 0 translate 90 rotate
%%EndPageSetup
iso1dict begin
gsave
llx lly 12 add translate
/v 0 store
/x0 x v get 2.965278 add sx cw mul add store
/y0 y v get bfs th add sub store
x0 y0 moveto
0 T (        error\(1,1\) = max\(error\(1,1\),                                    &) p n
0 T (     &         abs\(0.5d0/h*\(ap-am\)-r_o\(jj,1,fpar\) \) \)) N
0 T (        if \(proj_on\)                                                    &) N
0 T (     &  error\(2,1\) = max\(error\(2,1\),                                    &) N
(2070) # (     &         abs\(0.5d0/h*\(bp-bm\)-r_o\(jj,1,fperp\) \) \)) N
0 T (! y-derivatives *******************************************) N
0 T (        d=y\(j\) ; y\(j\)=d-h) N
0 T (        call ftsm_calc\(x,y,z,.false.,s\)) N
0 T (        if \(proj_on\) then; am=dpar;  bm=dperp; else; am=drms ; endif) N
0 T (        y\(j\)=d+h) N
0 T (        call ftsm_calc\(x,y,z,.false.,s\) ! overwrite zold cv value array \(warn ab) N
0 T (out this elsewhere\)) N
0 T (        if \(proj_on\) then; ap=dpar;  bp=dperp; else; ap=drms ; endif) N
0 T (        y\(j\)=d ! restore correct value) N
0 T (! compute largest absolute error) N
(2080) # (        error\(1,2\) = max \(error\(1,2\),                                   &) N
0 T (     &         abs\(0.5d0/h*\(ap-am\)-r_o\(jj,2,fpar\) \) \)) N
0 T (        if \(proj_on\)                                                    &) N
0 T (     &  error\(2,2\) = max \(error\(2,2\),                                   &) N
0 T (     &         abs\(0.5d0/h*\(bp-bm\)-r_o\(jj,2,fperp\) \) \)) N
0 T (! z-derivatives *******************************************) N
0 T (        d=z\(j\) ; z\(j\)=d-h) N
0 T (        call ftsm_calc\(x,y,z,.false.,s\)) N
0 T (        if \(proj_on\) then; am=dpar;  bm=dperp; else; am=drms ; endif) N
0 T (        z\(j\)=d+h) N
(2090) # (        call ftsm_calc\(x,y,z,.false.,s\) ! overwrite zold cv value array \(warn ab) N
0 T (out this elsewhere\)) N
0 T (        if \(proj_on\) then; ap=dpar;  bp=dperp; else; ap=drms ; endif) N
0 T (        z\(j\)=d ! restore correct value) N
0 T (! compute largest absolute error) N
0 T (        error\(1,3\) = max \(error\(1,3\),                                   &) N
0 T (     &         abs\(0.5d0/h*\(ap-am\)-r_o\(jj,3,fpar\) \) \)) N
0 T (        if \(proj_on\)                                                    &) N
0 T (     &  error\(2,3\) = max \(error\(2,3\),                                   &) N
0 T (     &         abs\(0.5d0/h*\(bp-bm\)-r_o\(jj,3,fperp\) \) \)) N
0 T (       enddo ! orientation atoms) N
(2100) # (      endif ! qdiffrot and qorient) N
0 T (!) N
0 T (      end function ftsm_test_grad_fd) N
0 T (!cccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccc) N
0 T (      function ftsm_test_parallel\(x,y,z\) result\(error\)) N
0 T (      __DEP_MULTICOM       !__CHARMM_ONLY##MULTICOM) N
0 T (      __DEP_MPI ) N
0 T (      __IMPNONE) N
0 T (!) N
0 T (      float :: x\(:\), y\(:\), z\(:\)) N
(2110) # (      float, pointer :: error\(:,:\)) N
0 T (      float :: am, bm) N
0 T (!) N
0 T (      int :: i) N
0 T (      bool :: qpara) N
0 T (      bool :: qgrp) N
0 T (!) N
0 T (      character\(len=20\) :: whoami) N
0 T (      data whoami /' FTSM_TEST_PARALLEL>'/) N
0 T (      allocate\(error\(2,4\)\) ! first column contains the CV values; then maximum d) N
0 T (erivative error \(x,y,z\)) N
(2120) # (      error\(2,:\)=0d0; error\(1,:\)=9999d0) N
0 T (!) N
0 T (      if \(.not.ftsm_check\(qorient\)\) return) N
0 T (!) N
0 T (      qgrp=\(MPI_COMM_LOCAL.ne.MPI_COMM_NULL\)                            &) N
0 T (     & .and.\(SIZE_LOCAL.gt.1\)) N
0 T (      if \(.not. qgrp\) then ! quit if cannot run in parallel) N
0 T (       __WRN\(whoami,'CANNOT PERFORM TEST ON 1-PROCESSOR GROUPS'\)) N
0 T (       return) N
0 T (      endif) N
(2130) # (! save values & force a serial calculation) N
0 T (      qpara=calc_bestfit_grad_para; calc_bestfit_grad_para=.false.) N
0 T (!) N
0 T (! 1\) compute serially) N
0 T (      call ftsm_calc\(x,y,z,.true.\)) N
0 T (! using left_cur array : it should not be used unless an additional parameter is) N
(ftsm.ftn) (Page 31/83) (Mar 09, 13 15:34) title
border
/v 1 store
/x0 x v get 2.965278 add sx cw mul add store
/y0 y v get bfs th add sub store
x0 y0 moveto
0 T ( passed to calc) p n
0 T (! save gradients) N
0 T (      r_f\(:,:,left_cur\)=r_f\(:,:,fpar\); r_f\(:,:,fpar\)=0d0;) N
0 T (      if \(qdiffrot\) then) N
0 T (       r_o\(:,:,left_cur\)=r_o\(:,:,fpar\); r_o\(:,:,fpar\)=0d0) N
(2140) # (      endif) N
0 T (!) N
0 T (      if \(proj_on\) then) N
0 T (       r_f\(:,:,right_cur\)=r_f\(:,:,fperp\); r_f\(:,:,fperp\)=0d0) N
0 T (       if \(qdiffrot\) then) N
0 T (        r_o\(:,:,right_cur\)=r_o\(:,:,fperp\); r_o\(:,:,fperp\)=0d0) N
0 T (       endif) N
0 T (      endif) N
0 T (!        write\(me_GLOBAL+500,*\) drms, dpar, dperp) N
0 T (!        write\(me_GLOBAL+500,*\) r_o\(:,2,left_cur\)) N
(2150) # (! save projections) N
0 T (      if \(proj_on\) then; am=dpar;  bm=dperp; else; am=drms ; endif) N
0 T (!) N
0 T (! 2\) compute in \(fully\) parallel) N
0 T (      calc_bestfit_grad_para=.true.) N
0 T (!) N
0 T (      call ftsm_calc\(x,y,z,.true.\)) N
0 T (!        write\(me_GLOBAL+500,*\) drms, dpar, dperp) N
0 T (!        write\(me_GLOBAL+500,*\) r_o\(:,2,fpar\)) N
0 T (!         close\(me_GLOBAL+500\)) N
(2160) # (! compute largest absolute error) N
0 T (! parallel component \(or drms\)) N
0 T (      error\(1,1\) = maxval \( abs \(r_f\(:,1,left_cur\)-r_f\(:,1,fpar\) \) \)) N
0 T (      error\(1,2\) = maxval \( abs \(r_f\(:,2,left_cur\)-r_f\(:,2,fpar\) \) \)) N
0 T (      error\(1,3\) = maxval \( abs \(r_f\(:,3,left_cur\)-r_f\(:,3,fpar\) \) \)) N
0 T (      if \(proj_on\) then) N
0 T (       error\(2,1\) = maxval \( abs \(r_f\(:,1,right_cur\)-r_f\(:,1,fperp\) \) \)) N
0 T (       error\(2,2\) = maxval \( abs \(r_f\(:,2,right_cur\)-r_f\(:,2,fperp\) \) \)) N
0 T (       error\(2,3\) = maxval \( abs \(r_f\(:,3,right_cur\)-r_f\(:,3,fperp\) \) \)) N
0 T (       error\(2,4\) = abs \( dperp - bm \)) N
(2170) # (       error\(1,4\) = abs \( dpar  - am \)) N
0 T (      else) N
0 T (       error\(1,4\) = abs \( drms  - am \)) N
0 T (      endif) N
0 T (!) N
0 T (      if \(qdiffrot.and.qorient\) then) N
0 T (       error\(1,1\) = max\(error\(1,1\),                                     &) N
0 T (     &              maxval \( abs \(r_o\(:,1,left_cur\)-r_o\(:,1,fpar\) \) \) \)) N
0 T (       error\(1,2\) = max\(error\(1,2\),                                     &) N
0 T (     &              maxval \( abs \(r_o\(:,2,left_cur\)-r_o\(:,2,fpar\) \) \) \)) N
(2180) # (       error\(1,3\) = max\(error\(1,3\),                                     &) N
0 T (     &              maxval \( abs \(r_o\(:,3,left_cur\)-r_o\(:,3,fpar\) \) \) \)) N
0 T (       if \(proj_on\) then) N
0 T (        error\(2,1\) = max\(error\(2,1\),                                    &) N
0 T (     &              maxval \( abs \(r_o\(:,1,right_cur\)-r_o\(:,1,fperp\) \) \)\)) N
0 T (        error\(2,2\) = max\(error\(2,2\),                                    &) N
0 T (     &              maxval \( abs \(r_o\(:,2,right_cur\)-r_o\(:,2,fperp\) \) \)\)) N
0 T (        error\(2,3\) = max\(error\(2,3\),                                    &) N
0 T (     &              maxval \( abs \(r_o\(:,3,right_cur\)-r_o\(:,3,fperp\) \) \)\)) N
0 T (       endif) N
(2190) # (      endif) N
0 T (! restore original option) N
0 T (      calc_bestfit_grad_para=qpara) N
0 T (!) N
0 T (      end function ftsm_test_parallel) N
0 T (!ccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccc) N
0 T (ccc) N
0 T (      subroutine ftsm_write_dcd\(ifile, col, ibeg, iend\)) N
0 T (!) N
0 T (#ifdef __CHARMM) N
0 T (      __DEP_PSF ) N
(2200) # (      use cveloci_mod      !##CVELOCI) N
0 T (#endif) N
0 T (!) N
0 T (      __DEP_SIZE) N
0 T (      __DEP_COORDINATES) N
0 T (      __DEP_MULTICOM       __CHARMM_ONLY !##MULTICOM) N
0 T (      __DEP_PARSER ) N
(ftsm.ftn) (Page 32/83) (Mar 09, 13 15:34) title
border
grestore
(Printed by surgeon) rhead
(ftsm.ftn) (16/42) (Saturday March 09, 2013) footer
end % of iso1dict
pagesave restore
showpage
%%Page: (33-34) 17
%%BeginPageSetup
/pagesave save def
sh 0 translate 90 rotate
%%EndPageSetup
iso1dict begin
gsave
llx lly 12 add translate
/v 0 store
/x0 x v get 2.965278 add sx cw mul add store
/y0 y v get bfs th add sub store
x0 y0 moveto
0 T (      __DEP_COORIO) p n
0 T (      __DEP_MPI ) N
0 T (      __DEP_NUMBER) N
(2210) # (!) N
0 T (!    will use fixed atom arrays to print only the path atoms) N
0 T (!) N
0 T (      __IMPNONE) N
0 T (      character\(len=16\) :: whoami) N
0 T (#ifdef __CHARMM) N
0 T (      character\(len=80\) :: title\(maxtit\)) N
0 T (      int :: ntitle, ncv) N
0 T (#endif) N
0 T (#ifndef __CHARMM) N
(2220) # (      int :: natom) N
0 T (#endif) N
0 T (      float, pointer :: r3\(:,:\)  ! coordinates) N
0 T (      int, pointer :: stringatoms\(:\), string_inds\(:\)) N
0 T (      int :: i, j, k) N
0 T (      int :: ifile) N
0 T (      int, optional :: col, ibeg, iend) N
0 T (      int :: c, ierror, stat\(MPI_STATUS_SIZE\), ibg, ie, ind) N
0 T (      int :: rtype=MPI_DOUBLE_PRECISION) N
0 T (      bool :: qroot) N
(2230) # (!) N
0 T (      data whoami /' FTSM_WRITE_DCD>'/) N
0 T (!) N
0 T (      qroot=MPI_COMM_STRNG.ne.MPI_COMM_NULL) N
0 T (!) N
0 T (#ifdef __CHARMM) N
0 T (      title\(1\) = '* FINITE TEMPERATURE STRING IMAGE FILE') N
0 T (      ntitle=1) N
0 T (#endif) N
0 T (!) N
(2240) # (      if \(.not. ftsm_check\(qorient\)\) return) N
0 T (      if \(present\(col\)\) then ; c=col; else; c=center; endif) N
0 T (      if \(c.lt.1.or.c.gt.num_sets\) then) N
0 T (       __WRN\( whoami, 'INVALID COLUMN. ABORT.'\)) N
0 T (       return) N
0 T (      endif) N
0 T (!) N
0 T (      if \(present\(ibeg\)\) then ; ibg=ibeg; else; ibg=1; endif) N
0 T (      if \(present\(iend\)\) then ; ie=iend; else; ie=nstring; endif) N
0 T (!) N
(2250) # (      if \(ibg.lt.1.or.ibg.gt.ie\) then) N
0 T (       __WRN\( whoami, 'INVALID FRAMES REQUESTED. ABORT.'\)) N
0 T (       return) N
0 T (      endif) N
0 T (!) N
0 T (      nullify\(stringatoms, string_inds, r3\)) N
0 T (!) N
0 T (      if \(qroot\) then) N
0 T (!) N
0 T (      if \(ME_STRNG.eq.0\) then) N
(2260) # (!) N
0 T (#ifndef __CHARMM) N
0 T ( natom=__NATOM) N
0 T (#endif) N
0 T (!) N
0 T (       allocate\(stringatoms\(natom\), string_inds\(natom\)\)) N
0 T (       stringatoms=0) N
0 T (!) N
0 T (       stringatoms\(iatom_f\)=1) N
0 T (       if \(qdiffrot\) stringatoms\(iatom_o\)=1) N
(2270) # (       k=0) N
0 T (       do i = 1, natom) N
0 T (        if \(stringatoms\(i\).gt.0\) then; k=k+1; string_inds\(k\)=i; endif ! need thi) N
0 T (s array for dcd writer below) N
0 T (       enddo) N
0 T (#ifdef __CHARMM) N
0 T (       ncv=ncvel ; ncvel=0  !__CHARMM_ONLY##CVELOCI ! exclude constant velocity ) N
0 T (atoms also) N
0 T (#endif) N
0 T (!      for first frame, output all coordinates: take from instantaneous set) N
(ftsm.ftn) (Page 33/83) (Mar 09, 13 15:34) title
border
/v 1 store
/x0 x v get 2.965278 add sx cw mul add store
/y0 y v get bfs th add sub store
x0 y0 moveto
0 T (       allocate\(r3\(natom,3\)\) ; r3=0d0) p n
0 T (#ifdef __CHARMM) N
(2280) # (       r3\(:,1\)=x\(1:natom\)-rcom\(1,instant\) ! bring all coordinates to zero COM fo) N
0 T (r convenience \(assume rcom\(:,instant\) is reasonably accurate\)) N
0 T (       r3\(:,2\)=y\(1:natom\)-rcom\(2,instant\)) N
0 T (       r3\(:,3\)=z\(1:natom\)-rcom\(3,instant\)) N
0 T (#elif defined \(__DMOL\)) N
0 T (       r3\(:,1\)=r\(:,1\)-rcom\(1,instant\)) N
0 T (       r3\(:,2\)=r\(:,2\)-rcom\(2,instant\)) N
0 T (       r3\(:,3\)=r\(:,3\)-rcom\(3,instant\)) N
0 T (#endif) N
0 T (!) N
0 T (       call ftsm_update_overlap_coor\(ione\)) N
(2290) # (       do j=1,nforced;ind=iatom_f\(j\);r3\(ind,:\)=r_f\(j,:,c\);enddo) N
0 T (       if \(qdiffrot\) then) N
0 T (       do j=1,norient;ind=iatom_o\(j\);r3\(ind,:\)=r_o\(j,:,c\);enddo) N
0 T (       endif) N
0 T (! call trajectory writer) N
0 T (#ifdef __CHARMM) N
0 T (       call writcv\(r3\(:,1\), r3\(:,2\), r3\(:,3\),                           &) N
0 T (     &  r3\(:,1\), .false.,                                               & !__CHA) N
0 T (RMM_ONLY##CHEQ) N
0 T (     &  natom,                                                          &) N
0 T (     &  string_inds, k, ibg, ibg, 3*k, 0d0, 1, ie, title,ntitle,ifile,  &) N
(2300) # (     &  .false., .false., stringatoms\(1:20\), .false., r3\(:,1\)\)       ! whew...) N
0 T (#elif defined\(__DMOL\)) N
0 T (       call dcd_write_frame\(ifile,r3,\(ibg.eq.1\),FREEATOMS=string_inds\(1:k\)\)) N
0 T (#endif) N
0 T (!from dynio.src) N
0 T (!      SUBROUTINE WRITCV\(X,Y,Z,) N
0 T (!     $                  CG,QCG,                             !__CHARMM_ONLY##CHE) N
0 T (Q) N
0 T (!     $                  NATOM,FREEAT,NFREAT,NPRIV,ISTEP,NDEGF,) N
0 T (!     $                  DELTA,NSAVC,NSTEP,TITLE,NTITLE,IUNCRD,QVEL,) N
0 T (!     $                  QINCT,JCNTRL,DIM4,FDIM\)) N
(2310) # (!C) N
0 T (!C     WRITES A SET OF COORDINATES FOR A SINGLE DYNAMICS STEP. THE FORMAT) N
0 T (!C     FOR THE TRAJECTORY FILE VARIES WITH WHETHER ANY ATOMS ARE FIXED.) N
0 T (!C     ICNTRL\(9\) STORES THE NUMBER OF FIXED ATOMS WHICH WILL BE ZERO FOR) N
0 T (!C     ALL PREVIOUS TRAJECTORY FILES SO COMPATIBILITY IS ASSURED.) N
0 T (!C) N
0 T (!C     Authors: S. Swaminathan) N
0 T (!C              Robert Bruccoleri) N
0 T (!) N
0 T (!    repeat a few times to write out entire string) N
(2320) # (       do i=2, nstring) N
0 T (!) N
0 T (        call MPI_RECV\(r_f\(:,:,dummy\),3*nforced,rtype,i-1,i-1,           &) N
0 T (     &       MPI_COMM_STRNG,stat,ierror\)) N
0 T (        if \(qdiffrot.and.qorient\)                                       &) N
0 T (     &       call MPI_RECV\(r_o\(:,:,dummy\),3*norient,rtype,i-1,i-1,      &) N
0 T (     &       MPI_COMM_STRNG,stat,ierror\)) N
0 T (!    extract coordinates) N
0 T (        do j=1, nforced; ind=iatom_f\(j\); r3\(ind,:\)=r_f\(j,:,dummy\); enddo) N
0 T (        if \(qdiffrot.and.qorient\) then) N
(2330) # (         do j=1, norient; ind=iatom_o\(j\); r3\(ind,:\)=r_o\(j,:,dummy\);enddo) N
0 T (        endif) N
0 T (!    write next frame) N
0 T (#ifdef __CHARMM) N
0 T (        call writcv\(r3\(:,1\), r3\(:,2\), r3\(:,3\),                          &) N
0 T (     &   r3\(:,1\), .false.,                                              & !__CHA) N
0 T (RMM_ONLY##CHEQ) N
0 T (     &   natom,                                                         &) N
0 T (     &   string_inds, k, ibg, ibg+i-1, 3*k, 0d0, 1, ie, title, 1, ifile,&) N
0 T (     &   .false., .false., stringatoms\(1:20\), .false., r3\(:,1\)\)) N
0 T (#elif defined\(__DMOL\)) N
(2340) # (       call dcd_write_frame\(ifile,r3,.false.,FREEATOMS=string_inds\(1:k\)\)) N
0 T (#endif) N
0 T (       enddo) N
0 T (!) N
0 T (#ifdef __CHARMM) N
0 T (       ncvel=ncv !##CVELOCI) N
0 T (#endif) N
(ftsm.ftn) (Page 34/83) (Mar 09, 13 15:34) title
border
grestore
(Printed by surgeon) rhead
(ftsm.ftn) (17/42) (Saturday March 09, 2013) footer
end % of iso1dict
pagesave restore
showpage
%%Page: (35-36) 18
%%BeginPageSetup
/pagesave save def
sh 0 translate 90 rotate
%%EndPageSetup
iso1dict begin
gsave
llx lly 12 add translate
/v 0 store
/x0 x v get 2.965278 add sx cw mul add store
/y0 y v get bfs th add sub store
x0 y0 moveto
0 T (      else) p n
0 T (       call MPI_SEND\(r_f\(:,:,c\),3*nforced,rtype,0,ME_STRNG,             &) N
0 T (     &                      MPI_COMM_STRNG, ierror\)) N
(2350) # (       if \(qdiffrot.and.qorient\)                                        &) N
0 T (     &  call MPI_SEND\(r_o\(:,:,c\),3*norient,rtype,0,ME_STRNG,            &) N
0 T (     &                      MPI_COMM_STRNG, ierror\)) N
0 T (      endif) N
0 T (!) N
0 T (      endif ! qroot) N
0 T (!) N
0 T (      if \(associated\(stringatoms\)\) deallocate\(stringatoms\)) N
0 T (      if \(associated\(string_inds\)\) deallocate\(string_inds\)) N
0 T (      if \(associated\(r3\)\) deallocate\(r3\)) N
(2360) # (!) N
0 T (      end subroutine ftsm_write_dcd) N
0 T (!ccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccc) N
0 T (      subroutine ftsm_read_dcd\(ifile, col\)) N
0 T (#ifdef __CHARMM) N
0 T (      __DEP_PSF) N
0 T (#endif) N
0 T (      __DEP_SIZE) N
0 T (      __DEP_COORDINATES) N
0 T (      __DEP_MULTICOM       __CHARMM_ONLY !##MULTICOM) N
(2370) # (      __DEP_PARSER ) N
0 T (      __DEP_MPI) N
0 T (      __DEP_COORIO) N
0 T (!) N
0 T (      __IMPNONE) N
0 T (      character\(len=15\) :: whoami) N
0 T (      float, pointer :: r3\(:,:\)) N
0 T (      int, pointer :: stringatoms\(:\), string_inds\(:\)) N
0 T (      int :: i, j, k, ind, ifile) N
0 T (      int, optional :: col) N
(2380) # (      int :: c, ierror, stat\(MPI_STATUS_SIZE\)) N
0 T (      int :: rtype=MPI_DOUBLE_PRECISION) N
0 T (!) N
0 T (#ifdef __CHARMM) N
0 T (      character\(len=80\) :: title\(maxtit\)) N
0 T (      real*4 :: trash4\(natom\) ! scratch array for ugly routine) N
0 T (      float :: trash8\(natom\) ! scratch array for ugly routine) N
0 T (!     some dummy vars for coordinate read) N
0 T (      int :: nfile, istep, istats, ndof, begin_, stop_,             &) N
0 T (     &           skip_, nsavv_, satoms, ntitle) N
(2390) # (      float :: delta) N
0 T (      bool :: qdim4, qcg) N
0 T (#else) N
0 T (      int :: natom) N
0 T (#endif) N
0 T (!) N
0 T (      data whoami /' FTSM_READ_DCD>'/) N
0 T (!) N
0 T (      if \(.not. ftsm_check\(qorient\)\) return) N
0 T (      if \(present\(col\)\) then ; c=col; else; c=center; endif) N
(2400) # (      if \(c.lt.1.or.c.gt.num_sets\) then) N
0 T (       __WRN\( whoami, 'INVALID COLUMN. ABORT.'\)) N
0 T (       return) N
0 T (      endif) N
0 T (!) N
0 T (#ifndef __CHARMM) N
0 T ( natom=__NATOM) N
0 T (#endif) N
0 T (!) N
0 T (      allocate\(r3\(natom,3\)\)) N
(2410) # (      allocate\(stringatoms\(natom\), string_inds\(natom\)\)) N
0 T (!) N
0 T (      r3=0d0; stringatoms=0) N
0 T (!) N
0 T (      stringatoms\(iatom_f\)=1) N
0 T (      if \(qdiffrot\) stringatoms\(iatom_o\)=1) N
0 T (      k=0) N
0 T (!) N
0 T (      do i = 1, natom) N
0 T (       if \(stringatoms\(i\).gt.0\) then ; k=k+1 ; string_inds\(k\)=i ; endif ! need t) N
(ftsm.ftn) (Page 35/83) (Mar 09, 13 15:34) title
border
/v 1 store
/x0 x v get 2.965278 add sx cw mul add store
/y0 y v get bfs th add sub store
x0 y0 moveto
0 T (his array for dcd reader below) p n
(2420) # (      enddo) N
0 T (!) N
0 T (      if \(ME_STRNG.eq.0\) then) N
0 T (!) N
0 T (!    call trajectory reader) N
0 T (!) N
0 T (#ifdef __CHARMM) N
0 T (       istats=1) N
0 T (       qcg=.false.) N
0 T (       qdim4=.false.) N
(2430) # (       begin_=0 ! note begin <=0 forces a strange "reset" with begin=istep \(whic) N
0 T (h is zero below\); this is to support trajectories) N
0 T (                ! made with VMD) N
0 T (       skip_=1) N
0 T (       stop_=nstring) N
0 T (       ntitle=0) N
0 T (       istep=0) N
0 T (!) N
0 T (       call readcv\(r3\(:,1\), r3\(:,2\), r3\(:,3\),                              &) N
0 T (     &  trash8, qcg,                                                    & !__CHA) N
0 T (RMM_ONLY##CHEQ) N
0 T (     &  trash4, natom,                                                  &) N
(2440) # (     &  stringatoms, satoms, ifile, 1, ifile, nfile,                    &) N
0 T (     &  istep, istats, ndof, delta, begin_, stop_, skip_,               &) N
0 T (     &  nsavv_, 'CORD', 'CORD', title, ntitle, qdim4, trash8, .false.\)) N
0 T (#elif defined\(__DMOL\)) N
0 T (       if \(associated\(stringatoms\)\) deallocate\(stringatoms\)) N
0 T (       call dcd_read_frame\(ifile, r3, .true., FREEATOMS=stringatoms\)) N
0 T (#endif) N
0 T (!) N
0 T (       if \( &) N
0 T (#ifdef __CHARMM) N
(2450) # (&       satoms &) N
0 T (#else) N
0 T (&      size\(stringatoms\) &) N
0 T (#endif) N
0 T (&       .eq.k\) then) N
0 T (        if \( any\(stringatoms\(1:k\).ne.string_inds\(1:k\)\) \)                &) N
0 T (     &   __WRN\(whoami,'INVALID STRING ATOM INDICES. BEWARE.'\)) N
0 T (       else) N
0 T (        __WRN\(whoami,'INCORRECT NUMBER OF STRING ATOMS. BEWARE.'\)) N
0 T (       endif) N
(2460) # (!) N
0 T (!) N
0 T (!      SUBROUTINE READCV\(X,Y,Z,) N
0 T (!     $                  CG,QCG,                         !__CHARMM_ONLY##CHEQ) N
0 T (!     $                  TEMP,NATOM,FREEAT,NFREAT,) N
0 T (!     $                  FIRSTU,NUNIT,IUNIT,NFILE,) N
0 T (!     $                  ISTEP,ISTATS,NDEGF,DELTA,) N
0 T (!     $                  BEGIN,STOP,SKIP,NSAVV,HDR1,HDR2,) N
0 T (!     $                  TITLE,NTITLE,DIM4,FDIM,Q_PLL\)) N
0 T (! FREEAT WILL BE READ IF NFREAT IS NOT EQUAL TO NATOM.) N
(2470) # (! ISTATS IS A FLAG WITH THE FOLLOWING FUNCTIONS:) N
0 T (!CC             ON CALL) N
0 T (!C             1 - OPEN A NEW UNIT FOR READING THE INFORMATION) N
0 T (!C             2 - USE THE UNIT THAT IS ALREADY OPEN ON IUNIT) N
0 T (!C             ON RETURN) N
0 T (!C            -1 - THE REQUESTED INFORMATION HAS BEEN READ) N
0 T (!C             1 - NOT DONE READING, BUT THIS FILE IS FINISHED) N
0 T (!C             2 - NOT DONE READING, AND THIS FILE IS IS NOT DONE.) N
0 T (!C     HDR1 AND HDR2 ARE OPTIONS FOR THE FILE HEADER THAT IS READ.) N
0 T (!C     RECORDS WILL BE USED IF MOD\(ISTEP,SKIP\)=0 AND BEGIN<=ISTEP<=STOP.) N
(2480) # (!C     DJS 1/25/81) N
0 T (!C) N
0 T (!C     Authors: S. Swaminathan) N
0 T (!C              David Perahia) N
0 T (!C              Dave States) N
0 T (!C              Robert Bruccoleri) N
0 T (!C) N
0 T (!C    Q_PLL    mfc added bool variable to signal whether) N
0 T (!C             the calling routine is being done in parallel or not.) N
0 T (!C             When calling routine is not parallel, master hangs) N
(ftsm.ftn) (Page 36/83) (Mar 09, 13 15:34) title
border
grestore
(Printed by surgeon) rhead
(ftsm.ftn) (18/42) (Saturday March 09, 2013) footer
end % of iso1dict
pagesave restore
showpage
%%Page: (37-38) 19
%%BeginPageSetup
/pagesave save def
sh 0 translate 90 rotate
%%EndPageSetup
iso1dict begin
gsave
llx lly 12 add translate
/v 0 store
/x0 x v get 2.965278 add sx cw mul add store
/y0 y v get bfs th add sub store
x0 y0 moveto
(2490) # (!C             trying to send data to slaves that are not receiving.) p n
0 T (!C) N
0 T (!) N
0 T (!) N
0 T (       do j=1, nforced) N
0 T (        ind=iatom_f\(j\);   r_f\(j,:,c\)=r3\(ind,:\)) N
0 T (       enddo) N
0 T (!) N
0 T (       if \(qdiffrot\) then) N
0 T (        do j=1, norient) N
(2500) # (         ind=iatom_o\(j\);  r_o\(j,:,c\)=r3\(ind,:\)) N
0 T (        enddo) N
0 T (       endif) N
0 T (!) N
0 T (!    repeat a few times to read entire string) N
0 T (       do i=2, nstring) N
0 T (#ifdef __CHARMM) N
0 T (        call readcv\(r3\(:,1\), r3\(:,2\), r3\(:,3\),                          &) N
0 T (     &   trash8, qcg,                                                   & !__CHA) N
0 T (RMM_ONLY##CHEQ) N
0 T (     &   trash4, natom,                                                 &) N
(2510) # (     &   stringatoms, satoms, ifile, 1, ifile, nfile,                   &) N
0 T (     &   istep, istats, ndof, delta, begin_, stop_, skip_,              &) N
0 T (     &   nsavv_, 'CORD', 'CORD', title, ntitle, qdim4, trash8, .false.\)) N
0 T (#elif defined \(__DMOL\)) N
0 T (        call dcd_read_frame\(ifile, r3, .false., FREEATOMS=stringatoms\)) N
0 T (#endif) N
0 T (!) N
0 T (        call MPI_SEND\(r3,3*natom,rtype,i-1,i-1,                          &) N
0 T (     &                      MPI_COMM_STRNG, ierror\)) N
0 T (       enddo ! i) N
(2520) # (!) N
0 T (      else ! me_string == 0) N
0 T (!) N
0 T (       call MPI_RECV\(r3,3*natom,rtype,0,ME_STRNG,                        &) N
0 T (     &                MPI_COMM_STRNG,stat,ierror\)) N
0 T (!) N
0 T (       do j=1, nforced) N
0 T (         ind=iatom_f\(j\);   r_f\(j,:,c\)=r3\(ind,:\)) N
0 T (       enddo) N
0 T (!) N
(2530) # (       if \(qdiffrot\) then) N
0 T (        do j=1, norient) N
0 T (          ind=iatom_o\(j\);  r_o\(j,:,c\)=r3\(ind,:\)) N
0 T (        enddo) N
0 T (       endif) N
0 T (      endif) N
0 T (!) N
0 T (      call ftsm_save_com\(c\) ! compute and remove center of mass) N
0 T (!) N
0 T (      if \(associated\(stringatoms\)\) deallocate\(stringatoms\)) N
(2540) # (      if \(associated\(string_inds\)\) deallocate\(string_inds\)) N
0 T (      if \(associated\(r3\)\) deallocate\(r3\)) N
0 T (!) N
0 T (      end subroutine ftsm_read_dcd) N
0 T (!ccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccc) N
0 T (      subroutine ftsm_write_cor\(ifile, col\)) N
0 T (#ifdef __CHARMM) N
0 T (      __DEP_PSF ) N
0 T (#endif) N
0 T (      __DEP_COORDINATES) N
(2550) # (      __DEP_SIZE) N
0 T (      __DEP_PARSER) N
0 T (      __DEP_COORIO) N
0 T (      __DEP_NUMBER) N
0 T (!) N
0 T (      __IMPNONE) N
0 T (      character\(len=16\) :: whoami) N
0 T (#ifdef __CHARMM) N
0 T (      character\(len=80\) :: title\(maxtit\)) N
0 T (      int :: ntitle) N
(2560) # (!     compatibility variables for coordinate reading/writing) N
0 T (      float :: wdum\(natom+1\)) N
(ftsm.ftn) (Page 37/83) (Mar 09, 13 15:34) title
border
/v 1 store
/x0 x v get 2.965278 add sx cw mul add store
/y0 y v get bfs th add sub store
x0 y0 moveto
0 T (      int :: icntrl\(20\)=0, modew) p n
0 T (#else) N
0 T (      int :: natom) N
0 T (#endif) N
0 T (      float, pointer :: r3\(:,:\)) N
0 T (      int, pointer :: stringatoms\(:\) ) N
0 T (      int :: i, j, k, ind) N
0 T (      int, optional :: col) N
(2570) # (      int :: c, ifile) N
0 T (!) N
0 T (      data whoami /' FTSM_WRITE_COR>'/) N
0 T (!) N
0 T (#ifdef __CHARMM) N
0 T (      ntitle = 1) N
0 T (      title\(1\) = '* FINITE TEMPERATURE STRING IMAGE FILE') N
0 T (#endif) N
0 T (!) N
0 T (      if \(.not. ftsm_check\(qorient\)\) return) N
(2580) # (      if \(present\(col\)\) then ; c=col; else; c=center; endif) N
0 T (      if \(c.lt.1.or.c.gt.num_sets\) then) N
0 T (       __WRN\( whoami, 'INVALID COLUMN. ABORT.'\)) N
0 T (       return) N
0 T (      endif) N
0 T (!) N
0 T (#ifndef __CHARMM) N
0 T ( natom=__NATOM) N
0 T (#endif) N
0 T (!) N
(2590) # (      allocate\(r3\(natom,3\),stringatoms\(natom\)\)) N
0 T (      r3=0d0; stringatoms=0) N
0 T (!) N
0 T (      stringatoms\(iatom_f\)=1) N
0 T (      if \(qdiffrot\) stringatoms\(iatom_o\)=1) N
0 T (!      k=sum\(stringatoms\)) N
0 T (!) N
0 T (      call ftsm_update_overlap_coor\(ione\)) N
0 T (      do j=1, nforced) N
0 T (       ind=iatom_f\(j\);   r3\(ind,:\)=r_f\(j,:,c\)) N
(2600) # (      enddo) N
0 T (!) N
0 T (      if \(qdiffrot\) then) N
0 T (       do j=1, norient) N
0 T (        ind=iatom_o\(j\);   r3\(ind,:\)=r_o\(j,:,c\)) N
0 T (       enddo) N
0 T (      endif) N
0 T (!) N
0 T (#ifdef __CHARMM) N
0 T (!    call writer) N
(2610) # (!    formatted coor card files) N
0 T (      modew=2) N
0 T (      wdum=0d0) N
0 T (!) N
0 T (      call cwrite\(ifile,title,ntitle,icntrl,                            &) N
0 T (     &              r3\(:,1\),r3\(:,2\),r3\(:,3\),wdum,                       &) N
0 T (     &              res,atype,ibase,                                    &) N
0 T (     &              nres,natom,stringatoms,modew,0,0,.false.\)) N
0 T (#elif defined \(__DMOL\)) N
0 T (      call ch_coor_write\(ifile, r3, MASK=stringatoms\)) N
(2620) # (#endif) N
0 T (!) N
0 T (      if \(associated\(stringatoms\)\) deallocate\(stringatoms\)) N
0 T (      if \(associated\(r3\)\) deallocate\(r3\)) N
0 T (!) N
0 T (      end subroutine ftsm_write_cor) N
0 T (!ccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccc) N
0 T (      subroutine ftsm_read_cor\(ifile, col\)) N
0 T (!) N
0 T (      __DEP_SIZE ) N
(2630) # (      __DEP_COORDINATES) N
0 T (      __DEP_PARSER ) N
0 T (!) N
0 T (#ifdef __CHARMM) N
0 T (      __DEP_PSF ) N
(ftsm.ftn) (Page 38/83) (Mar 09, 13 15:34) title
border
grestore
(Printed by surgeon) rhead
(ftsm.ftn) (19/42) (Saturday March 09, 2013) footer
end % of iso1dict
pagesave restore
showpage
%%Page: (39-40) 20
%%BeginPageSetup
/pagesave save def
sh 0 translate 90 rotate
%%EndPageSetup
iso1dict begin
gsave
llx lly 12 add translate
/v 0 store
/x0 x v get 2.965278 add sx cw mul add store
/y0 y v get bfs th add sub store
x0 y0 moveto
0 T (      use ctitla ) p n
0 T (#endif) N
0 T (      __DEP_NUMBER ) N
0 T (      __DEP_COORIO) N
0 T (!) N
(2640) # (      __IMPNONE) N
0 T (      character\(len=15\) :: whoami) N
0 T (      float, pointer :: r3\(:,:\)) N
0 T (      int, pointer :: stringatoms\(:\) ) N
0 T (      int :: i, j, k, ind) N
0 T (      int, optional :: col) N
0 T (      int :: c, ifile) N
0 T (!) N
0 T (#ifdef __CHARMM) N
0 T (      character\(len=80\) :: title\(maxtit\), cdummy='') N
(2650) # (!     compatibility variables for coordinate reading/writing) N
0 T (      float :: xdum\(natom+1\), ydum\(natom+1\), zdum\(natom+1\),            &) N
0 T (     &          wdum\(natom+1\)) N
0 T (!) N
0 T (      int :: icntrl\(20\), moder, ntitle=0) N
0 T (      int :: ifree\(natom\)) N
0 T (#else) N
0 T (      int :: natom) N
0 T (#endif) N
0 T (!) N
(2660) # (      data whoami /' FTSM_READ_COR>'/) N
0 T (!) N
0 T (      if \(.not. ftsm_check\(qorient\)\) return) N
0 T (      if \(present\(col\)\) then ; c=col; else; c=center; endif) N
0 T (      if \(c.lt.1.or.c.gt.num_sets\) then) N
0 T (       __WRN\( whoami, 'INVALID COLUMN. ABORT.'\)) N
0 T (       return) N
0 T (      endif) N
0 T (!) N
0 T (#ifndef __CHARMM) N
(2670) # ( natom=__NATOM) N
0 T (#endif) N
0 T (!) N
0 T (      allocate\(r3\(natom,3\),stringatoms\(natom\)\)) N
0 T (      r3=0d0; stringatoms=0) N
0 T (!) N
0 T (      stringatoms\(iatom_f\)=1) N
0 T (      if \(qdiffrot\) stringatoms\(iatom_o\)=1) N
0 T (!      k=sum\(stringatoms\)) N
0 T (!    call reader) N
(2680) # (!    formatted coor card files) N
0 T (#ifdef __CHARMM) N
0 T (      moder=1) N
0 T (      xdum=__NAN; ydum=__NAN; zdum=__NAN; wdum=__NAN) N
0 T (!) N
0 T (      call cread\(ifile, title, ntitle, icntrl,                          &) N
0 T (     &        r3\(:,1\), r3\(:,2\), r3\(:,3\),                                & ! pass) N
0 T ( by reference ?) N
0 T (     &        wdum, natom, moder, stringatoms,                          &) N
0 T (     &        0, res, nres, atype, ibase, 1, ifree,                     &) N
0 T (     &        segid, resid, nictot, nseg, .false., .false.,             &) N
(2690) # (     &        cdummy, 80, 0, .false.\)) N
0 T (!) N
0 T (!) N
0 T (! from coor.io) N
0 T (!      SUBROUTINE CREAD\(IUNIT,TITLE,NTITL,ICNTRL,X,Y,Z,WMAIN,NATOM,) N
0 T (!     &  NINPUT,ISLCT,IOFFS,RES,NRES,TYPE,IBASE,) N
0 T (!     &  IFILE,FREEAT,SEGID,RESID,NICTOT,NSEG,LRSID,LFREE,LYN,MXLEN,) N
0 T (!     &  MODEL,OFFICIAL\)) N
0 T (!) N
0 T (#elif defined\(__DMOL\)) N
(2700) # (      call ch_coor_read\(ifile, r3, MASK=stringatoms\)) N
0 T (#endif) N
0 T (!) N
0 T (      do j=1, nforced) N
0 T (         ind=iatom_f\(j\);   r_f\(j,:,c\)=r3\(ind,:\)) N
0 T (      enddo) N
0 T (!) N
(ftsm.ftn) (Page 39/83) (Mar 09, 13 15:34) title
border
/v 1 store
/x0 x v get 2.965278 add sx cw mul add store
/y0 y v get bfs th add sub store
x0 y0 moveto
0 T (      if \(qdiffrot\) then) p n
0 T (        do j=1, norient) N
0 T (          ind=iatom_o\(j\);  r_o\(j,:,c\)=r3\(ind,:\)) N
(2710) # (        enddo) N
0 T (      endif) N
0 T (!) N
0 T (      call ftsm_save_com\(c\) ! compute remove center of mass) N
0 T (!) N
0 T (      if \(associated\(stringatoms\)\) deallocate\(stringatoms\)) N
0 T (      if \(associated\(r3\)\) deallocate\(r3\)) N
0 T (!) N
0 T (      end subroutine ftsm_read_cor) N
0 T (!ccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccc) N
(2720) # (      subroutine ftsm_stat_init\(comlyn, comlen\)) N
0 T (!) N
0 T (      use ftsm_var) N
0 T (      use ftsm_rex, only: ftsm_rex_read_map) N
0 T (      __DEP_OUTPUT) N
0 T (      __DEP_SIZE) N
0 T (      __DEP_PARSER ) N
0 T (      __DEP_MULTICOM       __CHARMM_ONLY !##MULTICOM) N
0 T (      __DEP_MPI ) N
0 T (!cccccccccccccccccccccccccccccccccccccccccccccccccc) N
(2730) # (      __IMPNONE) N
0 T (!) N
0 T ( __DECLARE_MSGBUF) N
0 T (!) N
0 T (      CHARACTER\(LEN=*\) :: COMLYN) N
0 T (      int :: COMLEN) N
0 T (!) N
0 T (      character\(len=80\) :: rex_fname_old) N
0 T (      int :: rex_flen_old, oldiol, error) N
0 T (!) N
(2740) # (      character\(len=8\) :: keyword) N
0 T (      character\(len=16\) :: whoami) N
0 T (      data whoami/' FTSM_STAT_INIT>'/) N
0 T (!) N
0 T (      bool :: qroot, qprint) N
0 T (!ccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccc) N
0 T (      qroot=MPI_COMM_STRNG.ne.MPI_COMM_NULL) N
0 T (      qprint=qroot.and.ME_STRNG.eq.0) N
0 T (#ifdef __CHARMM) N
0 T (      if \(qprint\) then; oldiol=iolev; iolev=0; endif) N
(2750) # (#endif) N
0 T (!     begin) N
0 T (!     reset iteration counter) N
0 T (!     did the user specify it?) N
0 T (      stat_iteration_counter=__GET_RM_I\(comlyn, comlen, 'COUN', -1\)) N
0 T (      stat_iteration_counter=max\(stat_iteration_counter,0\)) N
0 T (      if \(stat_iteration_counter.gt.0\) then) N
0 T (       if \(qprint\) then ; write\(_MSGBUF,639\) whoami, stat_iteration_counter ; __) N
0 T (PRINT\(_MSGBUF\) ; endif) N
0 T ( 639  format\(A,' SETTING ITERATION COUNTER TO ',I7\)) N
0 T (      endif) N
(2760) # (!) N
0 T (      forces_fname='') N
0 T (      output_forces=.false.) N
0 T (!) N
0 T (      rmsd0_fname='') N
0 T (      output_rmsd0=.false.) N
0 T (!) N
0 T (      c_fname='') N
0 T (      output_curvature=.false.) N
0 T (!) N
(2770) # (      s_fname='') N
0 T (      output_arclength=.false.) N
0 T (!) N
0 T (      fe_fname='') N
0 T (      output_fe=.false.) N
0 T (      fe_curvature=.false.) N
0 T (      fe_curv=0d0) N
0 T (!) N
0 T (      centers_fname='') N
(ftsm.ftn) (Page 40/83) (Mar 09, 13 15:34) title
border
grestore
(Printed by surgeon) rhead
(ftsm.ftn) (20/42) (Saturday March 09, 2013) footer
end % of iso1dict
pagesave restore
showpage
%%Page: (41-42) 21
%%BeginPageSetup
/pagesave save def
sh 0 translate 90 rotate
%%EndPageSetup
iso1dict begin
gsave
llx lly 12 add translate
/v 0 store
/x0 x v get 2.965278 add sx cw mul add store
/y0 y v get bfs th add sub store
x0 y0 moveto
0 T (      output_centers=.false.) p n
(2780) # (!) N
0 T (      rex_fname_old='') N
0 T (      rex_fname='') N
0 T (      output_rex_log=.false.) N
0 T (      output_rex_map=.false.) N
0 T (!) N
0 T (!ccccccccccccccccc first process the RMSD-related commands) N
0 T (!!!!!!!!!!!!!! RMSD from static structure in comp \(zts/fts\)) N
0 T (      if \(__INDX_RM\(comlyn,comlen,'RMSD'\).gt.0\) then ! request for RMSD) N
0 T (       output_rmsd0=.true.) N
(2790) # (       __GET_RM_A\(COMLYN,COMLEN,'RNAM',4,rmsd0_fname,80,rmsd0_flen\)) N
0 T (       if \(rmsd0_flen.eq.0\) then) N
0 T (         __WRN\(whoami,'NO RMSD FILE NAME SPECIFIED. WILL WRITE TO STDOUT.'\)) N
0 T (         rmsd0_funit=__OSTREAM) N
0 T (       else) N
0 T (         if \(__INDX_RM\(comlyn,comlen,'RAPP'\).gt.0\) then ! APPEND?) N
0 T (           rform='APPEND') N
0 T (         else) N
0 T (           rform='WRITE') N
0 T (         endif) N
(2800) # (       endif) N
0 T (!cccccccccccc print summary) N
0 T (       if \(qprint\) then) N
0 T (         if \(rmsd0_flen.gt.0\) then) N
0 T (          write\(_MSGBUF,660 \) whoami,rmsd0_fname\(1:rmsd0_flen\) ; __PRINT\(_MSGBUF) N
0 T (\)) N
0 T (         else) N
0 T (          write\(_MSGBUF,661 \) whoami ; __PRINT\(_MSGBUF\)) N
0 T (         endif) N
0 T (       endif) N
0 T ( 660  format\(A,' WILL WRITE STRING RMSD TO FILE ',A\)) N
(2810) # ( 661  format\(A,' WILL WRITE STRING RMSD TO STDOUT.'\)) N
0 T (!) N
0 T (      endif !! RMSD) N
0 T (!!!!!!!!!!!!!! ARCLENGTH) N
0 T (      if \(__INDX_RM\(comlyn,comlen,'ARCL'\).gt.0\) then) N
0 T (        output_arclength=.true.) N
0 T (        __GET_RM_A\(COMLYN,COMLEN,'ANAM',4,s_fname,80,s_flen\)) N
0 T (        if \(s_flen.eq.0\) then) N
0 T (         __WRN\(whoami,'STRING LENGTH FILE NAME NOT SPECIFIED. WILL WRITE TO STDO) N
0 T (UT.'\)) N
0 T (         s_funit=__OSTREAM) N
(2820) # (        else) N
0 T (         if \(__INDX_RM\(comlyn,comlen,'AAPP'\).gt.0\) then ! APPEND?) N
0 T (           sform='APPEND') N
0 T (         else) N
0 T (           sform='WRITE') N
0 T (         endif) N
0 T (        endif) N
0 T (!ccccccccccc print summary) N
0 T (        if \(qprint\) then) N
0 T (         if \(s_flen.gt.0\) then) N
(2830) # (          write\(_MSGBUF,652\) whoami,s_fname\(1:s_flen\) ; __PRINT\(_MSGBUF\)) N
0 T (         else) N
0 T (          write\(_MSGBUF,653\) whoami ; __PRINT\(_MSGBUF\)) N
0 T (         endif) N
0 T (        endif) N
0 T ( 652  format\(A,' WILL WRITE STRING LENGTH TO FILE ',A\)) N
0 T ( 653  format\(A,' WILL WRITE STRING LENGTH TO STDOUT.'\)) N
0 T (!) N
0 T (      endif ! ARCLENGTH) N
0 T (!!!!!!!!!!!!!! CURVATURE) N
(2840) # (      if \(__INDX_RM\(comlyn,comlen,'CURV'\).gt.0\) then) N
0 T (        output_curvature=.true.) N
0 T (        __GET_RM_A\(COMLYN,COMLEN,'CVNM',4,c_fname,80,c_flen\)) N
0 T (        if \(c_flen.eq.0\) then) N
0 T (         __WRN\(whoami,'CURVATURE FILE NAME NOT SPECIFIED. WILL WRITE TO STDOUT.') N
0 T (\)) N
0 T (         c_funit=__OSTREAM) N
0 T (        else) N
0 T (         if \(__INDX_RM\(comlyn,comlen,'CAPP'\).gt.0\) then ! APPEND?) N
0 T (           cform='APPEND') N
(ftsm.ftn) (Page 41/83) (Mar 09, 13 15:34) title
border
/v 1 store
/x0 x v get 2.965278 add sx cw mul add store
/y0 y v get bfs th add sub store
x0 y0 moveto
0 T (         else) p n
(2850) # (           cform='WRITE') N
0 T (         endif) N
0 T (        endif) N
0 T (!ccccccccccc print summary) N
0 T (        if \(qprint\) then) N
0 T (         if \(c_flen.gt.0\) then) N
0 T (          write\(_MSGBUF,6521\) whoami,c_fname\(1:c_flen\) ; __PRINT\(_MSGBUF\)) N
0 T (         else) N
0 T (          write\(_MSGBUF,6531\) whoami ; __PRINT\(_MSGBUF\)) N
0 T (         endif) N
(2860) # (        endif) N
0 T ( 6521 format\(A,' WILL WRITE CURVATURE TO FILE ',A\)) N
0 T ( 6531 format\(A,' WILL WRITE CURVATURE TO STDOUT.'\)) N
0 T (!) N
0 T (      endif ! CURVATURE) N
0 T (!!!!!!!!!!!!!! FREE ENERGY) N
0 T (      if \(__INDX_RM\(comlyn,comlen,'FREE'\).gt.0\) then) N
0 T (        output_fe=.true.) N
0 T (        __GET_RM_A\(COMLYN,COMLEN,'FENM',4,fe_fname,80,fe_flen\)) N
0 T (        if \(fe_flen.eq.0\) then) N
(2870) # (         __WRN\(whoami,'NO F.E. FILE NAME SPECIFIED. WILL WRITE TO STDOUT.'\)) N
0 T (         fe_funit=__OSTREAM) N
0 T (        else) N
0 T (         if \(__INDX_RM\(comlyn,comlen,'FAPP'\).gt.0\) then ! APPEND?) N
0 T (           feform='APPEND') N
0 T (         else) N
0 T (           feform='WRITE') N
0 T (         endif) N
0 T (        endif) N
0 T (!) N
(2880) # (        fe_curvature=\(__INDX_RM\(comlyn,comlen,'NOCV'\).le.0\)) N
0 T (!ccccccccccc print summary cccccccccccccccccccccccccccccccccccccc) N
0 T (        if \(qprint\) then) N
0 T (         if \(fe_flen.gt.0\) then) N
0 T (          write\(_MSGBUF,6520\) whoami,fe_fname\(1:fe_flen\) ; __PRINT\(_MSGBUF\)) N
0 T (         else) N
0 T (          write\(_MSGBUF,6530\) whoami ; __PRINT\(_MSGBUF\)) N
0 T (         endif) N
0 T (         if \(.not.fe_curvature\) then) N
0 T (          write\(_MSGBUF,6540\) whoami ; __PRINT\(_MSGBUF\)) N
(2890) # (         endif) N
0 T (        endif) N
0 T ( 6520 format\(A,' WILL WRITE FREE ENERGY TO FILE ',A\)) N
0 T ( 6530 format\(A,' WILL WRITE FREE ENERGY TO STDOUT.'\)) N
0 T ( 6540 format\(A,' FREE ENERGY PROFILE WILL EXCLUDE CONTRIBUTIONS FROM STRING CURV) N
0 T (ATURE.'\)) N
0 T (!) N
0 T (      endif ! F.E.) N
0 T (!cccccccccc process PATH CENTERS output options ccccccccccccccccccccccc) N
0 T (      if \(__INDX_RM\(comlyn,comlen,'CENT'\).gt.0\) then) N
0 T (!       get file name) N
(2900) # (        __GET_RM_A\(COMLYN,COMLEN,'CNAM',4,centers_fname,80,centers_flen\)) N
0 T (!cccccccccccc print summary) N
0 T (        if \(centers_flen.gt.0\) then) N
0 T (         output_centers=.true.) N
0 T (         if \(qprint\) then) N
0 T (          write\(_MSGBUF,6620 \) whoami,centers_fname\(1:centers_flen\) ;__PRINT\(_MS) N
0 T (GBUF\)) N
0 T (         endif) N
0 T (         if \(__INDX_RM\(comlyn,comlen,'CEAP'\).gt.0\) then ! APPEND?) N
0 T (           cenform='APPEND' ! note: if appending, should not duplicate DCD heade) N
0 T (r !) N
0 T (         else) N
(2910) # (           cenform='WRITE') N
0 T (         endif) N
0 T (        else) N
0 T (          __WRN\(whoami,'NO FILE NAME GIVEN. WILL NOT WRITE PATH CENTERS.'\)) N
0 T (        endif) N
0 T ( 6620 format\(A,' WILL WRITE PATH CENTERS TO FILE ',A,'.'\)) N
0 T (!) N
0 T (      endif ! centers output) N
0 T (!ccccccccccccc replica exchange map cccccccccccccc) N
(ftsm.ftn) (Page 42/83) (Mar 09, 13 15:34) title
border
grestore
(Printed by surgeon) rhead
(ftsm.ftn) (21/42) (Saturday March 09, 2013) footer
end % of iso1dict
pagesave restore
showpage
%%Page: (43-44) 22
%%BeginPageSetup
/pagesave save def
sh 0 translate 90 rotate
%%EndPageSetup
iso1dict begin
gsave
llx lly 12 add translate
/v 0 store
/x0 x v get 2.965278 add sx cw mul add store
/y0 y v get bfs th add sub store
x0 y0 moveto
0 T (      rex_flen=0) p n
(2920) # (      if \(__INDX_RM\(comlyn,comlen,'REXM'\).gt.0\) then) N
0 T (!       get file name) N
0 T (        __GET_RM_A\(COMLYN,COMLEN,'RXNM',4,rex_fname,80,rex_flen\)) N
0 T (!       check if user specified an custom map \(e.g. from an older run\)) N
0 T (        __GET_RM_A\(COMLYN,COMLEN,'RXOL',4,rex_fname_old,80,rex_flen_old\)) N
0 T (!) N
0 T (        if \(rex_flen.gt.0\) then) N
0 T (         output_rex_map=.true.) N
0 T (         if \(qprint\) then) N
0 T (          write\(_MSGBUF,6721\) whoami,rex_fname\(1:rex_flen\) ; __PRINT\(_MSGBUF\)) N
(2930) # (         endif) N
0 T (         if \(rex_flen_old.gt.0\) then) N
0 T (          if \(qprint\) then) N
0 T (             write\(_MSGBUF,6722\) whoami,rex_fname_old\(1:rex_flen_old\) ; __PRINT\() N
0 T (_MSGBUF\)) N
0 T (             rex_funit=-1) N
0 T (             __OPEN_FILE\(rex_funit,rex_fname_old\(1:rex_flen_old\),'FORMATTED','RE) N
0 T (AD'\)) N
0 T (          endif) N
0 T (!) N
0 T (          call ftsm_rex_read_map\(rex_funit\)) N
0 T (!) N
(2940) # (          if \(qprint\) __CLOSE_FILE\(rex_funit, 'KEEP', error\)) N
0 T (         endif) N
0 T (!) N
0 T (        else) N
0 T (          __WRN\(whoami,'NO FILE NAME GIVEN. WILL NOT WRITE REPLICA EXCHANGE MAP.) N
0 T ('\)) N
0 T (        endif) N
0 T ( 6721 format\(A,' WILL WRITE REPLICA EXCHANGE MAP TO FILE ',A,'.MAP'\)) N
0 T ( 6722 format\(A,' WILL RESTART FROM REPLICA EXCHANGE MAP IN FILE ',A\)) N
0 T (!) N
0 T (      endif ! replica exchange map) N
(2950) # (!cccccccccccccc replica exchange log cccccccccccccccccccccccccccccccccccccccc) N
0 T (      if \(__INDX_RM\(comlyn,comlen,'REXL'\).gt.0\) then) N
0 T (!       get file name) N
0 T (        if \(rex_flen.eq.0\) then ! in the case that name was read above) N
0 T (         __GET_RM_A\(COMLYN,COMLEN,'RXNM',4,rex_fname,80,rex_flen\)) N
0 T (        endif) N
0 T (!       check for timestep offset) N
0 T (        rextime_offset=__GET_RM_I\(comlyn, comlen, 'ROFF', 0\);) N
0 T (        if \(rextime_offset.gt.0\) then) N
0 T (         if \(qprint\) then ; write\(_MSGBUF,6724\) whoami, whoami,rextime_offset ; ) N
0 T (__PRINT\(_MSGBUF\) ; endif) N
(2960) # ( 6724 format\(A,' WILL OFFSET STEP COUNTER IN REPLICA EXCHANGE LOG BY '  &) N
0 T (     &       /,A,' ',I10\)) N
0 T (        endif) N
0 T (!) N
0 T (        if \(rex_flen.gt.0\) then) N
0 T (         output_rex_log=.true.) N
0 T (         if \(qprint\) then) N
0 T (          write\(_MSGBUF,6723\) whoami,whoami,rex_fname\(1:rex_flen\) ; __PRINT\(_MSG) N
0 T (BUF\)) N
0 T (         endif) N
0 T (         if \(__INDX_RM\(comlyn,comlen,'RXAP'\).gt.0\) then ! APPEND?) N
(2970) # (           rxlform='APPEND') N
0 T (         else) N
0 T (           rxlform='WRITE') N
0 T (         endif ! rxap) N
0 T (        else) N
0 T (          __WRN\(whoami,'NO FILE NAME GIVEN. WILL NOT WRITE REPLICA EXCHANGE LOG.) N
0 T ('\)) N
0 T (        endif ! rex_flen.gt.0) N
0 T ( 6723 format\(A,' WILL WRITE REPLICA EXCHANGE LOG TO FILE ',/,           &) N
0 T (     & A,' ',A,'.DAT'\)) N
0 T (!) N
(2980) # (      endif ! replica exchange log) N
0 T (!cccccccccccc process Voronoi histogram output options ccccccccccc) N
0 T (      voronoi_flen=0) N
0 T (      if \(__INDX_RM\(comlyn,comlen,'VORO'\).gt.0\) then) N
0 T (!       get file name) N
0 T (        __GET_RM_A\(COMLYN,COMLEN,'VNAM',4,voronoi_fname,80,voronoi_flen\)) N
(ftsm.ftn) (Page 43/83) (Mar 09, 13 15:34) title
border
/v 1 store
/x0 x v get 2.965278 add sx cw mul add store
/y0 y v get bfs th add sub store
x0 y0 moveto
0 T (!ccccccccccc print summary) p n
0 T (        if \(voronoi_flen.gt.0\) then) N
0 T (         output_voronoi_hist=.true.) N
0 T (         if \(qprint\) then) N
(2990) # (          write\(_MSGBUF,6622\) whoami,voronoi_fname\(1:voronoi_flen\)) N
0 T (          __PRINT\(_MSGBUF\)) N
0 T (         endif) N
0 T (        else) N
0 T (         __WRN\(whoami,'NO FILE NAME GIVEN. WILL NOT WRITE VORONOI HISTOGRAMS.'\)) N
0 T (        endif) N
0 T ( 6622 format\(A,' WILL WRITE VORONOI HISTOGRAMS TO FILE ',A,'.DAT'\)) N
0 T (!) N
0 T (      endif ! voronoi histograms) N
0 T (!cccccccccccccc voronoi map cccccccccccccccccccccccccccccccccccccccc) N
(3000) # (      if \(__INDX_RM\(comlyn,comlen,'VMAP'\).gt.0\) then) N
0 T (!       get file name) N
0 T (        if \(voronoi_flen.eq.0\) then) N
0 T (         __GET_RM_A\(COMLYN,COMLEN,'VNAM',4,voronoi_fname,80,voronoi_flen\)) N
0 T (        endif) N
0 T (!) N
0 T (        if \(voronoi_flen.gt.0\) then) N
0 T (         output_voronoi_map=.true.) N
0 T (         if \(qprint\) then) N
0 T (          write\(_MSGBUF,6627\) whoami,voronoi_fname\(1:voronoi_flen\)) N
(3010) # (          __PRINT\(_MSGBUF\)) N
0 T (         endif) N
0 T (        else) N
0 T (          __WRN\(whoami,'NO FILE NAME GIVEN. WILL NOT WRITE VORONOI MAP.'\)) N
0 T (        endif) N
0 T ( 6627 format\(A,' WILL WRITE VORONOI MAP TO FILE ',A,'.MAP'\)) N
0 T (!) N
0 T (      endif ! voronoi map) N
0 T (!cccccccccccccc voronoi log cccccccccccccccccccccccccccccccccccccccc) N
0 T (      if \(__INDX_RM\(comlyn,comlen,'VLOG'\).gt.0\) then) N
(3020) # (!       get file name) N
0 T (        if \(voronoi_flen.eq.0\) then) N
0 T (         __GET_RM_A\(COMLYN,COMLEN,'VNAM',4,voronoi_fname,80,voronoi_flen\)) N
0 T (        endif) N
0 T (!       check for timestep offset) N
0 T (        vtime_offset=__GET_RM_I\(comlyn, comlen, 'VOFF', 0\);) N
0 T (        if \(vtime_offset.gt.0\) then) N
0 T (         if \(qprint\) then ; write\(_MSGBUF,6624\) whoami, vtime_offset ; __PRINT\(_) N
0 T (MSGBUF\) ; endif) N
0 T ( 6624 format\(A,' WILL OFFSET STEP COUNTER IN VORONOI LOG BY ',I10\)) N
0 T (        endif) N
(3030) # (!) N
0 T (        if \(voronoi_flen.gt.0\) then) N
0 T (         output_voronoi_log=.true.) N
0 T (         if \(qprint\) then) N
0 T (          write\(_MSGBUF,6623\) whoami,voronoi_fname\(1:voronoi_flen\)) N
0 T (          __PRINT\(_MSGBUF\)) N
0 T (         endif) N
0 T (         if \(__INDX_RM\(comlyn,comlen,'VLAP'\).gt.0\) then ! APPEND?) N
0 T (           vlform='APPEND') N
0 T (         else) N
(3040) # (           vlform='WRITE') N
0 T (         endif ! vlap) N
0 T (!) N
0 T (        else) N
0 T (          __WRN\(whoami,'NO FILE NAME GIVEN. WILL NOT WRITE VORONOI LOG.'\)) N
0 T (        endif ! voronoi_flen.gt.0) N
0 T ( 6623 format\(A,' WILL WRITE VORONOI LOG TO BINARY FILE ',A,'.DAT'\)) N
0 T (!) N
0 T (      endif ! complete voronoi log) N
0 T (!cccccccccccccccccc process forces output options cccccccccccccccccc) N
(3050) # (      if \(__INDX_RM\(comlyn,comlen,'FORC'\).gt.0\) then) N
0 T (!       get nergy file name) N
0 T (        __GET_RM_A\(COMLYN,COMLEN,'FCNM',4,forces_fname,80,forces_flen\)) N
0 T (!ccccccccccc print summary) N
0 T (        if \(forces_flen.gt.0\) then) N
0 T (         output_forces=.true.) N
0 T (         if \(qprint\) then) N
0 T (          write\(_MSGBUF,6625\) whoami,forces_fname\(1:forces_flen\) ; __PRINT\(_MSGB) N
(ftsm.ftn) (Page 44/83) (Mar 09, 13 15:34) title
border
grestore
(Printed by surgeon) rhead
(ftsm.ftn) (22/42) (Saturday March 09, 2013) footer
end % of iso1dict
pagesave restore
showpage
%%Page: (45-46) 23
%%BeginPageSetup
/pagesave save def
sh 0 translate 90 rotate
%%EndPageSetup
iso1dict begin
gsave
llx lly 12 add translate
/v 0 store
/x0 x v get 2.965278 add sx cw mul add store
/y0 y v get bfs th add sub store
x0 y0 moveto
0 T (UF\)) p n
0 T (         endif) N
0 T (         if \(__INDX_RM\(comlyn,comlen,'FCAP'\).gt.0\) then ! APPEND?) N
(3060) # (           fform='APPEND') N
0 T (         else) N
0 T (           fform='WRITE') N
0 T (         endif) N
0 T (        else) N
0 T (         __WRN\(whoami,'NO FILE NAME GIVEN. WILL NOT WRITE AVERAGE FORCE.'\)) N
0 T (        endif) N
0 T ( 6625 format\(A,' WILL WRITE AVERAGE FORCE TO FILE ',A,'.'\)) N
0 T (      endif ! forces) N
0 T (!) N
(3070) # (#ifdef __CHARMM) N
0 T (      if \(qprint\) iolev=oldiol) N
0 T (#endif) N
0 T (!) N
0 T (!      if we got this far, we are probably OK) N
0 T (      stat_initialized=.true.) N
0 T (!) N
0 T (      end subroutine ftsm_stat_init) N
0 T (!ccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccc) N
0 T (      subroutine ftsm_stat\(\)) N
(3080) # (      use ftsm_rex, only: ftsm_rex_print_map,  ftsm_rex_print_log) N
0 T (      use ftsm_voronoi) N
0 T (      __DEP_OUTPUT) N
0 T (      __DEP_MULTICOM       __CHARMM_ONLY !##MULTICOM) N
0 T (      __DEP_PARSER) N
0 T (      __DEP_MPI) N
0 T (      __DEP_NUMBER) N
0 T (!) N
0 T (      __IMPNONE) N
0 T (      int :: i, fmt_len, ifile) N
(3090) # (!) N
0 T (#ifdef __CHARMM) N
0 T (      int :: oldiol) N
0 T (#endif) N
0 T (!) N
0 T (#include "../../mpitype.def") N
0 T (!) N
0 T (      character\(len=80\) :: fmt_real, fmt_int, fmt) N
0 T (      float :: r_com\(3\)) N
0 T (      float :: u \(3,3\)= RESHAPE\( \(/1,0,0,0,1,0,0,0,1/\), \(/3,3/\) \) ! rotation mat) N
0 T (rix) N
(3100) # (      float :: rmsd0, rmsd0_all\(nstring\), fc_all\(3,nstring\)) N
0 T (!) N
0 T (      int :: ierror) N
0 T (      character\(len=11\) :: whoami) N
0 T (      data whoami/' FTSM_STAT>'/) N
0 T (!) N
0 T (      bool :: qroot, qprint, qgrp) N
0 T (!) N
0 T (      interface) N
0 T (       subroutine hypercube_allgatherv\(message,count,displ,type,        &) N
(3110) # (     &                                comm, ierror, rank, size\)) N
0 T (      __CHARMM_ONLY __DEP_KINDS) N
0 T (       float :: message\(*\)) N
0 T (       int :: ierror) N
0 T (       int4mpi :: comm, rank, size, type, count\(size\), displ\(size\)) N
0 T (       end subroutine hypercube_allgatherv) N
0 T (      end interface) N
0 T (!) N
0 T (      qroot=MPI_COMM_STRNG.ne.MPI_COMM_NULL) N
0 T (      qprint=qroot.and.ME_STRNG.eq.0) N
(3120) # (      qgrp=MPI_COMM_LOCAL.ne.MPI_COMM_NULL.and.SIZE_LOCAL.gt.1) N
0 T (!) N
0 T (#ifdef __CHARMM) N
0 T (!     ad hoc fix for REX :) N
0 T (!     when string ranks are permuted, it might happen that a new root is silent) N
0 T (      if \(qprint\) then ; oldiol=iolev; iolev=0; endif) N
0 T (#endif) N
0 T (!ccccccccccccccccccccccc begin ccccccccccccccccccccccccccccccccccccccccccccccccc) N
0 T (cccccc) N
(ftsm.ftn) (Page 45/83) (Mar 09, 13 15:34) title
border
/v 1 store
/x0 x v get 2.965278 add sx cw mul add store
/y0 y v get bfs th add sub store
x0 y0 moveto
0 T (! check if the user has made an initialization call) p n
0 T (      if \(.not.ftsm_initialized\) call ftsm_init\(\)) N
(3130) # (      if \(.not.stat_initialized\) then) N
0 T (       __WRN\(whoami,'NO OUTPUT OPTIONS SELECTED. NOTHING DONE'\)) N
0 T (       return) N
0 T (      endif) N
0 T (!) N
0 T (      stat_iteration_counter=stat_iteration_counter+1) N
0 T (      if \(qroot\) then) N
0 T (!     define number format strings for output) N
0 T (       write\(fmt_int,'\(I5\)'\) stat_iteration_counter) N
0 T (       write\(fmt_real,*\) nstring) N
(3140) # (       fmt_len=len\(fmt_real\)) N
0 T (       __TRIMA\(fmt_real,fmt_len\)) N
0 T (      endif) N
0 T (!ccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccc) N
0 T (cccccccc) N
0 T (      if \(output_rmsd0\) then) N
0 T (!    compute rmsd) N
0 T (       if \(qorient\) then) N
0 T (        if \(qdiffrot\) call ftsm_update_overlap_coor\(ione\) ! just in case, make s) N
0 T (ure orientation coordiantes are up-to-date) N
0 T (        call RMSBestFit\( r_o\(:,:,ref\), r_o\(:,:,center\),                 &) N
0 T (     &                                orientWeights, u \)  ! superpose ref onto c) N
0 T (enter) N
(3150) # (       endif) N
0 T (       rmsd0=rmsd\( r_f\(:,:,ref\), matmul \( r_f\(:,:,center\), u \),         & ! rota) N
0 T (te center using transpose of u) N
0 T (     &  forcedWeights \) ! note: I am assuming that COMs have been removed, which) N
0 T ( should be true) N
0 T (!) N
0 T (          if \(qroot\) call mpi_gather\(rmsd0,1,MPI_DOUBLE_PRECISION       & ! head) N
0 T (s communicate) N
0 T (     &                ,rmsd0_all,1,MPI_DOUBLE_PRECISION,0,              &) N
0 T (     &                 MPI_COMM_STRNG, ierror\)) N
0 T (          if \(qprint\) then ! root writes) N
0 T (           if \(rmsd0_funit.eq.__OSTREAM\) then) N
0 T (            fmt='\("RMSD0> '//fmt_int\(1:5\)//' ",'                        &) N
(3160) # (     &                //fmt_real\(1:fmt_len\)//real_format//'\)') N
0 T (           else) N
0 T (            rmsd0_funit=-1) N
0 T (            __OPEN_FILE\(rmsd0_funit, rmsd0_fname,'FORMATTED',rform\)) N
0 T (            fmt='\("'//fmt_int\(1:5\)//' ",'                               &) N
0 T (     &                //fmt_real\(1:fmt_len\)//real_format//'\)') N
0 T (           endif) N
0 T (           write\(rmsd0_funit,fmt\) \(rmsd0_all\(i\),i=1,nstring\)) N
0 T (!) N
0 T (           if \(rmsd0_funit.ne.__OSTREAM\) then) N
(3170) # (            __CLOSE_FILE\(rmsd0_funit, 'KEEP', ierror\)) N
0 T (           endif) N
0 T (          endif ! qprint) N
0 T (          rform='APPEND') N
0 T (      endif) N
0 T (!cccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccc) N
0 T (      if \(output_arclength\) then) N
0 T (       if \(qprint\) then) N
0 T (        if \(repa_initialized\) then ! proceed only if arclength defined) N
0 T (!) N
(3180) # (         if \(s_funit.eq.__OSTREAM\) then) N
0 T (          fmt='\("ARCL> '//fmt_int\(1:5\)//' ",'                           &) N
0 T (     &                //fmt_real\(1:fmt_len\)//real_format//'\)') N
0 T (         else) N
0 T (          s_funit=-1) N
0 T (          __OPEN_FILE\(s_funit, s_fname,'FORMATTED',sform\)) N
0 T (          fmt='\("'//fmt_int\(1:5\)//' ",'//fmt_real\(1:fmt_len\)            &) N
0 T (     &                                 //real_format//'\)') N
0 T (         endif) N
0 T (!) N
(3190) # (         write\(s_funit, fmt\) ds * sqrt\(3d0\) ! correction factor for consistency ) N
0 T (with atomic RMSD) N
0 T (!     flush unit: close and reopen later) N
0 T (         if \(s_funit.ne.__OSTREAM\) then) N
0 T (          __CLOSE_FILE\(s_funit, 'KEEP', ierror\)) N
(ftsm.ftn) (Page 46/83) (Mar 09, 13 15:34) title
border
grestore
(Printed by surgeon) rhead
(ftsm.ftn) (23/42) (Saturday March 09, 2013) footer
end % of iso1dict
pagesave restore
showpage
%%Page: (47-48) 24
%%BeginPageSetup
/pagesave save def
sh 0 translate 90 rotate
%%EndPageSetup
iso1dict begin
gsave
llx lly 12 add translate
/v 0 store
/x0 x v get 2.965278 add sx cw mul add store
/y0 y v get bfs th add sub store
x0 y0 moveto
0 T (         endif) p n
0 T (        else ! repa) N
0 T (          __WRN\(whoami,'NO REPARAMETRIZATION OPTIONS SELECTED. SKIPPING ARCLENGT) N
0 T (H.'\)) N
0 T (        endif) N
0 T (       endif ! qprint) N
0 T (       sform='APPEND') N
(3200) # (      endif ! output_arclength) N
0 T (!cccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccc) N
0 T (      if \(output_curvature\) then) N
0 T (       if \(qprint\) then) N
0 T (        if \(repa_initialized\) then ! proceed only if arclength defined) N
0 T (!) N
0 T (         if \(c_funit.eq.__OSTREAM\) then) N
0 T (          fmt='\("CURV> '//fmt_int\(1:5\)//' ",'                           &) N
0 T (     &                //fmt_real\(1:fmt_len\)//real_format//'\)') N
0 T (         else) N
(3210) # (          c_funit=-1) N
0 T (          __OPEN_FILE\(c_funit, c_fname,'FORMATTED',cform\)) N
0 T (          fmt='\("'//fmt_int\(1:5\)//' ",'//fmt_real\(1:fmt_len\)            &) N
0 T (     &                                 //real_format//'\)') N
0 T (         endif) N
0 T (!) N
0 T (         write\(s_funit, fmt\) curv / sqrt\(3d0\) ! correction factor for consistenc) N
0 T (y with atomic RMSD) N
0 T (!     flush unit: close and reopen later) N
0 T (         if \(c_funit.ne.__OSTREAM\) then) N
0 T (          __CLOSE_FILE\(c_funit, 'KEEP', ierror\)) N
(3220) # (         endif) N
0 T (        else) N
0 T (          __WRN\(whoami,'NO REPARAMETRIZATION OPTIONS SELECTED. SKIPPING CURVATUR) N
0 T (E.'\)) N
0 T (        endif) N
0 T (       endif) N
0 T (       cform='APPEND') N
0 T (      endif ! output_curvature) N
0 T (!cccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccc) N
0 T (      if \(output_fe\) then) N
0 T (!    compute free energy) N
(3230) # (       call ftsm_compute_fe_fd\(\)) N
0 T (       if \(qprint\) then) N
0 T (         if \(fe_funit.eq.__OSTREAM\) then) N
0 T (          fmt='\("FE> '//fmt_int\(1:5\)//' ",'                             &) N
0 T (     &                //fmt_real\(1:fmt_len\)//real_format//'\)') N
0 T (         else) N
0 T (          fe_funit=-1) N
0 T (          __OPEN_FILE\(fe_funit, fe_fname,'FORMATTED',feform\)) N
0 T (          fmt='\("'//fmt_int\(1:5\)//' ",'//fmt_real\(1:fmt_len\)            &) N
0 T (     &                                 //real_format//'\)') N
(3240) # (         endif) N
0 T (!) N
0 T (!    print) N
0 T (         write\(fe_funit, fmt\) fe) N
0 T (!     flush unit: close and reopen later) N
0 T (         if \(fe_funit.ne.__OSTREAM\) then) N
0 T (          __CLOSE_FILE\(fe_funit, 'KEEP', ierror\)) N
0 T (         endif) N
0 T (       endif ! qprint) N
0 T (       feform='APPEND') N
(3250) # (      endif) N
0 T (!ccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccc) N
0 T (      if \(output_rex_map\) then ! output replica exchange map) N
0 T (       if \(rex_flen.eq.0\) then) N
0 T (        __WRN\(whoami,'NO FILE NAME SPECIFIED. WILL NOT WRITE REPLICA EXCHANGE MA) N
0 T (P.'\)) N
0 T (       else) N
0 T (        if \(qprint\) then) N
0 T (         rex_funit=-1) N
0 T (         rex_fname\(rex_flen+1:rex_flen+4\)='.map' ! append to name) N
0 T (         __OPEN_FILE\(rex_funit,rex_fname\(1:rex_flen+4\), 'FORMATTED','WRITE'\)) N
(3260) # (         rex_fname\(rex_flen+1:\)='' ! erase extension) N
0 T (         call ftsm_rex_print_map\(rex_funit\) ! all processes enter) N
0 T (!) N
(ftsm.ftn) (Page 47/83) (Mar 09, 13 15:34) title
border
/v 1 store
/x0 x v get 2.965278 add sx cw mul add store
/y0 y v get bfs th add sub store
x0 y0 moveto
0 T (         __CLOSE_FILE\(rex_funit, 'KEEP', ierror\)) p n
0 T (        endif ! qprint) N
0 T (       endif) N
0 T (      endif) N
0 T (!ccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccc) N
0 T (      if \(output_rex_log\) then) N
0 T (       if \(rex_flen.eq.0\) then) N
(3270) # (         __WRN\(whoami,'NO FILE NAME SPECIFIED. WILL NOT WRITE REPLICA EXCHANGE L) N
0 T (OG.'\)) N
0 T (       else) N
0 T (        if \(qprint\) then) N
0 T (         rex_funit=-1) N
0 T (         rex_fname\(rex_flen+1:rex_flen+4\)='.dat' ! append to name) N
0 T (         __OPEN_FILE\(rex_funit,rex_fname\(1:rex_flen+4\),'FORMATTED', rxlform\)) N
0 T (         rex_fname\(rex_flen+1:\)='' ! erase extension) N
0 T (        endif) N
0 T (        rxlform='APPEND') N
0 T (!) N
(3280) # (        call ftsm_rex_print_log\(rex_funit\)) N
0 T (!    flush unit:) N
0 T (        if \(qprint\) __CLOSE_FILE\(rex_funit,'KEEP',ierror\)) N
0 T (       endif) N
0 T (      endif) N
0 T (!cccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccc) N
0 T (      if \(output_centers\) then) N
0 T (        if \(qprint\) then) N
0 T (         centers_funit=-1) N
0 T (         __OPEN_FILE\(centers_funit, centers_fname,'UNFORMATTED', cenform\)) N
(3290) # (        endif) N
0 T (!    write current centers as a trajectory frame \(adopted from write_dcd\)) N
0 T (!--------------------------------------------------------------------) N
0 T (! header will be written only if IBEG=1, so be careful, or will have a corrupt f) N
0 T (ile) N
0 T (! however, if header missing, can cat file to another trajectory file w header \() N
0 T (e.g. "cat path1.dcd path2.dcd > path1-2.dcd" \)) N
0 T (! VO 10.2012 : "cheat" by looking at whether the append option is set) N
0 T (        if \(cenform.eq.'APPEND'\) then ; i=\(stat_iteration_counter-1\) * nstring +) N
0 T ( 1 ; else ; i=1 ; endif) N
0 T (        call ftsm_write_dcd\(IFILE=centers_funit,                        &) N
0 T (     &       IBEG=i,                                                    &) N
0 T (!     &       IBEG=\(stat_iteration_counter-1\) * nstring + 1,             &) N
(3300) # (!     &       IEND=2**31-1\) ! largest 4-byte int     ) N
0 T (     &       IEND= ione*\(-1 + 2**30 + 2**30\)\) ! possible i4 => i8 cast) N
0 T (!    NOTE: should write the correct number of records to header at the end of ca) N
0 T (lculation) N
0 T (!--------------------------------------------------------------------) N
0 T (!    flush unit:) N
0 T (        if \(qprint\) __CLOSE_FILE\(centers_funit, 'KEEP', ierror\)) N
0 T (        cenform='APPEND') N
0 T (      endif) N
0 T (!cccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccc) N
0 T (      if \(output_forces\) then ! NOTE: these are the forces acting on the project) N
0 T (ion variables) N
(3310) # (!    gather on root processor) N
0 T (       if \(qroot\) then) N
0 T (        call mpi_gather\(avforce,3,MPI_DOUBLE_PRECISION,                 & ! head) N
0 T (s communicate) N
0 T (     &                 fc_all,3,MPI_DOUBLE_PRECISION,0,                 &) N
0 T (     &                 MPI_COMM_STRNG, ierror\)) N
0 T (!) N
0 T (        fmt='\('//fmt_real\(1:fmt_len\)//real_format//'\)') N
0 T (        if \(qprint\) then) N
0 T (         if \(forces_funit.eq.__OSTREAM\) then) N
0 T (          write\(forces_funit,'\("FORCES> ",I8\)'\) stat_iteration_counter ! % is a ) N
0 T (MATLAB comment) N
(3320) # (         else) N
0 T (          forces_funit=-1) N
0 T (          __OPEN_FILE\(forces_funit, forces_fname,'FORMATTED',fform\)) N
0 T (          write\(forces_funit,'\("% ",I8\)'\) stat_iteration_counter ! % is a MATLAB) N
0 T ( comment) N
0 T (         endif) N
0 T (!) N
0 T (!    print) N
(ftsm.ftn) (Page 48/83) (Mar 09, 13 15:34) title
border
grestore
(Printed by surgeon) rhead
(ftsm.ftn) (24/42) (Saturday March 09, 2013) footer
end % of iso1dict
pagesave restore
showpage
%%Page: (49-50) 25
%%BeginPageSetup
/pagesave save def
sh 0 translate 90 rotate
%%EndPageSetup
iso1dict begin
gsave
llx lly 12 add translate
/v 0 store
/x0 x v get 2.965278 add sx cw mul add store
/y0 y v get bfs th add sub store
x0 y0 moveto
0 T (         write\(forces_funit, fmt\) fc_all\(1,:\) ! parallel forces) p n
0 T (         if \(fe_curvature\) write\(forces_funit, fmt\) fc_all\(2,:\) ! curvature forc) N
0 T (es) N
0 T (         write\(forces_funit, fmt\) fc_all\(3,:\) ! perpendicular forces) N
(3330) # (!) N
0 T (!     flush unit: close and reopen later) N
0 T (         if \(forces_funit.ne.__OSTREAM\)                                      &) N
0 T (     &     __CLOSE_FILE\(forces_funit, 'KEEP', ierror\)) N
0 T (        endif ! qprint) N
0 T (        fform='APPEND') N
0 T (       endif ! qroot) N
0 T (!) N
0 T (      endif ! output_force) N
0 T (!ccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccc) N
(3340) # (      if \(output_voronoi_hist\) then ! output voronoi data) N
0 T (        if \(voronoi_flen.eq.0\) then) N
0 T (         __WRN\(whoami,'NO FILE NAME SPECIFIED. WILL NOT WRITE VORONOI DATA.'\)) N
0 T (        else) N
0 T (         if \(qprint\) then) N
0 T (          ifile=-1) N
0 T (          voronoi_fname\(voronoi_flen+1:voronoi_flen+4\)='.dat') N
0 T (          __OPEN_FILE\(ifile,voronoi_fname\(1:voronoi_flen+4\),'FORMATTED','WRITE'\)) N
0 T (          voronoi_fname\(voronoi_flen+1:\)='') N
0 T (         endif) N
(3350) # (         call ftsm_voronoi_print_data\(ifile\) ! all root processes enter) N
0 T (         if \(qprint\) then ; __CLOSE_FILE\(ifile,'KEEP',ierror\) ; endif) N
0 T (        endif) N
0 T (      endif) N
0 T (!cccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccc) N
0 T (      if \(output_voronoi_log\) then) N
0 T (       if \(voronoi_flen.eq.0\) then) N
0 T (         __WRN\(whoami,'NO FILE NAME SPECIFIED. WILL NOT WRITE VORONOI LOG.'\)) N
0 T (       else) N
0 T (         if \(qprint\) then) N
(3360) # (           vlog_funit=-1) N
0 T (           voronoi_fname\(voronoi_flen+1:voronoi_flen+4\)='.log') N
0 T (           __OPEN_FILE\(vlog_funit,voronoi_fname\(1:voronoi_flen+4\),'UNFORMATTED',) N
0 T ( vlform\)) N
0 T (           voronoi_fname\(voronoi_flen+1:\)='') N
0 T (         endif) N
0 T (         vlform='APPEND') N
0 T (         if \(qroot\) call ftsm_voronoi_print_log\(vlog_funit\)) N
0 T (!    flush unit:) N
0 T (         if \(qprint\) then ; __CLOSE_FILE\(vlog_funit,'KEEP',ierror\) ; endif) N
0 T (       endif) N
(3370) # (      endif) N
0 T (!ccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccc) N
0 T (      if \(output_voronoi_map\) then ! output voronoi map) N
0 T (        if \(voronoi_flen.eq.0\) then) N
0 T (         __WRN\(whoami,'NO FILE NAME SPECIFIED. WILL NOT WRITE VORONOI MAP.'\)) N
0 T (        else) N
0 T (!    put 'whereami' into the map) N
0 T (          if \(qroot.and.SIZE_STRNG.gt.1\) then) N
0 T (! GATHER +BCAST) N
0 T (           call MPI_GATHER\(ftsm_voronoi_whereami, 1, mpiint, ftsm_voronoi_map, 1) N
0 T (, mpiint, 0, MPI_COMM_STRNG, ierror\)) N
(3380) # (           __BROADCAST_STRING\(ftsm_voronoi_map,nstring,mpiint\)) N
0 T (          else) N
0 T (           ftsm_voronoi_map\(mestring+1\)=ftsm_voronoi_whereami) N
0 T (          endif) N
0 T (          if \(qgrp\) then) N
0 T (#ifdef __CHARMM) N
0 T (           __BROADCAST_LOCAL_4B\(ftsm_voronoi_map,nstring\)  !__CHARMM_ONLY##.not.) N
0 T (INTEGER8) N
0 T (           __BROADCAST_LOCAL_8B\(ftsm_voronoi_map,nstring\)  !__CHARMM_ONLY##INTEG) N
0 T (ER8) N
0 T (#elif defined \(__DMOL\)) N
0 T (           __BROADCAST_LOCAL\(ftsm_voronoi_map,nstring,mpiint\)) N
(3390) # (#endif) N
0 T (          endif ! qgrp) N
0 T (!) N
0 T (         if \(qroot\) then) N
0 T (          ifile=-1) N
(ftsm.ftn) (Page 49/83) (Mar 09, 13 15:34) title
border
/v 1 store
/x0 x v get 2.965278 add sx cw mul add store
/y0 y v get bfs th add sub store
x0 y0 moveto
0 T (          voronoi_fname\(voronoi_flen+1:voronoi_flen+4\)='.map') p n
0 T (          if \(qprint\) then ) N
0 T (           __OPEN_FILE\(ifile,voronoi_fname\(1:voronoi_flen+4\), 'FORMATTED','WRITE) N
0 T ('\)) N
0 T (           voronoi_fname\(voronoi_flen+1:\)='') N
0 T (          endif) N
(3400) # (          call ftsm_voronoi_print_map\(ifile\)) N
0 T (          if \(qprint\) then ; __CLOSE_FILE\(ifile,'KEEP',ierror\) ; endif) N
0 T (         endif ! qroot) N
0 T (        endif) N
0 T (      endif) N
0 T (!) N
0 T (!) N
0 T (#ifdef __CHARMM) N
0 T (!     ad hoc fix for REX) N
0 T (      if \(qprint\) iolev=oldiol) N
(3410) # (#endif) N
0 T (!ccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccc) N
0 T (ccc) N
0 T (!    reset force averages -- relevant for f.e.) N
0 T (      num_force_samples=0) N
0 T (!) N
0 T (      end subroutine ftsm_stat) N
0 T (!ccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccc) N
0 T (ccc) N
0 T (      function ftsm_check\(qorie\) result \(ok\)) N
0 T (      __DEP_PARSER) N
0 T (      __IMPNONE) N
(3420) # (      character\(len=12\) :: whoami) N
0 T (      int :: error) N
0 T (      bool :: ok, qorie) N
0 T (!) N
0 T ( __DECLARE_MSGBUF) N
0 T (!) N
0 T (      data whoami /' FTSM_CHECK>'/) N
0 T (!) N
0 T (      error=0) N
0 T (!) N
(3430) # (      if \(.not.ftsm_initialized\) then) N
0 T (       __WRN\(whoami,'FTSM NOT INITIALIZED. ABORT.'\)) N
0 T (       error=1) N
0 T (!) N
0 T (      elseif \( qorie.and.                                               &) N
0 T (     & \( norient.eq.0 .or. .not. associated\(r_o\)                        &) N
0 T (     &      .or. .not. associated\(iatom_o\)\)\) then) N
0 T (       __WRN\(whoami,'NO ORIENTATION ATOMS FOUND. ABORT.'\)) N
0 T (       error=2) N
0 T (      elseif \(nforced.eq.0 .or. .not. associated\(r_f\)                   &) N
(3440) # (     &      .or. .not. associated\(iatom_f\)\) then) N
0 T (       __WRN\(whoami,'NO FORCING ATOMS FOUND. ABORT.'\)) N
0 T (       error=3) N
0 T (      endif) N
0 T (!) N
0 T (      ok=error.eq.0) N
0 T (!) N
0 T (      end function ftsm_check) N
0 T (!ccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccc) N
0 T (cccc) N
0 T (! VO 1/2013 modifying function call to include string minimization option) N
(3450) # (      subroutine ftsm_main\(x,y,z,xcomp,ycomp,zcomp,fx,fy,fz,iteration           ) N
0 T (& ! include comparison set for voronoi calculations) N
0 T (#ifdef __CHARMM) N
0 T (     &                    , wmain, nbond_data, image_data     & ! to be passed o) N
0 T (n to ftsm_mini) N
0 T (#endif) N
0 T (     &                    \)) N
0 T (!) N
0 T (      __DEP_PARSER ) N
0 T (      __DEP_MULTICOM       __CHARMM_ONLY !##MULTICOM) N
0 T (      __DEP_MPI ) N
0 T (      __DEP_OUTPUT) N
(3460) # (      __DEP_NUMBER) N
0 T (      __CHARMM_ONLY use chm_types, only : nonbondDataStructure, imageDataStructu) N
(ftsm.ftn) (Page 50/83) (Mar 09, 13 15:34) title
border
grestore
(Printed by surgeon) rhead
(ftsm.ftn) (25/42) (Saturday March 09, 2013) footer
end % of iso1dict
pagesave restore
showpage
%%Page: (51-52) 26
%%BeginPageSetup
/pagesave save def
sh 0 translate 90 rotate
%%EndPageSetup
iso1dict begin
gsave
llx lly 12 add translate
/v 0 store
/x0 x v get 2.965278 add sx cw mul add store
/y0 y v get bfs th add sub store
x0 y0 moveto
0 T (re) p n
0 T (!) N
0 T (      __IMPNONE) N
0 T (!) N
0 T (      __DECLARE_MSGBUF) N
0 T (!) N
0 T (      float, dimension\(:\) :: x, y, z, xcomp, ycomp, zcomp, fx, fy, fz) N
0 T (      int :: iteration ! MD iteration) N
0 T (!) N
(3470) # (#ifdef __CHARMM) N
0 T (! CHARMM - dependent energy evaluation routines/vars) N
0 T (      float :: wmain\(:\)) N
0 T (      type\(nonbondDataStructure\) :: nbond_data) N
0 T (      type\(imageDataStructure\)   :: image_data) N
0 T (#endif) N
0 T (!     locals) N
0 T (      float :: s) N
0 T (      character\(len=11\) :: whoami) N
0 T (      bool :: qgrp) N
(3480) # (      int :: i, bug, qfac) N
0 T (!) N
0 T (      data whoami /' FTSM_MAIN>'/) N
0 T (!cccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccc) N
0 T (      qgrp=\(MPI_COMM_LOCAL.ne.MPI_COMM_NULL\)                            &) N
0 T (     & .and.\(SIZE_LOCAL.gt.1\)) N
0 T (!) N
0 T (      if \(restrained_on\) then ! impose restraints) N
0 T (        if \(restrained_eq_steps.gt.0\) then) N
0 T (         s=one*\(iteration-restrained_eq0\)/restrained_eq_steps ; s=min\(max\(s,zero) N
0 T (\),one\); ! limit s to range [0,1], even though calc works fine with s>1) N
(3490) # (        else) N
0 T (         s=one) N
0 T (        endif ! restrained equilibration is on) N
0 T (!aa) N
0 T (! write\(600+ME_GLOBAL,*\) iteration, restrained_eq0, restrained_eq_steps, s ; ! c) N
0 T (lose\(600+ME_GLOBAL\)) N
0 T (        call ftsm_calc\(x,y,z,.true.,s\)             ! compute gradients) N
0 T (        call ftsm_addforce\(fx,fy,fz,s.ge.one\)      ! add restraint forces to glo) N
0 T (bal force arrays) N
0 T (!) N
0 T (      endif ! restrained_on) N
0 T (!cccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccc) N
(3500) # (!     the following only gets executed if iteration > olditeration;) N
0 T (!     this is because CHARMM executes frequent 'restarts' at the least frequency) N
0 T (!     that is common to all output counters; a restart will require two calls to) N
0 T ( smcv_master;) N
0 T (!     to avoid duplicating statistics + evolution etc \(since the step # is the s) N
0 T (ame!\) I keep track) N
0 T (!     of the iteration counter, and proceed only if the iteration counter has in) N
0 T (creased.) N
0 T (      if \(iteration.gt.olditeration\) then) N
0 T (       if \(evolve_ftsm_on.and.evolve_freq.gt.0\) then) N
0 T (!) N
0 T (        if \( mod\(iteration,evolve_freq\).eq.0 .and.                      &) N
0 T (     &       \(iteration-restrained_eq0.gt.evolve_nskip\)\)                &) N
(3510) # (     &       call ftsm_evolve\(x,y,z\)) N
0 T (       endif) N
0 T (!cccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccc) N
0 T (       if \(update_on.and.update_freq.gt.0\) then) N
0 T (        if \(mod\(iteration,update_freq\).eq.0\) then) N
0 T (         if \(.not.string_noprint\) then ) N
0 T (          write\(_MSGBUF,'\(2A,I10\)'\) whoami,' UPDATING STRING AT STEP ',iteration) N
0 T ( ; __PRINTL\(_MSGBUF,3\)) N
0 T (         endif) N
0 T (!) N
0 T (         if \(proj_on\) then) N
(3520) # (!    save old reference coordinates) N
0 T (          r_f\(:,:,left_old:right_old\)=r_f\(:,:,left:right\)) N
0 T (          r_f\(:,:,center\)=r_f\(:,:,center_new\)) N
0 T (          if \(qdiffrot\) then) N
0 T (           r_o\(:,:,left_old:right_old\)=r_o\(:,:,left:right\)) N
0 T (           r_o\(:,:,center\)=r_o\(:,:,center_new\)) N
0 T (!    make sure orientation coordinates are current) N
(ftsm.ftn) (Page 51/83) (Mar 09, 13 15:34) title
border
/v 1 store
/x0 x v get 2.965278 add sx cw mul add store
/y0 y v get bfs th add sub store
x0 y0 moveto
0 T (           call ftsm_update_overlap_coor\(ione\) ! r_f --> r_o) p n
0 T (          endif) N
0 T (         else  ! not proj_on \(voronoi tessellation should also be covered in thi) N
0 T (s case\)) N
(3530) # (!    save old reference coordinates and switch to new reference coordinates) N
0 T (          if \(.not.string_noprint\) then ) N
0 T (           write\(_MSGBUF,'\(2A\)'\) whoami,' UPDATING REFERENCE IMAGES.' ) N
0 T (           __PRINTL\(_MSGBUF,3\)) N
0 T (          endif) N
0 T (          r_f\(:,:,center_old\)=r_f\(:,:,center\)) N
0 T (          r_f\(:,:,center\)=r_f\(:,:,center_new\)) N
0 T (          if \(qdiffrot\) then) N
0 T (           r_o\(:,:,center_old\)=r_o\(:,:,center\)) N
0 T (           r_o\(:,:,center\)=r_o\(:,:,center_new\)) N
(3540) # (!    make sure orientation coordinates are current) N
0 T (           call ftsm_update_overlap_coor\(ione\) ! r_f --> r_o) N
0 T (          endif) N
0 T (         endif ! proj_on) N
0 T (!) N
0 T (! VO 1.2013 : see if image minimization is requested) N
0 T (         if \(ftsm_mini_on\) then) N
0 T (            if \(.not.string_noprint\) then ) N
0 T (             write\(_MSGBUF,'\(2A\)'\) whoami,' MINIMIZING IMAGE ENERGY.' ; __PRINTL) N
0 T (\(_MSGBUF,3\)) N
0 T (            endif) N
(3550) # (            call ftsm_mini\(x, y, z                           &) N
0 T (#ifdef __CHARMM) N
0 T (     &                    ,wmain, nbond_data, image_data     &) N
0 T (     &                    ,fx, fy, fz                        & ! to make sure fo) N
0 T (rces are not overwritten ) N
0 T (#endif) N
0 T (     &                    \)) N
0 T (         endif ! ftsm_mini_on) N
0 T (!    see if reparametrization requested) N
0 T (         if \(repa_on\) then) N
0 T (          if \(.not.string_noprint\) then ) N
(3560) # (             write\(_MSGBUF,'\(2A\)'\) whoami,' REPARAMETRIZING IMAGES.' ) N
0 T (             __PRINTL\(_MSGBUF,3\)) N
0 T (          endif) N
0 T (          call ftsm_repa\(.not.proj_on\) ! reparametrize string, proj_on: do not b) N
0 T (roadcast to slaves b/c ftsm_swap_bc ; removes COM) N
0 T (         else) N
0 T (!    recompute and remove centers of mass \(which will change due to repa\)) N
0 T (           call ftsm_save_com\(\)) N
0 T (         endif ! repa_on) N
0 T (!    update reference coordinates) N
0 T (         if \(proj_on\) then) N
(3570) # (          if \(.not.string_noprint\) then ) N
0 T (           write\(_MSGBUF,'\(2A\)'\) whoami,' UPDATING NEIGHBOR IMAGES.' ; __PRINTL\() N
0 T (_MSGBUF,3\)) N
0 T (          endif) N
0 T (          call ftsm_swap_bc\(.true.\) ! VO changed from false to true 1/2013 \(why ) N
0 T (was it false? problem only in parallel\)) N
0 T (         endif ! proj_on) N
0 T (!------------------------------------------------------------------------) N
0 T (!    Voronoi tessellation:) N
0 T (!    smart-update voronoi data: if update too aggressive and some replicas end u) N
0 T (p in a wrong v. cell, string coords will be rolled back; ) N
0 T (         if \(voronoi_hist_on\) call ftsm_voronoi_smart_update\(x,y,z,xcomp,ycomp,z) N
0 T (comp\) ) N
0 T (!) N
(3580) # (!    reset arrays for updating reference structure) N
0 T (         r_f\(:,:,center_new\)=r_f\(:,:,center\)) N
0 T (         if \(qdiffrot\) r_o\(:,:,center_new\)=r_o\(:,:,center\)) N
0 T (!) N
0 T (         restrained_eq0=iteration) N
0 T (!) N
0 T (        endif ! update_on) N
0 T (       endif ! update_on) N
0 T (!) N
0 T (       if \(repl_x_on.and.repl_x_freq.gt.0\) then) N
(3590) # (        if \(mod\(iteration, repl_x_freq\).eq.0\) then) N
0 T (         if \(.not.string_noprint\) then ) N
(ftsm.ftn) (Page 52/83) (Mar 09, 13 15:34) title
border
grestore
(Printed by surgeon) rhead
(ftsm.ftn) (26/42) (Saturday March 09, 2013) footer
end % of iso1dict
pagesave restore
showpage
%%Page: (53-54) 27
%%BeginPageSetup
/pagesave save def
sh 0 translate 90 rotate
%%EndPageSetup
iso1dict begin
gsave
llx lly 12 add translate
/v 0 store
/x0 x v get 2.965278 add sx cw mul add store
/y0 y v get bfs th add sub store
x0 y0 moveto
0 T (          write\(_MSGBUF,'\(2A\)'\) whoami,' ATTEMPTING EXCHANGE OF NEIGHBORING REPL) p n
0 T (ICAS.' ; __PRINTL\(_MSGBUF,3\)) N
0 T (         endif) N
0 T (         call ftsm_repl_exchange\(x, y, z, iteration\)) N
0 T (        endif) N
0 T (       endif) N
0 T (!) N
0 T (       if \(stat_on.and.stat_freq.gt.0\) then) N
0 T (         if \(mod\(iteration,stat_freq\).eq.0\) then) N
(3600) # (           write\(_MSGBUF,'\(2A\)'\) whoami,' CALLING STRING STATISTICS.' ; __PRINTL) N
0 T (\(_MSGBUF,3\)) N
0 T (           call ftsm_stat\(\) ! output statistics) N
0 T (         endif) N
0 T (       endif ! stat_on) N
0 T (      endif ! iteration > olditeration) N
0 T (!     update internal iteration counter) N
0 T (      olditeration=iteration) N
0 T (!) N
0 T (      end subroutine ftsm_main) N
0 T (!ccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccc) N
(3610) # (      subroutine ftsm_calc\(x,y,z,deriv,t\)) N
0 T (!) N
0 T (      __DEP_NUMBER ) N
0 T (      __DEP_MULTICOM       __CHARMM_ONLY !##MULTICOM) N
0 T (      __DEP_MPI ) N
0 T (!) N
0 T (      __IMPNONE) N
0 T (!) N
0 T (      float :: x\(:\), y\(:\), z\(:\)) N
0 T (      bool :: deriv, qgrp, qcombine) N
(3620) # (      float, optional :: t) N
0 T (      float :: s, oms ! this value indicates how much of the old reference set t) N
0 T (o take) N
0 T (!) N
0 T (      int :: ind, i, j, k, obeg, oend, p, q, ierror) N
0 T (!) N
0 T (      float :: u \(3,3\), u1\(3,3\), u2\(3,3\), u3\(3,3\)) N
0 T (      float, pointer :: r_com\(:\)) N
0 T (      float :: rho, rho1, rho2, r1\(3\), r2\(3\), r3\(3\), d, d1, d2, d3,    &) N
0 T (     &                                                d4, d5, d6, w) N
0 T (      float :: omdpar) N
(3630) # (      float :: a11, a12, a13, a21, a22, a23, a31, a32, a33) N
0 T (      float :: b11, b12, b13, b21, b22, b23, b31, b32, b33) N
0 T (      float, dimension\(:,:,:,:\), pointer :: ugrad, ugrad1, ugrad2) N
0 T (      float, pointer, dimension\(:,:\) :: roi,rol,ror,roc,               &) N
0 T (     &    rol_old,roc_old,ror_old,rol_cur,roc_cur,ror_cur) N
0 T (      float, pointer, dimension\(:,:\) :: rfi,rfl,rfr,rfc,rfl_rot,rfr_rot&) N
0 T (     &   ,rfc_rot,rfl_old,rfc_old,rfr_old,rfl_cur,rfc_cur,rfr_cur) N
0 T (      float, pointer, dimension\(:,:\) :: fopar, foprp, ffpar, ffprp) N
0 T (      float, pointer, dimension\(:,:\) :: rfpar, rfprp) N
0 T (      float, pointer :: M\(:,:\)) N
(3640) # (!) N
0 T (      int4mpi, allocatable :: orient_count\(:\), orient_displ\(:\) ! if declared as ) N
0 T (int*8 parallelization will break) N
0 T (!) N
0 T (      float :: tol) N
0 T (!) N
0 T (      float, pointer :: ow\(:\), fw\(:\)) N
0 T (!) N
0 T (      interface) N
0 T (       subroutine hypercube_allgatherv\(message,count,displ,type,        &) N
0 T (     &                                comm, ierror, rank, size\)) N
(3650) # (      __CHARMM_ONLY __DEP_KINDS) N
0 T (       float :: message\(*\)) N
0 T (       int :: ierror) N
0 T (       int4mpi :: comm, rank, size, type, count\(size\), displ\(size\)) N
0 T (       end subroutine hypercube_allgatherv) N
0 T (      end interface) N
0 T (!) N
0 T (      tol=__ERRTOL) N
0 T (!) N
0 T (      if \(present\(t\)\) then ; s=min\(max\(t,zero\),one\); else ; s=one ; endif ! limi) N
0 T (t the range of s for clarity; the code works for s>1 b/c of qcombine below) N
(ftsm.ftn) (Page 53/83) (Mar 09, 13 15:34) title
border
/v 1 store
/x0 x v get 2.965278 add sx cw mul add store
/y0 y v get bfs th add sub store
x0 y0 moveto
(3660) # (!) p n
0 T (      qcombine=s.lt.one) N
0 T (!) N
0 T (      qgrp=\( SIZE_LOCAL.gt.1.and.MPI_COMM_LOCAL.ne.MPI_COMM_NULL        &) N
0 T (     &       .and.calc_bestfit_grad_para\)) N
0 T (! shorthand) N
0 T (      ow=>orientWeights) N
0 T (      r_com=>rcom\(:,instant\)) N
0 T (      roi=>r_o\(:,:,instant\);) N
0 T (      rol=>r_o\(:,:,left\); ror=>r_o\(:,:,right\); roc=>r_o\(:,:,center\);) N
(3670) # (      fopar=>r_o\(:,:,fpar\);  foprp=>r_o\(:,:,fperp\) ! parallel forces) N
0 T (!-------------------------------------------------------------------------------) N
0 T (-------) N
0 T (      fw=>forcedWeights) N
0 T (      rfi=>r_f\(:,:,instant\);) N
0 T (      rfl=>r_f\(:,:,left\); rfr=>r_f\(:,:,right\); rfc=>r_f\(:,:,center\);) N
0 T (      rfl_rot=>r_f\(:,:,left_rot\);  rfr_rot=>r_f\(:,:,right_rot\); rfc_rot=>r_f\(:,:) N
0 T (,center_rot\);) N
0 T (      ffpar=>r_f\(:,:,fpar\);  ffprp=>r_f\(:,:,fperp\) ! forces) N
0 T (      rfpar=>r_f\(:,:,vpar\);  rfprp=>r_f\(:,:,vperp\) ! displacement vectors) N
0 T (!) N
0 T (!      load coordinates) N
(3680) # (      do k=1,nforced) N
0 T (       ind=iatom_f\(k\)) N
0 T (       rfi\(k,1\)=x\(ind\)) N
0 T (       rfi\(k,2\)=y\(ind\)) N
0 T (       rfi\(k,3\)=z\(ind\)) N
0 T (      enddo) N
0 T (!) N
0 T (      if \(qorient\) then) N
0 T (       if \(qdiffrot\) then) N
0 T (        do k=1,norient ! when qorient false, norient zero) N
(3690) # (         ind=iatom_o\(k\)) N
0 T (         roi\(k,1\)=x\(ind\)) N
0 T (         roi\(k,2\)=y\(ind\)) N
0 T (         roi\(k,3\)=z\(ind\)) N
0 T (        enddo) N
0 T (       endif ! qdiffrot \(otherwise rfi and roi point to the same thing\)) N
0 T (!) N
0 T (!       translate forced atoms to centroid) N
0 T (       r_com\(:\)=0d0;) N
0 T (       do j=1,3 ; do k=1, norient;) N
(3700) # (          r_com\(j\) = r_com\(j\)+ow\(k\)*roi\(k,j\)) N
0 T (       enddo ;    enddo) N
0 T (!) N
0 T (       rfi\(:,1\)=rfi\(:,1\)-r_com\(1\)) N
0 T (       rfi\(:,2\)=rfi\(:,2\)-r_com\(2\)) N
0 T (       rfi\(:,3\)=rfi\(:,3\)-r_com\(3\)) N
0 T (!) N
0 T (       if \(qdiffrot\) then ! also use orientation atoms \(otherwise, they are the ) N
0 T (same -- see above!\)) N
0 T (         roi\(:,1\)=roi\(:,1\)-r_com\(1\)) N
0 T (         roi\(:,2\)=roi\(:,2\)-r_com\(2\)) N
(3710) # (         roi\(:,3\)=roi\(:,3\)-r_com\(3\)) N
0 T (       endif ! qdiffrot) N
0 T (!) N
0 T (      else) N
0 T (       u = RESHAPE\( \(/one,zero,zero,zero,one,zero,zero,zero,one/\), \(/3,3/\) \) ! r) N
0 T (otation matrix) N
0 T (       u1= u) N
0 T (       u2= u) N
0 T (       u3= u) N
0 T (      endif ! qorient) N
0 T (!) N
(3720) # (      if \(qcombine\) then ! use a combination of old and new reference structures) N
0 T ( for mild restart) N
0 T (       oms=one-s) N
0 T (!) N
0 T (       rfl_old=>r_f\(:,:,left_old\); rfr_old=>r_f\(:,:,right_old\);) N
0 T (       rfc_old=>r_f\(:,:,center_old\);) N
0 T (       rfl_cur=>r_f\(:,:,left_cur\); rfr_cur=>r_f\(:,:,right_cur\);) N
0 T (       rfc_cur=>r_f\(:,:,center_cur\);) N
0 T (!) N
(ftsm.ftn) (Page 54/83) (Mar 09, 13 15:34) title
border
grestore
(Printed by surgeon) rhead
(ftsm.ftn) (27/42) (Saturday March 09, 2013) footer
end % of iso1dict
pagesave restore
showpage
%%Page: (55-56) 28
%%BeginPageSetup
/pagesave save def
sh 0 translate 90 rotate
%%EndPageSetup
iso1dict begin
gsave
llx lly 12 add translate
/v 0 store
/x0 x v get 2.965278 add sx cw mul add store
/y0 y v get bfs th add sub store
x0 y0 moveto
0 T (       rol_old=>r_o\(:,:,left_old\); ror_old=>r_o\(:,:,right_old\);) p n
0 T (       roc_old=>r_o\(:,:,center_old\);) N
(3730) # (       rol_cur=>r_o\(:,:,left_cur\); ror_cur=>r_o\(:,:,right_cur\);) N
0 T (       roc_cur=>r_o\(:,:,center_cur\);) N
0 T (!) N
0 T (       if \(proj_on\) then) N
0 T (        if \(qorient\) then) N
0 T (         call RMSBestFit\(rol,roi,ow,u\)) N
0 T (         call RMSBestFit\(rol_old,roi,ow,u1\)) N
0 T (         call RMSBestFit\(ror,roi,ow,u2\)) N
0 T (         call RMSBestFit\(ror_old,roi,ow,u3\)) N
0 T (!    combine rotated structures) N
(3740) # (!    left) N
0 T (!) N
0 T (         u=u*s; u1=u1*oms;) N
0 T (         u2=u2*s; u3=u3*oms;) N
0 T (         rfl_cur=0d0; rfr_cur=0d0;) N
0 T (         do k=1,3; do j=1,3) N
0 T (           rfl_cur\(:,j\)=rfl_cur\(:,j\) + rfl\(:,k\)     * u\(j,k\) +          &) N
0 T (     &                                 rfl_old\(:,k\) * u1\(j,k\)) N
0 T (           rfr_cur\(:,j\)=rfr_cur\(:,j\) + rfr\(:,k\)     * u2\(j,k\) +         &) N
0 T (     &                                 rfr_old\(:,k\) * u3\(j,k\)) N
(3750) # (         enddo;    enddo) N
0 T (!) N
0 T (         if \(qdiffrot\) then) N
0 T (          rol_cur=0d0; ror_cur=0d0) N
0 T (          do k=1,3; do j=1,3) N
0 T (           rol_cur\(:,j\)=rol_cur\(:,j\) + rol\(:,k\)     * u\(j,k\) +          &) N
0 T (     &                                 rol_old\(:,k\) * u1\(j,k\)) N
0 T (           ror_cur\(:,j\)=ror_cur\(:,j\) + ror\(:,k\)     * u2\(j,k\) +         &) N
0 T (     &                                 ror_old\(:,k\) * u3\(j,k\)) N
0 T (          enddo;    enddo) N
(3760) # (         endif) N
0 T (!) N
0 T (        else ! not qorient) N
0 T (!) N
0 T (         do j=1,3) N
0 T (           rfl_cur\(:,j\)=s*rfl\(:,j\)+oms*rfl_old\(:,j\)) N
0 T (           rfr_cur\(:,j\)=s*rfr\(:,j\)+oms*rfr_old\(:,j\)) N
0 T (         enddo;) N
0 T (!) N
0 T (        endif ! qorient) N
(3770) # (!    point to combined reference structures) N
0 T (        rfl=>rfl_cur) N
0 T (        rfr=>rfr_cur) N
0 T (        rol=>rol_cur) N
0 T (        ror=>ror_cur) N
0 T (!) N
0 T (       endif ! proj) N
0 T (!) N
0 T (       if \(.not.proj_on .or. fe_curvature\) then) N
0 T (        rfc_cur=0d0;) N
(3780) # (        if \(qorient\) then) N
0 T (         call RMSBestFit\(roc,roi,ow,u\)) N
0 T (         call RMSBestFit\(roc_old,roi,ow,u1\)) N
0 T (!    combine rotated structures) N
0 T (!    left) N
0 T (!) N
0 T (         u=u*s;  u1=u1*oms;) N
0 T (         do k=1,3; do j=1,3) N
0 T (           rfc_cur\(:,j\)=rfc_cur\(:,j\) + rfc\(:,k\)     * u\(j,k\) +          &) N
0 T (     &                                 rfc_old\(:,k\) * u1\(j,k\)) N
(3790) # (         enddo;    enddo) N
0 T (!) N
0 T (         if \(qdiffrot\) then) N
0 T (          roc_cur=0d0;) N
0 T (          do k=1,3; do j=1,3) N
0 T (           roc_cur\(:,j\)=roc_cur\(:,j\) + roc\(:,k\)     * u\(j,k\) +          &) N
0 T (     &                                 roc_old\(:,k\) * u1\(j,k\)) N
0 T (          enddo;    enddo) N
0 T (         endif) N
0 T (!) N
(3800) # (        else ! not qorient) N
(ftsm.ftn) (Page 55/83) (Mar 09, 13 15:34) title
border
/v 1 store
/x0 x v get 2.965278 add sx cw mul add store
/y0 y v get bfs th add sub store
x0 y0 moveto
0 T (!) p n
0 T (         do j=1,3) N
0 T (           rfc_cur\(:,j\)=rfc_cur\(:,j\) + s*rfc\(:,j\)+oms*rfc_old\(:,j\)) N
0 T (         enddo;) N
0 T (!) N
0 T (        endif ! qorient) N
0 T (!    point to combined reference structures) N
0 T (        rfc=>rfc_cur) N
0 T (        roc=>roc_cur) N
(3810) # (!) N
0 T (       endif ! \(not proj\) / curvature) N
0 T (      endif ! qcombine) N
0 T (!) N
0 T (!!                write\(600+me_global,*\) matmul\(ow,rol\) ! correct \(0\)) N
0 T (!!                write\(600+me_global,*\) matmul\(ow,roc\)) N
0 T (!!                write\(600+me_global,*\) matmul\(ow,ror\)) N
0 T (!!                write\(600+me_global,*\) matmul\(ow,roi\)) N
0 T (!) N
0 T (      if \(qorient\) then) N
(3820) # (!     compute rotation matrices \(and gradients, if needed\)) N
0 T (!) N
0 T (       if \(deriv\) then) N
0 T (!%%%%%%%%%%%%%%%%%%% set up indices %%%%%%%%%%%%%%%%%%%) N
0 T (         if \(qgrp\) then) N
0 T (!) N
0 T (          j=ceiling\(1.0d0*norient/SIZE_LOCAL\)) N
0 T (!) N
0 T (          allocate\(orient_displ\(SIZE_LOCAL\), orient_count\(SIZE_LOCAL\)\)) N
0 T (!) N
(3830) # (          do i=1,SIZE_LOCAL) N
0 T (           orient_displ\(i\)=min\(\(i-1\)*j,norient-1\)) N
0 T (           orient_count\(i\)=max\(0,min\(j,norient-j*\(i-1\)\)\)) N
0 T (          enddo) N
0 T (!) N
0 T (          obeg=orient_displ\(ME_LOCAL+1\) + 1) N
0 T (          oend=obeg - 1 + orient_count\(ME_LOCAL+1\)) N
0 T (!) N
0 T (         else ! not qgrp) N
0 T (          obeg=1; oend=norient) N
(3840) # (         endif ! qgrp) N
0 T (!%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%) N
0 T (         if \(proj_on\) then) N
0 T (          allocate\(ugrad \(3,3,3,norient\),                               &) N
0 T (     &             ugrad1\(3,3,3,norient\),                               &) N
0 T (     &             ugrad2\(3,3,3,norient\) \)) N
0 T (!) N
0 T (          call RMSBestFit\(rol,roi,ow,u, obeg,oend,ugrad\)) N
0 T (          call RMSBestFit\(ror,roi,ow,u1,obeg,oend,ugrad1\)) N
0 T (! fe_curvature \(do not need gradient\)) N
(3850) # (          if \(fe_curvature\) call RMSBestFit\(roc,roi,ow,u2\) ! here, u2 correspond) N
0 T (s to the center image) N
0 T (!) N
0 T (         elseif \(qdiffrot\) then ! not proj_on but need derivatives of rotations) N
0 T (          allocate\(ugrad \(3,3,3,norient\)\)) N
0 T (          call RMSBestFit\(roc,roi,ow,u2, obeg,oend,ugrad\)) N
0 T (         else ! no need to calculate gradients) N
0 T (          call RMSBestFit\(roc,roi,ow,u2\)) N
0 T (         endif ! proj_on) N
0 T (!) N
0 T (       else ! not deriv) N
(3860) # (         if \(proj_on\) then) N
0 T (          call RMSBestFit\(rol,roi,ow,u\)) N
0 T (          call RMSBestFit\(ror,roi,ow,u1\)) N
0 T (          if \(fe_curvature\) call RMSBestFit\(roc,roi,ow,u2\)) N
0 T (         else  ! not proj_on) N
0 T (          call RMSBestFit\(roc,roi,ow,u2\) ! orientation between center image and ) N
0 T (current coords) N
0 T (         endif ! proj_on) N
0 T (       endif ! deriv) N
0 T () N
0 T (!     rotate target structures to overlap with current) N
(3870) # (!     conventional way \(might be faster\)) N
0 T (       if \(proj_on .and. fe_curvature\) then) N
(ftsm.ftn) (Page 56/83) (Mar 09, 13 15:34) title
border
grestore
(Printed by surgeon) rhead
(ftsm.ftn) (28/42) (Saturday March 09, 2013) footer
end % of iso1dict
pagesave restore
showpage
%%Page: (57-58) 29
%%BeginPageSetup
/pagesave save def
sh 0 translate 90 rotate
%%EndPageSetup
iso1dict begin
gsave
llx lly 12 add translate
/v 0 store
/x0 x v get 2.965278 add sx cw mul add store
/y0 y v get bfs th add sub store
x0 y0 moveto
0 T (        rfr_rot=0d0;   rfl_rot=0d0;    rfc_rot=0d0;) p n
0 T (        do k=1,3; do j=1,3) N
0 T (           rfl_rot\(:,j\)=rfl_rot\(:,j\)+rfl\(:,k\)*u \(j,k\)) N
0 T (           rfr_rot\(:,j\)=rfr_rot\(:,j\)+rfr\(:,k\)*u1\(j,k\)) N
0 T (           rfc_rot\(:,j\)=rfc_rot\(:,j\)+rfc\(:,k\)*u2\(j,k\)) N
0 T (        enddo;    enddo) N
0 T (!) N
0 T (       elseif \(proj_on\) then) N
(3880) # (        rfr_rot=0d0;   rfl_rot=0d0;) N
0 T (        do k=1,3; do j=1,3) N
0 T (           rfl_rot\(:,j\)=rfl_rot\(:,j\)+rfl\(:,k\)*u \(j,k\)) N
0 T (           rfr_rot\(:,j\)=rfr_rot\(:,j\)+rfr\(:,k\)*u1\(j,k\)) N
0 T (        enddo;    enddo) N
0 T (!) N
0 T (       else  ! not proj_on) N
0 T (        rfc_rot=0d0) N
0 T (        do k=1,3; do j=1,3) N
0 T (           rfc_rot\(:,j\)=rfc_rot\(:,j\)+rfc\(:,k\)*u2\(j,k\)) N
(3890) # (        enddo;    enddo) N
0 T (       endif ! proj_on) N
0 T (!) N
0 T (      else ! not qorient) N
0 T (       if \(proj_on\) then) N
0 T (        rfl_rot=>rfl; rfr_rot=>rfr ! no rotation) N
0 T (        if \(fe_curvature\) rfc_rot=>rfc) N
0 T (       else) N
0 T (        rfc_rot=>rfc) N
0 T (       endif) N
(3900) # (      endif ! qorient) N
0 T (!) N
0 T (      if \(proj_on\) then) N
0 T (!     compute projection \(delta\)) N
0 T (       rho=0d0) N
0 T (       rho1=0d0) N
0 T (       rho2=0d0) N
0 T (       fe_curv=0d0) N
0 T (!) N
0 T (       if \(deriv\) then) N
(3910) # (!) N
0 T (        r1=0d0;) N
0 T (        do k=1,3 ; do j=1,nforced) N
0 T (                     d = rfi\(j,k\)    -rfl_rot\(j,k\)) N
0 T (                     d1= rfr_rot\(j,k\)-rfl_rot\(j,k\)) N
0 T (                     d2= rfc_rot\(j,k\)-rfl_rot\(j,k\) ! for curvature) N
0 T (!) N
0 T (                     rfpar\(j,k\) = d    ! displacement to first reference) N
0 T (                     rfprp\(j,k\) = d-d1 ! displacement to second reference) N
0 T (                     fe_curv = fe_curv + fw\(j\) * \( d1-2d0*d2 \) * \(d-d2 \) ! curva) N
0 T (ture) N
(3920) # (!) N
0 T (                     rho1=rho1 + d1*d1 * fw\(j\) ! denominator in dpar) N
0 T (                     d1 = d1 * fw\(j\)) N
0 T (                     rho =rho  + d *d1        ! numerator) N
0 T (!     COM contribution to gradient for orientation atoms:) N
0 T (                     r1\(k\)=r1\(k\)+d1 ! will only be used if \(qdiffrot\)) N
0 T (!     derivative components from the forcing atoms:) N
0 T (                     ffpar\(j,k\)=d1 !) N
0 T (        enddo ;    enddo) N
0 T (        if \(rho1.le.tol\) then ; rho1=1d0 ; else ; rho1=1d0/rho1 ; endif ! a rath) N
0 T (er unlikely event) N
(3930) # (        dpar=rho*rho1 ! length projection along line connecting left and right s) N
0 T (tructures) N
0 T (        rho=sqrt\(rho1\)! for normalization of perpendicular derivatives) N
0 T (        fe_curv = fe_curv * rho1 * 4d0 ! for internal pts will need x 4 because ) N
0 T (rho1 is \(2\)^2 times the string length increment ds) N
0 T (        omdpar=1d0-dpar) N
0 T (        d5=dpar*omdpar) N
0 T (! the next loop is required for the perpendicular component) N
0 T (        r2=0d0;) N
0 T (        do k=1,3 ; do j=1,nforced) N
0 T (                     d1 = dpar * rfprp\(j,k\) + omdpar * rfpar\(j,k\)) N
0 T (                     rfprp\(j,k\)=d1            ! true perpendicular component) N
(3940) # (                     rho2=rho2 + d1*d1 *fw\(j\) ! squared length of perpendicular ) N
(ftsm.ftn) (Page 57/83) (Mar 09, 13 15:34) title
border
/v 1 store
/x0 x v get 2.965278 add sx cw mul add store
/y0 y v get bfs th add sub store
x0 y0 moveto
0 T (vector) p n
0 T (!) N
0 T (                     d1=d1 * fw\(j\)) N
0 T (!     COM contribution to gradient for orientation atoms:) N
0 T (                     r2\(k\)=r2\(k\) + d1) N
0 T (!     derivative components from the forcing atoms:) N
0 T (                     ffprp\(j,k\)=d1) N
0 T (        enddo ;    enddo) N
0 T (!) N
0 T (        d6=d5+rho1*rho2  ! rho1*rho2 is then normalized perp. component squared) N
(3950) # (        dperp=sqrt\(rho2\) ! unnormalized perp component) N
0 T (        if \(dperp.le.tol\) then; rho2=1d0; else; rho2=1d0/dperp; endif ! a rather) N
0 T ( unlikely event) N
0 T (        dperp=dperp*rho ! normalize perp component) N
0 T (!) N
0 T (        if \(qorient\) then ! this part nonzero only if orientation is on) N
0 T (!) N
0 T (         w=omdpar-dpar ! \(1-2d\)) N
0 T (         if \(qdiffrot\) then) N
0 T (!) N
0 T (          do k=obeg, oend) N
(3960) # (!    COM contribution to gradients on orientation atoms) N
0 T (            fopar\(k,:\)=-r1*ow\(k\) ! parallel) N
0 T (            foprp\(k,:\)=-r2*ow\(k\) ! perpendicular) N
0 T (!    in this loop we also compute the gradients of [transpose\(A\) B ]) N
0 T (            do j=1,3) N
0 T (!    multiplications `by hand') N
0 T (             M=>ugrad\(:,:,j,k\)) N
0 T (             a11=M\(1,1\); a21=M\(2,1\); a31=M\(3,1\);) N
0 T (             a12=M\(1,2\); a22=M\(2,2\); a32=M\(3,2\);) N
0 T (             a13=M\(1,3\); a23=M\(2,3\); a33=M\(3,3\);) N
(3970) # (             M=>ugrad1\(:,:,j,k\)) N
0 T (             b11=M\(1,1\); b21=M\(2,1\); b31=M\(3,1\);) N
0 T (             b12=M\(1,2\); b22=M\(2,2\); b32=M\(3,2\);) N
0 T (             b13=M\(1,3\); b23=M\(2,3\); b33=M\(3,3\);) N
0 T (             M=>ugrad2\(:,:,j,k\)) N
0 T (!) N
0 T (             M\(1,1\)=a11*u1\(1,1\) + a21*u1\(2,1\) + a31*u1\(3,1\) +           &) N
0 T (     &              u\(1,1\)*b11 + u\(2,1\)*b21 + u\(3,1\)*b31) N
0 T (             M\(2,1\)=a12*u1\(1,1\) + a22*u1\(2,1\) + a32*u1\(3,1\) +           &) N
0 T (     &              u\(1,2\)*b11 + u\(2,2\)*b21 + u\(3,2\)*b31) N
(3980) # (             M\(3,1\)=a13*u1\(1,1\) + a23*u1\(2,1\) + a33*u1\(3,1\) +           &) N
0 T (     &              u\(1,3\)*b11 + u\(2,3\)*b21 + u\(3,3\)*b31) N
0 T (!) N
0 T (             M\(1,2\)=a11*u1\(1,2\) + a21*u1\(2,2\) + a31*u1\(3,2\) +           &) N
0 T (     &              u\(1,1\)*b12 + u\(2,1\)*b22 + u\(3,1\)*b32) N
0 T (             M\(2,2\)=a12*u1\(1,2\) + a22*u1\(2,2\) + a32*u1\(3,2\) +           &) N
0 T (     &              u\(1,2\)*b12 + u\(2,2\)*b22 + u\(3,2\)*b32) N
0 T (             M\(3,2\)=a13*u1\(1,2\) + a23*u1\(2,2\) + a33*u1\(3,2\) +           &) N
0 T (     &              u\(1,3\)*b12 + u\(2,3\)*b22 + u\(3,3\)*b32) N
0 T (!) N
(3990) # (             M\(1,3\)=a11*u1\(1,3\) + a21*u1\(2,3\) + a31*u1\(3,3\) +           &) N
0 T (     &              u\(1,1\)*b13 + u\(2,1\)*b23 + u\(3,1\)*b33) N
0 T (             M\(2,3\)=a12*u1\(1,3\) + a22*u1\(2,3\) + a32*u1\(3,3\) +           &) N
0 T (     &              u\(1,2\)*b13 + u\(2,2\)*b23 + u\(3,2\)*b33) N
0 T (             M\(3,3\)=a13*u1\(1,3\) + a23*u1\(2,3\) + a33*u1\(3,3\) +           &) N
0 T (     &              u\(1,3\)*b13 + u\(2,3\)*b23 + u\(3,3\)*b33) N
0 T (! aa: this is what we are doing above:) N
0 T (!            ugrad2\(:,:,j,k\)=matmul\(transpose\(ugrad\(:,:,j,k\)\),u1\)+) N
0 T (!     &                      matmul\(transpose\(u\),ugrad1\(:,:,j,k\)\)) N
0 T (           enddo ! j) N
(4000) # (          enddo ! k) N
0 T (!    contribution from quadratics \(3 terms\)) N
0 T (          do j=1, nforced) N
0 T (           r1=fw\(j\)*rfi\(j,:\)) N
0 T (           r2=fw\(j\)*rfl\(j,:\)) N
0 T (!           r3=d5*r2) N
0 T (           r3=d6*r2 ! for normalized distance) N
0 T (           r2=w*r2) N
0 T (!) N
0 T (           do k=obeg, oend) N
(4010) # (!) N
0 T (            do p=1,3) N
(ftsm.ftn) (Page 58/83) (Mar 09, 13 15:34) title
border
grestore
(Printed by surgeon) rhead
(ftsm.ftn) (29/42) (Saturday March 09, 2013) footer
end % of iso1dict
pagesave restore
showpage
%%Page: (59-60) 30
%%BeginPageSetup
/pagesave save def
sh 0 translate 90 rotate
%%EndPageSetup
iso1dict begin
gsave
llx lly 12 add translate
/v 0 store
/x0 x v get 2.965278 add sx cw mul add store
/y0 y v get bfs th add sub store
x0 y0 moveto
0 T (             do q=1,3) p n
0 T (!) N
0 T (              d =r1\(p\)) N
0 T (              d1=rfl\(j,q\)) N
0 T (              d2=rfr\(j,q\)) N
0 T (              d3=r2\(p\)*d2) N
0 T (              d4=r3\(p\)*d2) N
0 T (! not sure how to compute this more efficiently) N
(4020) # (              fopar\(k,:\)=fopar\(k,:\) +                                   &) N
0 T (     &          d  * \( ugrad1\(p,q,:,k\) * d2 - ugrad\(p,q,:,k\) * d1 \) -   &) N
0 T (     &          d3 * \( ugrad2\(p,q,:,k\) \)) N
0 T (!) N
0 T (              foprp\(k,:\)=foprp\(k,:\) -                                   &) N
0 T (     &          d  * \(   dpar * ugrad1\(p,q,:,k\) * d2 +                  &) N
0 T (     &                 omdpar * ugrad \(p,q,:,k\) * d1 \) +                &) N
0 T (     &          d4 * \( ugrad2\(p,q,:,k\) \)) N
0 T (!) N
0 T (             enddo ! q) N
(4030) # (            enddo ! p) N
0 T (           enddo ! k \(orientation atoms\)) N
0 T (          enddo ! j \(forcing atoms\)) N
0 T (!) N
0 T (!    scale orientation atoms derivatives) N
0 T (          fopar=rho1*fopar) N
0 T (          foprp=rho*rho2*foprp) N
0 T (!) N
0 T (         else ! not qdiffrot) N
0 T (! NOTE: in this case, the forces on the f and o atoms are stored in the same loc) N
0 T (ation, so that below we are adding to the f forces) N
(4040) # (          do k=obeg, oend) N
0 T (!    compute the gradients of [transpose\(A\) B ]) N
0 T (           do j=1,3) N
0 T (!    multiplications `by hand') N
0 T (             M=>ugrad\(:,:,j,k\)) N
0 T (             a11=M\(1,1\); a21=M\(2,1\); a31=M\(3,1\);) N
0 T (             a12=M\(1,2\); a22=M\(2,2\); a32=M\(3,2\);) N
0 T (             a13=M\(1,3\); a23=M\(2,3\); a33=M\(3,3\);) N
0 T (             M=>ugrad1\(:,:,j,k\)) N
0 T (             b11=M\(1,1\); b21=M\(2,1\); b31=M\(3,1\);) N
(4050) # (             b12=M\(1,2\); b22=M\(2,2\); b32=M\(3,2\);) N
0 T (             b13=M\(1,3\); b23=M\(2,3\); b33=M\(3,3\);) N
0 T (             M=>ugrad2\(:,:,j,k\)) N
0 T (!) N
0 T (             M\(1,1\)=a11*u1\(1,1\) + a21*u1\(2,1\) + a31*u1\(3,1\) +           &) N
0 T (     &              u\(1,1\)*b11 + u\(2,1\)*b21 + u\(3,1\)*b31) N
0 T (             M\(2,1\)=a12*u1\(1,1\) + a22*u1\(2,1\) + a32*u1\(3,1\) +           &) N
0 T (     &              u\(1,2\)*b11 + u\(2,2\)*b21 + u\(3,2\)*b31) N
0 T (             M\(3,1\)=a13*u1\(1,1\) + a23*u1\(2,1\) + a33*u1\(3,1\) +           &) N
0 T (     &              u\(1,3\)*b11 + u\(2,3\)*b21 + u\(3,3\)*b31) N
(4060) # (!) N
0 T (             M\(1,2\)=a11*u1\(1,2\) + a21*u1\(2,2\) + a31*u1\(3,2\) +           &) N
0 T (     &              u\(1,1\)*b12 + u\(2,1\)*b22 + u\(3,1\)*b32) N
0 T (             M\(2,2\)=a12*u1\(1,2\) + a22*u1\(2,2\) + a32*u1\(3,2\) +           &) N
0 T (     &              u\(1,2\)*b12 + u\(2,2\)*b22 + u\(3,2\)*b32) N
0 T (             M\(3,2\)=a13*u1\(1,2\) + a23*u1\(2,2\) + a33*u1\(3,2\) +           &) N
0 T (     &              u\(1,3\)*b12 + u\(2,3\)*b22 + u\(3,3\)*b32) N
0 T (!) N
0 T (             M\(1,3\)=a11*u1\(1,3\) + a21*u1\(2,3\) + a31*u1\(3,3\) +           &) N
0 T (     &              u\(1,1\)*b13 + u\(2,1\)*b23 + u\(3,1\)*b33) N
(4070) # (             M\(2,3\)=a12*u1\(1,3\) + a22*u1\(2,3\) + a32*u1\(3,3\) +           &) N
0 T (     &              u\(1,2\)*b13 + u\(2,2\)*b23 + u\(3,2\)*b33) N
0 T (             M\(3,3\)=a13*u1\(1,3\) + a23*u1\(2,3\) + a33*u1\(3,3\) +           &) N
0 T (     &              u\(1,3\)*b13 + u\(2,3\)*b23 + u\(3,3\)*b33) N
0 T (! aa: this is what we are doing above:) N
0 T (!            ugrad2\(:,:,j,k\)=matmul\(transpose\(ugrad\(:,:,j,k\)\),u1\)+) N
0 T (!     &                      matmul\(transpose\(u\),ugrad1\(:,:,j,k\)\)) N
0 T (           enddo ! j) N
0 T (          enddo ! k) N
0 T (!    contribution from quadratics) N
(4080) # (!   aa) N
0 T (!           write\(0,*\) 'U: ', u) N
0 T (!           write\(0,*\) 'U1: ', u1) N
0 T (!) N
(ftsm.ftn) (Page 59/83) (Mar 09, 13 15:34) title
border
/v 1 store
/x0 x v get 2.965278 add sx cw mul add store
/y0 y v get bfs th add sub store
x0 y0 moveto
0 T (          do j=1, nforced) p n
0 T (           r2=fw\(j\)*rfl\(j,:\)) N
0 T (!           r3=d5*r2) N
0 T (           r3=d6*r2) N
0 T (           r2=w*r2) N
0 T (!) N
(4090) # (           do k=obeg, oend) N
0 T (!) N
0 T (            do p=1,3) N
0 T (             do q=1,3) N
0 T (              d3=r2\(p\)*rfr\(j,q\)) N
0 T (              d4=r3\(p\)*rfr\(j,q\)) N
0 T (              fopar\(k,:\)=fopar\(k,:\) - d3 * ugrad2\(p,q,:,k\) ! parallel) N
0 T (              foprp\(k,:\)=foprp\(k,:\) + d4 * ugrad2\(p,q,:,k\) ! perpendicular) N
0 T (             enddo ! q) N
0 T (            enddo ! p) N
(4100) # (           enddo ! k \(orientation atoms\)) N
0 T (          enddo ! j \(forcing atoms\)) N
0 T (!) N
0 T (         endif ! qdiffrot) N
0 T (!) N
0 T (!    NOTE: when diffrot false, fopar and ffpar point to the same thing; gather b) N
0 T (elow should still work fine) N
0 T (         if \(qgrp\) then ! gather orientation forces) N
0 T (          if \(mod\(SIZE_LOCAL,2\).eq.0.and.allgather_method.eq.hypercube_\) then ! ) N
0 T (use hypercube allgather) N
0 T (           call hypercube_allgatherv\(                                   &) N
0 T (     &         fopar, orient_count, orient_displ, MPI_RTMD_TYPE,        &) N
(4110) # (     &         MPI_COMM_LOCAL, ierror, ME_LOCAL, SIZE_LOCAL \)) N
0 T (           call hypercube_allgatherv\(                                   &) N
0 T (     &         foprp, orient_count, orient_displ, MPI_RTMD_TYPE,        &) N
0 T (     &         MPI_COMM_LOCAL, ierror, ME_LOCAL, SIZE_LOCAL \)) N
0 T (          elseif \(allgather_method.eq.allgather_\) then) N
0 T (! ALLGATHER) N
0 T (           call MPI_ALLGATHERV\(MPI_IN_PLACE,                            &) N
0 T (     &         orient_count\(ME_LOCAL+1\),MPI_RTMD_TYPE,                  &) N
0 T (     &         fopar, orient_count, orient_displ, MPI_RTMD_TYPE,        &) N
0 T (     &         MPI_COMM_LOCAL, ierror\)) N
(4120) # (           call MPI_ALLGATHERV\(MPI_IN_PLACE,                            &) N
0 T (     &         orient_count\(ME_LOCAL+1\),MPI_RTMD_TYPE,                  &) N
0 T (     &         foprp, orient_count, orient_displ, MPI_RTMD_TYPE,        &) N
0 T (     &         MPI_COMM_LOCAL, ierror\)) N
0 T (          elseif \(allgather_method.eq.gather_bcast_.or.mod\(SIZE_LOCAL,2\).eq.1\) t) N
0 T (hen ! default method when cores are not in multiples of two) N
0 T (! GATHER + BCAST) N
0 T (           if \(ME_LOCAL.eq.0\) then) N
0 T (            call MPI_GATHERV\(MPI_IN_PLACE,                              &) N
0 T (     &         orient_count\(ME_LOCAL+1\),MPI_RTMD_TYPE,                  &) N
0 T (     &         fopar, orient_count, orient_displ, MPI_RTMD_TYPE,        &) N
(4130) # (     &         0, MPI_COMM_LOCAL, ierror\)) N
0 T (            call MPI_GATHERV\(MPI_IN_PLACE,                             &) N
0 T (     &         orient_count\(ME_LOCAL+1\),MPI_RTMD_TYPE,                  &) N
0 T (     &         foprp, orient_count, orient_displ, MPI_RTMD_TYPE,        &) N
0 T (     &         0, MPI_COMM_LOCAL, ierror\)) N
0 T (           else) N
0 T (            call MPI_GATHERV\(fopar\(obeg,1\),                             &) N
0 T (     &         orient_count\(ME_LOCAL+1\),MPI_RTMD_TYPE,                  &) N
0 T (     &         fopar, orient_count, orient_displ, MPI_RTMD_TYPE,        &) N
0 T (     &         0, MPI_COMM_LOCAL, ierror\)) N
(4140) # (            call MPI_GATHERV\(foprp\(obeg,1\),                             &) N
0 T (     &         orient_count\(ME_LOCAL+1\),MPI_RTMD_TYPE,                  &) N
0 T (     &         foprp, orient_count, orient_displ, MPI_RTMD_TYPE,        &) N
0 T (     &         0, MPI_COMM_LOCAL, ierror\)) N
0 T (           endif ! ME_LOCAL) N
0 T (! send to slaves) N
0 T (           __BROADCAST_LOCAL_8B\(r_o\(1,1,fpar\),6*norient\) ! perp follows par in m) N
0 T (emory, so send both by doubling data count) N
0 T (          endif ! hypercube_allgather) N
0 T (         endif ! qgrp) N
0 T (!) N
(4150) # (!    free memory) N
0 T (         deallocate\(ugrad, ugrad1, ugrad2\)) N
0 T (         if \(qgrp\) deallocate\(orient_count, orient_displ\)) N
(ftsm.ftn) (Page 60/83) (Mar 09, 13 15:34) title
border
grestore
(Printed by surgeon) rhead
(ftsm.ftn) (30/42) (Saturday March 09, 2013) footer
end % of iso1dict
pagesave restore
showpage
%%Page: (61-62) 31
%%BeginPageSetup
/pagesave save def
sh 0 translate 90 rotate
%%EndPageSetup
iso1dict begin
gsave
llx lly 12 add translate
/v 0 store
/x0 x v get 2.965278 add sx cw mul add store
/y0 y v get bfs th add sub store
x0 y0 moveto
0 T (!) p n
0 T (        endif ! qorient) N
0 T (!    scale forcing atoms derivatives) N
0 T (        ffpar=rho1*ffpar) N
0 T (        ffprp=rho*rho2*ffprp) N
0 T (!-------------------------------------------------------------------------------) N
0 T (---------------) N
0 T (       else ! derivative calculation not requested) N
(4160) # (         do k=1,3 ; do j=1,nforced) N
0 T (                    d = rfi\(j,k\)    -rfl_rot\(j,k\)) N
0 T (                    d1= rfr_rot\(j,k\)-rfl_rot\(j,k\)) N
0 T (                    d2= rfc_rot\(j,k\)-rfl_rot\(j,k\) ! for curvature) N
0 T (!) N
0 T (                    rfpar\(j,k\) = d    ! displacement to first reference) N
0 T (                    rfprp\(j,k\) = d-d1 ! displacement to second reference) N
0 T (                    fe_curv = fe_curv + fw\(j\) * \( d1-2d0*d2 \) * \(d-d2 \) ! curvat) N
0 T (ure) N
0 T (!) N
0 T (                    rho =rho  + d *d1 *fw\(j\) ! numerator) N
(4170) # (                    rho1=rho1 + d1*d1 *fw\(j\) ! denominator) N
0 T (         enddo ;    enddo) N
0 T (         if \(rho1.le.tol\) then ; rho1=1d0 ; else ; rho1=1d0/rho1 ; endif ! a ver) N
0 T (y unlikely event) N
0 T (         dpar=rho*rho1 ! length projection along line connecting left and right ) N
0 T (structures) N
0 T (         fe_curv = fe_curv * rho1 * 4d0 ! for internal pts, will need x 4 becaus) N
0 T (e rho1 is \(2\)^2 times the string length increment ds) N
0 T (         omdpar=1d0-dpar) N
0 T (! the next loop is required for the perpendicular component) N
0 T (         do k=1,3 ; do j=1,nforced) N
0 T (                     d1 = dpar * rfprp\(j,k\) + omdpar * rfpar\(j,k\) !) N
0 T (                     rfprp\(j,k\)=d1                           ! true perpendicula) N
0 T (r component) N
(4180) # (                     rho2=rho2 + d1*d1 *fw\(j\)                ! length of perpend) N
0 T (icular vector) N
0 T (         enddo ;    enddo) N
0 T (!) N
0 T (        dperp=sqrt\(rho2*rho1\) ! normalized perpendicular length) N
0 T (!) N
0 T (       endif ! deriv) N
0 T (!ccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccc) N
0 T (cccccccccccccccccccccc) N
0 T (      else ! not proj_on) N
0 T (!    NOTE: will put forces into parallel force array; fperp is unused) N
0 T (!    compute the RMSD) N
(4190) # (        drms=rmsd\(rfi, rfc_rot, fw\)) N
0 T (!) N
0 T (        if \(deriv\) then) N
0 T (!    to scale derivatives by 1/drms) N
0 T (         if \(drms.gt.tol\) then) N
0 T (           rho=1d0/drms) N
0 T (         else) N
0 T (           rho=1d0 ! avoid singularity at near zero separation) N
0 T (         endif) N
0 T (!) N
(4200) # (         if \(qdiffrot.and.qorient\) then) N
0 T (!     compute COM contribution to gradient for orientation atoms:) N
0 T (!     and add forces on forcing atoms) N
0 T (          r1\(:\)=0d0;) N
0 T (          do k=1, nforced) N
0 T (           ffpar\(k,:\) = rho * fw\(k\) * \(rfi\(k,:\)-rfc_rot\(k,:\)\)) N
0 T (           r1\(:\)      = r1\(:\) + ffpar\(k,:\)) N
0 T (          enddo) N
0 T (          do j=obeg, oend) N
0 T (           fopar\(j,:\)=-r1\(:\)*ow\(j\)) N
(4210) # (          enddo) N
0 T (!) N
0 T (          do j=1, nforced) N
0 T (           r2=fw\(j\)*rfi\(j,:\)  * rho) N
0 T (           do k=obeg, oend) N
0 T (            do p=1,3) N
0 T (             do q=1,3) N
0 T (              d=r2\(p\)*rfc\(j,q\)) N
(ftsm.ftn) (Page 61/83) (Mar 09, 13 15:34) title
border
/v 1 store
/x0 x v get 2.965278 add sx cw mul add store
/y0 y v get bfs th add sub store
x0 y0 moveto
0 T (!) p n
0 T (              fopar\(k,:\)=fopar\(k,:\) - ugrad\(p,q,:,k\) * d) N
(4220) # (             enddo ! q) N
0 T (            enddo ! p) N
0 T (           enddo ! k \(orientation atoms\)) N
0 T (          enddo ! j \(forcing atoms\)) N
0 T (!) N
0 T (          deallocate\(ugrad\)) N
0 T (!) N
0 T (          if \(qgrp\) then ! gather orientation forces) N
0 T (           if \(mod\(SIZE_LOCAL,2\).eq.0.and.allgather_method.eq.hypercube_\) then !) N
0 T ( use hypercube allgather) N
0 T (            call hypercube_allgatherv\(                                   &) N
(4230) # (     &         fopar, orient_count, orient_displ, MPI_RTMD_TYPE,        &) N
0 T (     &         MPI_COMM_LOCAL, ierror, ME_LOCAL, SIZE_LOCAL \)) N
0 T (           elseif \(allgather_method.eq.allgather_\) then) N
0 T (!ALLGATHER) N
0 T (            call MPI_ALLGATHERV\(MPI_IN_PLACE,                           &) N
0 T (     &         orient_count\(ME_LOCAL+1\),MPI_RTMD_TYPE,                  &) N
0 T (     &         fopar, orient_count, orient_displ, MPI_RTMD_TYPE,        &) N
0 T (     &         MPI_COMM_LOCAL, ierror\)) N
0 T (           elseif \(allgather_method.eq.gather_bcast_.or.mod\(SIZE_LOCAL,2\).eq.1\) ) N
0 T (then ! default method when cores are not in multiples of two) N
0 T (! GATHER + BCAST) N
(4240) # (            if \(ME_LOCAL.eq.0\) then) N
0 T (             call MPI_GATHERV\(MPI_IN_PLACE,                             &) N
0 T (     &         orient_count\(ME_LOCAL+1\),MPI_RTMD_TYPE,                  &) N
0 T (     &         fopar, orient_count, orient_displ, MPI_RTMD_TYPE,        &) N
0 T (     &         0, MPI_COMM_LOCAL, ierror\)) N
0 T (            else) N
0 T (             call MPI_GATHERV\(fopar\(obeg,1\),                             &) N
0 T (     &         orient_count\(ME_LOCAL+1\),MPI_RTMD_TYPE,                  &) N
0 T (     &         fopar, orient_count, orient_displ, MPI_RTMD_TYPE,        &) N
0 T (     &         0, MPI_COMM_LOCAL, ierror\)) N
(4250) # (            endif) N
0 T (! send to slaves) N
0 T (            __BROADCAST_LOCAL_8B\(fopar,3*norient\)) N
0 T (           endif) N
0 T (          endif ! qgrp) N
0 T (!cccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccc) N
0 T (         else ! not qdiffrot .or. not qorient) N
0 T (!     apply forces to the forcing atoms) N
0 T (          do j=1,nforced) N
0 T (           ffpar\(j,:\)=rho * fw\(j\) * \(rfi\(j,:\)-rfc_rot\(j,:\)\)) N
(4260) # (          enddo) N
0 T (         endif ! qdiffrot.and.qorient) N
0 T (!) N
0 T (         if \(qgrp\) deallocate\(orient_count, orient_displ\)) N
0 T (        endif ! deriv) N
0 T (!) N
0 T (      endif ! proj_on) N
0 T (!) N
0 T (      end subroutine ftsm_calc) N
0 T (!) N
(4270) # (!ccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccc) N
0 T (      subroutine ftsm_addforce\(fx,fy,fz,addforce\)) N
0 T () N
0 T (      __IMPNONE) N
0 T (!    note: boundary points require special treatment: x0.25 force constant and x) N
0 T (2 dperp0) N
0 T (!    this is because distance between replicas is halved for the endpoints, but ) N
0 T (still corresponds to 1 \(as for the inner pts\)) N
0 T (      float :: fx\(:\), fy\(:\), fz\(:\)) N
0 T (      float, pointer, dimension\(:,:\) :: ffpar, ffprp, fopar, foprp) N
0 T (      float :: pre1, pre2) N
0 T (      float :: fac, fac2, t, omt) N
(4280) # (      int :: i, ind) N
0 T (      bool :: addforce  ! whether to add forces to running force average) N
0 T (      bool :: qendpoint) N
0 T (!) N
0 T (      qendpoint=\(mestring.eq.0.or.mestring.eq.nstring-1\)) N
0 T (!) N
0 T (      ffpar=>r_f\(:,:,fpar\);  ffprp=>r_f\(:,:,fperp\) ! forcing forces) N
(ftsm.ftn) (Page 62/83) (Mar 09, 13 15:34) title
border
grestore
(Printed by surgeon) rhead
(ftsm.ftn) (31/42) (Saturday March 09, 2013) footer
end % of iso1dict
pagesave restore
showpage
%%Page: (63-64) 32
%%BeginPageSetup
/pagesave save def
sh 0 translate 90 rotate
%%EndPageSetup
iso1dict begin
gsave
llx lly 12 add translate
/v 0 store
/x0 x v get 2.965278 add sx cw mul add store
/y0 y v get bfs th add sub store
x0 y0 moveto
0 T (      fopar=>r_o\(:,:,fpar\);  foprp=>r_o\(:,:,fperp\) ! orientation forces) p n
0 T (!) N
0 T (      if \(addforce\) then) N
(4290) # (       num_force_samples=num_force_samples+1) N
0 T (       omt=1d0/num_force_samples) N
0 T (       t=1d0-omt) N
0 T (      else) N
0 T (       t=1d0; omt=0d0) N
0 T (      endif) N
0 T (! lowering the force constants for endpoints is necessary to get the equivalent ) N
0 T (fluctuations) N
0 T (! can think of either scaling the force constants, or scaling the distances \(and) N
0 T ( gradients\) by 0.5 and keeping the same force constans) N
0 T (! perpendicular component normalized by physical interimage dist. \(which is halv) N
0 T (ed for endpoints\); so it appears too large, and is halved below) N
0 T (!) N
(4300) # (! for the internal points, integrating the force through one inter-image distanc) N
0 T (e is equivalent to multiplying) N
0 T (! the force by 0.5 \(0.5 is the scaled distance between adjacent inner images\)) N
0 T (! for the endpoints, the distance between adjacent images is 1, so take the forc) N
0 T (e \(scaled down\) and multiply by 1) N
0 T (      if \(qendpoint\) then ; fac=0.5d0 ; fac2=1d0 ; fe_curv=0d0 ! no curvature at) N
0 T ( endpoints) N
0 T (                     else ; fac=1.0d0 ; fac2=0.5d0) N
0 T (      endif) N
0 T (!) N
0 T (      if \(proj_on\) then) N
0 T (! restraint force parallel to string) N
0 T (       pre1 = kpara * fac * fac * \( dpar-dpar0 \)                ! scale down the) N
0 T ( force constant of endpoints \(one for d, one for gradients\)) N
(4310) # (       pre2 = kperp * fac * max   \( fac * dperp - dperp0, 0d0 \) ! ignore negativ) N
0 T (e values; dperp0 criterion in inner-replica d-metric) N
0 T (! update force: for inner points, multiply force by 0.5; for boundary use 1d0; t) N
0 T (he FE is then simply the sum of the forces along the string) N
0 T (       avforce\(1\) = t * avforce\(1\) + omt * pre1 * fac2 ! force acting on dpar0 i) N
0 T (s pre1 \(integrate negative to get f.e.\)) N
0 T (       avforce\(2\) = t * avforce\(2\) - omt * pre1 * fac2 * \(fe_curv * fac * fac\) !) N
0 T ( force due to curvature \(note: either fac=1 or curv=0\)) N
0 T (       avforce\(3\) = t * avforce\(3\) + omt * pre2 * fac2 ! force acting on derp0 i) N
0 T (s pre2 \( NOTE: this is not a true force along the path\)) N
0 T (!                                                      ! even if I am treating i) N
0 T (t here as such; it is an orthogonal `correction') N
0 T (       if \(pre2 .gt. 0d0\) then) N
0 T (!) N
0 T (        do i=1, nforced) N
0 T (         ind=iatom_f\(i\)) N
(4320) # (         fx\(ind\) = fx\(ind\) + pre1 * ffpar\(i,1\) + pre2 * ffprp\(i,1\)) N
0 T (         fy\(ind\) = fy\(ind\) + pre1 * ffpar\(i,2\) + pre2 * ffprp\(i,2\)) N
0 T (         fz\(ind\) = fz\(ind\) + pre1 * ffpar\(i,3\) + pre2 * ffprp\(i,3\)) N
0 T (        enddo) N
0 T (        if \(qorient.and.qdiffrot\) then) N
0 T (         do i=1, norient) N
0 T (          ind=iatom_o\(i\)) N
0 T (          fx\(ind\) = fx\(ind\) + pre1 * fopar\(i,1\) + pre2 * foprp\(i,1\)) N
0 T (          fy\(ind\) = fy\(ind\) + pre1 * fopar\(i,2\) + pre2 * foprp\(i,2\)) N
0 T (          fz\(ind\) = fz\(ind\) + pre1 * fopar\(i,3\) + pre2 * foprp\(i,3\)) N
(4330) # (         enddo) N
0 T (        endif) N
0 T (       else ! parallel force only) N
0 T (        do i=1, nforced) N
0 T (         ind=iatom_f\(i\)) N
0 T (         fx\(ind\) = fx\(ind\) + pre1 * ffpar\(i,1\)) N
0 T (         fy\(ind\) = fy\(ind\) + pre1 * ffpar\(i,2\)) N
0 T (         fz\(ind\) = fz\(ind\) + pre1 * ffpar\(i,3\)) N
0 T (        enddo) N
0 T (        if \(qorient.and.qdiffrot\) then) N
(4340) # (         do i=1, norient) N
0 T (          ind=iatom_o\(i\)) N
0 T (          fx\(ind\) = fx\(ind\) + pre1 * fopar\(i,1\)) N
0 T (          fy\(ind\) = fy\(ind\) + pre1 * fopar\(i,2\)) N
0 T (          fz\(ind\) = fz\(ind\) + pre1 * fopar\(i,3\)) N
0 T (         enddo) N
0 T (        endif) N
(ftsm.ftn) (Page 63/83) (Mar 09, 13 15:34) title
border
/v 1 store
/x0 x v get 2.965278 add sx cw mul add store
/y0 y v get bfs th add sub store
x0 y0 moveto
0 T (       endif) p n
0 T (      else ! .not.  proj_on) N
0 T (       pre1 = krms * \( drms-drms0 \)) N
(4350) # (! update force \(which will not likely be used\)) N
0 T (!) N
0 T (       avforce\(1\) = t * avforce\(1\) + omt * pre1 ! force acting on dpar0 is pre1 ) N
0 T (\(integrate negative to get f.e.\)) N
0 T (!) N
0 T (       do i=1, nforced) N
0 T (        ind=iatom_f\(i\)) N
0 T (        fx\(ind\) = fx\(ind\) + pre1 * ffpar\(i,1\)) N
0 T (        fy\(ind\) = fy\(ind\) + pre1 * ffpar\(i,2\)) N
0 T (        fz\(ind\) = fz\(ind\) + pre1 * ffpar\(i,3\)) N
0 T (       enddo) N
(4360) # (       if \(qorient.and.qdiffrot\) then) N
0 T (        do i=1, norient) N
0 T (          ind=iatom_o\(i\)) N
0 T (          fx\(ind\) = fx\(ind\) + pre1 * fopar\(i,1\)) N
0 T (          fy\(ind\) = fy\(ind\) + pre1 * fopar\(i,2\)) N
0 T (          fz\(ind\) = fz\(ind\) + pre1 * fopar\(i,3\)) N
0 T (        enddo) N
0 T (       endif) N
0 T (!) N
0 T (      endif) N
(4370) # (!) N
0 T (      end subroutine ftsm_addforce) N
0 T (!ccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccc) N
0 T (      subroutine ftsm_evolve\(x,y,z\)) N
0 T (      __IMPNONE) N
0 T (      float :: x\(:\), y\(:\), z\(:\)) N
0 T (      int :: ind, j, k) N
0 T (      float :: t, omt) N
0 T (      float :: u \(3,3\)= RESHAPE\( \(/1,0,0,0,1,0,0,0,1/\), \(/3,3/\) \) ! rotation mat) N
0 T (rix) N
0 T (      float, pointer :: r_com\(:\), ow\(:\), fw\(:\)) N
(4380) # (      float, pointer, dimension\(:,:\) :: roi, roc, rfi, rfc) N
0 T (!) N
0 T (      roi=>r_o\(:,:,instant\)) N
0 T (      ow=>orientWeights) N
0 T (      rfi=>r_f\(:,:,instant\)) N
0 T (      r_com=>rcom\(:,instant\)) N
0 T (!) N
0 T (      roc=>r_o\(:,:,center_new\)) N
0 T (      rfc=>r_f\(:,:,center_new\)) N
0 T (!) N
(4390) # (      if \(evolve_aver_on\) then) N
0 T (       if \(num_evolve_samples.lt.max_evolve_samples.or.                 &) N
0 T (     &     max_evolve_samples.le.0\)                                     &) N
0 T (     &                num_evolve_samples=num_evolve_samples+1) N
0 T (       omt=1d0/num_evolve_samples) N
0 T (       t=1d0-omt) N
0 T (      elseif \(evolve_expo_on\) then) N
0 T (       t=evolve_expo_mem) N
0 T (       omt=1d0-t) N
0 T (      endif) N
(4400) # (!) N
0 T (      if \(.not. restrained_on\) then ! load coordinates, unless restraints on, in) N
0 T ( which case, they are loaded) N
0 T (!) N
0 T (       do k=1,nforced) N
0 T (        ind=iatom_f\(k\)) N
0 T (        rfi\(k,1\)=x\(ind\)) N
0 T (        rfi\(k,2\)=y\(ind\)) N
0 T (        rfi\(k,3\)=z\(ind\)) N
0 T (       enddo) N
0 T (!) N
(4410) # (       if \(qorient\) then) N
0 T (        if \(qdiffrot\) then) N
0 T (         do k=1,norient) N
0 T (          ind=iatom_o\(k\)) N
0 T (          roi\(k,1\)=x\(ind\)) N
0 T (          roi\(k,2\)=y\(ind\)) N
0 T (          roi\(k,3\)=z\(ind\)) N
(ftsm.ftn) (Page 64/83) (Mar 09, 13 15:34) title
border
grestore
(Printed by surgeon) rhead
(ftsm.ftn) (32/42) (Saturday March 09, 2013) footer
end % of iso1dict
pagesave restore
showpage
%%Page: (65-66) 33
%%BeginPageSetup
/pagesave save def
sh 0 translate 90 rotate
%%EndPageSetup
iso1dict begin
gsave
llx lly 12 add translate
/v 0 store
/x0 x v get 2.965278 add sx cw mul add store
/y0 y v get bfs th add sub store
x0 y0 moveto
0 T (         enddo) p n
0 T (        endif ! qdiffrot \(otherwise rfi and roi point to the same thing\)) N
0 T (!) N
(4420) # (!       translate forced atoms to centroid) N
0 T (        r_com\(:\)=0d0;) N
0 T (        do j=1,3 ; do k=1, norient;) N
0 T (          r_com\(j\) = r_com\(j\)+ow\(k\)*roi\(k,j\)) N
0 T (        enddo ;    enddo) N
0 T (!) N
0 T (        rfi\(:,1\)=rfi\(:,1\)-r_com\(1\)) N
0 T (        rfi\(:,2\)=rfi\(:,2\)-r_com\(2\)) N
0 T (        rfi\(:,3\)=rfi\(:,3\)-r_com\(3\)) N
0 T (!) N
(4430) # (        if \(qdiffrot\) then) N
0 T (         roi\(:,1\)=roi\(:,1\)-r_com\(1\)) N
0 T (         roi\(:,2\)=roi\(:,2\)-r_com\(2\)) N
0 T (         roi\(:,3\)=roi\(:,3\)-r_com\(3\)) N
0 T (        endif ! qdiffrot) N
0 T (!) N
0 T (       endif ! qorient) N
0 T (      endif ! .not. restrained on) N
0 T (!) N
0 T (      if \(qorient\) then ! orient w.r.t. center image) N
(4440) # (       call RMSBestFit\(roc,roi,ow,u\) ! superpose roc onto roi) N
0 T (       rfc = t * rfc + omt * matmul\(rfi, u\) !          apply transpose \(=inverse) N
0 T (\) of u to rfi) N
0 T (      else) N
0 T (!    evolve image using instantaneous structure) N
0 T (       rfc = t * rfc + omt *rfi) N
0 T (      endif) N
0 T (!    NOTE that if the forcing set overlaps with orientation set, we also need to) N
0 T (!    update some atom coords in the orientation set; this is done elsewhere to s) N
0 T (ave CPU time) N
0 T (!    NOTE also that rfi is not rotated) N
0 T (      end subroutine ftsm_evolve) N
(4450) # (!cccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccc) N
0 T (      subroutine ftsm_compute_fe_fd\(\)) N
0 T (      __DEP_MULTICOM       !__CHARMM_ONLY##MULTICOM) N
0 T (      __DEP_MPI ) N
0 T (      __DEP_NUMBER) N
0 T (      __IMPNONE) N
0 T (!) N
0 T (#include "../../mpitype.def") N
0 T (!) N
0 T (      float :: avforces\(3,nstring\), qcurv) N
(4460) # (      int :: ierror, i) N
0 T (      character\(len=20\) :: whoami) N
0 T (      data whoami /' FTSM_COMPUTE_FE_FD>'/) N
0 T (!) N
0 T (      if \(proj_on\) then) N
0 T (       if \(MPI_COMM_STRNG.ne.MPI_COMM_NULL.and.                         &) N
0 T (     &                         SIZE_STRNG.gt.1\) then) N
0 T () N
0 T (        call MPI_GATHER\(avforce, 3, mpifloat,               &) N
0 T (     &                 avforces, 3, mpifloat,               &) N
(4470) # (     &                 0, MPI_COMM_STRNG, ierror\)) N
0 T (        fe\(1\)=0d0) N
0 T (!) N
0 T (        if \(fe_curvature\) then ; qcurv=one ; else ; qcurv=zero ; endif) N
0 T (!) N
0 T (        do i=2, nstring) N
0 T (         fe\(i\)  =fe\(i-1\) - half * \( avforces\(1,i-1\) + avforces\(1,i\) + qcurv*\( av) N
0 T (forces\(2,i-1\) + avforces\(2,i\) \) \)) N
0 T (!         fe\(i-1\)=fe\(i-1\) - \( avforces\(2,i-1\) - avforces\(2,1\) \)) N
0 T (        enddo) N
0 T (!        fe\(nstring\)=fe\(nstring\) - \( avforces\(2,nstring\) - avforces\(2,1\)\)) N
(4480) # (       endif ! qroot) N
0 T (      endif ! proj_on) N
0 T (!) N
0 T (!      send free energy to slaves -- no need at present time) N
0 T (!       if \(MPI_COMM_LOCAL.ne.MPI_COMM_NULL.and.) N
0 T (!     &                         SIZE_LOCAL.gt.1\) then) N
0 T (!        call __BROADCAST_LOCAL_8B\(fe,nstring\)) N
(ftsm.ftn) (Page 65/83) (Mar 09, 13 15:34) title
border
/v 1 store
/x0 x v get 2.965278 add sx cw mul add store
/y0 y v get bfs th add sub store
x0 y0 moveto
0 T (!       endif) p n
0 T (!) N
0 T (      end subroutine ftsm_compute_fe_fd) N
(4490) # (!ccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccc) N
0 T (      subroutine ftsm_save_com\(c\)) N
0 T (      __DEP_NUMBER) N
0 T (      __IMPNONE) N
0 T (!      float :: r_com\(3\)) N
0 T (      float :: w) N
0 T (      float, pointer :: ro_com\(:\)) N
0 T (      int, optional :: c) N
0 T (      int :: col, i) N
0 T (      float, pointer, dimension\(:,:\) :: ro, rf) N
(4500) # (!) N
0 T (! compute and save COM of current reference structure) N
0 T (!) N
0 T (      if \(qorient\) then) N
0 T (!) N
0 T (        if \(present\(c\)\) then ; col=c ; else ; col=center ; endif) N
0 T (        if \(col.le.num_sets.and.col.gt.0\) then) N
0 T (         ro_com=>rcom\(:,col\)) N
0 T (!) N
0 T (!         r_com=ro_com ! save old COM) N
(4510) # (         ro_com=zero   ! will recompute COM using new weights) N
0 T (         ro  => r_o\(:,:,col\)) N
0 T (         rf  => r_f\(:,:,col\)) N
0 T (!       compute new COM) N
0 T (         do i=1, norient) N
0 T (          w=orientWeights\(i\)) N
0 T (          ro_com\(1\)=ro_com\(1\) + w * ro\(i,1\)) N
0 T (          ro_com\(2\)=ro_com\(2\) + w * ro\(i,2\)) N
0 T (          ro_com\(3\)=ro_com\(3\) + w * ro\(i,3\)) N
0 T (         enddo) N
(4520) # (! translate orientation structure to centroid) N
0 T (         ro\(:,1\)=ro\(:,1\) - ro_com\(1\)) N
0 T (         ro\(:,2\)=ro\(:,2\) - ro_com\(2\)) N
0 T (         ro\(:,3\)=ro\(:,3\) - ro_com\(3\)) N
0 T (! translate forcing structure to centroid) N
0 T (         if \(qdiffrot\) then) N
0 T (          rf\(:,1\)=rf\(:,1\) - ro_com\(1\)) N
0 T (          rf\(:,2\)=rf\(:,2\) - ro_com\(2\)) N
0 T (          rf\(:,3\)=rf\(:,3\) - ro_com\(3\)) N
0 T (         endif) N
(4530) # (! centroid relative to original coords:) N
0 T (!         ro_com = ro_com + r_com ! this is no longer useful; VO 1/2013) N
0 T (       endif) N
0 T (      endif) N
0 T (!) N
0 T (      end subroutine ftsm_save_com) N
0 T (!) N
0 T (!ccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccc) N
0 T (cccccccccccccccccc) N
0 T (      subroutine ftsm_swap_bc\(qsendo\)) N
0 T (      __DEP_MULTICOM       !__CHARMM_ONLY##MULTICOM) N
(4540) # (      __DEP_MPI ) N
0 T (      __DEP_NUMBER) N
0 T (      __IMPNONE) N
0 T (      bool :: qroot, qslave, qsend_o) N
0 T (      bool, optional :: qsendo) N
0 T (      float, pointer, dimension\(:,:\) :: rlf, rcf, rrf, rlo, rco, rro) N
0 T (      int :: me, ierror) N
0 T (      int4mpi :: stat\(MPI_STATUS_SIZE\)) N
0 T (!) N
0 T (      qroot=MPI_COMM_STRNG.ne.MPI_COMM_NULL) N
(4550) # (      qslave=MPI_COMM_LOCAL.ne.MPI_COMM_NULL.and.SIZE_LOCAL.gt.1) N
0 T (      if \(present\(qsendo\)\) then) N
0 T (        qsend_o=qsendo.and.qorient.and.qdiffrot) N
0 T (      else) N
0 T (        qsend_o=qorient.and.qdiffrot) N
0 T (      endif) N
0 T (!) N
0 T (! note that I can avoid sending the orientation coordinates, since they only evo) N
0 T (lve through the forced atoms) N
(ftsm.ftn) (Page 66/83) (Mar 09, 13 15:34) title
border
grestore
(Printed by surgeon) rhead
(ftsm.ftn) (33/42) (Saturday March 09, 2013) footer
end % of iso1dict
pagesave restore
showpage
%%Page: (67-68) 34
%%BeginPageSetup
/pagesave save def
sh 0 translate 90 rotate
%%EndPageSetup
iso1dict begin
gsave
llx lly 12 add translate
/v 0 store
/x0 x v get 2.965278 add sx cw mul add store
/y0 y v get bfs th add sub store
x0 y0 moveto
0 T (!) p n
0 T (!) N
(4560) # (      me=mestring+1 ! slaves need me too) N
0 T (!) N
0 T (      if \(qroot.and.nstring.gt.1\) then) N
0 T (        rcf=>r_f\(:,:,center\)) N
0 T (        rlf=>r_f\(:,:,left\)) N
0 T (        rrf=>r_f\(:,:,right\)) N
0 T (!) N
0 T (        if \(qdiffrot\) then) N
0 T (         rco=>r_o\(:,:,center\)) N
0 T (         rlo=>r_o\(:,:,left\)) N
(4570) # (         rro=>r_o\(:,:,right\)) N
0 T (        endif) N
0 T (!     replicas send to the right and receive from the left) N
0 T (        if \(me.eq.1\) then) N
0 T (         call MPI_SEND\(rcf, 3*nforced, MPI_DOUBLE_PRECISION,            &) N
0 T (     &                 me, 0, MPI_COMM_STRNG, ierror\)) N
0 T (         if \(qsend_o\)                                                   &) N
0 T (     &    call MPI_SEND\(rco, 3*norient, MPI_DOUBLE_PRECISION,           &) N
0 T (     &                 me, 1, MPI_COMM_STRNG, ierror\)) N
0 T (!) N
(4580) # (        elseif \(me.eq.nstring\) then) N
0 T (         call MPI_RECV\(rlf, 3*nforced, MPI_DOUBLE_PRECISION,            &) N
0 T (     &                 mestring-1, 0, MPI_COMM_STRNG, stat, ierror\)) N
0 T (         if \(qsend_o\)                                                   &) N
0 T (     &    call MPI_RECV\(rlo, 3*norient, MPI_DOUBLE_PRECISION,           &) N
0 T (     &                 mestring-1, 1, MPI_COMM_STRNG, stat, ierror\)) N
0 T (        else ! inner replicas) N
0 T (         call MPI_SENDRECV\(rcf, 3*nforced, MPI_DOUBLE_PRECISION, me, 0, &) N
0 T (     &                     rlf, 3*nforced, MPI_DOUBLE_PRECISION,        &) N
0 T (     &                     mestring-1, 0, MPI_COMM_STRNG, stat,ierror\)) N
(4590) # (         if \(qsend_o\)                                                   &) N
0 T (     &    call MPI_SENDRECV\(rco, 3*norient, MPI_DOUBLE_PRECISION, me, 1,&) N
0 T (     &                      rlo, 3*norient, MPI_DOUBLE_PRECISION,       &) N
0 T (     &                      mestring-1, 1, MPI_COMM_STRNG, stat,ierror\)) N
0 T (        endif ! me.eq.1) N
0 T (!    replicas send to the left and receive from the right) N
0 T (        if \(me.eq.nstring\) then) N
0 T (         call MPI_SEND\(rcf, 3*nforced, MPI_DOUBLE_PRECISION,            &) N
0 T (     &                 mestring-1, 0, MPI_COMM_STRNG, ierror\)) N
0 T (         if \(qsend_o\)                                                   &) N
(4600) # (     &    call MPI_SEND\(rco, 3*norient, MPI_DOUBLE_PRECISION,           &) N
0 T (     &                 mestring-1, 1, MPI_COMM_STRNG, ierror\)) N
0 T (!) N
0 T (        elseif \(me.eq.1\) then) N
0 T (         call MPI_RECV\(rrf, 3*nforced, MPI_DOUBLE_PRECISION,            &) N
0 T (     &                 me, 0, MPI_COMM_STRNG, stat, ierror\)) N
0 T (         if \(qsend_o\)                                                   &) N
0 T (     &    call MPI_RECV\(rro, 3*norient, MPI_DOUBLE_PRECISION,           &) N
0 T (     &                 me, 1, MPI_COMM_STRNG, stat, ierror\)) N
0 T (        else ! inner replicas) N
(4610) # (         call MPI_SENDRECV\(rcf, 3*nforced, MPI_DOUBLE_PRECISION,        &) N
0 T (     &                     mestring-1, 0,                               &) N
0 T (     &                     rrf, 3*nforced, MPI_DOUBLE_PRECISION,        &) N
0 T (     &                     me, 0, MPI_COMM_STRNG, stat,ierror\)) N
0 T (         if \(qsend_o\)                                                   &) N
0 T (     &     call MPI_SENDRECV\(rco, 3*norient, MPI_DOUBLE_PRECISION,      &) N
0 T (     &                     mestring-1, 1,                               &) N
0 T (     &                     rro, 3*norient, MPI_DOUBLE_PRECISION,        &) N
0 T (     &                     me, 1, MPI_COMM_STRNG, stat,ierror\)) N
0 T (        endif ! me.eq.nstring) N
(4620) # (      endif ! qroot & nstring > 1) N
0 T (!) N
0 T (!    send to slaves) N
0 T (      if \(qslave\) then) N
0 T (       __BROADCAST_LOCAL_8B\(r_f\(:,:,left\),9*nforced\) ! send three sets at once \() N
0 T (see ftsm_var\)) N
0 T (       if \(qsend_o\) __BROADCAST_LOCAL_8B\(r_o\(:,:,left\),9*norient\)) N
0 T (      endif) N
0 T (!) N
0 T (!     duplicate endpoints for force calculations:) N
0 T (!) N
(ftsm.ftn) (Page 67/83) (Mar 09, 13 15:34) title
border
/v 1 store
/x0 x v get 2.965278 add sx cw mul add store
/y0 y v get bfs th add sub store
x0 y0 moveto
(4630) # (      if \(me.eq.1\) then) p n
0 T (       r_f\(:,:,left\)=r_f\(:,:,center\)) N
0 T (       if \(qdiffrot\) then) N
0 T (        r_o\(:,:,left\)=r_o\(:,:,center\)) N
0 T (       endif) N
0 T (!) N
0 T (      elseif \(me.eq.nstring\) then) N
0 T (       r_f\(:,:,right\)=r_f\(:,:,center\)) N
0 T (       if \(qdiffrot\) then) N
0 T (        r_o\(:,:,right\)=r_o\(:,:,center\)) N
(4640) # (       endif) N
0 T (      endif) N
0 T (!) N
0 T (!    update any orientation coordinates that have changes) N
0 T (      if \(qdiffrot\) call ftsm_update_overlap_coor\(ithree\)) N
0 T (!) N
0 T (      end subroutine ftsm_swap_bc) N
0 T (!ccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccc) N
0 T (cccccccccccccccccc) N
0 T (      subroutine ftsm_mini\(x, y, z &) N
0 T (#ifdef __CHARMM) N
(4650) # (     &                    ,wmain, nbond_data, image_data     &) N
0 T (     &                    ,fx, fy, fz                        & ) N
0 T (#endif) N
0 T (     &                    \)) N
0 T () N
0 T (      __DEP_PARSER ) N
0 T (      __DEP_MULTICOM       !__CHARMM_ONLY##MULTICOM) N
0 T (      __DEP_OUTPUT) N
0 T (      __DEP_NUMBER) N
0 T (#ifdef __CHARMM) N
(4660) # (      use chm_kinds, only : wrnlev) N
0 T (      use chm_types, only : nonbondDataStructure, imageDataStructure) N
0 T (      use datstr, only : DUPLDT_nbond, DUPLDT_image) N
0 T (      use energym, only : eprop, eterm, epot) N
0 T (      use shake, only : qholo ! for turning off shake during the \(unphysical\) mi) N
0 T (nimization) N
0 T (!      use facts_module, only : FactsDataStructure, FCTBND, FCTBNDC, fctaim, fct) N
0 T (run ! an extremely ugly workaround for compatibility with FACTS) N
0 T (#endif) N
0 T (!) N
0 T (      __IMPNONE) N
0 T (      float :: x\(:\), y\(:\), z\(:\)) N
(4670) # (#ifdef __CHARMM) N
0 T (! to restore forces : some energy functions will access x and dx directly \(sigh\)) N
0 T (      float, optional :: fx\(:\), fy\(:\), fz\(:\)) N
0 T (      float :: fxt\(size\(x,1\)\), fyt\(size\(x,1\)\), fzt\(size\(x,1\)\)) N
0 T (      bool :: saveforces) N
0 T (      int :: wrnlev_) N
0 T (#endif) N
0 T (      float :: dummy\(0\)) N
0 T (!) N
0 T (! local variables) N
(4680) # (      character\(len=11\) :: whoami) N
0 T (      bool :: qprint) N
0 T (      bool :: qshake) N
0 T (!) N
0 T (      float :: u\(3,3\)= RESHAPE\( \(/1,0,0,0,1,0,0,0,1/\), \(/3,3/\) \) ! rotation matr) N
0 T (ix) N
0 T (      float, pointer :: r_com\(:\), ow\(:\)) N
0 T (      float, pointer, dimension\(:,:\) :: roi, roc, rfc, roc_rot, rfc_rot) N
0 T (      float :: w) N
0 T (!) N
0 T (      int :: i, j, k, ierror) N
(4690) # (!) N
0 T (! temporary coordinate and force arrays) N
0 T (      float :: xt\(size\(x,1\)\)) N
0 T (      float :: yt\(size\(x,1\)\)) N
0 T (      float :: zt\(size\(x,1\)\)) N
0 T (      float :: dxt\(size\(x,1\)\)) N
0 T (      float :: dyt\(size\(x,1\)\)) N
0 T (      float :: dzt\(size\(x,1\)\)) N
0 T (      int :: stringatoms\(size\(x,1\)\)) N
(ftsm.ftn) (Page 68/83) (Mar 09, 13 15:34) title
border
grestore
(Printed by surgeon) rhead
(ftsm.ftn) (34/42) (Saturday March 09, 2013) footer
end % of iso1dict
pagesave restore
showpage
%%Page: (69-70) 35
%%BeginPageSetup
/pagesave save def
sh 0 translate 90 rotate
%%EndPageSetup
iso1dict begin
gsave
llx lly 12 add translate
/v 0 store
/x0 x v get 2.965278 add sx cw mul add store
/y0 y v get bfs th add sub store
x0 y0 moveto
0 T (      int :: natom, ind, iter, nbath, nfree, ibeg) p n
(4700) # (!    other variables for minimization) N
0 T (      float :: oonbath, oonfree, gradnorm, mini_step, norm_step, energy_new, ene) N
0 T (rgy_old) N
0 T (!) N
0 T ( __DECLARE_MSGBUF) N
0 T (!) N
0 T (#ifdef __CHARMM) N
0 T (! CHARMM - dependent energy evaluation routines/vars) N
0 T (      float :: wmain\(:\), wt\(size\(x,1\)\)) N
0 T (      type\(nonbondDataStructure\) :: nbond_data) N
0 T (      type\(imageDataStructure\)   :: image_data) N
(4710) # (!      type\(FactsDataStructure\)   :: fctbnd_copy, fctbndc_copy   !##FACTS) N
0 T (      float :: eprop_save\(size\(eprop\)\), eterm_save\(size\(eterm\)\) ! arrays to save) N
0 T ( energy values \(not certain how essential this is\)) N
0 T (!) N
0 T (      interface ! to subroutines which compute gradients) N
0 T (!) N
0 T (!*************************************************************) N
0 T (! straight from CHARMM code v. c37a1) N
0 T ( SUBROUTINE ENERGY\(X, Y, Z, DX, DY, DZ, BNBND, BIMAG, &) N
0 T (     NDD1, DD1, QSECD, ICALL\)) N
0 T (  !-----------------------------------------------------------------------) N
(4720) # (  !       CALCULATES THE ENERGY AND FORCES FOR A STRUCTURE.) N
0 T (  !     The total energy and individual energy contributions are) N
0 T (  !     returned in the ENERGY.FCM common block.) N
0 T (  !) N
0 T (  !      X,Y,Z         - Coordinates) N
0 T (  !      DX,DY,DZ      - Forces returned) N
0 T (  !      BNBND,BIMAG   - Nonbond and Images data structure bases) N
0 T (  !      NDD1            The dimension of the second derivative matrix.) N
0 T (  !      DD1           - Second derivative arrays) N
0 T (  !      QSECD         - Second derivative flags) N
(4730) # (  !      ICALL         - ECALLS increment) N
0 T (!) N
0 T (  use chm_types, only : nonbondDataStructure, imageDataStructure) N
0 T (  use chm_kinds) N
0 T (!) N
0 T (  real\(chm_real\) X\(*\),Y\(*\),Z\(*\)) N
0 T (  real\(chm_real\) DX\(*\),DY\(*\),DZ\(*\)) N
0 T (!) N
0 T (  type\(nonbondDataStructure\) BNBND) N
0 T (  type\(imageDataStructure\) BIMAG) N
(4740) # (!) N
0 T (  INTEGER NDD1, ICALL) N
0 T (  real\(chm_real\) DD1\(*\)) N
0 T (  LOGICAL QSECD) N
0 T (!) N
0 T ( END SUBROUTINE ENERGY) N
0 T (!***************************************************************) N
0 T (      SUBROUTINE UPDECI\(ISTEP,X,Y,Z,WMAIN, &) N
0 T (                        LDYNAM,XOLD,YOLD,ZOLD,VX,VY,VZ\)) N
0 T (!-----------------------------------------------------------------------) N
(4750) # (! By Stefan Fischer.) N
0 T (!) N
0 T (! Makes the decision whether to update the various non-bond lists.) N
0 T (!) N
0 T (! UPDECI\(\) is controled through INBFRQ \(in CONTRL.FCM\)) N
0 T (!  and ISTEP as follows :) N
0 T (!) N
0 T (! If INBFRQ = +n --> non-bond list is performed when MOD\(ISTEP,n\) == 0) N
0 T (!                    Image and H-bond lists are updated according to) N
0 T (!                    IMGFRQ and IHBFRQ.) N
(4760) # (! If INBFRQ =  0 --> non-bond list update is not performed. Image and) N
0 T (!                    H-bond lists are updated according to IMGFRQ) N
0 T (!                    and IHBFRQ.) N
0 T (! If INBFRQ = -n --> non-bond list is updated when necessary \(heuristic) N
0 T (!                    test\) if n=-1. If n < -1, then update-testing is done) N
0 T (!                    every n steps \(not recommended !\). Heuristic will) N
0 T (!                    be used for Image and H-bond list-updates, but only) N
0 T (!                    if IMGFRQ and IHBFRQ are also = -1 .) N
0 T (!) N
0 T (! Passed variables) N
(ftsm.ftn) (Page 69/83) (Mar 09, 13 15:34) title
border
/v 1 store
/x0 x v get 2.965278 add sx cw mul add store
/y0 y v get bfs th add sub store
x0 y0 moveto
(4770) # (      use chm_kinds) p n
0 T (!) N
0 T (      INTEGER ISTEP) N
0 T (      real\(chm_real\) X\(*\),Y\(*\),Z\(*\),WMAIN\(*\)) N
0 T (      INTEGER LDYNAM) N
0 T (      real\(chm_real\) XOLD\(*\),YOLD\(*\),ZOLD\(*\),VX\(*\),VY\(*\),VZ\(*\)) N
0 T (!) N
0 T (      END SUBROUTINE UPDECI) N
0 T (!***************************************************************) N
0 T (!) N
(4780) # (      end interface) N
0 T (#endif) N
0 T (!) N
0 T (      data whoami/' FTSM_MINI>'/) N
0 T (!) N
0 T (! check if the user has made an initialization call to the minimizer) N
0 T (!) N
0 T (      if \(.not.ftsm_mini_initialized\) then) N
0 T (       __WRN\( whoami,'NO MINIMIZATION OPTIONS SELECTED. NOTHING DONE.'\)) N
0 T (       return) N
(4790) # (      endif) N
0 T (!) N
0 T (!      qroot =MPI_COMM_STRNG.ne.MPI_COMM_NULL.and.SIZE_STRNG.gt.1) N
0 T (!      qslave=MPI_COMM_LOCAL.ne.MPI_COMM_NULL.and.SIZE_LOCAL.gt.1) N
0 T (      qprint=MPI_COMM_STRNG.ne.MPI_COMM_NULL.and.ME_STRNG.eq.0) N
0 T (!) N
0 T (#ifdef __CHARMM) N
0 T (! initialize nbond data structure on first use) N
0 T (      if \(.not.ftsm_nbond_image_data_initialized\) then) N
0 T (       call DUPLDT_nbond\(ftsm_nbond_copy, nbond_data\)) N
(4800) # (       call DUPLDT_image\(ftsm_image_copy, image_data\)) N
0 T (       ftsm_nbond_image_data_initialized=.true.) N
0 T (      endif) N
0 T (#endif) N
0 T (!) N
0 T (      if \(qprint\) then) N
0 T (       write\(_MSGBUF,691\) whoami ; __PRINTL\(_MSGBUF,5\)) N
0 T (      endif) N
0 T ( 691  format\(/A,' PERFORMING STRING MINIMIZATION.'\)) N
0 T (!) N
(4810) # (!    create coordinate arrays) N
0 T (!) N
0 T (      ow=>orientWeights) N
0 T (      r_com=>rcom\(:,instant\)) N
0 T (      roi=>r_o\(:,:,instant\)) N
0 T (      roc=>r_o\(:,:,center\)) N
0 T (      rfc=>r_f\(:,:,center\)) N
0 T (      roc_rot=>r_o\(:,:,center_rot\)) N
0 T (      rfc_rot=>r_f\(:,:,center_rot\)) N
0 T (      natom=size\(x,1\)) N
(4820) # (! write\(0,*\) 'natom:', natom) N
0 T (! use instantaneous coordinates to fill missing coords) N
0 T (! save forces:) N
0 T (#ifdef __CHARMM) N
0 T (      saveforces=present\(fx\).and.present\(fy\).and.present\(fz\)) N
0 T (      if \(saveforces\) then ; do i=1, natom ;  fxt\(i\)=fx\(i\) ;  fyt\(i\)=fy\(i\) ;  fz) N
0 T (t\(i\)=fz\(i\) ; enddo ; endif) N
0 T (#endif) N
0 T (!) N
0 T (      do i=1, natom ;  xt\(i\)=x\(i\) ;  yt\(i\)=y\(i\) ;  zt\(i\)=z\(i\) ; enddo) N
0 T (      stringatoms=0;) N
(4830) # (! copy string coordinates to corresponding instantaneous coordinates) N
0 T (! first, align string coordinates with the instantaneous coordinates, if needed) N
0 T (!) N
0 T (      if \(.not. restrained_on\) then ! load coordinates, unless restraints on, in) N
0 T ( which case, they are loaded) N
0 T (!) N
0 T (       if \(qorient\) then) N
0 T (        do k=1,norient) N
0 T (          ind=iatom_o\(k\)) N
0 T (          roi\(k,1\)=xt\(ind\)) N
0 T (          roi\(k,2\)=yt\(ind\)) N
(4840) # (          roi\(k,3\)=zt\(ind\)) N
(ftsm.ftn) (Page 70/83) (Mar 09, 13 15:34) title
border
grestore
(Printed by surgeon) rhead
(ftsm.ftn) (35/42) (Saturday March 09, 2013) footer
end % of iso1dict
pagesave restore
showpage
%%Page: (71-72) 36
%%BeginPageSetup
/pagesave save def
sh 0 translate 90 rotate
%%EndPageSetup
iso1dict begin
gsave
llx lly 12 add translate
/v 0 store
/x0 x v get 2.965278 add sx cw mul add store
/y0 y v get bfs th add sub store
x0 y0 moveto
0 T (        enddo) p n
0 T (!) N
0 T (!       translate forced atoms to centroid) N
0 T (!) N
0 T (        r_com\(:\)=0d0;) N
0 T (        do j=1,3 ; do k=1, norient;) N
0 T (          r_com\(j\) = r_com\(j\)+ow\(k\)*roi\(k,j\)) N
0 T (        enddo ;    enddo) N
0 T (!) N
(4850) # (        roi\(:,1\)=roi\(:,1\)-r_com\(1\)) N
0 T (        roi\(:,2\)=roi\(:,2\)-r_com\(2\)) N
0 T (        roi\(:,3\)=roi\(:,3\)-r_com\(3\)) N
0 T (!) N
0 T (       endif ! qorient) N
0 T (      endif ! .not. restrained on) N
0 T (!) N
0 T (      if \(qorient\) then ! orient center image w.r.t. instantaneous coordinates) N
0 T (       call RMSBestFit\(roi,roc,ow,u\) ! superpose roi onto roc \(assuming string i) N
0 T (s COM-free\)) N
0 T (!) N
(4860) # (       rfc_rot = matmul\(rfc, u\) !          apply transpose \(=inverse\) of u to rf) N
0 T (c) N
0 T (       rfc_rot\(:,1\)=rfc_rot\(:,1\)+r_com\(1\)) N
0 T (       rfc_rot\(:,2\)=rfc_rot\(:,2\)+r_com\(2\)) N
0 T (       rfc_rot\(:,3\)=rfc_rot\(:,3\)+r_com\(3\)) N
0 T (!) N
0 T (       if \(qdiffrot\) then) N
0 T (        roc_rot = matmul\(roc, u\) !          apply transpose \(=inverse\) of u to r) N
0 T (oc) N
0 T (!     move to COM of the instantaneous coordinates) N
0 T (        roc_rot\(:,1\)=roc_rot\(:,1\)+r_com\(1\)) N
0 T (        roc_rot\(:,2\)=roc_rot\(:,2\)+r_com\(2\)) N
(4870) # (        roc_rot\(:,3\)=roc_rot\(:,3\)+r_com\(3\)) N
0 T (!     insert orientation coordinates into all-atom coordinate array) N
0 T (        do k=1,norient) N
0 T (         ind=iatom_o\(k\)) N
0 T (         x\(ind\)=roc_rot\(k,1\)) N
0 T (         y\(ind\)=roc_rot\(k,2\)) N
0 T (         z\(ind\)=roc_rot\(k,3\)) N
0 T (         stringatoms\(ind\)=-1 ! these coordinates are fixed through all minimizat) N
0 T (ion \(unless they are also forced atoms\)) N
0 T (        enddo) N
0 T (       endif ! qdiffrot) N
(4880) # (      else ! no orientation) N
0 T (       rfc_rot=>rfc) N
0 T (      endif ! qorient) N
0 T (!) N
0 T (!     insert forced coordinates into all-atom coordinate array) N
0 T (!) N
0 T (      do k=1,nforced) N
0 T (       ind=iatom_f\(k\)) N
0 T (       x\(ind\)=rfc_rot\(k,1\)) N
0 T (       y\(ind\)=rfc_rot\(k,2\)) N
(4890) # (       z\(ind\)=rfc_rot\(k,3\)) N
0 T (       stringatoms\(ind\)=1 ! these coordinates will be minimized \(but at the end\)) N
0 T (      enddo) N
0 T (!) N
0 T (! perform minimization with string coordinates fixed) N
0 T (!) N
0 T (#ifdef __CHARMM) N
0 T (      wt=wmain) N
0 T (      qshake=qholo ; if \(qholo\) qholo=.false. ! turn off shake for speed) N
0 T (      eprop_save=eprop ; eterm_save=eterm  ! save current energy value, since CH) N
0 T (ARMM uses it to determine stability) N
(4900) # (      wrnlev_=wrnlev ! save warning level) N
0 T (#endif) N
0 T (!) N
0 T (      mini_step=ftsm_mini_step ! initial minimization step) N
0 T (!) N
0 T (      nbath=ithree*count\(stringatoms.eq.0\) ;  if \(nbath.gt.0\) oonbath=one/nbath ) N
0 T (; ) N
0 T (      nfree=ithree*count\(stringatoms.ne.-1\) ; if \(nfree.gt.0\) oonfree=one/nfree ) N
0 T (; ) N
(ftsm.ftn) (Page 71/83) (Mar 09, 13 15:34) title
border
/v 1 store
/x0 x v get 2.965278 add sx cw mul add store
/y0 y v get bfs th add sub store
x0 y0 moveto
0 T (!) p n
0 T (      if \(nbath.eq.0\) then ; ibeg = ftsm_mini_bath_iterations+1 ; else ; ibeg=1 ) N
0 T (; endif ! skip bath iterations is there are no bath atoms) N
0 T (!) N
(4910) # (      do iter=ibeg, ftsm_mini_bath_iterations+ftsm_mini_forced_iterations) N
0 T (#ifdef __CHARMM) N
0 T (       call UPDECI\(iter, x, y, z, wt, 0, dummy, dummy, dummy, dummy, dummy, dumm) N
0 T (y\) ! following calling format in SD) N
0 T (       call ENERGY\(x, y, z, dxt, dyt, dzt, ftsm_nbond_copy, ftsm_image_copy, 0, ) N
0 T (dummy, .false., 1\)) N
0 T (       energy_new=eprop\(epot\)) N
0 T (#endif) N
0 T (! SD hardwired for now:) N
0 T (!    adaptive minimization strategy  \(a la CHARMM\)) N
0 T (!) N
0 T (       if \(iter .eq. ftsm_mini_bath_iterations+1\) then) N
(4920) # (__CHARMM_ONLY        wrnlev=wrnlev_ ! restore old level \(works only is siter>0\)) N
0 T (        mini_step=ftsm_mini_step                                        ! reset ) N
0 T (step for string minimization) N
0 T (       elseif \(energy_new .lt. energy_old .and. iter .gt. ibeg\) then ) N
0 T (__CHARMM_ONLY        wrnlev=-1 ! turn off warnings for the first part of minimiz) N
0 T (ation) N
0 T (        mini_step=mini_step*1.5d0 ! accelerate) N
0 T (       else) N
0 T (        mini_step=mini_step*half  ! decelerate) N
0 T (       endif) N
0 T (       energy_old=energy_new) N
0 T (!) N
(4930) # (! note that the evolution is not parallel) N
0 T (       if \(iter.le.ftsm_mini_bath_iterations\) then) N
0 T (! first, minimize the instantaneous atoms with the string atoms fixed) N
0 T (        where\(stringatoms.ne.0\) ! zero out gradients corresponding to string ato) N
0 T (ms) N
0 T (         dxt=zero ; dyt=zero; dzt=zero) N
0 T (        endwhere) N
0 T (        gradnorm  = sqrt \( \( dot_product\(dxt,dxt\)+dot_product\(dyt,dyt\)+dot_produ) N
0 T (ct\(dzt,dzt\) \) * oonbath\)) N
0 T (!) N
0 T (       else ! now minimize all coordinates except the string orientation coordin) N
0 T (ates) N
0 T (        where\(stringatoms.eq.-1\) ! gradients on orientation atoms zero-ed) N
(4940) # (         dxt=zero ; dyt=zero; dzt=zero) N
0 T (        endwhere) N
0 T (        gradnorm  = sqrt \( \( dot_product\(dxt,dxt\)+dot_product\(dyt,dyt\)+dot_produ) N
0 T (ct\(dzt,dzt\) \) * oonfree\)) N
0 T (       endif) N
0 T (!) N
0 T (       norm_step = mini_step/max\(gradnorm,__ERRTOL\) ! using __ERRTOL might lead ) N
0 T (to oscillations) N
0 T (       x = x - norm_step * dxt) N
0 T (       y = y - norm_step * dyt) N
0 T (       z = z - norm_step * dzt) N
0 T (!) N
(4950) # (!write\(0,*\) 'step: ', iter, mini_step, norm_step, oonfree, oonbath) N
0 T (!) N
0 T (      enddo ! iterations) N
0 T (!) N
0 T (!     put minimized string coordinates back into r_f array) N
0 T (      do k=1,nforced) N
0 T (        ind=iatom_f\(k\)) N
0 T (        rfc_rot\(k,1\)=x\(ind\)) N
0 T (        rfc_rot\(k,2\)=y\(ind\)) N
0 T (        rfc_rot\(k,3\)=z\(ind\)) N
(4960) # (      enddo) N
0 T (!) N
0 T (      if \(qorient\) then) N
0 T (        u=transpose\(u\)) N
0 T (        rfc = matmul\(rfc_rot, u\) ! rotate back for consistency) N
0 T (        if \(qdiffrot\) call ftsm_update_overlap_coor\(ione\) ! update orientation c) N
0 T (oordinates) N
0 T (      endif) N
0 T (!) N
0 T (      call ftsm_save_com\(\) !   remove COM from center coordinates) N
(ftsm.ftn) (Page 72/83) (Mar 09, 13 15:34) title
border
grestore
(Printed by surgeon) rhead
(ftsm.ftn) (36/42) (Saturday March 09, 2013) footer
end % of iso1dict
pagesave restore
showpage
%%Page: (73-74) 37
%%BeginPageSetup
/pagesave save def
sh 0 translate 90 rotate
%%EndPageSetup
iso1dict begin
gsave
llx lly 12 add translate
/v 0 store
/x0 x v get 2.965278 add sx cw mul add store
/y0 y v get bfs th add sub store
x0 y0 moveto
0 T (!) p n
(4970) # (      do i=1, natom ;  x\(i\)=xt\(i\) ;  y\(i\)=yt\(i\) ;  z\(i\)=zt\(i\) ; enddo ! restore ) N
0 T (original coordinates) N
0 T (!) N
0 T (#ifdef __CHARMM) N
0 T (      if \(saveforces\) then ; do i=1, natom ;  fx\(i\)=fxt\(i\) ;  fy\(i\)=fyt\(i\) ;  fz) N
0 T (\(i\)=fzt\(i\) ; enddo ; endif ! restore forces) N
0 T (      eprop=eprop_save ; eterm=eterm_save  ! restore current energy values) N
0 T (      qholo=qshake) N
0 T (      wrnlev=wrnlev_) N
0 T (#endif) N
0 T (!) N
0 T (      end subroutine ftsm_mini) N
(4980) # (!ccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccc) N
0 T (cccccccccccccccccc) N
0 T (      subroutine ftsm_lift\(x, y, z\)) N
0 T (!) N
0 T (      __DEP_PARSER ) N
0 T (      __DEP_MULTICOM       !__CHARMM_ONLY##MULTICOM) N
0 T (      __DEP_OUTPUT) N
0 T (      __DEP_NUMBER) N
0 T (!) N
0 T (      __IMPNONE) N
0 T (      float :: x\(:\), y\(:\), z\(:\)) N
(4990) # (!) N
0 T (! local variables) N
0 T (      character\(len=11\) :: whoami) N
0 T (!) N
0 T (      float :: u\(3,3\)= RESHAPE\( \(/1,0,0,0,1,0,0,0,1/\), \(/3,3/\) \) ! rotation matr) N
0 T (ix) N
0 T (      float, pointer :: r_com\(:\), ow\(:\)) N
0 T (      float, pointer, dimension\(:,:\) :: roi, roc, rfc, roc_rot, rfc_rot) N
0 T (      float :: w) N
0 T (!) N
0 T (      int :: i, j, k, ierror) N
(5000) # (!) N
0 T (      int :: natom, ind, iter) N
0 T (!) N
0 T ( __DECLARE_MSGBUF) N
0 T (!) N
0 T (      data whoami/' FTSM_LIFT>'/) N
0 T (!) N
0 T (! check if the user has made an initialization call to the minimizer) N
0 T (!) N
0 T (      if \(.not.ftsm_check\(qorient\)\) return) N
(5010) # (!) N
0 T (!    create coordinate arrays) N
0 T (!) N
0 T (      ow=>orientWeights) N
0 T (      r_com=>rcom\(:,instant\)) N
0 T (      roi=>r_o\(:,:,instant\)) N
0 T (      roc=>r_o\(:,:,center\)) N
0 T (      rfc=>r_f\(:,:,center\)) N
0 T (      roc_rot=>r_o\(:,:,center_rot\)) N
0 T (      rfc_rot=>r_f\(:,:,center_rot\)) N
(5020) # (      natom=size\(x,1\)) N
0 T (! copy string coordinates to corresponding instantaneous coordinates) N
0 T (! first, align string coordinates with the instantaneous coordinates, if needed) N
0 T (!) N
0 T (      if \(qorient\) then) N
0 T (        do k=1,norient) N
0 T (          ind=iatom_o\(k\)) N
0 T (          roi\(k,1\)=x\(ind\)) N
0 T (          roi\(k,2\)=y\(ind\)) N
0 T (          roi\(k,3\)=z\(ind\)) N
(5030) # (        enddo) N
0 T (!) N
0 T (!       translate forced atoms to centroid) N
0 T (!) N
0 T (        r_com\(:\)=0d0;) N
0 T (        do j=1,3 ; do k=1, norient;) N
0 T (          r_com\(j\) = r_com\(j\)+ow\(k\)*roi\(k,j\)) N
0 T (        enddo ;    enddo) N
(ftsm.ftn) (Page 73/83) (Mar 09, 13 15:34) title
border
/v 1 store
/x0 x v get 2.965278 add sx cw mul add store
/y0 y v get bfs th add sub store
x0 y0 moveto
0 T (!) p n
0 T (        roi\(:,1\)=roi\(:,1\)-r_com\(1\)) N
(5040) # (        roi\(:,2\)=roi\(:,2\)-r_com\(2\)) N
0 T (        roi\(:,3\)=roi\(:,3\)-r_com\(3\)) N
0 T (!) N
0 T (      endif ! qorient) N
0 T (!) N
0 T (      if \(qorient\) then ! orient center image w.r.t. instantaneous coordinates) N
0 T (       call RMSBestFit\(roi,roc,ow,u\) ! superpose roi onto roc \(assuming string i) N
0 T (s COM-free\)) N
0 T (!) N
0 T (       rfc_rot = matmul\(rfc, u\) !          apply transpose \(=inverse\) of u to rf) N
0 T (c) N
0 T (       rfc_rot\(:,1\)=rfc_rot\(:,1\)+r_com\(1\)) N
(5050) # (       rfc_rot\(:,2\)=rfc_rot\(:,2\)+r_com\(2\)) N
0 T (       rfc_rot\(:,3\)=rfc_rot\(:,3\)+r_com\(3\)) N
0 T (!) N
0 T (       if \(qdiffrot\) then) N
0 T (!     move to COM of the instantaneous coordinates) N
0 T (        roc_rot = matmul\(roc, u\) !          apply transpose \(=inverse\) of u to r) N
0 T (oc) N
0 T (        roc_rot\(:,1\)=roc_rot\(:,1\)+r_com\(1\)) N
0 T (        roc_rot\(:,2\)=roc_rot\(:,2\)+r_com\(2\)) N
0 T (        roc_rot\(:,3\)=roc_rot\(:,3\)+r_com\(3\)) N
0 T (!     insert orientation coordinates into all-atom coordinate array) N
(5060) # (        do k=1,norient) N
0 T (         ind=iatom_o\(k\)) N
0 T (         x\(ind\)=roc_rot\(k,1\)) N
0 T (         y\(ind\)=roc_rot\(k,2\)) N
0 T (         z\(ind\)=roc_rot\(k,3\)) N
0 T (        enddo) N
0 T (       endif ! qdiffrot) N
0 T (      else ! no orientation) N
0 T (       rfc_rot=>rfc) N
0 T (      endif ! qorient) N
(5070) # (!) N
0 T (!     insert forced coordinates into all-atom coordinate array) N
0 T (!) N
0 T (      do k=1,nforced) N
0 T (        ind=iatom_f\(k\)) N
0 T (        x\(ind\)=rfc_rot\(k,1\)) N
0 T (        y\(ind\)=rfc_rot\(k,2\)) N
0 T (        z\(ind\)=rfc_rot\(k,3\)) N
0 T (      enddo) N
0 T (!) N
(5080) # (      end subroutine ftsm_lift) N
0 T (!ccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccc) N
0 T (ccccccccccccccccc) N
0 T (      subroutine ftsm_repa\(qbcast\)) N
0 T (      __DEP_PARSER ) N
0 T (      __DEP_MULTICOM       !__CHARMM_ONLY##MULTICOM) N
0 T (      __DEP_MPI ) N
0 T (      __DEP_OUTPUT) N
0 T (      __DEP_NUMBER) N
0 T (      __DEP_CONST) N
0 T (!) N
(5090) # (      __IMPNONE) N
0 T (! local variables) N
0 T (      character\(len=11\) :: whoami) N
0 T (      bool :: qroot, qslave, qprint) N
0 T (      bool, optional :: qbcast) N
0 T (      float :: u\(3,3\)= RESHAPE\( \(/one,zero,zero,zero,one,zero,zero,zero,one/\), \() N
0 T (/3,3/\) \) ! rotation matrix) N
0 T (      float, pointer :: r_o_com\(:\) ! COM vector) N
0 T (      float, pointer, dimension\(:,:\) :: ro, rf, ro1, rf1) N
0 T (      float :: w) N
0 T (      float :: weights\(nforced,3\) ! assuming nforced is reasonably defined) N
(5100) # (      int4mpi :: RTYPE=MPI_DOUBLE_PRECISION) N
0 T (      int4mpi :: stat\(MPI_STATUS_SIZE\)) N
0 T (      int :: i, ierror) N
0 T (!) N
0 T ( __DECLARE_MSGBUF) N
0 T (!) N
(ftsm.ftn) (Page 74/83) (Mar 09, 13 15:34) title
border
grestore
(Printed by surgeon) rhead
(ftsm.ftn) (37/42) (Saturday March 09, 2013) footer
end % of iso1dict
pagesave restore
showpage
%%Page: (75-76) 38
%%BeginPageSetup
/pagesave save def
sh 0 translate 90 rotate
%%EndPageSetup
iso1dict begin
gsave
llx lly 12 add translate
/v 0 store
/x0 x v get 2.965278 add sx cw mul add store
/y0 y v get bfs th add sub store
x0 y0 moveto
0 T (      interface) p n
0 T (        subroutine interp_driver_sci\(rin,rout,wgt,n,                    &) N
0 T (     &   interp_method,tol,max_iterations,d_arclength, curvature,       &) N
0 T (     &   dst_cutoff, dr,r_bc_0, r_bc_1\)) N
(5110) # (      __CHARMM_ONLY __DEP_KINDS) N
0 T (      __DEP_OUTPUT) N
0 T (        int n) N
0 T (        float rin\(n\), rout\(n\), wgt\(n\)) N
0 T (        int, intent\(in\) ::  interp_method) N
0 T (        int max_iterations) N
0 T (        float :: tol, d_arclength\(:\), curvature\(:\)) N
0 T (        float, optional :: dst_cutoff) N
0 T (        float, optional :: dr\(n\) ,r_bc_0\(n\), r_bc_1\(n\)) N
0 T (        end subroutine interp_driver_sci) N
(5120) # (!) N
0 T (        subroutine interp_linear_exact\(rin,rout,wgt,n,                  &) N
0 T (     &   d_arclength, curvature,                                        &) N
0 T (     &   drout,                                                         &) N
0 T (     &   r_bc_0, r_bc_1\)) N
0 T (      __CHARMM_ONLY __DEP_KINDS) N
0 T (        int :: n) N
0 T (        float :: rin\(n\), rout\(n\), wgt\(n\)) N
0 T (        float :: d_arclength\(:\), curvature\(:\)) N
0 T (        float, optional :: drout\(n\) ! optional computation of tangent) N
(5130) # (        float , optional :: r_bc_0\(n\), r_bc_1\(n\)   ! optional fixed bc data) N
0 T (       end subroutine interp_linear_exact) N
0 T (!) N
0 T (      end interface) N
0 T (!) N
0 T (      data whoami/' FTSM_REPA>'/) N
0 T (!) N
0 T (!) N
0 T (      qroot =MPI_COMM_STRNG.ne.MPI_COMM_NULL.and.SIZE_STRNG.gt.1) N
0 T (      qslave=MPI_COMM_LOCAL.ne.MPI_COMM_NULL.and.SIZE_LOCAL.gt.1) N
(5140) # (      qprint=MPI_COMM_STRNG.ne.MPI_COMM_NULL.and.ME_STRNG.eq.0) N
0 T (!) N
0 T (      if \(present\(qbcast\)\) qslave=qslave.and.qbcast ! in case qbcast false do no) N
0 T (t broadcast to slaves) N
0 T (!) N
0 T (! check if the user has made an initialization call) N
0 T (!) N
0 T (      if \(.not.repa_initialized\) then) N
0 T (       __WRN\( whoami,'NO REPARAMETRIZATION OPTIONS SELECTED. NOTHING DONE.'\)) N
0 T (       return) N
0 T (      endif) N
(5150) # (      if \(qprint\) then) N
0 T (       write\(_MSGBUF,690\) whoami ; __PRINTL\(_MSGBUF,5\)) N
0 T (      endif) N
0 T ( 690  format\(/A,' PERFORMING STRING REPARAMETRIZATION.'\)) N
0 T (!) N
0 T (! shorthand) N
0 T (      rf => r_f\(:,:,center\)) N
0 T (      ro  => r_o\(:,:,center\)) N
0 T (      ro1 => r_o\(:,:,dummy\)) N
0 T (      r_o_com=>rcom\(:,center\)) N
(5160) # (!) N
0 T (      if \(qroot\) then) N
0 T (!) N
0 T (       if \(qorient\) then) N
0 T (!       translate structure to centroid) N
0 T (!       note: this should not be needed because the structure should always be k) N
0 T (ept COM-free) N
0 T (!       but is kept in case things change in the future \(overhead of repa is sma) N
0 T (ll\)) N
0 T (        r_o_com=zero) N
0 T (        do i=1, norient) N
0 T (         w=orientWeights\(i\)) N
(5170) # (         r_o_com\(1\)=r_o_com\(1\) + w * ro\(i,1\)) N
0 T (         r_o_com\(2\)=r_o_com\(2\) + w * ro\(i,2\)) N
0 T (         r_o_com\(3\)=r_o_com\(3\) + w * ro\(i,3\)) N
0 T (        enddo) N
0 T (! orientation atoms ! comment out to avoid unneeded roudoff with qdiffrot=false) N
0 T (!        ro\(:,1\)=ro\(:,1\)-r_o_com\(1\)) N
(ftsm.ftn) (Page 75/83) (Mar 09, 13 15:34) title
border
/v 1 store
/x0 x v get 2.965278 add sx cw mul add store
/y0 y v get bfs th add sub store
x0 y0 moveto
0 T (!        ro\(:,2\)=ro\(:,2\)-r_o_com\(2\)) p n
0 T (!        ro\(:,3\)=ro\(:,3\)-r_o_com\(3\)) N
0 T (! forced atoms) N
0 T (        if \(qdiffrot\) then) N
(5180) # (         rf\(:,1\)=rf\(:,1\)-r_o_com\(1\)) N
0 T (         rf\(:,2\)=rf\(:,2\)-r_o_com\(2\)) N
0 T (         rf\(:,3\)=rf\(:,3\)-r_o_com\(3\)) N
0 T (        endif) N
0 T (!) N
0 T (!ccccccccccc orientation ccccccc) N
0 T (!      send/receive orientation structure) N
0 T (!      this is a slow procedure, as the orientation is done) N
0 T (!      sequentially) N
0 T (!) N
(5190) # (        if \(mestring.gt.0\) then) N
0 T (         call MPI_RECV\(ro1,3*norient,rtype,mestring-1, 1,               &) N
0 T (     &        MPI_COMM_STRNG, stat, ierror\)) N
0 T (!       orient current structure) N
0 T (         call RMSBestFit\(ro,ro1,orientWeights,u\)) N
0 T (!       transform current structure to overlap with reference) N
0 T (!       \(if orientation is off, u=I\)) N
0 T (         if \(.not.qdiffrot\) ro1=>rf) N
0 T (         ro1\(:,1\)=ro\(:,1\)-r_o_com\(1\)) N
0 T (         ro1\(:,2\)=ro\(:,2\)-r_o_com\(2\)) N
(5200) # (         ro1\(:,3\)=ro\(:,3\)-r_o_com\(3\)) N
0 T (!) N
0 T (         u=transpose\(u\)) N
0 T (         ro1=matmul\(ro1,u\)) N
0 T (         if \(qdiffrot\) rf=matmul\(rf,u\)) N
0 T (!) N
0 T (        else ! first replica enters below) N
0 T (!         ro1=>ro ! make sure 1st replica sends the center, not dummy coords) N
0 T (! technically, the above line is correct \(since ro is com-free; com is never sub) N
0 T (tracted with qdiffrot=false above\)) N
0 T (! however, conceptually, the COM _should_ be subtracted as in the loop above \(e.) N
0 T (g. note ro1=>rf, which can modify both rf and ro\)) N
(5210) # (! I also do not like the fact that the code below involves copying, which slows ) N
0 T (down the first replica!) N
0 T (         if \(.not.qdiffrot\) ro1=>rf ! will remove the COM from actual ro/rf coor) N
0 T (dinates below \(they are modified anyway by interp\)) N
0 T (         ro1\(:,1\)=ro\(:,1\)-r_o_com\(1\)) N
0 T (         ro1\(:,2\)=ro\(:,2\)-r_o_com\(2\)) N
0 T (         ro1\(:,3\)=ro\(:,3\)-r_o_com\(3\)) N
0 T (        endif ! mestring) N
0 T (!) N
0 T (        if \(mestring.lt.nstring-1\) then) N
0 T (         call mpi_send\(ro1,3*norient,rtype,mestring+1, 1,               &) N
0 T (     &        MPI_COMM_STRNG, ierror\)) N
(5220) # (        endif ! me) N
0 T (       endif ! qorient) N
0 T (!cccccccccccccc now call the appropriate interpolation subroutine) N
0 T (       weights\(:,1\)=forcedWeights) N
0 T (       weights\(:,2\)=forcedWeights) N
0 T (       weights\(:,3\)=forcedWeights) N
0 T (!) N
0 T (       if \(interp_method.eq.linear_exact\) then) N
0 T (        call interp_linear_exact\(rf,rf,weights,3*nforced,ds,curv\)) N
0 T (       else) N
(5230) # (        call interp_driver_sci\(rf,rf,weights,3*nforced,                 &) N
0 T (     &   interp_method,def,iterations,ds,curv,dst_cutoff\)) N
0 T (       endif) N
0 T (!) N
0 T (       if \(qorient\) then) N
0 T (        u=transpose\(u\)) N
0 T (        if \(mestring.gt.0\) rf=matmul\(rf, u\)    ! rotate back) N
0 T (!     restore original COM) N
0 T (        rf\(:,1\)=rf\(:,1\)+r_o_com\(1\)) N
0 T (        rf\(:,2\)=rf\(:,2\)+r_o_com\(2\)) N
(5240) # (        rf\(:,3\)=rf\(:,3\)+r_o_com\(3\)) N
0 T (!) N
0 T (       endif ! orient) N
0 T (      endif ! root) N
0 T (!) N
(ftsm.ftn) (Page 76/83) (Mar 09, 13 15:34) title
border
grestore
(Printed by surgeon) rhead
(ftsm.ftn) (38/42) (Saturday March 09, 2013) footer
end % of iso1dict
pagesave restore
showpage
%%Page: (77-78) 39
%%BeginPageSetup
/pagesave save def
sh 0 translate 90 rotate
%%EndPageSetup
iso1dict begin
gsave
llx lly 12 add translate
/v 0 store
/x0 x v get 2.965278 add sx cw mul add store
/y0 y v get bfs th add sub store
x0 y0 moveto
0 T (!    broadcast coordinates to slaves) p n
0 T (      if \(qslave\) then ; __BROADCAST_LOCAL_8B\(rf,3*nforced\) ; endif) N
0 T (!    update any orientation coordinates that have changes) N
0 T (      if \(qdiffrot\) call ftsm_update_overlap_coor\(ione\)) N
0 T (!) N
(5250) # (      call ftsm_save_com\(\)) N
0 T (!) N
0 T (      end subroutine ftsm_repa) N
0 T (!cccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccc) N
0 T (      subroutine ftsm_update_overlap_coor\(which\)) N
0 T (      __IMPNONE) N
0 T (      int :: which) N
0 T (      int :: i) N
0 T (!    copy overlapping coordinates from one set to another) N
0 T (      if \(which.eq.1\) then) N
(5260) # (       do i=1, nboth) N
0 T (        r_o\(iatom_both\(2,i\), :, center\)=r_f\(iatom_both\(1,i\), :, center\)) N
0 T (       enddo) N
0 T (      elseif \(which.eq.2\) then) N
0 T (       do i=1, nboth) N
0 T (        r_f\(iatom_both\(1,i\), :, center\)=r_o\(iatom_both\(2,i\), :, center\)) N
0 T (       enddo) N
0 T (      elseif \(which.eq.3\) then ! special case of left:right sets all being updat) N
0 T (ed) N
0 T (       do i=1, nboth) N
0 T (        r_o\(iatom_both\(2,i\), :, left:right\)=                            &) N
(5270) # (     &  r_f\(iatom_both\(1,i\), :, left:right\)) N
0 T (       enddo) N
0 T (      endif) N
0 T (!) N
0 T (      end subroutine ftsm_update_overlap_coor) N
0 T (!) N
0 T (!ccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccc) N
0 T (      subroutine ftsm_repl_exchange\(x,y,z,itime\)) N
0 T (!     attempt to swap restraints that correspond to two adjacent replicas) N
0 T (      use multicom, only: multicom_permute_string_ranks) N
(5280) # (      use ftsm_rex, only: ftsm_rex_init, rex_initialized, rex_map,      &) N
0 T (     &   rex_log, rex_beta, rex_string_datatype, rex_string_data_mpi) N
0 T (      use ivector, only: int_vector_add) N
0 T (!) N
0 T (      __DEP_MULTICOM       !__CHARMM_ONLY##MULTICOM) N
0 T (      __DEP_CONST ) N
0 T (      __DEP_NUMBER) N
0 T (      __DEP_RANDOM) N
0 T (      __DEP_MDOUT) N
0 T (      __DEP_PARSER ) N
(5290) # (      __DEP_MPI ) N
0 T (!) N
0 T (      __IMPNONE) N
0 T (#include "../../mpitype.def") N
0 T (!) N
0 T (      float :: x\(:\), y\(:\), z\(:\) ! mass\(size\(x,1\)\)) N
0 T (      int :: itime) N
0 T (!) N
0 T (      int :: i, j, ibeg, iend, stat\(MPI_STATUS_SIZE\)) N
0 T (      int4mpi :: ierror) N
(5300) # (      integer\(KIND=MPI_ADDRESS_KIND\) :: lb, extent) N
0 T (      bool :: deriv, qendpoint, qgrp, qvalid) N
0 T (!) N
0 T (      int :: which   ! replica with which the exchange was attempted) N
0 T (      bool :: success ! whether the exchange attempt was successful) N
0 T (      int :: nodelist\(nstring\) ! holds new string replica order after exchange a) N
0 T (ttempt) N
0 T (      int :: itype ! MPI_INTEGER type) N
0 T (      int :: ndata, nfiles) N
0 T (!) N
0 T (!     variables for exchanging string-dependent properties) N
(5310) # (      type\(rex_string_datatype\) :: rex_string_data, rex_string_data_new) N
0 T (      float :: dE_me, dE, s, dpar0i, dperp0i, drms0i, dpar_ori,        &) N
0 T (     &                                 dperp_ori, drms_ori, fac) N
0 T (!) N
0 T (      character\(len=150\) :: fnames\(5\)              ! for storing output file nam) N
0 T (es) N
(ftsm.ftn) (Page 77/83) (Mar 09, 13 15:34) title
border
/v 1 store
/x0 x v get 2.965278 add sx cw mul add store
/y0 y v get bfs th add sub store
x0 y0 moveto
0 T (      character\(len=150\) :: new_fnames\(5\)          ! for storing swapped file na) p n
0 T (mes) N
0 T (      bool :: openun\(5\), qform, qwrite) N
0 T (      int :: oldiol) N
0 T (!) N
0 T (      float, pointer, dimension\(:,:,:\) :: r_f2, r_o2, r_f3, r_o3) N
(5320) # (!) N
0 T (      character\(len=20\) :: whoami) N
0 T (      data whoami /' FTSM_REPL_EXCHANGE>'/) N
0 T (!) N
0 T (      if \(.not.rex_initialized\) call ftsm_rex_init\(\)) N
0 T (!) N
0 T (      if \(.not.ftsm_check\(qorient\)\) return) N
0 T (      if \(.not.restrained_on\) return      ! restrained dynamics required) N
0 T (!) N
0 T (      qgrp=\(MPI_COMM_LOCAL.ne.MPI_COMM_NULL\)                            &) N
(5330) # (     &  .and.\(SIZE_LOCAL.gt.1\)) N
0 T (!) N
0 T (      deriv=.false. ! do not compute derivatives) N
0 T (      dE=zero) N
0 T (      success=.false.) N
0 T (!) N
0 T (!     determine exchange partner) N
0 T (      if \(MPI_COMM_STRNG.ne.MPI_COMM_NULL\) then) N
0 T (       if \(ME_STRNG.eq.0\) which=INT\(__RANDOMU\(__SEED\)*2d0\) ! either 0 or 1) N
0 T (       call MPI_BCAST\(which, 1, mpiint, 0, MPI_COMM_STRNG, ierror\)     ! string ) N
0 T (root broadcasts to all replicas) N
(5340) # (!    determine whether swapping w. left \(-1\) or w. right \(+1\) neighbor & calcula) N
0 T (te rank of neighbor) N
0 T (       which=ME_STRNG + \(mod\(ME_STRNG + which, itwo\)*itwo - ione\)) N
0 T (!      if which == 0, then: -1, 2, 1, 4, 3, ...) N
0 T (!      if which == 1, then:  1, 0, 3, 2, ...) N
0 T (!      communicate:) N
0 T (       qvalid=\(which.ge.0\).and.\(which.lt.SIZE_STRNG\)) N
0 T (       if \(qvalid\) then) N
0 T (!     store reference values in dummy) N
0 T (!     need to store all replica-dependent parameters) N
0 T (        rex_string_data%dpar0 = dpar0;) N
(5350) # (        rex_string_data%dperp0= dperp0;) N
0 T (        rex_string_data%drms0 = drms0;) N
0 T (        rex_string_data%kpara = kpara;) N
0 T (        rex_string_data%kperp = kperp;) N
0 T (        rex_string_data%krms  = krms;) N
0 T (        rex_string_data%evolve_expo_mem = evolve_expo_mem;) N
0 T (        rex_string_data%num_evolve_samples = num_evolve_samples;) N
0 T (        rex_string_data%avforce = avforce) N
0 T (        rex_string_data%ftsm_mini_on = ftsm_mini_on) N
0 T (        rex_string_data%evolve_expo_on = evolve_expo_on) N
(5360) # (        rex_string_data%evolve_aver_on = evolve_aver_on) N
0 T (!) N
0 T (!     send/receive) N
0 T (!     allocate storage for new restraints) N
0 T (        allocate\(r_f2\(nforced,3,num_sets\)\)) N
0 T (        ndata=3*\(nforced*9\) ! number of reals to send) N
0 T (        call MPI_SENDRECV\(r_f, ndata, mpifloat,             & ! send almost ever) N
0 T (ything) N
0 T (     &   which, which, r_f2, ndata, mpifloat,               & ! put into the sam) N
0 T (e array, starting at position 11) N
0 T (     &   which, ME_STRNG, MPI_COMM_STRNG, stat, ierror\)) N
0 T (        if \(qorient\) then) N
(5370) # (         if \(qdiffrot\) then ! orientation atoms) N
0 T (!     allocate storage for new restraints) N
0 T (          allocate\(r_o2\(nforced,3,num_sets\)\)) N
0 T (          ndata=27*norient) N
0 T (          call MPI_SENDRECV\(r_o, ndata, mpifloat,           &) N
0 T (     &    which, which, r_o2, ndata, mpifloat,              &) N
0 T (     &    which, ME_STRNG, MPI_COMM_STRNG, stat, ierror\)) N
0 T (         else) N
0 T (          r_o2=>r_f2) N
0 T (         endif ! qdiffrot) N
(5380) # (        endif ! qorient) N
0 T (! also exchange string image properties) N
0 T (        call MPI_SENDRECV\(rex_string_data, 1, rex_string_data_mpi, which, which,) N
(ftsm.ftn) (Page 78/83) (Mar 09, 13 15:34) title
border
grestore
(Printed by surgeon) rhead
(ftsm.ftn) (39/42) (Saturday March 09, 2013) footer
end % of iso1dict
pagesave restore
showpage
%%Page: (79-80) 40
%%BeginPageSetup
/pagesave save def
sh 0 translate 90 rotate
%%EndPageSetup
iso1dict begin
gsave
llx lly 12 add translate
/v 0 store
/x0 x v get 2.965278 add sx cw mul add store
/y0 y v get bfs th add sub store
x0 y0 moveto
0 T ( & ) p n
0 T (     &                    rex_string_data_new, 1, rex_string_data_mpi, which, ME) N
0 T (_STRNG,&) N
0 T (     &                    MPI_COMM_STRNG, stat, ierror\)) N
0 T () N
0 T (! NOTE: in the above communication it is essential to have certain sets adjacent) N
0 T (, as indicated by numbering in fts_var; do not break this) N
0 T (!     calculate new string energies) N
0 T (        dpar_ori=dpar; dperp_ori=dperp; drms_ori=drms; ! first, save this replic) N
0 T (a's projection values) N
0 T (!     swap arrays:) N
(5390) # (        r_f3=>r_f; r_o3=>r_o ! save in case move is rejected) N
0 T (        r_f=>r_f2; r_o=>r_o2 ! point to new array) N
0 T (!    call calculation) N
0 T (!    consider the possibility that equilibration is underway:) N
0 T (        if \(restrained_eq_steps.gt.0\) then) N
0 T (         s=one*\(itime-restrained_eq0\)/restrained_eq_steps ; s=min\(one,max\(zero,s) N
0 T (\)\)) N
0 T (        else) N
0 T (         s=one) N
0 T (        endif ! restrained equilibration is on) N
0 T (!) N
(5400) # (        deriv=.false. ! skip derivative calculation) N
0 T (        call ftsm_calc\(x,y,z,deriv,s\) ! will compute new dpar, dperp, drms) N
0 T (!) N
0 T (!    calculate energies \(adapted from _addforce\):) N
0 T (!) N
0 T (        if \(proj_on\) then) N
0 T (! restraint force parallel to string) N
0 T (         qendpoint=\(which.eq.0.or.which.eq.nstring-1\)) N
0 T (         if \(qendpoint\) then ; fac=half ; else ; fac=one  ; endif) N
0 T (! compare energies \(NOTE: in this version of REX, I am sending reference values,) N
0 T ( NOT coordinates\)) N
(5410) # (!    new energy) N
0 T (         dE_me =  rex_string_data_new%kpara * fac * fac * \( dpar-rex_string_data) N
0 T (_new%dpar0 \)**2               & ! scale down the force constant of endpoints \(on) N
0 T (e for d, one for gradients\)) N
0 T (     &         +  rex_string_data_new%kperp * fac * max   \( fac * dperp - rex_st) N
0 T (ring_data_new%dperp0, zero \)**2 ! ignore negative values; dperp0 criterion in in) N
0 T (ner-replica d-metric) N
0 T (!    old energy) N
0 T (         qendpoint=\(mestring.eq.0.or.mestring.eq.nstring-1\)) N
0 T (         if \(qendpoint\) then ; fac=half ; else ; fac=one  ; endif) N
0 T (!) N
0 T (         dE_me =  dE_me                                                 &) N
0 T (     &        - kpara * fac * fac * \( dpar_ori-dpar0 \)**2               &) N
0 T (     &        - kperp * fac * max   \( fac * dperp_ori - dperp0, zero \)**2) N
(5420) # () N
0 T (        else ! .not.  proj_on) N
0 T (         dE_me = rex_string_data_new%krms * \( \( drms-rex_string_data_new%drms0 \)) N
0 T (**2 - \( drms_ori-drms0 \)**2 \)) N
0 T (        endif) N
0 T (!) N
0 T (!    combine energies from two replicas:) N
0 T (        call MPI_SENDRECV\(dE_me, 1, mpifloat,               &) N
0 T (     &   which, which, dE, 1, mpifloat,                     &) N
0 T (     &   which, ME_STRNG, MPI_COMM_STRNG, stat, ierror\)) N
0 T (        dE = half * \( dE+dE_me \)) N
(5430) # (!    5\) apply Metropolis criterion) N
0 T (        if \(dE.le.0d0\) then) N
0 T (         success=.true.) N
0 T (        else) N
0 T (!    the higher-rank replica draws random number) N
0 T (!    this may not be correct because the random numbers will not come from the s) N
0 T (ame sequence;) N
0 T (!    may change this later) N
0 T (         if \(which.lt.ME_STRNG\) then) N
0 T (          success=\(__RANDOMU\(__SEED\).le.exp\(-rex_beta*dE\)\)) N
0 T (!     send to othe replica) N
(5440) # (          call MPI_SEND\(success, 1, mpibool, which, which,          &) N
0 T (     &    MPI_COMM_STRNG, ierror\)) N
0 T (         else) N
0 T (          call MPI_RECV\(success, 1, mpibool, which, ME_STRNG,       &) N
(ftsm.ftn) (Page 79/83) (Mar 09, 13 15:34) title
border
/v 1 store
/x0 x v get 2.965278 add sx cw mul add store
/y0 y v get bfs th add sub store
x0 y0 moveto
0 T (     &    MPI_COMM_STRNG, stat, ierror\)) p n
0 T (         endif ! which lt ME_STRNG) N
0 T (        endif ! apply Metropolis) N
0 T (!) N
0 T (       endif ! qvalid ...) N
0 T (!    all root nodes continue \(success=false for idle node\(s\)\) :) N
(5450) # (       if \(success\) then) N
0 T (        call MPI_ALLGATHER\(which, 1, mpiint,                             &) N
0 T (     &       nodelist, 1, mpiint, MPI_COMM_STRNG, ierror\)) N
0 T (!) N
0 T (!     make entry in REX log \(only lower-rank replica does this\)) N
0 T (        if \(ME_STRNG.lt.which\) then) N
0 T (          j=ME_STRNG ! possible cast i4=>i8 accommodates in8 compilations) N
0 T (          i=int_vector_add\(rex_log, j\) ! this replica) N
0 T (          i=int_vector_add\(rex_log, which\)    ! exchanged with this replica) N
0 T (          i=int_vector_add\(rex_log, itime + rextime_offset\)    ! at this time) N
(5460) # (        endif ! ME_STRNG) N
0 T (!) N
0 T (!*******************************************************************************) N
0 T (*************) N
0 T (!     swap restart & traj file info; otherwise restart files will correspond to ) N
0 T (wrong replica) N
0 T (!#ifdef __CHARMM) N
0 T (!        oldiol=iolev) N
0 T (!        iolev=1 ! so that vinqre works) N
0 T (!#endif) N
0 T (!) N
0 T (#ifndef __DMOL) N
(5470) # (        nfiles=2) N
0 T (!      can add others here) N
0 T (        if \(__RESTART_FILE_UNIT.gt.0\)                                           ) N
0 T (     &) N
0 T (!    CHARMM VINQUIRE gives problems, did not bother to debug, since that code is) N
0 T ( obsolete anyway) N
0 T (     &    INQUIRE\(UNIT=__RESTART_FILE_UNIT, OPENED=openun\(1\), NAME=fnames\(1\)\)) N
0 T (!     &   CALL VINQRE\('UNIT',fnames\(1\),i,j,) N
0 T (!     &                    OPENUN\(1\),QFORM,QWRITE,iunwri\)) N
0 T (        if \(__TRAJ_FILE_UNIT.gt.0\)                                              ) N
0 T (  &) N
0 T (     &    INQUIRE\(UNIT=__TRAJ_FILE_UNIT, OPENED=openun\(2\), NAME=fnames\(2\)\)) N
0 T (!     &   CALL VINQRE\('UNIT',fnames\(2\),i,j,) N
(5480) # (!     &                    OPENUN\(2\),QFORM,QWRITE,iuncrd\)) N
0 T (! aa) N
0 T (!         write\(600+ME_STRNG,*\) iunwri, fnames\(1\), iuncrd, fnames\(2\)) N
0 T (!) N
0 T (#else) N
0 T (! DYNAMOL does not store restart fid;) N
0 T (! furthermore, files are not kept open \(so that they are complete in the case of) N
0 T ( a crash\)) N
0 T (! all we have to do is exchange the file names) N
0 T (        nfiles=3) N
0 T (        fnames\(1\)=trajectoryoutname) N
(5490) # (        fnames\(2\)=restartoutname) N
0 T (        fnames\(3\)=statisticsoutname) N
0 T (#endif) N
0 T (!) N
0 T (        i=nfiles*len\(fnames\(1\)\) ! length of broadcast buffer) N
0 T (#ifndef __DMOL) N
0 T (        if \( __RESTART_FILE_UNIT .gt. 0 .or. __TRAJ_FILE_UNIT .gt. 0 \)&) N
0 T (#endif) N
0 T (         call MPI_SENDRECV\(fnames, i, MPI_BYTE,                     &) N
0 T (     &   which, which, new_fnames, i, MPI_BYTE,                     &) N
(5500) # (     &   which, ME_STRNG, MPI_COMM_STRNG, stat, ierror\)) N
0 T (!         write\(600+ME_STRNG,*\) iunwri, new_fnames\(1\),) N
0 T (!     &            iuncrd, new_fnames\(2\)) N
0 T (!         close\(600+ME_STRNG\)) N
0 T (! assuming that the restart file is formatted \(might change this later\)) N
0 T (#ifndef __DMOL) N
0 T (        if \(__RESTART_FILE_UNIT.gt.0.and.openun\(1\)\) then) N
0 T (         close\(__RESTART_FILE_UNIT\)) N
0 T (         i=len\(new_fnames\(1\)\)) N
0 T (         __TRIMA\(new_fnames\(1\), i\)) N
(5510) # (         open\(UNIT=__RESTART_FILE_UNIT, FILE=new_fnames\(1\)\(1:i\), FORM='FORMATTED) N
(ftsm.ftn) (Page 80/83) (Mar 09, 13 15:34) title
border
grestore
(Printed by surgeon) rhead
(ftsm.ftn) (40/42) (Saturday March 09, 2013) footer
end % of iso1dict
pagesave restore
showpage
%%Page: (81-82) 41
%%BeginPageSetup
/pagesave save def
sh 0 translate 90 rotate
%%EndPageSetup
iso1dict begin
gsave
llx lly 12 add translate
/v 0 store
/x0 x v get 2.965278 add sx cw mul add store
/y0 y v get bfs th add sub store
x0 y0 moveto
0 T (',   &) p n
0 T (     &    STATUS='OLD', ACCESS='SEQUENTIAL'\)) N
0 T (        endif) N
0 T (! assuming that dcd file is unformatted) N
0 T (        if \(__TRAJ_FILE_UNIT.gt.0.and.openun\(2\)\) then) N
0 T (         close\(__TRAJ_FILE_UNIT\)) N
0 T (         i=len\(new_fnames\(2\)\)) N
0 T (         __TRIMA\(new_fnames\(2\), i\)) N
0 T (         open\(UNIT=__TRAJ_FILE_UNIT, FILE=new_fnames\(2\)\(1:i\), FORM='UNFORMATTED') N
0 T (, &) N
0 T (!     &    STATUS='OLD', ACCESS='APPEND'\)) N
(5520) # (     &    STATUS='OLD', POSITION='APPEND'\)) N
0 T (        endif) N
0 T (#else) N
0 T (        trajectoryoutname=new_fnames\(1\)) N
0 T (        restartoutname   =new_fnames\(2\)) N
0 T (        statisticsoutname=new_fnames\(3\)) N
0 T (#endif) N
0 T (!#ifdef __CHARMM) N
0 T (!        iolev=oldiol) N
0 T (!#endif) N
(5530) # (!     done with swap output file info) N
0 T (!*******************************************************************************) N
0 T (*************) N
0 T (!) N
0 T (         deallocate\(r_f3\); nullify\(r_f2\);) N
0 T (         if \(qorient\) then) N
0 T (          nullify\(r_o2\);) N
0 T (          if \(qdiffrot\) then ; deallocate\(r_o3\);) N
0 T (          else ; nullify\(r_o3\); endif) N
0 T (         endif ! qorient) N
0 T (       else ! success \( move rejected \)) N
(5540) # (        call MPI_ALLGATHER\(ME_STRNG, 1, mpiint,                          &) N
0 T (     &       nodelist, 1, mpiint, MPI_COMM_STRNG, ierror\)) N
0 T (!) N
0 T (!    move rejected, so restore string) N
0 T (!) N
0 T (        if \(qvalid\) then) N
0 T (         r_f=>r_f3; deallocate\(r_f2\); nullify\(r_f3\);) N
0 T (         if \(qorient\) then) N
0 T (          r_o=>r_o3; nullify\(r_o3\);) N
0 T (          if \(qdiffrot\) then ; deallocate\(r_o2\);) N
(5550) # (          else ; nullify\(r_o2\); endif) N
0 T (         endif ! qorient) N
0 T (        endif ! qvalid) N
0 T (       endif ! success) N
0 T (! aa) N
0 T (!        dE=exp\(-rex_beta*dE\)) N
0 T (!        call MPI_ALLGATHER\(dE, 1, MPI_DOUBLE_PRECISION,) N
0 T (!     &   dEG, 1, MPI_DOUBLE_PRECISION, MPI_COMM_STRNG, bug\)) N
0 T (!) N
0 T (      endif ! MPI_COMM_STRNG) N
(5560) # (!    from here on all nodes continue:) N
0 T (!    broadcast success to all slave nodes) N
0 T (      if \(qgrp\) then) N
0 T (#ifdef __CHARMM) N
0 T (       __BROADCAST_LOCAL_4B\(success,1\)) N
0 T (       __BROADCAST_LOCAL_4B\(nodelist,nstring\)       !__CHARMM_ONLY##.not.INTEGER) N
0 T (8) N
0 T (       __BROADCAST_LOCAL_8B\(nodelist,nstring\)       !__CHARMM_ONLY##INTEGER8) N
0 T (#else) N
0 T (       __BROADCAST_LOCAL\(success,1,mpibool\)) N
0 T (       __BROADCAST_LOCAL\(nodelist,nstring,mpiint\)) N
(5570) # (#endif) N
0 T (!    broadcast new reference to slaves \(what about dperp0, dpar0, drms0?\) ) N
0 T (       if \(success\) then) N
0 T (#ifdef __CHARMM) N
0 T (        __BROADCAST_LOCAL_4B\(r_f,27*nforced\)       !__CHARMM_ONLY##SINGLE) N
0 T (        __BROADCAST_LOCAL_8B\(r_f,27*nforced\)       !__CHARMM_ONLY##.not.SINGLE) N
0 T (#else) N
0 T (        __BROADCAST_LOCAL\(r_f,27*nforced,mpifloat\)) N
0 T (#endif) N
0 T (        if \(qorient.and.qdiffrot\) then ; ) N
(ftsm.ftn) (Page 81/83) (Mar 09, 13 15:34) title
border
/v 1 store
/x0 x v get 2.965278 add sx cw mul add store
/y0 y v get bfs th add sub store
x0 y0 moveto
(5580) # (#ifdef __CHARMM) p n
0 T (         __BROADCAST_LOCAL_4B\(r_o,27*norient\) ;   !__CHARMM_ONLY##SINGLE) N
0 T (         __BROADCAST_LOCAL_8B\(r_o,27*norient\) ;   !__CHARMM_ONLY##.not.SINGLE) N
0 T (#else) N
0 T (         __BROADCAST_LOCAL\(r_o,27*norient,mpifloat\) ; ) N
0 T (#endif) N
0 T (        endif) N
0 T (!) N
0 T (!       broadcast reference values) N
0 T (!       command below does not work in NERSC with pathscale) N
(5590) # (!        __BROADCAST_LOCAL\(rex_string_data_new,1,rex_string_data_mpi\) ! broadcas) N
0 T (t to slaves) N
0 T (        call mpi_type_get_extent\(rex_string_data_mpi, lb, extent, ierror\)) N
0 T (#ifdef __CHARMM) N
0 T (         __BROADCAST_LOCAL_4B\(rex_string_data_new,extent/4\)) N
0 T (#else) N
0 T (        __BROADCAST_LOCAL\(rex_string_data_new,extent,MPI_BYTE\)) N
0 T (#endif) N
0 T (!) N
0 T (       endif ! success) N
0 T (      endif ! qgrp) N
(5600) # (!) N
0 T (!        write\(600+ME_GLOBAL, *\) ME_STRNG) N
0 T (!     if replica order has changed, switch communicator) N
0 T (!        if \(ME_GLOBAL.eq.0\) write\(600,*\) nodelist !aa) N
0 T (!        if \(ME_GLOBAL.eq.0\) write\(600,*\) dEG !aa) N
0 T (!        if \(ME_GLOBAL.eq.0\) write\(600,*\) '***************', cv%rex_beta !aa) N
0 T (!        close\(600\)) N
0 T (!) N
0 T (! modify replica map \(assumes that only adjacent switches are possible\)) N
0 T (      j=1) N
(5610) # (      do while \(j.lt.nstring\)) N
0 T (        if \(nodelist\(j\).gt.nodelist\(j+1\)\) then ! node numbers start at 0) N
0 T (          i=rex_map\(j\)) N
0 T (          rex_map\(j\)=rex_map\(j+1\)) N
0 T (          rex_map\(j+1\)=i) N
0 T (          j=j+1) N
0 T (        endif) N
0 T (        j=j+1) N
0 T (      enddo) N
0 T (!) N
(5620) # (      if \(any\(nodelist.ne.\(/ \(i, i=0,nstring-1\) /\)\)\)                    &) N
0 T (     &  call multicom_permute_string_ranks\(nodelist+1\) ! special-purpose routine) N
0 T ( to reorder ranks in order of string replicas) N
0 T (!                                                        added 1 because in mult) N
0 T (icom node indices start from 1) N
0 T (      if \(success\) then) N
0 T (!    finish updating reference values) N
0 T (       dpar0 =rex_string_data_new%dpar0) N
0 T (       dperp0=rex_string_data_new%dperp0) N
0 T (       drms0 =rex_string_data_new%drms0) N
0 T (       kpara =rex_string_data_new%kpara) N
0 T (       kperp =rex_string_data_new%kperp) N
(5630) # (       krms  =rex_string_data_new%krms) N
0 T (       evolve_expo_mem   =rex_string_data_new%evolve_expo_mem) N
0 T (       num_evolve_samples=rex_string_data_new%num_evolve_samples) N
0 T (       avforce           =rex_string_data_new%avforce) N
0 T (       ftsm_mini_on      =rex_string_data_new%ftsm_mini_on) N
0 T (       evolve_expo_on    =rex_string_data_new%evolve_expo_on) N
0 T (       evolve_aver_on    =rex_string_data_new%evolve_aver_on) N
0 T () N
0 T (!) N
0 T (       if \(MPI_COMM_STRNG.ne.MPI_COMM_NULL\) mestring=ME_STRNG) N
(5640) # (!      broadcast string size to all slave nodes) N
0 T (       if \(qgrp\) then) N
0 T (#ifdef __CHARMM) N
0 T (        __BROADCAST_LOCAL_4B\(mestring,1\)             !__CHARMM_ONLY##.not.INTEGE) N
0 T (R8) N
0 T (        __BROADCAST_LOCAL_8B\(mestring,1\)             !__CHARMM_ONLY##INTEGER8) N
0 T (        call setmsi\('MESTRING',mestring\)) N
0 T (#else) N
0 T (        __BROADCAST_LOCAL\(mestring,1,mpiint\)) N
0 T (#endif) N
(ftsm.ftn) (Page 82/83) (Mar 09, 13 15:34) title
border
grestore
(Printed by surgeon) rhead
(ftsm.ftn) (41/42) (Saturday March 09, 2013) footer
end % of iso1dict
pagesave restore
showpage
%%Page: (83) 42
%%BeginPageSetup
/pagesave save def
sh 0 translate 90 rotate
%%EndPageSetup
iso1dict begin
gsave
llx lly 12 add translate
/v 0 store
/x0 x v get 2.965278 add sx cw mul add store
/y0 y v get bfs th add sub store
x0 y0 moveto
0 T (       endif ! qgrp) p n
(5650) # (      endif ! success) N
0 T (!        write\(600+ME_GLOBAL, *\) ME_STRNG) N
0 T (!           close\(600+ME_GLOBAL\)) N
0 T (!) N
0 T (      end subroutine ftsm_repl_exchange) N
0 T (!ccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccc) N
0 T (cc) N
0 T (      end module ftsm) N
0 T (!) N
0 T (__CHARMM_ONLY##ENDIF) N
(ftsm.ftn) (Page 83/83) (Mar 09, 13 15:34) title
border
grestore
(Printed by surgeon) rhead
(ftsm.ftn) (42/42) (Saturday March 09, 2013) footer
end % of iso1dict
pagesave restore
showpage

%%Trailer
end
%%EOF
