%!PS-Adobe-3.0
%%Title: ftsm.ftn
%%For: surgeon
%%Creator: a2ps version 4.14
%%CreationDate: Wed May  1 15:17:38 2013
%%BoundingBox: 24 24 588 768
%%DocumentData: Clean7Bit
%%Orientation: Landscape
%%Pages: 45
%%PageOrder: Ascend
%%DocumentMedia: Letter 612 792 0 () ()
%%DocumentNeededResources: font Courier
%%+ font Courier-Bold
%%+ font Courier-BoldOblique
%%+ font Courier-Oblique
%%+ font Helvetica
%%+ font Helvetica-Bold
%%+ font Symbol
%%+ font Times-Bold
%%+ font Times-Roman
%%DocumentProcessColors: Black 
%%DocumentSuppliedResources: procset a2ps-a2ps-hdr
%%+ procset a2ps-black+white-Prolog
%%+ encoding ISO-8859-1Encoding
%%EndComments
/a2psdict 200 dict def
a2psdict begin
%%BeginProlog
%%Copyright: (c) 1988, 89, 90, 91, 92, 93 Miguel Santana
%%Copyright: (c) 1995, 96, 97, 98 Akim Demaille, Miguel Santana
% Check PostScript language level.
/languagelevel where {
  pop /gs_languagelevel languagelevel def
} {
  /gs_languagelevel 1 def
} ifelse

% EPSF import as in the Red Book
/BeginInclude {
  /b4_Inc_state save def    		% Save state for cleanup
  /dict_count countdictstack def	% Count objects on dict stack
  /op_count count 1 sub def		% Count objects on operand stack 
  userdict begin
    0 setgray 0 setlinecap
    1 setlinewidth 0 setlinejoin
    10 setmiterlimit [ ] 0 setdash newpath
    gs_languagelevel 1 ne {
      false setstrokeadjust false setoverprint 
    } if
} bind def

/EndInclude {
  count op_count sub { pos } repeat	% Clean up stacks
  countdictstack dict_count sub { end } repeat
  b4_Inc_state restore
} bind def

/BeginEPSF {
  BeginInclude
  /showpage { } def
} bind def

/EndEPSF {
  EndInclude
} bind def

% Page prefeed
/page_prefeed {         % bool -> -
  statusdict /prefeed known {
    statusdict exch /prefeed exch put
  } {
    pop
  } ifelse
} bind def

/deffont {
  findfont exch scalefont def
} bind def

/reencode_font {
  findfont reencode 2 copy definefont pop def
} bind def

% Function c-show (str => -)
% centers text only according to x axis.
/c-show { 
  dup stringwidth pop
  2 div neg 0 rmoveto
  show
} bind def

% Function l-show (str => -)
% prints texts so that it ends at currentpoint
/l-show {
  dup stringwidth pop neg 
  0 
  rmoveto show
} bind def

% center-fit show (str w => -)
% show centered, and scale currentfont so that the width is less than w
/cfshow {
  exch dup stringwidth pop
  % If the title is too big, try to make it smaller
  3 2 roll 2 copy
  gt
  { % if, i.e. too big
    exch div
    currentfont exch scalefont setfont
  } { % ifelse
    pop pop 
  }
  ifelse
  c-show			% center title
} bind def

% Return the y size of the current font
% - => fontsize
/currentfontsize {
  currentfont /FontType get 0 eq {
    currentfont /FontMatrix get 3 get
  }{
    currentfont /FontMatrix get 3 get 1000 mul
  } ifelse
} bind def

% reencode the font
% <encoding-vector> <fontdict> -> <newfontdict>
/reencode { %def
  dup length 5 add dict begin
    { %forall
      % <vector> <key> <val>
      1 index /FID ne 
      { def }{ pop pop } ifelse
    } forall
    /Encoding exch def % -

    % Use the font's bounding box to determine the ascent, descent,
    % and overall height; don't forget that these values have to be
    % transformed using the font's matrix.
    % We use `load' because sometimes BBox is executable, sometimes not.
    % Since we need 4 numbers an not an array avoid BBox from being executed
    /FontBBox load aload pop
    FontMatrix transform /Ascent exch def pop
    FontMatrix transform /Descent exch def pop
    /FontHeight Ascent Descent sub def

    % Get the underline position and thickness if they're defined.
    % Use 1 if they are not defined.
    currentdict /FontInfo 2 copy known
    { get
      /UnderlinePosition 2 copy % <FontInfo> /UP <FontInfo> /UP
      2 copy known
      { get }{ pop pop 1 } ifelse
      0 exch FontMatrix transform exch pop
      def % <FontInfo>

      /UnderlineThickness 2 copy % <FontInfo> /UT <FontInfo> /UT
      2 copy known
      { get }{ pop pop 1 } ifelse
      0 exch FontMatrix transform exch pop
      def % <FontInfo>
      pop % -
    }{ pop pop
    } ifelse

    currentdict
  end 
} bind def

% composite fonts for ASCII-EUC mixed string
% Version 1.2 1/31/1990
% Orignal Ken'ichi HANDA (handa@etl.go.jp)
% Modified Norio Katayama (katayama@rd.nacsis.ac.jp),1998
% Extend & Fix Koji Nakamaru (maru@on.cs.keio.ac.jp), 1999
% Anyone can freely copy, modify, distribute this program.

/copyfont {	% font-dic extra-entry-count  copyfont  font-dic
	1 index maxlength add dict begin
	{	1 index /FID ne 2 index /UniqueID ne and
		{def} {pop pop} ifelse
	} forall
	currentdict
	end
} bind def

/compositefont { % ASCIIFontName EUCFontName RomanScale RomanOffset Rot(T/F) compositefont font
    /RomanRotation exch def
    /RomanOffset exch def
    /RomanScale exch def
    userdict /fixeucfont_dict known not {
	userdict begin
	    /fixeucfont_dict 2 dict begin
		/UpperByteEncoding [
		    16#00 1 16#20 { pop 0 } for
		    16#21 1 16#28 { 16#20 sub } for
		    16#29 1 16#2F { pop 0 } for
		    16#30 1 16#74 { 16#27 sub } for
		    16#75 1 16#FF { pop 0 } for
		] def
	        /LowerByteEncoding [
		    16#00 1 16#A0 { pop /.notdef } for
		    16#A1 1 16#FE { 16#80 sub 16 2 string cvrs
				    (cXX) dup 1 4 -1 roll
				    putinterval cvn } for
		    /.notdef
		] def
		currentdict
	    end def
	end
    } if
    findfont dup /FontType get 0 eq {
	14 dict begin
	    %
	    % 7+8 bit EUC font
	    %
	    12 dict begin
		/EUCFont exch def
		/FontInfo (7+8 bit EUC font) readonly def
		/PaintType 0 def
		/FontType 0 def
		/FontMatrix matrix def
		% /FontName
		/Encoding fixeucfont_dict /UpperByteEncoding get def
		/FMapType 2 def
		EUCFont /WMode known
		{ EUCFont /WMode get /WMode exch def }
		{ /WMode 0 def } ifelse
		/FDepVector [
		    EUCFont /FDepVector get 0 get
		    [ 16#21 1 16#28 {} for 16#30 1 16#74 {} for ]
		    {
			13 dict begin
			    /EUCFont EUCFont def
			    /UpperByte exch 16#80 add def	
			    % /FontName
			    /FontInfo (EUC lower byte font) readonly def
			    /PaintType 0 def
			    /FontType 3 def
			    /FontMatrix matrix def
			    /FontBBox {0 0 0 0} def
			    /Encoding
				fixeucfont_dict /LowerByteEncoding get def
			    % /UniqueID
			    % /WMode
			    /BuildChar {
				gsave
				exch dup /EUCFont get setfont
				/UpperByte get
				2 string
				dup 0 4 -1 roll put
				dup 1 4 -1 roll put
				dup stringwidth setcharwidth
				0 0 moveto show
				grestore
			    } bind def
			    currentdict
			end
			/lowerbytefont exch definefont
		    } forall
		] def
		currentdict
	    end
	    /eucfont exch definefont
	    exch
	    findfont 1 copyfont dup begin
		RomanRotation {
			/FontMatrix FontMatrix
			[ 0 RomanScale neg RomanScale 0 RomanOffset neg 0 ]
			matrix concatmatrix def
		}{
			/FontMatrix FontMatrix
			[ RomanScale 0 0 RomanScale 0 RomanOffset ] matrix concatmatrix
			def
			/CDevProc
			    {pop pop pop pop 0 exch -1000 exch 2 div 880} def
		} ifelse
	    end
	    /asciifont exch definefont
	    exch
	    /FDepVector [ 4 2 roll ] def
	    /FontType 0 def
	    /WMode 0 def
	    /FMapType 4 def
	    /FontMatrix matrix def
	    /Encoding [0 1] def
	    /FontBBox {0 0 0 0} def
%	    /FontHeight 1.0 def % XXXX
	    /FontHeight RomanScale 1.0 ge { RomanScale }{ 1.0 } ifelse def
	    /Descent -0.3 def   % XXXX
	    currentdict
	end
	/tmpfont exch definefont
	pop
	/tmpfont findfont
    }{
	pop findfont 0 copyfont
    } ifelse
} def	

/slantfont {	% FontName slant-degree  slantfont  font'
    exch findfont 1 copyfont begin
    [ 1 0 4 -1 roll 1 0 0 ] FontMatrix exch matrix concatmatrix
    /FontMatrix exch def
    currentdict
    end
} def

% Function print line number (<string> # -)
/# {
  gsave
    sx cw mul neg 2 div 0 rmoveto
    f# setfont
    c-show
  grestore
} bind def

% -------- Some routines to enlight plain b/w printings ---------

% Underline
% width --
/dounderline {
  currentpoint
  gsave
    moveto
    0 currentfont /Descent get currentfontsize mul rmoveto
    0 rlineto
    stroke
  grestore
} bind def

% Underline a string
% string --
/dounderlinestring {
  stringwidth pop
  dounderline
} bind def

/UL {
  /ul exch store
} bind def

% Draw a box of WIDTH wrt current font
% width --
/dobox {
  currentpoint
  gsave
    newpath
    moveto
    0 currentfont /Descent get currentfontsize mul rmoveto
    dup 0 rlineto
    0 currentfont /FontHeight get currentfontsize mul rlineto
    neg 0 rlineto
    closepath
    stroke
  grestore
} bind def

/BX {
  /bx exch store
} bind def

% Box a string
% string --
/doboxstring {
  stringwidth pop
  dobox
} bind def

%
% ------------- Color routines ---------------
%
/FG /setrgbcolor load def

% Draw the background
% width --
/dobackground {
  currentpoint
  gsave
    newpath
    moveto
    0 currentfont /Descent get currentfontsize mul rmoveto
    dup 0 rlineto
    0 currentfont /FontHeight get currentfontsize mul rlineto
    neg 0 rlineto
    closepath
    bgcolor aload pop setrgbcolor
    fill
  grestore
} bind def

% Draw bg for a string
% string --
/dobackgroundstring {
  stringwidth pop
  dobackground
} bind def


/BG {
  dup /bg exch store
  { mark 4 1 roll ] /bgcolor exch store } if
} bind def


/Show {
  bg { dup dobackgroundstring } if
  ul { dup dounderlinestring } if
  bx { dup doboxstring } if
  show
} bind def

% Function T(ab), jumps to the n-th tabulation in the current line
/T {
  cw mul x0 add
  bg { dup currentpoint pop sub dobackground } if
  ul { dup currentpoint pop sub dounderline } if
  bx { dup currentpoint pop sub dobox } if
  y0 moveto
} bind def

% Function n: move to the next line
/n {
  /y0 y0 bfs sub store
  x0 y0 moveto
} bind def

% Function N: show and move to the next line
/N {
  Show
  /y0 y0 bfs sub store
  x0 y0 moveto
} bind def

/S {
  Show
} bind def

%%BeginResource: procset a2ps-a2ps-hdr 2.0 2
%%Copyright: (c) 1988, 89, 90, 91, 92, 93 Miguel Santana
%%Copyright: (c) 1995, 96, 97, 98 Akim Demaille, Miguel Santana
% Function title: prints page header.
% <ct> <rt> <lt> are passed as argument
/title { 
  % 1. Draw the background
  x v get y v get moveto
  gsave
    0 th 2 div neg rmoveto 
    th setlinewidth
    0.95 setgray
    pw 0 rlineto stroke
  grestore
  % 2. Border it
  gsave
    0.7 setlinewidth
    pw 0 rlineto
    0 th neg rlineto
    pw neg 0 rlineto
    closepath stroke
  grestore
  % stk: ct rt lt
  x v get y v get th sub 1 add moveto
%%IncludeResource: font Helvetica
  fHelvetica fnfs 0.8 mul scalefont setfont
  % 3. The left title
  gsave
    dup stringwidth pop fnfs 0.8 mul add exch % leave space took on stack
    fnfs 0.8 mul hm rmoveto
    show			% left title
  grestore
  exch
  % stk: ct ltw rt
  % 4. the right title
  gsave
    dup stringwidth pop fnfs 0.8 mul add exch % leave space took on stack
    dup
    pw exch stringwidth pop fnfs 0.8 mul add sub
    hm
    rmoveto
    show			% right title
  grestore
  % stk: ct ltw rtw
  % 5. the center title
  gsave
    pw 3 1 roll
    % stk: ct pw ltw rtw
    3 copy 
    % Move to the center of the left room
    sub add 2 div hm rmoveto
    % What is the available space in here?
    add sub fnfs 0.8 mul sub fnfs 0.8 mul sub
    % stk: ct space_left
%%IncludeResource: font Helvetica-Bold
  fHelvetica-Bold fnfs scalefont setfont
    cfshow
  grestore
} bind def

% Function border: prints virtual page border
/border { %def
  gsave				% print four sides
    0 setgray
    x v get y v get moveto
    0.7 setlinewidth		% of the square
    pw 0 rlineto
    0 ph neg rlineto
    pw neg 0 rlineto
    closepath stroke
  grestore
} bind def

% Function water: prints a water mark in background
/water { %def
  gsave
    scx scy moveto rotate
%%IncludeResource: font Times-Bold
  fTimes-Bold 100 scalefont setfont
    .97 setgray
    dup stringwidth pop 2 div neg -50 rmoveto
    show
  grestore
} bind def

% Function rhead: prints the right header
/rhead {  %def
  lx ly moveto
  fHelvetica fnfs 0.8 mul scalefont setfont
  l-show
} bind def

% Function footer (cf rf lf -> -)
/footer {
  fHelvetica fnfs 0.8 mul scalefont setfont
  dx dy moveto
  show

  snx sny moveto
  l-show
  
  fnx fny moveto
  c-show
} bind def
%%EndResource
%%BeginResource: procset a2ps-black+white-Prolog 2.0 1

% Function T(ab), jumps to the n-th tabulation in the current line
/T { 
  cw mul x0 add y0 moveto
} bind def

% Function n: move to the next line
/n { %def
  /y0 y0 bfs sub store
  x0 y0 moveto
} bind def

% Function N: show and move to the next line
/N {
  Show
  /y0 y0 bfs sub store
  x0 y0 moveto
}  bind def

/S {
  Show
} bind def

/p {
  false UL
  false BX
  fCourier bfs scalefont setfont
  Show
} bind def

/sy {
  false UL
  false BX
  fSymbol bfs scalefont setfont
  Show
} bind def

/k {
  false UL
  false BX
  fCourier-Oblique bfs scalefont setfont
  Show
} bind def

/K {
  false UL
  false BX
  fCourier-Bold bfs scalefont setfont
  Show
} bind def

/c {
  false UL
  false BX
  fCourier-Oblique bfs scalefont setfont
  Show
} bind def

/C {
  false UL
  false BX
  fCourier-BoldOblique bfs scalefont setfont
  Show 
} bind def

/l {
  false UL
  false BX
  fHelvetica bfs scalefont setfont
  Show
} bind def

/L {
  false UL
  false BX
  fHelvetica-Bold bfs scalefont setfont
  Show 
} bind def

/str{
  false UL
  false BX
  fTimes-Roman bfs scalefont setfont
  Show
} bind def

/e{
  false UL
  true BX
  fHelvetica-Bold bfs scalefont setfont
  Show
} bind def

%%EndResource
%%EndProlog
%%BeginSetup
%%IncludeResource: font Courier
%%IncludeResource: font Courier-Oblique
%%IncludeResource: font Courier-Bold
%%IncludeResource: font Times-Roman
%%IncludeResource: font Symbol
%%IncludeResource: font Courier-BoldOblique
%%BeginResource: encoding ISO-8859-1Encoding
/ISO-8859-1Encoding [
/.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef 
/.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef 
/.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef 
/.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef 
/space /exclam /quotedbl /numbersign /dollar /percent /ampersand /quoteright 
/parenleft /parenright /asterisk /plus /comma /minus /period /slash 
/zero /one /two /three /four /five /six /seven 
/eight /nine /colon /semicolon /less /equal /greater /question 
/at /A /B /C /D /E /F /G 
/H /I /J /K /L /M /N /O 
/P /Q /R /S /T /U /V /W 
/X /Y /Z /bracketleft /backslash /bracketright /asciicircum /underscore 
/quoteleft /a /b /c /d /e /f /g 
/h /i /j /k /l /m /n /o 
/p /q /r /s /t /u /v /w 
/x /y /z /braceleft /bar /braceright /asciitilde /.notdef 
/.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef 
/.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef 
/.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef 
/.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef 
/space /exclamdown /cent /sterling /currency /yen /brokenbar /section 
/dieresis /copyright /ordfeminine /guillemotleft /logicalnot /hyphen /registered /macron 
/degree /plusminus /twosuperior /threesuperior /acute /mu /paragraph /bullet 
/cedilla /onesuperior /ordmasculine /guillemotright /onequarter /onehalf /threequarters /questiondown 
/Agrave /Aacute /Acircumflex /Atilde /Adieresis /Aring /AE /Ccedilla 
/Egrave /Eacute /Ecircumflex /Edieresis /Igrave /Iacute /Icircumflex /Idieresis 
/Eth /Ntilde /Ograve /Oacute /Ocircumflex /Otilde /Odieresis /multiply 
/Oslash /Ugrave /Uacute /Ucircumflex /Udieresis /Yacute /Thorn /germandbls 
/agrave /aacute /acircumflex /atilde /adieresis /aring /ae /ccedilla 
/egrave /eacute /ecircumflex /edieresis /igrave /iacute /icircumflex /idieresis 
/eth /ntilde /ograve /oacute /ocircumflex /otilde /odieresis /divide 
/oslash /ugrave /uacute /ucircumflex /udieresis /yacute /thorn /ydieresis 
] def
%%EndResource
% Initialize page description variables.
/sh 612 def
/sw 792 def
/llx 24 def
/urx 768 def
/ury 588 def
/lly 24 def
/#copies 1 def
/th 15.000000 def
/fnfs 11 def
/bfs 7.493857 def
/cw 4.496314 def

% Dictionary for ISO-8859-1 support
/iso1dict 8 dict begin
  /fCourier ISO-8859-1Encoding /Courier reencode_font
  /fCourier-Bold ISO-8859-1Encoding /Courier-Bold reencode_font
  /fCourier-BoldOblique ISO-8859-1Encoding /Courier-BoldOblique reencode_font
  /fCourier-Oblique ISO-8859-1Encoding /Courier-Oblique reencode_font
  /fHelvetica ISO-8859-1Encoding /Helvetica reencode_font
  /fHelvetica-Bold ISO-8859-1Encoding /Helvetica-Bold reencode_font
  /fTimes-Bold ISO-8859-1Encoding /Times-Bold reencode_font
  /fTimes-Roman ISO-8859-1Encoding /Times-Roman reencode_font
currentdict end def
/bgcolor [ 0 0 0 ] def
/bg false def
/ul false def
/bx false def
% The font for line numbering
/f# /Helvetica findfont bfs .6 mul scalefont def
/fSymbol /Symbol findfont def
/hm fnfs 0.25 mul def
/pw
   cw 81.400000 mul
def
/ph
   522.321860 th add
def
/pmw urx llx sub pw 2 mul sub 1 div def
/pmh 0 def
/v 0 def
/x [
  0
  dup pmw add pw add
] def
/y [
  pmh ph add 0 mul ph add
  dup
] def
/scx sw 2 div def
/scy sh 2 div def
/snx urx def
/sny lly 2 add def
/dx llx def
/dy sny def
/fnx scx def
/fny dy def
/lx snx def
/ly ury fnfs 0.8 mul sub def
/sx 0 def
/tab 8 def
/x0 0 def
/y0 0 def
%%EndSetup

%%Page: (1-2) 1
%%BeginPageSetup
/pagesave save def
sh 0 translate 90 rotate
%%EndPageSetup
iso1dict begin
gsave
llx lly 12 add translate
/v 0 store
/x0 x v get 3.147420 add sx cw mul add store
/y0 y v get bfs th add sub store
x0 y0 moveto
(!CHARMM Element source/stringm/ftsm.src $Revision: 0 $) p n
(!) N
(! finite-temperature string / NEB code) N
(! documentation will be provided in stringm.doc) N
(!) N
(__CHARMM_ONLY##IF STRINGM) N
(!) N
(      module ftsm ! finite-temperature string method) N
(      __CHARMM_ONLY __DEP_KINDS) N
(      use ftsm_var) N
(      use ftsm_voronoi) N
(      __DEP_BESTFIT ! , only : RMSBestFit, rmsd) N
(!) N
(      private) N
(!ccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccc) N
(!     SUBROUTINES) N
(!) N
(      public ftsm_parse) N
(      public ftsm_main) N
(      private ftsm_calc) N
(      private ftsm_compute_fe_fd) N
(      private ftsm_repa) N
(      private ftsm_mini) N
(      private ftsm_swap_bc) N
(      private ftsm_update_overlap_coor) N
(      private ftsm_save_com) N
(      private ftsm_init) N
(      private ftsm_done) N
(      private ftsm_repa_init) N
(      private ftsm_mini_init) N
(      private ftsm_list_atoms) N
(      private ftsm_set_weights) N
(      private ftsm_swap) N
(      private ftsm_fill) N
(      private ftsm_lift) N
(      private ftsm_compute_overlap_ind) N
(      private ftsm_define_rtmd_type) N
(      private ftsm_write_dcd) N
(      private ftsm_read_dcd) N
(      private ftsm_write_cor) N
(      private ftsm_read_cor) N
(      private ftsm_stat_init) N
(      private ftsm_stat) N
(      private ftsm_test_grad) N
(      private ftsm_test_parallel) N
(      private ftsm_check) N
(      private ftsm_addforce) N
(      private ftsm_evolve) N
(      private ftsm_repl_exchange) N
(!) N
(      contains) N
(!) N
(      subroutine ftsm_parse\(COMLYN,COMLEN\)) N
(      use ftsm_rex, only: ftsm_rex_set_temp) N
(      use ftsm_voronoi, only: ftsm_voronoi_map, ftsm_voronoi_initialized, ftsm_v) N
(oronoi_whereami) N
(!----------------------------------------------------------------------) N
(! command parser for the finite temperature string) N
(!----------------------------------------------------------------------) N
(      __DEP_OUTPUT) N
(      __DEP_PARSER ) N
(      __DEP_NUMBER ) N
(      __DEP_MULTICOM) N
(      __DEP_CONST ) N
(      __DEP_MPI ) N
(      __DEP_SELECT) N
(      __DEP_COORDINATES) N
(      __DEP_SIZE) N
(!) N
(ftsm.ftn) (Page 1/90) (Apr 16, 13 16:43) title
border
/v 1 store
/x0 x v get 3.147420 add sx cw mul add store
/y0 y v get bfs th add sub store
x0 y0 moveto
(#ifdef __CHARMM) p n
(      use ctitla ) N
(! need BNBND, BIMAG for ftsm_mini) N
(      use bases_fcm, only : BNBND, BIMAG) N
(#endif) N
(!ccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccc) N
(      __IMPNONE) N
(!) N
(      character\(len=*\) :: comlyn) N
(      int :: comlen) N
(! local variables) N
(      int :: ivver, ivv2, iorig, ileap ! for dynamics) N
(      int :: error, klen, strl) N
(!) N
(      character\(len=16\) :: keyword) N
(      character\(len=80\) :: fname) N
(      character\(len=6\) :: whoami) N
(      float :: zval, k, step, voro_cut) N
(      int :: ifile, c1, c2, qcor, qdcd, flen,            &) N
(     &           num_ave_samples, irep, i, imode,        &) N
(     &           iorie, irmsd, ierror, me) N
(!) N
(#ifdef __CHARMM) N
(      int :: oldiol, isele) N
(      int :: iselct\(natom\)) N
(#else) N
(      int :: natom) N
( __DECLARE_DMOL_SELECT) N
(#endif) N
(      float, pointer :: fd_error\(:,:\)) N
(!) N
(      bool :: qroot, qslave, qprint, qcomp, voronoi_check_map, ok) N
(!) N
( __DECLARE_MSGBUF) N
(!) N
(#include "../../mpitype.def") N
(!) N
(      data whoami /' FTSM>'/) N
(!) N
(      keyword=__NEXTA\(comlyn,comlen\)) N
(!) N
(      qroot=MPI_COMM_STRNG.ne.MPI_COMM_NULL) N
(      qslave=\(\(MPI_COMM_LOCAL.ne.MPI_COMM_NULL\).and.SIZE_LOCAL.gt.1\)) N
(      qprint=qroot.and.ME_STRNG.eq.0) N
(!) N
(! check for smcv initialization; quit if initialized) N
(      if \(smcv_initialized\) then) N
(       __WRN\(whoami,' SMCV IS ON AND CANNOT BE USED WITH FTSM. NOTHING DONE.'\)) N
(       return) N
(      endif) N
(!ccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccc) N
(      if \(__STRNCMP\(keyword,'INIT',4\)\) then) N
(        call ftsm_init\(\)) N
(        return) N
(      endif) N
(!ccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccc) N
(      if \(.not.ftsm_initialized\) then) N
(        call ftsm_init\(\)) N
(      endif) N
(!cccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccc) N
(      if \(__STRNCMP\(keyword,'DONE',4\)\) then) N
(        call ftsm_done\(\)) N
(!cccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccc) N
(      elseif \(__STRNCMP\(keyword,'REPA',4\)\) then) N
(       if \(comlen.gt.0\) then ! this is an initialization call!) N
(        call ftsm_repa_init\(comlyn, comlen\)) N
(       else) N
(        if \(ftsm_check\(qorient\)\) call ftsm_repa\(\)) N
(       endif) N
(ftsm.ftn) (Page 2/90) (Apr 16, 13 16:43) title
border
grestore
(Printed by surgeon) rhead
(ftsm.ftn) (1/45) (Wednesday May 01, 2013) footer
end % of iso1dict
pagesave restore
showpage
%%Page: (3-4) 2
%%BeginPageSetup
/pagesave save def
sh 0 translate 90 rotate
%%EndPageSetup
iso1dict begin
gsave
llx lly 12 add translate
/v 0 store
/x0 x v get 3.147420 add sx cw mul add store
/y0 y v get bfs th add sub store
x0 y0 moveto
(!ccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccc) p n
(      elseif \(__STRNCMP\(keyword,'MINI',4\)\) then) N
(       if \(comlen.gt.0 .or. .not. ftsm_mini_initialized \) then ! this is an init) N
(ialization call) N
(        call ftsm_mini_init\(comlyn, comlen\)) N
(       else) N
(        if \(ftsm_check\(qorient\)\) then) N
(         if \(qorient.and.any\(__XX\(iatom_o\).eq.__NAN\)\) then) N
(         __WRN\(whoami,'MAIN ORIENTATION X-SET HAS UNDEFINED VALUES. NOTHING DONE) N
(.'\)) N
(         else) N
(          call ftsm_mini\(__XX\(1:natom\), __YY\(1:natom\), __ZZ\(1:natom\) &) N
(#ifdef __CHARMM) N
(     &                                         ,WMAIN\(1:natom\), BNBND, BIMAG    ) N
( &) N
(#endif) N
(     &                                         \)) N
(         endif ! qorient) N
(        endif ! ftsm_check) N
(       endif ! comlen) N
(!ccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccc) N
(      elseif \(__STRNCMP\(keyword,'STAT',4\)\) then) N
(       if \(comlen.gt.0\) then ! this is an initialization call!) N
(        call ftsm_stat_init\(comlyn, comlen\)) N
(       else) N
(        call ftsm_stat\(\)) N
(       endif) N
(!ccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccc) N
(      elseif \(__STRNCMP\(keyword,'DYNA',4\)\) then) N
(#ifdef __CHARMM) N
(!ccccc will assume that other distributions specify dynamics elsewhere ccccccc) N
(       ivver=__INDX_RM\(comlyn, comlen, 'VVER'\)) N
(       ivv2=__INDX_RM\(comlyn, comlen, 'VV2'\)) N
(       iorig=__INDX_RM\(comlyn, comlen, 'ORIG'\)) N
(       ileap=__INDX_RM\(comlyn, comlen, 'LEAP'\)) N
(       if \(\(ivver+ivv2+iorig\).gt.0\) then) N
(        __WRN\( whoami,'ONLY LEAP-FROG DYNAMICS ARE SUPPORTED. NOTHING DONE'\)) N
(        return) N
(       endif) N
(!      force LEAP DYNAMICS) N
(       call joinwd\(comlyn, mxcmsz, comlen, 'LEAP ', 5\)) N
(#endif) N
(!ccccccccccccccc PARSE OTHER DYNAMICS OPTIONS) N
(! code from SMCV) N
(       voronoi_hist_on=\(__INDX_RM\(comlyn,comlen,'VORO'\).gt.0\)) N
(       if \(voronoi_hist_on\) then) N
(        voronoi_allow_cross=\(__INDX_RM\(comlyn,comlen, 'VCRS'\).gt.0\)) N
(        if \(voronoi_allow_cross\) then) N
(         voronoi_update_freq=__GET_RM_I\(comlyn,comlen,'VCRF',0\)) N
(         if \(voronoi_update_freq.le.0\) then) N
(          __WRN\(whoami,'MUST SPECIFY POSITIVE VCRF. VORONOI CELL CROSSING DISABL) N
(ED.'\)) N
(          voronoi_allow_cross=.false.) N
(         elseif \(__INDX\(comlyn, comlen, 'VINI',4\).gt.0\) then ! if vini is presen) N
(t) N
(          voronoi_nocross_ini=__GET_RM_I\(comlyn,comlen,'VINI',0\) ! get it) N
(          if \(voronoi_nocross_ini.le.0\) then) N
(           __WRN\(whoami,'NONPOSITIVE VINI SPECIFIED. WILL SET TO ZERO.'\)) N
(           voronoi_nocross_ini=0) N
(          endif ! voronoi_nocross_ini>0) N
(         else) N
(          voronoi_nocross_ini=0) N
(         endif ! voronoi_nocross_ini present) N
(        endif ! voronoi_allow_cross) N
(!) N
(!    initialize Voronoi data) N
(        if \(.not.ftsm_voronoi_initialized\) call ftsm_voronoi_init\(\)) N
(!    standard V. calculation case -- no crossing) N
(        compute_whereami=.false.) N
(ftsm.ftn) (Page 3/90) (Apr 16, 13 16:43) title
border
/v 1 store
/x0 x v get 3.147420 add sx cw mul add store
/y0 y v get bfs th add sub store
x0 y0 moveto
(        if \(.not.voronoi_allow_cross\) then) p n
(!    create standard map \(unless map is present\)) N
(         if \(all\(ftsm_voronoi_map.eq.-1\)\) then) N
(          ftsm_voronoi_map=\(/ \(i, i=1, nstring\) /\)) N
(          compute_whereami=.true. ! will be computed by dynamc routine) N
(         endif) N
(        endif) N
(!) N
(        voronoi_check_map=\(__INDX_RM\(comlyn,comlen, 'CHCK'\).gt.0\)) N
(!) N
(!    compute whereami) N
(!) N
(        if \(voronoi_check_map\) then) N
(         if \(qprint\) then) N
(          write\(_MSGBUF, 660\) whoami ; __PRINT\(_MSGBUF\)) N
(         endif) N
( 660  FORMAT\(A,' CHECKING VORONOI MAP AGAINST CURRENT COORDINATES.'\)) N
(!) N
(         compute_whereami=.false.) N
(         call ftsm_voronoi_whereami_compute\(__X,__Y,__Z\)) N
(!) N
(         if \(all\(ftsm_voronoi_map.ne.-1\)\) then ! does the map have valid entries) N
(           me=ftsm_voronoi_map\(mestring+1\)) N
(!    compare me and whereami:) N
(           if \(qroot\) then) N
(            if\(SIZE_STRNG.gt.1\) then) N
(             call MPI_ALLREDUCE\(me.eq.ftsm_voronoi_whereami, ok,          &) N
(     &         1, mpibool, MPI_LAND, MPI_COMM_STRNG, ierror\)) N
(            else) N
(             ok=me.eq.ftsm_voronoi_whereami) N
(            endif) N
(           endif ! qroot) N
(           if \(qslave\) then ) N
(            __BROADCAST_LOCAL_4B\(ok,1\)) N
(           endif) N
(           if \(.not.ok\) then) N
(            __WRN\(whoami,'VORONOI MAP INCONSISTENT WITH CURRENT COORDINATES. ABO) N
(RTING.'\)) N
(            return) N
(           endif ! .not. ok) N
(         else ! voronoi map invalid \(or was not read\); proceed anyway using curr) N
(ent whereami) N
(          __WRN\( whoami,'VORONOI MAP CONTAINS INVALID ENTRIES.'\)) N
(         endif ! ftsm_voronoi_map.ne.-1) N
(!) N
(        else) N
(         ftsm_voronoi_whereami=ftsm_voronoi_map\(mestring+1\)) N
(        endif ! voronoi_check_map) N
(!) N
(       endif ! voronoi_hist_on) N
(!      reset internal interation counter for ftsm_master) N
(       olditeration=0) N
(!) N
(       update_on=\(__INDX_RM\(comlyn,comlen, 'UPDA'\).gt.0\)) N
(       if \(update_on\) then) N
(        update_freq=__GET_RM_I\(comlyn,comlen,'UPDF',0\)) N
(        if \(update_freq.le.0\) then) N
(         __WRN\( whoami,'UPDATE FREQUENCY INVALID OR UNSPECIFIED. WILL NOT UPDATE) N
(.'\)) N
(         update_on=.false.) N
(        else) N
(         repa_on=\(__INDX_RM\(comlyn,comlen, 'REPA'\).gt.0\)) N
(         ftsm_mini_on=\(__INDX_RM\(comlyn,comlen, 'MINI'\).gt.0\)) N
(        endif) N
(       endif) N
(!) N
(       stat_on=\(__INDX_RM\(comlyn,comlen, 'STAT'\).gt.0\)) N
(       if \(stat_on\) then) N
(        stat_freq=__GET_RM_I\(comlyn,comlen,'STAF',0\)) N
(ftsm.ftn) (Page 4/90) (Apr 16, 13 16:43) title
border
grestore
(Printed by surgeon) rhead
(ftsm.ftn) (2/45) (Wednesday May 01, 2013) footer
end % of iso1dict
pagesave restore
showpage
%%Page: (5-6) 3
%%BeginPageSetup
/pagesave save def
sh 0 translate 90 rotate
%%EndPageSetup
iso1dict begin
gsave
llx lly 12 add translate
/v 0 store
/x0 x v get 3.147420 add sx cw mul add store
/y0 y v get bfs th add sub store
x0 y0 moveto
(        if \(stat_freq.le.0\) then) p n
(         __WRN\( whoami,'STATISTICS FREQUENCY INVALID OR UNSPECIFIED.'\)) N
(         stat_on=.false.) N
(        endif) N
(       endif ! stat_on) N
(!) N
(       evolve_ftsm_on=\(__INDX_RM\(comlyn,comlen, 'EVOL'\).gt.0\)) N
(       if \(evolve_ftsm_on\) then) N
(        evolve_freq=__GET_RM_I\(comlyn,comlen,'EVOF',0\)) N
(        if \(evolve_freq.le.0\) then) N
(         __WRN\( whoami,'EVOLUTION FREQUENCY INVALID OR UNSPECIFIED. WILL NOT EVO) N
(LVE.'\)) N
(         evolve_ftsm_on=.false.) N
(        endif) N
(       endif ! evolve_ftsm_on) N
(!) N
(       if \(evolve_ftsm_on\) then ! still on \(see above\)) N
(        evolve_nskip=__GET_RM_I\(comlyn,comlen,'EVOS',0\)) N
(!) N
(! ----- types of evolution) N
(!) N
(        evolve_expo_on=\(__INDX_RM\(comlyn,comlen,'EXPO'\).gt.0\) ! use exponential ) N
(convolution) N
(        if \(evolve_expo_on\) then) N
(         evolve_expo_mem=__GET_RM_F\(comlyn,comlen,'MEMO',0.999d0\)) N
(        endif) N
(!) N
(        evolve_aver_on=\(__INDX_RM\(comlyn,comlen,'AVER'\).gt.0\) ! r_ref=mean\(r_ins) N
(t\)) N
(        if \(evolve_aver_on\) then) N
(         num_evolve_samples=0) N
(         max_evolve_samples=0) N
(!        setting this large will dampen initial fluctuations) N
(         if \(__INDX\(comlyn, comlen,'NAVE' ,4\).gt.0\) then) N
(          num_ave_samples=__GET_RM_I\(comlyn,comlen,'NAVE',-1\)) N
(          if \(num_ave_samples.gt.0\) then) N
(            num_evolve_samples=num_ave_samples) N
(          else) N
(           __WRN\(whoami, 'INVALID NUMBER OF SAMPLES SPECIFIED. WILL SET TO ZERO.) N
('\)) N
(          endif ! num_samples) N
(         endif ! NAVE) N
(!) N
(         if \(__INDX\(comlyn, comlen,'MAXAVE',6\).gt.0\) then) N
(          num_ave_samples=__GET_RM_I\(comlyn,comlen,'MAXAVE',-1\)) N
(          if \(num_ave_samples.gt.0\) then) N
(            max_evolve_samples=num_ave_samples) N
(          else) N
(  __WRN\(whoami,'INVALID MAXIMUM NUMBER OF SAMPLES SPECIFIED. WILL SET TO ZERO.'\)) N
(          endif ! num_samples) N
(         endif ! MAXAVE) N
(        endif ! evolve_aver) N
(!) N
(        i=0) N
(        if \(evolve_expo_on\)   i=i+1) N
(        if \(evolve_aver_on\)   i=i+1) N
(!) N
(        if \(i.gt.1\) then) N
(         __WRN\( whoami,'MORE THAN ONE EVOLUTION SCHEME REQUESTED. WILL USE EXPO.) N
('\)) N
(         evolve_expo_on=.true.) N
(         evolve_aver_on=.false.) N
(        endif) N
(!) N
(        if \(i.eq.0\) then) N
(         __WRN\( whoami,'EVOLUTION SCHEME UNSPECIFIED. WILL USE EXPO.'\)) N
(         evolve_expo_on=.true.) N
(         evolve_aver_on=.false.) N
(        endif) N
(ftsm.ftn) (Page 5/90) (Apr 16, 13 16:43) title
border
/v 1 store
/x0 x v get 3.147420 add sx cw mul add store
/y0 y v get bfs th add sub store
x0 y0 moveto
(       endif ! evolve_ftsm_on) p n
(!) N
(       if \(update_on.and..not.\(evolve_ftsm_on.or.repa_on.or.ftsm_mini_on\)\) then) N
(        __WRN\( whoami,'EVOLUTION, REPARAMETRIZATION AND MINIMIZATION ARE ALL DIS) N
(ABLED. UPDATE IS OFF.'\)) N
(        update_on=.false.) N
(       endif) N
(!) N
(       restrained_on=\(__INDX_RM\(comlyn,comlen, 'RSTR'\).gt.0\)) N
(       if \(restrained_on\) then) N
(        restrained_eq_steps=__GET_RM_I\(comlyn,comlen,'REEQ',0\)) N
(        if \(restrained_eq_steps.lt.0\) then) N
(          __WRN\(whoami,'REEQ CANNOT BE NEGATIVE. WILL SET TO ZERO.'\)) N
(          restrained_eq_steps=0) N
(        endif) N
(        restrained_eq0=0) N
(       endif) N
(!) N
(       repl_x_on=\(__INDX_RM\(comlyn,comlen,'REX'\).gt.0\)) N
(       if \(repl_x_on\) then) N
(        repl_x_freq=__GET_RM_I\(comlyn,comlen,'REXF',0\)) N
(        repl_x_temp=__GET_RM_F\(comlyn,comlen,'REXT',0d0\)) N
(!) N
(        if \(repl_x_freq.le.0\) then) N
(          __WRN\(whoami,'MUST SPECIFY POSITIVE REXF. REPLICA EXCHANGE IS OFF.'\)) N
(          repl_x_on=.false.) N
(        elseif \(repl_x_temp.le.0\) then) N
(          __WRN\(whoami,'MUST SPECIFY POSITIVE REXT. REPLICA EXCHANGE IS OFF.'\)) N
(          repl_x_on=.false.) N
(        else) N
(          call ftsm_rex_set_temp\(repl_x_temp\)) N
(        endif) N
(       endif ! repl_x_on) N
(!) N
(       if \(update_on.or.repl_x_on\) then ! decrease output) N
(         string_noprint=\(__INDX_RM\(comlyn,comlen,'NOPR'\).gt.0\)) N
(       endif) N
(!--------------- DONE PARSING DYNAMICS OPTIONS -----) N
(!    print summary) N
(!cccccccccccccccccc STRING METHOD OPTIONS cccccccccccccccccccccc) N
(       if \(qprint\) then) N
(        WRITE \(_MSGBUF,'\(2A\)'\) whoami, ' STRING METHOD ENABLED.'; __PRINT\(_MSGBU) N
(F\)) N
(        if \(evolve_ftsm_on\) then) N
(            WRITE \(_MSGBUF,'\(/,2A,/,2A,I7,A\)'\)                          &) N
(     &      whoami, ' STRING EVOLUTION ENABLED.',                       &) N
(     &      whoami, ' WILL EVOLVE AFTER EVERY ',                        &) N
(     &      evolve_freq,' ITERATIONS.'; __PRINT\(_MSGBUF\)) N
(            if \(restrained_on.and.evolve_nskip.gt.0\) then) N
(             WRITE \(_MSGBUF,'\(2A,I7,A\)'\)                                 &) N
(     &       whoami, ' THE FIRST', evolve_nskip,                         &) N
(     &       ' ITERATIONS WILL NOT CONTRIBUTE TO AVERAGES.'; ) N
(             __PRINT\(_MSGBUF\)) N
(            endif) N
(            if \(evolve_expo_on\) then) N
(               write\(_MSGBUF,671\) whoami, whoami, evolve_expo_mem ; __PRINT\(_MSG) N
(BUF\)) N
( 671  format\(A,' STRING EVOLUTION WILL BE OF THE FORM:',/,              &) N
(     &       A,' R\(N+1\)=A*R\(N\)+\(1-A\)*RINST, A=',F9.5,'.'\)) N
(            elseif \(evolve_aver_on\) then) N
(               write\(_MSGBUF,6710\) whoami, whoami, num_evolve_samples ; __PRINT\() N
(_MSGBUF\)) N
( 6710 format\(A,' CV EVOLUTION WILL BE OF THE FORM:',/,                  &) N
(     & A,' R\(N\)=AVERAGE_0^{N}\(RINST\).  INITIAL NUMBER OF SAMPLES IS ',  &) N
(     & I9,'.'\)) N
(             if \(max_evolve_samples.gt.0\)                               &) N
(     &          write\(_MSGBUF, 6711\) whoami, max_evolve_samples ; __PRINT\(_MSGBU) N
(F\)) N
( 6711 format\(A, ' ONLY THE MOST RECENT ', I9,' SAMPLES WILL BE USED.'\)) N
(ftsm.ftn) (Page 6/90) (Apr 16, 13 16:43) title
border
grestore
(Printed by surgeon) rhead
(ftsm.ftn) (3/45) (Wednesday May 01, 2013) footer
end % of iso1dict
pagesave restore
showpage
%%Page: (7-8) 4
%%BeginPageSetup
/pagesave save def
sh 0 translate 90 rotate
%%EndPageSetup
iso1dict begin
gsave
llx lly 12 add translate
/v 0 store
/x0 x v get 3.147420 add sx cw mul add store
/y0 y v get bfs th add sub store
x0 y0 moveto
() p n
(            endif) N
(        endif ! evolve_ftsm_on) N
(!ccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccc) N
(        if \(update_on\) then) N
(          WRITE \(_MSGBUF,666\) whoami, update_freq ;      __PRINT\(_MSGBUF\)) N
( 666  format\(A,' WILL UPDATE IMAGES AFTER EVERY ',I7,' ITERATIONS.'\)) N
(         if \(ftsm_mini_on\) then) N
( 669  format\(A,' WILL MINIMIZE STRING DURING UPDATE '\)) N
(          WRITE \(_MSGBUF,669\) whoami ) N
(          __PRINT\(_MSGBUF\)) N
(         endif ! mini) N
(         if \(repa_on\) then) N
( 667  format\(A,' WILL REPARAMETRIZE STRING DURING UPDATE '\)) N
(          WRITE \(_MSGBUF,667\) whoami ) N
(          __PRINT\(_MSGBUF\)) N
(         endif) N
(        endif ! update_on) N
(!ccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccc) N
(        if \(restrained_on\) then) N
(            WRITE \(_MSGBUF,'\(2A\)'\)                                         &) N
(     &      whoami, ' WILL USE RESTRAINED DYNAMICS.' ;   __PRINT\(_MSGBUF\)) N
(!) N
(            write\(_MSGBUF,665\) whoami, restrained_eq_steps ;   __PRINT\(_MSGBUF\)) N
( 665  format\(A, ' WILL ADJUST TO NEW RESTRAINTS OVER ',I11, ' STEPS.'\)) N
(!) N
(!       proj_on is necessary to compute free energies) N
(         if \(proj_on\) then) N
(            write \(_MSGBUF,'\(2A\)'\) whoami,                                 &) N
(     & ' WILL RESTRAIN SYSTEM TO PLANE PERPENDICULAR TO PATH.' ; __PRINT\(_MSGBUF) N
(\)) N
(         else) N
(            write \(_MSGBUF,'\(2A\)'\) whoami,                                 &) N
(     & ' WILL RESTRAIN SYSTEM TO PATH IMAGE.'//                         &) N
(     & ' \(FE/MFPT CANNOT BE COMPUTED\).' ; __PRINT\(_MSGBUF\)) N
(         endif ! proj_on) N
(        else) N
(!) N
(        endif !restrained) N
(!cccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccc) N
(        if \(stat_on\) then) N
(            write\(_MSGBUF,668\) whoami, stat_freq ;                __PRINT\(_MSGBU) N
(F\)) N
( 668  format\(A, ' WILL OUTPUT STRING STATISTICS AFTER EVERY ',I7, ' STEPS.'\)) N
(        endif) N
(!cccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccc) N
(        if \(repl_x_on\) then) N
(            write\(_MSGBUF,691\) whoami, whoami, repl_x_freq, repl_x_temp) N
(            __PRINT\(_MSGBUF\)) N
( 691  format\(A, ' WILL ATTEMPT TO EXCHANGE NEIGHBORING REPLICAS ',/     &) N
(     &       A, ' ONCE IN EVERY ',I6,' ITERATIONS AT ',F11.3, ' K.'\)) N
(        endif ! repl_x_on) N
(!ccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccc) N
(        if \(voronoi_hist_on\) then) N
(            write\(_MSGBUF,670\) whoami ; __PRINT\(_MSGBUF\)) N
( 670  format\(A, ' WILL COMPUTE FREE ENERGY ALONG STRING USING VORONOI TESSELLATI) N
(ON.' \)) N
(         if \(voronoi_allow_cross\) then) N
(          write\(_MSGBUF,601\) whoami ; __PRINT\(_MSGBUF\)) N
(          write\(_MSGBUF,602\) whoami, whoami, voronoi_update_freq ; __PRINT\(_MSGB) N
(UF\)) N
(          if \(voronoi_nocross_ini.gt.0\) then) N
(           write\(_MSGBUF, 603\) whoami, whoami, voronoi_nocross_ini ; __PRINT\(_MS) N
(GBUF\)) N
(          endif) N
( 601  format\(A, ' WILL ALLOW REPLICAS TO CROSS BETWEEN V. CELLS.'\)) N
( 602  format\(A, ' WILL UPDATE CROSSING STATISTICS ONCE IN EVERY',/,     &) N
(     &      A, I6, ' ITERATIONS.'\)) N
( 603  format\(A, ' WILL DISALLOW CROSSING DURING THE INITIAL ',/,A,I6,   &) N
(ftsm.ftn) (Page 7/90) (Apr 16, 13 16:43) title
border
/v 1 store
/x0 x v get 3.147420 add sx cw mul add store
/y0 y v get bfs th add sub store
x0 y0 moveto
(     &       ' ITERATIONS.'\)) p n
(         endif) N
(         if \(restrained_on\) then ) N
(          write\(_MSGBUF,'\(2A,/2A\)'\)   &) N
(     &      whoami, ' STRING DYNAMICS SHOULD BE USED WITH CAUTION',     &) N
(     &      whoami, ' DURING VORONOI FE COMPUTATION.' ; __PRINT\(_MSGBUF\)) N
(         endif) N
(         if \(update_on\) then) N
(          if \(.not.voronoi_allow_cross\) then) N
(           write\(_MSGBUF,'\(2A,/2A\)'\)                                       &) N
(     &    whoami, ' STRING UPDATE DURING VORONOI FE COMPUTATION IS',     &) N
(     &    whoami, ' EXPERIMENTAL AND SHOULD BE USED WITH CAUTION ' ; __PRINT\(_MS) N
(GBUF\)) N
(          else) N
(           write\(_MSGBUF,'\(2A,/2A,/2A\)'\)                                   &) N
(     &    whoami, ' STRING CANNOT BE UPDATED ON THE FLY',     &) N
(     &    whoami, ' IF VORONOI CELL CROSSING IS ALLOWED.',      &) N
(     &    whoami, ' VORONOI CELL CROSSING WILL BE OFF.' ; __PRINT\(_MSGBUF\)) N
(           voronoi_allow_cross=.false.) N
(          endif ! voronoi_allow_cross) N
(         endif ! update_on) N
(        endif ! voronoi_hist_on) N
(!ccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccc) N
(       endif ! qprint) N
(!cccccccccccccccccccccccccccccccccccccccccccccccccccccccccccc) N
(       call ftsm_save_com\(\)       ! recompute COM in case weights changed) N
(       call ftsm_swap_bc\(.true.\)  ! update boundary replicas \(with new COM-free ) N
(structures\)) N
(!      turn on string for dynamics) N
(       ftsm_on=.true.) N
(       ftsm_ini_iteration = -ione ! will be computed by ftsm_main) N
(!      call dynamics parser) N
(       call dynopt\(comlyn, comlen\)) N
(!cccccc turn off string for regular dynamics ccccccc) N
(       ftsm_on=.false.) N
(       repa_on=.false. ! turn off after dynamics because SM0K also uses this fla) N
(g; therefore a subsequent minimization would call reparametrization) N
(!ccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccc) N
(cccc) N
(!ccccccccccccccccccc ADDITIONAL VORONOI OPTIONS cccccccccccccccccccccccccccccccc) N
(cccc) N
(      elseif \(__STRNCMP\(keyword,'VORO',4\)\) then) N
(!    get voronoi command) N
(       keyword=__NEXTA\(comlyn,comlen\)) N
(       if \(__STRNCMP\(keyword,'VMAP',4\)\) then) N
(        if \(__INDX_RM\(comlyn, comlen, 'CALC'\).gt.0\) then) N
(          if \(qprint\) then ; write\(_MSGBUF,6010\) whoami ; ) N
(          __PRINT\(_MSGBUF\) ; endif) N
( 6010 format\(A,' WILL CALCULATE VORONOI MAP FROM MAIN COORDINATES.'\)) N
(          call ftsm_voronoi_whereami_compute\(__X,__Y,__Z\)) N
(!    put 'whereami' into the map) N
(          if \(qroot.and.SIZE_STRNG.gt.1\) then) N
(           call MPI_ALLGATHER\(ftsm_voronoi_whereami, 1, mpiint,       &) N
(     &      ftsm_voronoi_map, 1, mpiint, MPI_COMM_STRNG, ierror\)) N
(          else) N
(           ftsm_voronoi_map\(mestring+1\)=ftsm_voronoi_whereami) N
(          endif) N
(          if \(qslave\) then) N
(#ifdef __CHARMM) N
(          __BROADCAST_LOCAL_4B\(ftsm_voronoi_map,nstring\)  !__CHARMM_ONLY##.not.I) N
(NTEGER8) N
(          __BROADCAST_LOCAL_8B\(ftsm_voronoi_map,nstring\)  !__CHARMM_ONLY##INTEGE) N
(R8) N
(#elif defined \(__DMOL\)) N
(          __BROADCAST_LOCAL\(ftsm_voronoi_map,nstring,mpiint\)) N
(#endif) N
(!) N
(          endif) N
(!    print cccccccccccccccccccccccccccccccccccccccccccccccccccccccccccc) N
(ftsm.ftn) (Page 8/90) (Apr 16, 13 16:43) title
border
grestore
(Printed by surgeon) rhead
(ftsm.ftn) (4/45) (Wednesday May 01, 2013) footer
end % of iso1dict
pagesave restore
showpage
%%Page: (9-10) 5
%%BeginPageSetup
/pagesave save def
sh 0 translate 90 rotate
%%EndPageSetup
iso1dict begin
gsave
llx lly 12 add translate
/v 0 store
/x0 x v get 3.147420 add sx cw mul add store
/y0 y v get bfs th add sub store
x0 y0 moveto
(        elseif \(__INDX_RM\(comlyn, comlen, 'PRIN'\).gt.0\) then) p n
(          ifile=__GET_RM_I\(comlyn,comlen,'UNIT',-1\)) N
(          __GET_RM_A\(COMLYN,COMLEN,'NAME',4,FNAME,80,FLEN\)) N
(!        note: FNAME will be UPPER CASE) N
(          if \(qroot\) then) N
(           if \(flen.GT.0\) then) N
(            if \(qprint\) then ) N
(             __OPEN_FILE\(ifile,fname,'FORMATTED','WRITE'\)) N
(             write\(_MSGBUF,6011\) whoami, fname\(1:flen\) ; __PRINT\(_MSGBUF\)) N
(            endif) N
( 6011 format\(A,' WRITING VORONOI MAP TO FILE ',A,'.'\)) N
(            call ftsm_voronoi_print_map\(ifile\)) N
(            if \(qprint\) then ; __CLOSE_FILE\(ifile,'KEEP',ierror\) ; endif) N
(           else) N
(            __WRN\(whoami,'FILE NAME NOT SPECIFIED. NOTHING DONE.'\)) N
(           endif ! flen) N
(          endif ! qroot) N
(!    read ccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccc) N
(        elseif \(__INDX_RM\(comlyn, comlen, 'READ'\).gt.0\) then) N
(          ifile=__GET_RM_I\(comlyn,comlen,'UNIT',-1\)) N
(          __GET_RM_A\(COMLYN,COMLEN,'NAME',4,FNAME,80,FLEN\)) N
(!        note: FNAME will be UPPER CASE) N
(          if \(flen.GT.0\) then) N
(            if \(qprint\) then ) N
(            __OPEN_FILE\(ifile,fname,'FORMATTED','WRITE'\)) N
(             write\(_MSGBUF,6013\) whoami, fname\(1:flen\) ; __PRINT\(_MSGBUF\)) N
(            endif) N
(!) N
( 6013 format\(A,' READING VORONOI MAP FROM FILE ',A,'.'\)) N
(            call ftsm_voronoi_read_map\(ifile\)) N
(            if \(qprint\) then ; __CLOSE_FILE\(ifile,'KEEP',ierror\) ; endif) N
(           else) N
(            __WRN\(whoami,'FILE NAME NOT SPECIFIED. NOTHING DONE.'\)) N
(           endif ! flen) N
(        elseif \(__INDX_RM\(comlyn, comlen, 'CLEA'\).gt.0\) then) N
(           if \(associated\(ftsm_voronoi_map\)\) ftsm_voronoi_map=-ione) N
(        endif ! 'CALC') N
(!ccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccc) N
(       elseif \(__STRNCMP\(keyword,'READ',4\)\) then) N
(!    read "restart" file that contains \(1\) crossing_attempt \(2\) crossing_accepts) N
( \(3\) occupancy) N
(         ifile=__GET_RM_I\(comlyn,comlen,'UNIT',-1\)) N
(         __GET_RM_A\(COMLYN,COMLEN,'NAME',4,FNAME,80,FLEN\)) N
(!        note: FNAME will be UPPER CASE) N
(         if \(flen.GT.0\) then) N
(          if \(qprint\) then) N
(           __OPEN_FILE\(ifile,fname,'FORMATTED','WRITE'\)) N
(           write\(_MSGBUF,6014\) whoami, fname\(1:flen\) ; __PRINT\(_MSGBUF\) ) N
(          endif) N
( 6014 format\(A,' READING VORONOI CROSSING DATA FROM FILE ',A,'.'\)) N
(          call ftsm_voronoi_read_data\(ifile\)) N
(          if \(qprint\) then ; __CLOSE_FILE\(ifile,'KEEP',ierror\) ; endif) N
(         else) N
(          __WRN\(whoami,'FILE NAME NOT SPECIFIED. NOTHING DONE.'\)) N
(         endif ! flen) N
(!cccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccc) N
(       elseif \(__STRNCMP\(keyword,'PRIN',4\)\) then) N
(         ifile=__GET_RM_I\(comlyn,comlen,'UNIT',-1\)) N
(         __GET_RM_A\(COMLYN,COMLEN,'NAME',4,FNAME,80,FLEN\)) N
(!        note: FNAME will be UPPER CASE) N
(         if \(flen.gt.0\) then) N
(           if \(qprint\) then) N
(            __OPEN_FILE\(ifile,fname,'FORMATTED','WRITE'\)) N
(            write\(_MSGBUF,6015\) whoami, fname\(1:flen\) ; __PRINT\(_MSGBUF\)) N
( 6015 format\(A,' WRITING VORONOI CROSSING DATA TO FILE ',A,'.'\)) N
(           endif) N
(           call ftsm_voronoi_print_data\(ifile\)) N
(           if \(qprint\) then ; __CLOSE_FILE\(ifile,'KEEP',ierror\) ; endif) N
(         else) N
(ftsm.ftn) (Page 9/90) (Apr 16, 13 16:43) title
border
/v 1 store
/x0 x v get 3.147420 add sx cw mul add store
/y0 y v get bfs th add sub store
x0 y0 moveto
(            __WRN\(whoami,'FILE NAME NOT SPECIFIED. NOTHING DONE.'\)) p n
(         endif ! flen) N
(       endif ! VMAP) N
(!ccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccc) N
(ccccccccccccccccc) N
(      elseif \(__STRNCMP\(keyword,'FILL',4\)\) then ! set path from current coordina) N
(tes) N
(!) N
(       qcomp=\(__INDX_RM\(comlyn, comlen, 'COMP'\).gt.0\)) N
(!) N
(       if \(qcomp\) then) N
(        if \(qprint\) then ; write\(_MSGBUF,6657\) whoami ; __PRINT\(_MSGBUF\) ; endif) N
( 6657 format\(/A,' WILL DEFINE PATH FROM COMPARISON COORDINATES.'\)) N
(        call ftsm_fill\(__XCOMP,__YCOMP,__ZCOMP\)) N
(       else ! ~qcomp -- use main coordinates) N
(        if \(qprint\) then ; write\(_MSGBUF,6660\) whoami ; __PRINT\(_MSGBUF\) ; endif) N
( 6660 format\(/A,' WILL DEFINE PATH FROM MAIN COORDINATES.'\)) N
(        call ftsm_fill\(__X,__Y,__Z\)) N
(       endif ! qcomp) N
(!ccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccc) N
(ccccccccccccccccc) N
(      elseif \(__STRNCMP\(keyword,'CALC',4\)\) then ! calculate parallel and perpend) N
(icular distances) N
(!) N
(       qcomp=\(__INDX_RM\(comlyn, comlen, 'COMP'\).gt.0\)) N
(!) N
(       if \(qcomp\) then) N
(        if \(qprint\) then ; write\(_MSGBUF,6658\) whoami, 'COMPARISON' ; __PRINT\(_M) N
(SGBUF\) ; endif) N
(        if \(qorient.and.any\(__XXCOMP\(iatom_o\).eq.__NAN\)\) then) N
(         __WRN\(whoami,'COMPARISON ORIENTATION X-SET HAS UNDEFINED VALUES. NOTHIN) N
(G DONE.'\)) N
(        else) N
(         call ftsm_calc\(__XCOMP,__YCOMP,__ZCOMP,.false., t=one\)) N
(        endif) N
(       else ! ~qcomp -- use main coordinates) N
(        if \(qprint\) then ; write\(_MSGBUF,6670\) whoami, 'MAIN' ; __PRINT\(_MSGBUF\)) N
( ; endif) N
(        if \(qorient.and.any\(__XX\(iatom_o\).eq.__NAN\)\) then) N
(         __WRN\(whoami,'MAIN ORIENTATION X-SET HAS UNDEFINED VALUES. NOTHING DONE) N
(.'\)) N
(        else) N
(         call ftsm_calc\(__X,__Y,__Z, .false., t=one\)) N
(        endif) N
(       endif ! qcomp) N
( 6670 format\(/A,' WILL COMPUTE DISTANCE FROM STRING IMAGE USING ',A,' COORDINATE) N
(S.'\)) N
(!ccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccc) N
(ccccccccccccccccc) N
(!     the option below will be useful to perform usual charmm operations on the ) N
(STRING \(if desired\)) N
(      elseif \(__STRNCMP\(keyword,'LIFT',4\)\) then ! force string into current coor) N
(dinates) N
(!) N
(       qcomp=\(__INDX_RM\(comlyn, comlen, 'COMP'\).gt.0\)) N
(!) N
(       if \(qcomp\) then) N
(        if \(qprint\) then ; write\(_MSGBUF,6658\) whoami ; __PRINT\(_MSGBUF\) ; endif) N
( 6658 format\(/A,' WILL COPY STRING INTO COMPARISON COORDINATES.'\)) N
(        if \(qorient.and.any\(__XXCOMP\(iatom_o\).eq.__NAN\)\) then) N
(         __WRN\(whoami,'COMPARISON ORIENTATION X-SET HAS UNDEFINED VALUES. NOTHIN) N
(G DONE.'\)) N
(        else) N
(         call ftsm_lift\(__XCOMP,__YCOMP,__ZCOMP\)) N
(        endif) N
(       else ! ~qcomp -- use main coordinates) N
(        if \(qprint\) then ; write\(_MSGBUF,6661\) whoami ; __PRINT\(_MSGBUF\) ; endif) N
( 6661 format\(/A,' WILL COPY STRING INTO MAIN COORDINATES.'\)) N
(        if \(qorient.and.any\(__XX\(iatom_o\).eq.__NAN\)\) then) N
(ftsm.ftn) (Page 10/90) (Apr 16, 13 16:43) title
border
grestore
(Printed by surgeon) rhead
(ftsm.ftn) (5/45) (Wednesday May 01, 2013) footer
end % of iso1dict
pagesave restore
showpage
%%Page: (11-12) 6
%%BeginPageSetup
/pagesave save def
sh 0 translate 90 rotate
%%EndPageSetup
iso1dict begin
gsave
llx lly 12 add translate
/v 0 store
/x0 x v get 3.147420 add sx cw mul add store
/y0 y v get bfs th add sub store
x0 y0 moveto
(         __WRN\(whoami,'MAIN ORIENTATION X-SET HAS UNDEFINED VALUES. NOTHING DONE) p n
(.'\)) N
(        else) N
(         call ftsm_lift\(__X,__Y,__Z\)) N
(        endif) N
(       endif ! qcomp) N
(!ccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccc) N
(ccccccccccccccccc) N
(      elseif \(__STRNCMP\(keyword,'TEST',4\)\) then !) N
(       if \(__INDX_RM\(comlyn,comlen,'GRAD'\).gt.0\) then ! finite-difference gradie) N
(nt test) N
(! check fd spec) N
(        step=__GET_RM_F\(comlyn, comlen, 'STEP', finite_difference_d\)) N
(        if \(qprint\) then ) N
(         write\(_MSGBUF, 7001\) whoami,whoami,step,whoami,whoami ) N
(         __PRINT\(_MSGBUF\)) N
( 7001  format\(/A,' WILL TEST GRADIENTS USING FINITE DIFFERENCES',       &) N
(     &        /A,' USING DX = DY = DZ = ',F15.9,'.',                    &) N
(     &        /A,' MAIN COORDINATE SET MUST BE DEFINED.',               &) N
(     &        /A,' WILL OVERWRITE FORCE/GRAD ARRAYS'\)) N
(        endif) N
(        if \(any\(__X.eq.__NAN\)\) then) N
(         __WRN\(whoami,'MAIN X SET HAS UNDEFINED VALUES. NOTHING DONE.'\)) N
(        else) N
(         fd_error=>ftsm_test_grad_fd\(__X,__Y,__Z,step\)) N
(!          write\(me_global+100,*\) fd_error) N
(         if \(qprint\) then) N
(          if \(proj_on\) then) N
(           write\(_MSGBUF,7006\) whoami, whoami, whoami, whoami ; __PRINT\(_MSGBUF\)) N
( 7002  format\(/A,' TOP:    NORMALIZED PROJECTION ONTO PATH',            &) N
(     &        /A,' BOTTOM: DISTANCE PERPENDICULAR TO PATH',             &) N
(     &        /A,' DGRAD_X_MAX, DGRAD_Y_MAX, DGRAD_Z_MAX',              &) N
(     &        /A,' ======================================'\)) N
(           do i=1,2) N
(            write\(_MSGBUF,'\(A,3'//real_format//'F15.9\)'\)                   &) N
(     &                  whoami,fd_error\(i,:\) ; __PRINT\(_MSGBUF\)) N
(           enddo) N
(          else ! projection off) N
(           write\(_MSGBUF,7013\) whoami, whoami, whoami ; __PRINT\(_MSGBUF\)) N
( 7013  format\(/A,' DISTANCE TO PATH POINT:',                            &) N
(     &        /A,' DGRAD_X_MAX, DGRAD_Y_MAX, DGRAD_Z_MAX',              &) N
(     &        /A,' ======================================'\)) N
(            write\(_MSGBUF,'\(A,3'//real_format//'F15.9\)'\)                   &) N
(     &                  whoami,fd_error\(1,:\) ; __PRINT\(_MSGBUF\)) N
(          endif ! projection) N
(         endif ! qprint) N
(!     decide whether the test was passed) N
(         zval=abs\(maxval\(fd_error\)\)) N
(         if \(zval.lt.abs\(step\)*one\) then) N
(          write\(_MSGBUF,7003\) whoami, zval, whoami ; __PRINT\(_MSGBUF\)) N
(         else) N
(          write\(_MSGBUF,7004\) whoami, zval, whoami ; __PRINT\(_MSGBUF\)) N
(          __WRN\(whoami,'FINITE DERIVATIVE TEST FAILED.'\)) N
(         endif ! report test result) N
( 7003 format\(/A, ' THE MAXIMUM GRADIENT ERROR IS ',F15.9,', ',          &) N
(     &       /A, ' WHICH IS SMALLER THAN STEP. TEST PASSED.'\)) N
( 7004 format\(/A, ' THE MAXIMUM GRADIENT ERROR IS ',F15.9,', ',          &) N
(     &       /A, ' WHICH IS NO SMALLER THAN STEP. TEST FAILED.'\)) N
(         if \(associated\(fd_error\)\) deallocate\(fd_error\) ! test_grad returns a po) N
(inter to an array of abs errors) N
(        endif) N
(       endif ! grad) N
(!) N
(       if \(__INDX_RM\(comlyn,comlen,'PARA'\).gt.0\) then ! parallel communication t) N
(est) N
(        if \(qprint\) write\(_MSGBUF, 7005\) whoami,whoami,whoami ; __PRINT\(_MSGBUF\)) N
( 7005  format\(/A,' WILL COMPARE PARALLEL AND SERIAL FORCE COMPUTATION', &) N
(     &        /A,' MAIN COORDINATE SET MUST BE DEFINED.',               &) N
(     &        /A,' WILL OVERWRITE FORCE/GRAD ARRAYS'\)) N
(ftsm.ftn) (Page 11/90) (Apr 16, 13 16:43) title
border
/v 1 store
/x0 x v get 3.147420 add sx cw mul add store
/y0 y v get bfs th add sub store
x0 y0 moveto
(        if \(any\(__X.eq.__NAN\)\) then) p n
(         __WRN\(whoami,' MAIN X SET HAS UNDEFINED VALUES. NOTHING DONE.'\)) N
(        else) N
(         fd_error=>ftsm_test_parallel\(__X,__Y,__Z\) ! use the same array as above) N
(         if \(qprint\) then) N
(          if \(proj_on\) then) N
(           write\(_MSGBUF,7006\) whoami, whoami, whoami, whoami ; __PRINT\(_MSGBUF\)) N
( 7006  format\(/A,' TOP:    NORMALIZED PROJECTION ONTO PATH',            &) N
(     &        /A,' BOTTOM: DISTANCE PERPENDICULAR TO PATH',             &) N
(     &        /A,' DGRAD_X_MAX, DGRAD_Y_MAX, DGRAD_Z_MAX, VALUE',       &) N
(     &        /A,' ============================================'\)) N
(           do i=1, 2) N
(            write\(_MSGBUF,'\(A,4'//real_format//'F15.9\)'\)                   &) N
(     &                  whoami,fd_error\(i,:\) ; __PRINT\(_MSGBUF\)) N
(           enddo) N
(          else ! not proj_on) N
(           write\(_MSGBUF,7010\) whoami, whoami, whoami ; __PRINT\(_MSGBUF\)) N
( 7010  format\(/A,' DISTANCE TO PATH POINT:',                            &) N
(     &        /A,' DGRAD_X_MAX, DGRAD_Y_MAX, DGRAD_Z_MAX, VALUE',       &) N
(     &        /A,' ============================================'\)) N
(            write\(_MSGBUF,'\(A,4'//real_format//'F15.9\)'\)                   &) N
(     &                  whoami,fd_error\(1,:\) ; __PRINT\(_MSGBUF\)) N
(          endif ! proj_on) N
(         endif ! qprint) N
(!     decide whether the test was passed) N
(         zval=abs\(maxval\(fd_error\)\)) N
(         if \(zval.lt.parallel_tolerance\) then) N
(          write\(_MSGBUF,7007\) whoami, zval, whoami, parallel_tolerance ; __PRINT) N
(\(_MSGBUF\)) N
(         else) N
(          write\(_MSGBUF,7008\) whoami, zval, whoami, parallel_tolerance ; __PRINT) N
(\(_MSGBUF\)) N
(          __WRN\(whoami,'PARALLEL COMPUTATION TEST FAILED.'\)) N
(         endif ! report test result) N
( 7007 format\(/A, ' THE MAXIMUM ERROR IS ',E12.5,', ',                   &) N
(     &       /A, ' WHICH IS SMALLER THAN ',E12.5,'. TEST PASSED.'\)) N
( 7008 format\(/A, ' THE MAXIMUM ERROR IS ',E12.5,', ',                   &) N
(     &       /A, ' WHICH IS NO SMALLER THAN ',E12.5,'. TEST FAILED.'\)) N
(         if \(associated\(fd_error\)\) deallocate\(fd_error\) ! pointer to an array of) N
( abs errors) N
(        endif) N
(       endif ! para) N
(!) N
(! other tests will go below this line) N
(!ccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccc) N
(ccccccccccccccccc) N
(! specify parallel calculation options) N
(      elseif \(__STRNCMP\(keyword,'PARA',4\)\) then) N
(       do while \(comlen .gt. 1\)) N
(        keyword=__NEXTA\(comlyn, comlen\)) N
(        select case\(keyword\)) N
(           case\('YES','ON','TRUE','T','yes','on','true','t'\)) N
(            keyword='ENABLED '; calc_bestfit_grad_para=.true. ; calc_voronoi_par) N
(a=.true.) N
(            if \(qprint\) then ) N
(             write\(_MSGBUF,7009\) whoami, 'FORCES AND VORONOI DISTANCES', keyword) N
( ; __PRINT\(_MSGBUF\)) N
(            endif) N
(           case\('NO','OFF','FALSE','F','no','off','false','f'\)) N
(            keyword='DISABLED' ; calc_bestfit_grad_para=.false. ; calc_voronoi_p) N
(ara=.false.) N
(            if \(qprint\) then) N
(             write\(_MSGBUF,7009\) whoami, 'FORCES AND VORONOI DISTANCES', keyword) N
( ; __PRINT\(_MSGBUF\)) N
(            endif) N
(           case default) N
(            __WRN\(whoami,'UNKNOWN OPTION SPECIFIED'\)) N
(          end select) N
(       enddo ! comlen) N
(ftsm.ftn) (Page 12/90) (Apr 16, 13 16:43) title
border
grestore
(Printed by surgeon) rhead
(ftsm.ftn) (6/45) (Wednesday May 01, 2013) footer
end % of iso1dict
pagesave restore
showpage
%%Page: (13-14) 7
%%BeginPageSetup
/pagesave save def
sh 0 translate 90 rotate
%%EndPageSetup
iso1dict begin
gsave
llx lly 12 add translate
/v 0 store
/x0 x v get 3.147420 add sx cw mul add store
/y0 y v get bfs th add sub store
x0 y0 moveto
( 7009  format\(/A, ' PARALLEL COMPUTATION OF ',A,' ',A\)) p n
(!) N
(!ccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccc) N
(ccccccccccccccccc) N
(! specify whether to use custom allgather hypercube) N
(      elseif \(__STRNCMP\(keyword,'COMM',4\)\) then) N
(       do while \(comlen .gt. 1\)) N
(        keyword=__NEXTA\(comlyn, comlen\)) N
(        select case\(keyword\)) N
(           case\('allg','ALLG','ALLGATHE','allgathe'\)) N
(            keyword='ALLGATHER'; allgather_method=allgather_) N
(            if \(qprint\) then ) N
(             write\(_MSGBUF,7012\) whoami, keyword ; __PRINT\(_MSGBUF\)) N
(            endif) N
(           case\('hycu','HYCU','HYPER','hyper','hcube','HCUBE'\)) N
(            keyword='HYPERCUBE' ; allgather_method=hypercube_) N
(            if \(qprint\) then) N
(             write\(_MSGBUF,7012\) whoami, keyword ; __PRINT\(_MSGBUF\)) N
(            endif) N
(           case\('gatherb','GATHERB','gather','GATHER','bcast','BCAST'\)) N
(            keyword='GATHER + BCAST' ; allgather_method=gather_bcast_) N
(            if \(qprint\) then) N
(             write\(_MSGBUF,7012\) whoami, keyword ; __PRINT\(_MSGBUF\)) N
(            endif) N
(           case default) N
(            __WRN\(whoami,'UNKNOWN OPTION SPECIFIED'\)) N
(          end select) N
(       enddo ! comlen) N
( 7012  format\(/A, ' WILL COMMUNICATE FTSM FORCES USING ',A\)) N
(!) N
(!cccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccc) N
(      elseif \(__STRNCMP\(keyword,'PRIN',4\)\) then) N
(!      can write both coordinate files and a global dcd file) N
(!      local is specified with 'COR'; global is the default) N
(#ifdef __CHARMM) N
(       qcor=__INDX_RM\(comlyn,comlen,'COR'\); qcor = min\(qcor,1\)) N
(#else) N
(       qcor=__INDX_RM\(comlyn,comlen,'CHM'\); qcor = min\(qcor,1\)) N
(#endif) N
(       qdcd=__INDX_RM\(comlyn,comlen,'DCD'\); qdcd = min\(qdcd,1\)) N
(!) N
(       if \(\(qcor+qdcd\) .gt. 1\) then) N
(        __WRN\( whoami,' MORE THAN ONE OUTPUT FORMAT REQUESTED. WILL USE DCD.'\)) N
(        qcor=0; qdcd=1;) N
(       endif) N
(!) N
(!      prepare file) N
(!-----------------------------------------------------------------------------) N
(       ifile=__GET_RM_I\(comlyn,comlen,'UNIT',-1\)) N
(       CALL GTRMWD\(COMLYN,COMLEN,'NAME',4,FNAME,80,FLEN\)) N
(!        note: FNAME will be UPPER CASE) N
(!---------------------------------- OPEN FILE --------------------------------) N
(       if \(qroot\) then) N
(#ifdef __CHARMM) N
(        oldiol=iolev) N
(#endif) N
(        if \(qdcd.eq.0\) then ! no dcd -- local write) N
(#ifdef __CHARMM) N
(         iolev=1 ! open file on all nodes) N
(#endif) N
(         if \(flen.gt.0\) __OPEN_FILE\(ifile,fname,'FORMATTED','WRITE'\)) N
(        else) N
(         if \(qprint\) then ! write one dcd file \(root does this\)) N
(          if \(flen.gt.0\) __OPEN_FILE\(ifile,fname,'UNFORMATTED','WRITE'\) ! open b) N
(inary fle for DCD) N
(         endif) N
(! broadcast ifile so that all roots know whether handle is valid) N
(         __BROADCAST_STRING\(ifile,1,mpiint\)) N
(        endif) N
(ftsm.ftn) (Page 13/90) (Apr 16, 13 16:43) title
border
/v 1 store
/x0 x v get 3.147420 add sx cw mul add store
/y0 y v get bfs th add sub store
x0 y0 moveto
(#ifdef __CHARMM) p n
(        if \(ifile .eq. -1\) then) N
(         if \(qdcd .eq. 0 \) ifile=__OSTREAM ! write to output stream \(rather dirt) N
(y, but keep for now\)) N
(        endif) N
(#endif) N
(        if \(ifile.ge.0\) then) N
(!---------------------------- assume file is open, write -----------------------) N
(--) N
(!     check for column spec) N
(         c1=__GET_RM_I\(comlyn, comlen, 'COL', -1\)) N
(         if \(c1.gt.0\) then) N
(          if \(qprint\) then ; write\(_MSGBUF,6679\) whoami, c1 ; __PRINT\(_MSGBUF\) ;) N
( endif) N
( 6679 format\(/A,' WRITING COORDINATES FROM COLUMN ',I3\)) N
(          if \(qdcd.gt.0\) then ; call ftsm_write_dcd\(IFILE=ifile,COL=c1\) ;) N
(          else ; call ftsm_write_cor\(ifile,c1\) ; endif) N
(         else) N
(          if \(qprint\) then ; write\(_MSGBUF,6689\) whoami ; __PRINT\(_MSGBUF\) ; end) N
(if) N
( 6689 format\(/A,' WRITING COORDINATES FROM DEFAULT COLUMN.'\)) N
(          if \(qdcd.gt.0\) then ; call ftsm_write_dcd\(IFILE=ifile\) ;) N
(          else ; call ftsm_write_cor\(ifile\) ; endif) N
(         endif ! c1) N
(         if \(qdcd.eq.0.or.qprint\) then) N
(          if \(flen.gt.0\) __CLOSE_FILE\(ifile,'KEEP',error\)) N
(         endif) N
(        endif ! ifile) N
(#ifdef __CHARMM) N
(        iolev=oldiol) N
(#endif) N
(       endif ! qroot) N
(!ccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccc) N
(cccc) N
(      elseif \(__STRNCMP\(keyword,'READ',4\)\) then) N
(!      can read from both coordinate files and a global dcd file \(see above\)) N
(!      can also read a frame in the DCD: specify FRAM for frame;) N
(       qcor=__INDX_RM\(comlyn,comlen,'COR'\); qcor = min\(qcor,1\)) N
(       qdcd=__INDX_RM\(comlyn,comlen,'DCD'\); qdcd = min\(qdcd,1\)) N
(!) N
(       if \(\(qcor+qdcd\) .gt. 1\) then) N
(        __WRN\( whoami,'MORE THAN ONE INPUT FORMAT REQUESTED. WILL USE DCD.'\)) N
(        qcor=0; qdcd=1;) N
(       endif) N
(!) N
(!      prepare file) N
(       ifile=__GET_RM_I\(comlyn,comlen,'UNIT',-1\)) N
(       __GET_RM_A\(COMLYN,COMLEN,'NAME',4,FNAME,80,FLEN\)) N
(!        note: flen will be UPPER CASE) N
(!     check for column spec \(which coordinate set to read into\)) N
(       c1=__GET_RM_I\(comlyn, comlen, 'COL', 0\)) N
(!cccccccccccccccccccccccccccc OPEN FILE ccccccccccccccccccccccc) N
(       if \(qroot\) then) N
(#ifdef __CHARMM) N
(        oldiol=iolev) N
(#endif) N
(        if \(qdcd.eq.0\) then) N
(#ifdef __CHARMM) N
(         iolev=1 ! open file on all processors) N
(#endif) N
(         if \(flen.gt.0\) __OPEN_FILE\(ifile,fname,'FORMATTED','READ'\)) N
(        else) N
(         if \(qprint\) then ! binary dcd file) N
(          if \(flen.gt.0\) __OPEN_FILE\(ifile,fname,'UNFORMATTED','READ'\) ! open bi) N
(nary fle for DCD) N
(         endif) N
(! broadcast ifile so that all roots know whether handle is valid) N
(         __BROADCAST_STRING\(ifile,1,mpiint\)) N
(        endif) N
(ftsm.ftn) (Page 14/90) (Apr 16, 13 16:43) title
border
grestore
(Printed by surgeon) rhead
(ftsm.ftn) (7/45) (Wednesday May 01, 2013) footer
end % of iso1dict
pagesave restore
showpage
%%Page: (15-16) 8
%%BeginPageSetup
/pagesave save def
sh 0 translate 90 rotate
%%EndPageSetup
iso1dict begin
gsave
llx lly 12 add translate
/v 0 store
/x0 x v get 3.147420 add sx cw mul add store
/y0 y v get bfs th add sub store
x0 y0 moveto
(#ifdef __CHARMM) p n
(        if\(ifile .le. -1 \) then ) N
(         if \(qdcd.eq.0 \) then) N
(          ifile=__ISTREAM ! read local files from input file) N
(          call rdtitl\(titleb,ntitlb,ifile,0\) ! 0 = card format) N
(         endif ! qdcd) N
(        endif ! ifile) N
(#endif) N
(       endif ! qroot) N
(!cccccccccccccccccc assume file is open, read ccccccccccccccccccc) N
(! broadcast ifile so that all slaves also know whether handle is valid) N
(! because they need to enter read_cor) N
(       if \(qslave\) then ; __BROADCAST_LOCAL\(ifile,1,mpiint\) ; endif) N
(       if \(ifile.ge.0\) then) N
(        if \(c1.gt.0\) then ! column spec) N
(         if \(qprint\) then ; write\(_MSGBUF,6699\) whoami, c1 ; __PRINT\(_MSGBUF\) ; ) N
(endif) N
( 6699 format\(A,' READING COORDINATES INTO COLUMN ',I3\)) N
(         if \(qdcd.gt.0\) then ; if \(qroot\) call ftsm_read_dcd\(ifile, c1\);) N
(         else; call ftsm_read_cor\(ifile,c1\) ;  endif) N
(       else) N
(         if \(qprint\) then ; write\(_MSGBUF,6709\) whoami ; __PRINT\(_MSGBUF\) ; endi) N
(f) N
( 6709 format\(A,' READING COORDINATES INTO DEFAULT COLUMN.'\)) N
(         if \(qdcd.gt.0\) then ; if \(qroot\) call ftsm_read_dcd\(ifile\);) N
(         else ; call ftsm_read_cor\(ifile\) ; ) N
(         endif) N
(        endif ! c1) N
(       endif) N
(!cccccccccccccccc close file ccccccccccccccccccccccccccccccccccccc) N
(       if \(qroot\) then) N
(        if \(qdcd.eq.0.or.qprint\) then) N
(         if \(flen.gt.0\) __CLOSE_FILE\(ifile,'KEEP',error\)) N
(        endif ! qdcd) N
(#ifdef __CHARMM) N
(        iolev=oldiol) N
(#endif) N
(       endif ! qroot) N
(!) N
(!     broadcast to slaves \(although cread routine will send coords to slaves, to) N
(o\)) N
(       if \(c1.le.0\) c1=center ! assume "default column") N
(       if \(c1.eq.center\) then) N
(        call ftsm_swap_bc\(.true.\)) N
(        r_f\(:,:,left_old:right_old\)=r_f\(:,:,left:right\)) N
(        r_f\(:,:,center_new\)=r_f\(:,:,center\)) N
(        if \(qorient.and.qdiffrot\) then) N
(         r_o\(:,:,left_old:right_old\)=r_o\(:,:,left:right\)) N
(         r_o\(:,:,center_new\)=r_o\(:,:,center\)) N
(        endif) N
(       else) N
(        if \(MPI_COMM_LOCAL.ne.MPI_COMM_NULL.and.SIZE_LOCAL.gt.1\) then) N
(#ifdef __CHARMM) N
(         __BROADCAST_LOCAL_4B\(r_f\(:,:,c1\), 3*nforced\) !##SINGLE       ! forcing ) N
(coordinates) N
(         __BROADCAST_LOCAL_8B\(r_f\(:,:,c1\), 3*nforced\) !##.not.SINGLE) N
(#else) N
(         __BROADCAST_LOCAL\(r_f\(:,:,c1\), 3*nforced, mpifloat\) ! forcing coordinat) N
(es) N
(#endif) N
(         if \(qdiffrot\) then ) N
(#ifdef __CHARMM) N
(          __BROADCAST_LOCAL_8B\(r_o\(:,:,c1\), 3*norient\) !##SINGLE      ! send ori) N
(entation coordinates \(only if distinct from forcing\)) N
(          __BROADCAST_LOCAL_8B\(r_o\(:,:,c1\), 3*norient\) !##.not.SINGLE) N
(#else) N
(          __BROADCAST_LOCAL\(r_o\(:,:,c1\), 3*norient, mpifloat\) ! send orientation) N
( coordinates \(only if distinct from forcing\)) N
(#endif) N
(ftsm.ftn) (Page 15/90) (Apr 16, 13 16:43) title
border
/v 1 store
/x0 x v get 3.147420 add sx cw mul add store
/y0 y v get bfs th add sub store
x0 y0 moveto
(         endif) p n
(        endif) N
(       endif) N
(!ccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccc) N
(ccccc) N
(      elseif \(__STRNCMP\(keyword,'SWAP',4\)\) then ! swap two columns) N
(!       read column spec) N
(        c1=__NEXTI\(comlyn, comlen\)) N
(        c2=__NEXTI\(comlyn, comlen\)) N
(        if \(qprint\) then ; write\(_MSGBUF,6729\) whoami, c1, c2 ; __PRINT\(_MSGBUF\)) N
( ; endif) N
( 6729 format\(/A,' WILL SWAP COLUMNS ',I3,' AND ',I3,' '\)) N
(        call ftsm_swap\(c1, c2\)) N
(!ccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccc) N
(ccccc) N
(      elseif \(__STRNCMP\(keyword,'COPY',4\)\) then ! copy form c1 to c2) N
(!       read column spec) N
(        c1=__NEXTI\(comlyn, comlen\)) N
(        c2=__NEXTI\(comlyn, comlen\)) N
(        if \(qprint\) then ; write\(_MSGBUF,6739\) whoami, c1, c2 ; __PRINT\(_MSGBUF\)) N
( ; endif) N
( 6739 format\(/A,' WILL COPY COLUMN ',I3,' TO ',I3,' '\)) N
(        call ftsm_copy\(c1,c2\)) N
(!ccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccc) N
(cccccc) N
(      elseif \(__STRNCMP\(keyword,'SET ',4\)\) then ! modify k, etc) N
(!ccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccc) N
(cccccc) N
(        iorie=__INDX_RM\(comlyn, comlen, 'ORIE'\)) N
(        irmsd=__INDX_RM\(comlyn, comlen, 'RMSD'\)) N
(!) N
(        if \(iorie.gt.0\) then) N
(!    process orientation atom selection) N
(!    determine whether a selection keyword follows orie) N
(         isele=__INDX\(comlyn, comlen, 'SELE' ,4\)) N
(         if \(isele.ge.iorie\) then) N
(!) N
(#ifdef __CHARMM) N
(          iselct=0) N
(! process selection) N
(          IMODE=0) N
(          CALL SELRPN\(COMLYN,COMLEN,iselct,NATOM,1,IMODE,               &) N
(     &      .FALSE.,1,' ',0,RESID,RES,IBASE,SEGID,NICTOT,NSEG,          &) N
(     &      .TRUE.,X,Y,Z,.TRUE.,1,WMAIN\)) N
(          IF\(IMODE.NE.0\) THEN) N
(           __WRN\(whoami,'ORIENTATION ATOMS SELECTION ERROR'\)) N
(           RETURN) N
(          ENDIF) N
(          norient=count\( iselct.gt.0 \)) N
(#elif defined\(__DMOL\)) N
(#include "../../dmol_select_macro.def") N
(          if \(associated\(iselct\)\) then ; norient=size\(iselct\) ; else ; norient=0) N
( ; endif) N
(#endif) N
(!) N
(! currently we require at least three atoms for orientation) N
(!) N
(          if \(norient.lt.3\) then) N
(           __WRN\(whoami,' FEWER THAN THREE ATOMS SELECTED FOR ORIENTATION. ABORT) N
(.'\)) N
(           return) N
(          endif) N
(!) N
(          qorient=.true.) N
(!) N
(          if \(qdiffrot\) then; if \(associated\(r_o\)\) deallocate\(r_o\)) N
(                             if\(associated\(iatom_o\)\) deallocate\(iatom_o\)) N
(          else              ; nullify\(r_o\) ; nullify\(iatom_o\)) N
(          endif) N
(ftsm.ftn) (Page 16/90) (Apr 16, 13 16:43) title
border
grestore
(Printed by surgeon) rhead
(ftsm.ftn) (8/45) (Wednesday May 01, 2013) footer
end % of iso1dict
pagesave restore
showpage
%%Page: (17-18) 9
%%BeginPageSetup
/pagesave save def
sh 0 translate 90 rotate
%%EndPageSetup
iso1dict begin
gsave
llx lly 12 add translate
/v 0 store
/x0 x v get 3.147420 add sx cw mul add store
/y0 y v get bfs th add sub store
x0 y0 moveto
(          if \(associated\(orientWeights\)\) deallocate\(orientWeights\)) p n
(!) N
(          allocate\(iatom_o\(norient\)\); iatom_o=0) N
(          allocate\(orientWeights\(norient\)\);) N
(          orientWeights=one/norient ! default behavior) N
(!    build index array) N
(          norient=0) N
(!) N
(#ifdef __CHARMM) N
(          do i=1,natom) N
(           if \(iselct\(i\).gt.0\) then) N
(            norient=norient+1) N
(            iatom_o\(norient\)=i) N
(           endif) N
(          enddo) N
(#else) N
(          iatom_o=iselct) N
(          if \(associated\(iselct\)\) deallocate\(iselct\)) N
(#endif) N
(!) N
(!    determine whether the new orientation set is the same as the existing forci) N
(ng set) N
(!) N
(          qdiffrot=.not. \( norient .eq. nforced \)) N
(          if \(.not.qdiffrot\)  qdiffrot=.not.\(associated\(iatom_f\)\)) N
(          if \(.not.qdiffrot\)  qdiffrot=any\(iatom_f.ne.iatom_o\)) N
(!) N
(          if \(.not.qdiffrot\) then) N
(           deallocate\(iatom_o\); iatom_o=>iatom_f; r_o=>r_f;) N
(          else) N
(           allocate\(r_o\(norient,3,num_sets\)\); r_o=__NAN;) N
(           if \(nforced.gt.0\) call ftsm_compute_overlap_ind\(\)  ! compute overlap ) N
(indices in iatom_both) N
(          endif) N
(!) N
(          if \(.not. associated\(rcom\)\) allocate\(rcom\(3,num_sets\)\)) N
(          rcom=0d0 ! must be zero initially) N
(!) N
(! print summary) N
(          if \(qprint\) then) N
(            write\(_MSGBUF,100\) whoami, norient ; __PRINT\(_MSGBUF\)) N
( 100  format\(A,' WILL ORIENT STRUCTURES BASED ON ',i5,' ATOMS'\)) N
(            write\(_MSGBUF,101\) whoami ;  ; __PRINT\(_MSGBUF\)) N
( 101  format\(A,' ORIENTATION WEIGHTS UNIFORM.'\)) N
(            if \(qdiffrot\) then) N
(             write\(_MSGBUF,102\) whoami) N
(            else) N
(             write\(_MSGBUF,103\) whoami) N
(            endif) N
(            __PRINT\(_MSGBUF\)) N
( 102  format \(A, ' ORIENTATION AND FORCING ATOMS ARE DIFFERENT'\)) N
( 103  format \(A, ' ORIENTATION AND FORCING ATOMS ARE IDENTICAL'\)) N
(          endif ! qprint) N
(         else) N
(          __WRN\(whoami,' ATOM SELECTION MUST BE SPECIFIED AFTER ORIE.'\)) N
(          return) N
(         endif) N
(         call ftsm_define_rtmd_type\(\)) N
(!ccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccc) N
(        elseif \(irmsd.gt.0\) then) N
(!    process forcing atom selection) N
(!    determine whether a selection keyword follows 'rmsd') N
(         isele=__INDX\(comlyn, comlen, 'SELE' ,4\)) N
(         if \(isele.gt.irmsd\) then) N
(!) N
(#ifdef __CHARMM) N
(          iselct=0) N
(          IMODE=0) N
(          CALL SELRPN\(COMLYN,COMLEN,iselct,NATOM,1,IMODE,               &) N
(ftsm.ftn) (Page 17/90) (Apr 16, 13 16:43) title
border
/v 1 store
/x0 x v get 3.147420 add sx cw mul add store
/y0 y v get bfs th add sub store
x0 y0 moveto
(     &      .FALSE.,1,' ',0,RESID,RES,IBASE,SEGID,NICTOT,NSEG,          &) p n
(     &      .TRUE.,X,Y,Z,.TRUE.,1,WMAIN\)) N
(          IF\(IMODE.NE.0\) THEN) N
(           __WRN\(whoami,'RMSD ATOMS SELECTION ERROR'\)) N
(           RETURN) N
(          ENDIF) N
(          nforced=count\( iselct.gt.0 \)) N
(#elif defined\(__DMOL\)) N
(#include "../../dmol_select_macro.def") N
(          if \(associated\(iselct\)\) then ; nforced=size\(iselct\) ; else ; nforced=0) N
( ; endif) N
(#endif) N
(!) N
(          if \(nforced.le.0\) then) N
(           __WRN\(whoami, 'NO RMSD ATOMS SELECTED. ABORT.'\)) N
(           return) N
(          endif) N
(!) N
(!) N
(          if \(qdiffrot\) then; if \(associated\(r_f\)\) deallocate\(r_f\)) N
(                             if\(associated\(iatom_f\)\) deallocate\(iatom_f\)) N
(          else              ; nullify\(r_f\) ; nullify\(iatom_f\)) N
(          endif) N
(          if \(associated\(forcedWeights\)\) deallocate\(forcedWeights\)) N
(!) N
(          allocate\(iatom_f\(nforced\)\); iatom_f=0) N
(          allocate\(forcedWeights\(nforced\)\);) N
(          forcedWeights=1d0/nforced ! default behavior) N
(!    build index array) N
(          nforced=0) N
(!) N
(#ifdef __CHARMM) N
(          do i=1,natom) N
(           if \(iselct\(i\).gt.0\) then) N
(            nforced=nforced+1) N
(            iatom_f\(nforced\)=i) N
(           endif) N
(          enddo) N
(#else) N
(          iatom_f=iselct) N
(          if \(associated\(iselct\)\) deallocate\(iselct\)) N
(#endif) N
(!) N
(!    determine whether the new orientation set is the same as the existing forci) N
(ng set) N
(!) N
(          qdiffrot=.not. \( norient .eq. nforced \)) N
(          if \(.not.qdiffrot\)  qdiffrot=.not.\(associated\(iatom_o\)\)) N
(          if \(.not.qdiffrot\)  qdiffrot=any\(iatom_f.ne.iatom_o\)) N
(!) N
(          if \(.not.qdiffrot\) then) N
(           deallocate\(iatom_f\); iatom_f=>iatom_o; r_f=>r_o;) N
(          else) N
(           allocate\(r_f\(nforced,3,num_sets\)\); r_f=__NAN;) N
(           if \(norient.gt.0\) call ftsm_compute_overlap_ind\(\)  ! compute overlap ) N
(indices in iatom_both) N
(          endif) N
(! print summary) N
(          if \(qprint\) then) N
(            write\(_MSGBUF,104\) whoami, nforced ; __PRINT\(_MSGBUF\)) N
( 104  format\(A,' WILL APPLY FORCES TO ',i5,' ATOMS'\)) N
(            write\(_MSGBUF,105\) whoami ; __PRINT\(_MSGBUF\)) N
( 105  format\(A,' FORCING WEIGHTS UNIFORM.'\)) N
(            if \(qdiffrot\) then) N
(             write\(_MSGBUF,102\) whoami) N
(            else) N
(             write\(_MSGBUF,103\) whoami) N
(            endif) N
(            __PRINT\(_MSGBUF\)) N
(ftsm.ftn) (Page 18/90) (Apr 16, 13 16:43) title
border
grestore
(Printed by surgeon) rhead
(ftsm.ftn) (9/45) (Wednesday May 01, 2013) footer
end % of iso1dict
pagesave restore
showpage
%%Page: (19-20) 10
%%BeginPageSetup
/pagesave save def
sh 0 translate 90 rotate
%%EndPageSetup
iso1dict begin
gsave
llx lly 12 add translate
/v 0 store
/x0 x v get 3.147420 add sx cw mul add store
/y0 y v get bfs th add sub store
x0 y0 moveto
(          endif ! qprint) p n
(         else) N
(          __WRN\(whoami,'ATOM SELECTION MUST BE SPECIFIED AFTER RMSD.'\)) N
(          return) N
(         endif) N
(!*************************************************************) N
(!      set k parallel to path \(for off-path dynamics\)) N
(        elseif \(__INDX\(comlyn,comlen,'KPAR',4\).gt.0\) then) N
(          k=__GET_RM_F\(comlyn,comlen,'KPAR',-1d0\)) N
(          if \(k.ge.0d0\) then) N
(           kpara=k) N
(           if \(qprint\) then ; write\(_MSGBUF,6756\) whoami, k ; __PRINT\(_MSGBUF\) ;) N
( endif) N
( 6756 format\(A,' SETTING PARALLEL RESTRAINT FORCE CONSTANT TO ',F11.5\)) N
(          else) N
(           if \(qprint\) then ; write\(_MSGBUF,6757\) whoami, k ; __PRINT\(_MSGBUF\) ;) N
( endif) N
( 6757 format\(A,' INVALID FORCE CONSTANT SPECIFIED: ',F11.5\)) N
(          endif) N
(!*************************************************************) N
(!      set k perpendicular to path \(for off-path dynamics\)) N
(        elseif \(__INDX\(comlyn,comlen,'KPRP',4\).gt.0\) then) N
(          k=__GET_RM_F\(comlyn,comlen,'KPRP',-one\)) N
(          if \(k.ge.0d0\) then) N
(           kperp=k) N
(           if \(qprint\) then  ; write\(_MSGBUF,6746\) whoami, k ; __PRINT\(_MSGBUF\) ) N
(; endif) N
( 6746 format\(A,' SETTING PERPENDICULAR RESTRAINT FORCE CONSTANT TO '    &) N
(     &       ,F11.5\)) N
(          else) N
(           if \(qprint\) then ; write\(_MSGBUF,6757\) whoami, k ; __PRINT\(_MSGBUF\) ;) N
( endif) N
(          endif) N
(!**************************************************************) N
(        elseif \(__INDX\(comlyn,comlen,'KRMS',4\).gt.0\) then) N
(          k=__GET_RM_F\(comlyn,comlen,'KRMS',-one\)) N
(          if \(k.ge.0d0\) then) N
(           krms=k) N
(           if \(qprint\) then ; write\(_MSGBUF,6752\) whoami, k ; __PRINT\(_MSGBUF\) ;) N
( endif) N
( 6752 format\(A,' SETTING RMSD RESTRAINT FORCE CONSTANT TO '             &) N
(     &       ,F11.5\)) N
(          else) N
(           if \(qprint\) then ; write\(_MSGBUF,6757\) whoami, k ; __PRINT\(_MSGBUF\) ;) N
( endif) N
(          endif) N
(!***************************************************************) N
(        elseif \(__INDX_RM\(comlyn,comlen,'MASS'\).gt.0\) then ! mass-weighting) N
(          keyword=__NEXTA\(comlyn, comlen\)) N
(          klen=len\(keyword\)) N
(          __TRIMA\(keyword,klen\)) N
(#ifndef __CHARMM) N
( natom=__NATOM) N
(#endif) N
(          select case\(keyword\(1:klen\)\)) N
(           case\('YES','ON','TRUE','T','yes','on','true','t'\)) N
(            if \(qprint\) then ; write\(_MSGBUF,8001\) whoami, 'SET FROM ATOM MASSES) N
(' ; __PRINT\(_MSGBUF\) ; endif) N
(            call ftsm_set_weights\(__MASS, natom\) ! send masses) N
(           case\('NO','OFF','FALSE','F','no','off','false','f'\)) N
(            if \(qprint\) then ; write\(_MSGBUF,8001\) whoami, 'WILL BE UNIFORM'    ) N
(  ; __PRINT\(_MSGBUF\) ; endif) N
(            call ftsm_set_weights\( \(/ \(1d0, i=1,natom\) /\), natom\) ! uniform) N
(#ifdef __CHARMM) N
(           case\('WMAIN', 'wmain'\)) N
(            if \(qprint\) then ; write\(_MSGBUF,8001\) whoami, 'SET FROM WMAIN ARRAY) N
(' ; __PRINT\(_MSGBUF\) ; endif) N
(            call ftsm_set_weights\(wmain, natom\) ! send masses) N
(           case\('WCOMP', 'wcomp'\)) N
(ftsm.ftn) (Page 19/90) (Apr 16, 13 16:43) title
border
/v 1 store
/x0 x v get 3.147420 add sx cw mul add store
/y0 y v get bfs th add sub store
x0 y0 moveto
(            if \(qprint\) then ; write\(_MSGBUF,8001\) whoami, 'SET FROM WCOMP ARRAY) p n
(' ; __PRINT\(_MSGBUF\) ; endif) N
(            call ftsm_set_weights\(wcomp, natom\) ! send masses) N
(#elif defined \(__DMOL\)) N
(           case\('BFACTOR', 'bfactor', 'BFACT', 'bfact'\)) N
(            if \(qprint\) then ; write\(_MSGBUF,8001\) whoami, 'SET FROM BFACTOR ARR) N
(AY' ; __PRINT\(_MSGBUF\) ; endif) N
(            call ftsm_set_weights\(bfactor, natom\) ! send masses) N
(           case\('OCCU', 'occu','OCCUPANCY', 'occupancy'\)) N
(            if \(qprint\) then ; write\(_MSGBUF,8001\) whoami, 'SET FROM OCCUPANCY A) N
(RRAY' ; __PRINT\(_MSGBUF\) ; endif) N
(            call ftsm_set_weights\(occupancy, natom\) ! send masses) N
(#endif) N
(           case default) N
(            __WRN\(whoami,'UNKNOWN OPTION SPECIFIED'\)) N
(          end select) N
( 8001 format\(A,' WEIGHTS ',A,'.'\)) N
(!*********************************************************************) N
(        elseif \(__INDX_RM\(comlyn,comlen,'PROJ'\).gt.0\) then ! mass-weighting) N
(          keyword=__NEXTA\(comlyn, comlen\)) N
(          klen=len\(keyword\)) N
(          __TRIMA\(keyword,klen\)) N
(          select case\(keyword\(1:klen\)\)) N
(           case\('YES','ON','TRUE','T','yes','on','true','t'\)) N
(            proj_on=.true.) N
(            if \(qprint\) then ; write \(_MSGBUF,'\(2A\)'\) whoami,                   ) N
( &) N
(     & ' WILL RESTRAIN SYSTEM TO PLANE PERPENDICULAR TO PATH.' ; __PRINT\(_MSGBUF) N
(\) ; endif) N
(           case\('NO','OFF','FALSE','F','no','off','false','f'\)) N
(            proj_on=.false.) N
(            if \(qprint\) then ; write \(_MSGBUF,'\(2A\)'\) whoami,           &) N
(     & ' WILL RESTRAIN SYSTEM TO PATH IMAGE.'//                         &) N
(     & ' \(FE/MFPT CANNOT BE COMPUTED\).' ; __PRINT\(_MSGBUF\) ; endif) N
(           case default) N
(            __WRN\(whoami,'UNKNOWN OPTION SPECIFIED'\)) N
(          end select) N
(!*********************************************************************) N
(        elseif \(__INDX\(comlyn,comlen,'DPAR',4\).gt.0\) then ! normalized distance ) N
(parallel to vector between neighboring replicas at which this system is restrain) N
(ed) N
(          zval=__GET_RM_F\(comlyn, comlen, 'DPAR', -1.0d0\)) N
(!    check replica spec) N
(          irep=__GET_RM_I\(comlyn, comlen, 'REP', -1\)) N
(          if \(irep.lt.0.or.irep.ge.nstring\) then) N
(           if \(qprint\) then ; write\(_MSGBUF, 6773\) whoami, whoami, zval ; __PRIN) N
(T\(_MSGBUF\) ; endif) N
(           dpar0=zval) N
(          else) N
(           if \(qprint\) then ; write\(_MSGBUF,6774\) whoami, irep, zval ; __PRINT\(_) N
(MSGBUF\) ; endif) N
(           if \(mestring.eq.irep\) dpar0=zval ! note: permitting any value) N
(          endif ! irep) N
( 6773 format\(A,' REPLICA NUMBER INVALID OR UNSPECIFIED.',               &) N
(     &      /A,' WILL SET RERERENCE VALUE FOR PARALLEL RESTRAINT ',     &) N
(     &         '  TO ',F7.3,' ON ALL REPLICAS.'\)) N
( 6774 format\(A,' WILL SET RERERENCE VALUE FOR PARALLEL RESTRAINT ',     &) N
(     &   'ON REPLICA ',I5,' TO ',F7.3,'.'\)) N
(        ! DPAR) N
(!*******************************************************************************) N
(***********) N
(        elseif \(__INDX\(comlyn,comlen,'DPRPF',5\).gt.0\) then ! final perpendicular) N
( distance at which the replicas are restrained) N
() N
(          zval=__GET_RM_F\(comlyn, comlen, 'DPRPF', __NAN\)) N
(!) N
(          if \(zval.eq.__NAN\) then) N
(           __WRN\(whoami,' FINAL OFFSET DISTANCE FOR PERPENDICULAR RESTRAINT NOT ) N
(SPECIFIED.'\)) N
(ftsm.ftn) (Page 20/90) (Apr 16, 13 16:43) title
border
grestore
(Printed by surgeon) rhead
(ftsm.ftn) (10/45) (Wednesday May 01, 2013) footer
end % of iso1dict
pagesave restore
showpage
%%Page: (21-22) 11
%%BeginPageSetup
/pagesave save def
sh 0 translate 90 rotate
%%EndPageSetup
iso1dict begin
gsave
llx lly 12 add translate
/v 0 store
/x0 x v get 3.147420 add sx cw mul add store
/y0 y v get bfs th add sub store
x0 y0 moveto
(          else) p n
(!    check replica spec) N
(           irep=__GET_RM_I\(comlyn, comlen, 'REP', -1\)) N
(           if \(irep.lt.0.or.irep.ge.nstring\) then) N
(            if \(qprint\) then ; write\(_MSGBUF, 67761\) whoami, whoami, zval ; __PR) N
(INT\(_MSGBUF\) ; endif) N
(            dperp0f=zval) N
(           else) N
(            if \(qprint\) then ; write\(_MSGBUF,67762\) whoami, irep, zval ; __PRINT) N
(\(_MSGBUF\) ; endif) N
(            if \(mestring.eq.irep\) dperp0f=zval ! note: permitting any value) N
(           endif ! irep) N
(67761 format\(A,' REPLICA NUMBER INVALID OR UNSPECIFIED.',               &) N
(     &      /A,' WILL SET FINAL OFFSET DISTANCE FOR PERPENDICULAR RESTRAINT', &) N
(     &         ' TO ',E10.3,' ON ALL REPLICAS.'\)) N
(67762 format\(A,' WILL SET FINAL OFFSET DISTANCE FOR PERPENDICULAR RESTRAINT ',&) N
(     &   'ON REPLICA ',I5,' TO ',E10.3,'.'\)) N
(          endif ! zval valid) N
(!*******************************************************************************) N
(***********) N
(        elseif \(__INDX\(comlyn,comlen,'DPRPITER',8\).gt.0\) then ! number of iterat) N
(ions to adjust to final perpendicular restraint value) N
(          i=__GET_RM_I\(comlyn, comlen, 'DPRPITER', nint\(__NAN\)\)) N
(!) N
(          if \(i.eq.nint\(__NAN\)\) then) N
(           __WRN\(whoami,' NUMBER OF ADJUSTMENT ITERATIONS FOR PERPENDICULAR REST) N
(RAINT NOT SPECIFIED.'\)) N
(           dperp_adjust_iter=0) N
(          else) N
(!    check replica spec) N
(           irep=__GET_RM_I\(comlyn, comlen, 'REP', -1\)) N
(           if \(irep.lt.0.or.irep.ge.nstring\) then) N
(            if \(qprint\) then ; write\(_MSGBUF, 67763\) whoami, whoami, i ; __PRINT) N
(\(_MSGBUF\) ; endif) N
(            dperp_adjust_iter=i) N
(           else) N
(            if \(qprint\) then ; write\(_MSGBUF,67764\) whoami, irep, i ; __PRINT\(_M) N
(SGBUF\) ; endif) N
(            if \(mestring.eq.irep\) dperp_adjust_iter=i) N
(           endif ! irep) N
(67763 format\(A,' REPLICA NUMBER INVALID OR UNSPECIFIED.',               &) N
(     &      /A,' WILL SET NUMBER OF ADJUSTMENT ITERATIONS FOR PERPENDICULAR REST) N
(RAINT', &) N
(     &         ' TO ',I9,' ON ALL REPLICAS.'\)) N
(67764 format\(A,' WILL SET NUMBER OF ADJUSTMENT ITERATIONS FOR PERPENDICULAR REST) N
(RAINT ',&) N
(     &   'ON REPLICA ',I5,' TO ',I9,'.'\)) N
(          endif ! i valid) N
(!*******************************************************************************) N
(*********) N
(        elseif \(__INDX\(comlyn,comlen,'DPRP',4\).gt.0\) then ! \(initial\) distance p) N
(erpendicular to vector between neighboring replicas ) N
(          zval=__GET_RM_F\(comlyn, comlen, 'DPRP', __NAN\)) N
(!) N
(          if \(zval.eq.__NAN\) then) N
(           __WRN\(whoami,' OFFSET DISTANCE FOR PERPENDICULAR RESTRAINT NOT SPECIF) N
(IED.'\)) N
(          else) N
(!    check replica spec) N
(           irep=__GET_RM_I\(comlyn, comlen, 'REP', -1\)) N
(           if \(irep.lt.0.or.irep.ge.nstring\) then) N
(            if \(qprint\) then ; write\(_MSGBUF, 67765\) whoami, whoami, zval ; __PR) N
(INT\(_MSGBUF\) ; endif) N
(            dperp0=zval ; dperp0i=dperp0) N
(           else) N
(            if \(qprint\) then ; write\(_MSGBUF,67766\) whoami, irep, zval ; __PRINT) N
(\(_MSGBUF\) ; endif) N
(            if \(mestring.eq.irep\) then  ; dperp0=zval ; dperp0i=dperp0 ; endif !) N
( note: permitting any value) N
(ftsm.ftn) (Page 21/90) (Apr 16, 13 16:43) title
border
/v 1 store
/x0 x v get 3.147420 add sx cw mul add store
/y0 y v get bfs th add sub store
x0 y0 moveto
(           endif ! irep) p n
(67765 format\(A,' REPLICA NUMBER INVALID OR UNSPECIFIED.',               &) N
(     &      /A,' WILL SET OFFSET DISTANCE FOR PERPENDICULAR RESTRAINT', &) N
(     &         ' TO ',E10.3,' ON ALL REPLICAS.'\)) N
(67766 format\(A,' WILL SET OFFSET DISTANCE FOR PERPENDICULAR RESTRAINT ',&) N
(     &   'ON REPLICA ',I5,' TO ',E10.3,'.'\)) N
(          endif ! zval valid) N
(!*******************************************************************************) N
(**********) N
(        elseif \(__INDX\(comlyn,comlen,'DRMS',4\).gt.0\) then ! RMS distance between) N
( simulation and reference structure) N
(          zval=__GET_RM_F\(comlyn, comlen, 'DRMS', -one\)) N
(!    check replica spec) N
(          irep=__GET_RM_I\(comlyn, comlen, 'REP', -1\)) N
(          if \(irep.lt.0.or.irep.ge.nstring\) then) N
(           if \(qprint\) then ; write\(_MSGBUF, 6777\) whoami, whoami, zval ; __PRIN) N
(T\(_MSGBUF\) ; endif) N
(           drms0=zval) N
(          else) N
(           if \(qprint\) then ; write\(_MSGBUF,6778\) whoami, irep, zval ; __PRINT\(_) N
(MSGBUF\) ; endif) N
(           if \(mestring.eq.irep\) drms0=zval ! note: permitting any value) N
(          endif ! irep) N
( 6777 format\(A,' REPLICA NUMBER INVALID OR UNSPECIFIED.',               &) N
(     &      /A,' WILL SET REFERENCE VALUE FOR RMSD RESTRAINT ',         &) N
(     &         '  TO ',F7.3,' ON ALL REPLICAS.'\)) N
( 6778 format\(A,' WILL SET REFERENCE VALUE FOR RMSD RESTRAINT ',         &) N
(     &   'ON REPLICA ',I5,' TO ',F7.3,'.'\)) N
(!*******************************************************************************) N
(**********) N
(        elseif \(__INDX\(comlyn,comlen,'VCUT',4\).gt.0\) then) N
(         voro_cut=__GET_RM_F\(comlyn, comlen, 'VCUT', zero\)) N
(! replica spec) N
(         irep=__GET_RM_I\(comlyn, comlen, 'REP', -1\)) N
(         if \(voro_cut.le.zero\) then) N
(          __WRN\(whoami,'VCUT MUST BE POSITIVE. NOT SET.'\)) N
(         else) N
(          if \(irep.lt.0.or.irep.ge.nstring\) then) N
(           if \(qprint\) then ; write\(_MSGBUF, 6779\) whoami, whoami, voro_cut ; __) N
(PRINT\(_MSGBUF\) ; endif) N
(           call ftsm_voronoi_set_cutoff\(voro_cut\)) N
(          else) N
(           if \(qprint\) then ; write\(_MSGBUF, 6780\) whoami, irep, voro_cut ; __PR) N
(INT\(_MSGBUF\) ; endif) N
(           if \(mestring.eq.irep\) call ftsm_voronoi_set_cutoff\(voro_cut\)) N
(          endif ! irep) N
( 6779 format\(A,' REPLICA NUMBER INVALID OR UNSPECIFIED.',/A,' WILL SET VORONOI T) N
(UBE CUTOFF ', &) N
(     & '  TO ',F7.3,' ON ALL REPLICAS.'\)) N
( 6780 format\(A,' WILL SET VORONOI TUBE CUTOFF ON REPLICA ',I5,' TO ',F7.3,'.'\)) N
(         endif ! voro_cut > 0) N
(!) N
(        endif) N
(!) N
(!      done with 'SET' parsing) N
(!cccccccccccccccccccccccccccccccccccc CV WEIGHTS ccccccccccccccccccccccccccccccc) N
(ccccc) N
(      elseif \(__STRNCMP\(keyword,'LIST',4\)\) then ! list forcing and orientation a) N
(toms) N
(       if \(qprint\) then ; write\(_MSGBUF,6762\) whoami ; __PRINT\(_MSGBUF\) ; endif) N
( 6762 format\(/A,' WILL LIST REPLICA ATOMS.'\)) N
(       call ftsm_list_atoms\(\)) N
(!ccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccc) N
(c) N
(      else) N
(            __WARN\(whoami,'UNRECOGNIZED SUBCOMMAND: ',keyword\)) N
(      endif) N
(!) N
(      end subroutine ftsm_parse) N
(ftsm.ftn) (Page 22/90) (Apr 16, 13 16:43) title
border
grestore
(Printed by surgeon) rhead
(ftsm.ftn) (11/45) (Wednesday May 01, 2013) footer
end % of iso1dict
pagesave restore
showpage
%%Page: (23-24) 12
%%BeginPageSetup
/pagesave save def
sh 0 translate 90 rotate
%%EndPageSetup
iso1dict begin
gsave
llx lly 12 add translate
/v 0 store
/x0 x v get 3.147420 add sx cw mul add store
/y0 y v get bfs th add sub store
x0 y0 moveto
(!ccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccc) p n
(      subroutine ftsm_init\(\)) N
(      __DEP_OUTPUT) N
(      __DEP_PARSER ) N
(      __DEP_MULTICOM       __CHARMM_ONLY !##MULTICOM) N
(      __DEP_MPI ) N
(      __DEP_NUMBER) N
(!) N
(      __IMPNONE) N
( __DECLARE_MSGBUF) N
(#include "../../mpitype.def") N
(      int :: ierror) N
(      bool :: qroot, qslave) N
(      character\(len=11\) :: whoami) N
(!) N
(      data whoami /' FTSM_INIT>'/) N
(!) N
(!      do a basic communicator check:) N
(      if \(ME_LOCAL.eq.0.and.ME_STRNG.eq.MPI_UNDEFINED\) then) N
(        write\(_MSGBUF, 111\) whoami, ME_GLOBAL, whoami ; __PRINT\(_MSGBUF\)) N
( 111  FORMAT\(A, ' WORLD REPLICA ',I5, ' HAS ZERO GROUP ID',             &) N
(     & /,A,' BUT INVALID STRING ID \(MAY BE OK\).'\)) N
(      elseif \(ME_STRNG.ne.MPI_UNDEFINED.and.                            &) N
(     &  \(ME_LOCAL.ne.0.or.MPI_COMM_LOCAL.eq.MPI_COMM_NULL\)\) then) N
(        write\(_MSGBUF, 112\) whoami, ME_GLOBAL, whoami ; __PRINT\(_MSGBUF\)) N
( 112  FORMAT\(A, ' WORLD REPLICA ',I5, ' HAS A VALID STRING ID',         &) N
(     & /,A,' BUT A NONZERO GROUP ID. ABORTING.'\)) N
(       return) N
(      endif) N
(!) N
(      qroot=ME_STRNG.ne.MPI_UNDEFINED) N
(      qslave=ME_LOCAL.ne.MPI_UNDEFINED ! \(also includes roots\)) N
(!) N
(      if \(ftsm_initialized\) then) N
(       if \(qroot\) then) N
(        if \(ME_STRNG.eq.0\) then) N
(          write\(_MSGBUF,'\(2A\)'\)                                            &) N
(     &    whoami, ' FTSM ALREADY INITIALIZED. CALL "DONE" TO CLEAN UP.' ; __PRIN) N
(T\(_MSGBUF\);) N
(        endif ! ME_STRNG) N
(       endif ! qroot) N
(       return) N
(      endif) N
(!) N
(      nstring=1 ! safe \(hopefully\) default) N
(      mestring=-1 ! safe \(hopefully\) default) N
(!) N
(      if \(qroot\) then) N
(        nstring=SIZE_STRNG) N
(        mestring=ME_STRNG) N
(      endif) N
(#ifdef __CHARMM) N
(!      broadcast string size to all slave nodes) N
(      __BROADCAST_LOCAL_8B\(nstring, 1\)    !##INTEGER8) N
(      __BROADCAST_LOCAL_8B\(mestring, 1\)   !##INTEGER8) N
(!) N
(      __BROADCAST_LOCAL_4B\(nstring, 1\)    !##.not.INTEGER8) N
(      __BROADCAST_LOCAL_4B\(mestring, 1\)   !##.not.INTEGER8) N
(!      set envorinment variable) N
(      call setmsi\('NSTRING',nstring\)) N
(      call setmsi\('MESTRING',mestring\)) N
(#else) N
(      __BROADCAST_LOCAL\(nstring, 1, mpiint\)) N
(      __BROADCAST_LOCAL\(mestring, 1, mpiint\)) N
(#endif) N
(!) N
(      if \(qroot\) then) N
(        if \(ME_STRNG.eq.0\) then) N
(          write\(_MSGBUF,'\(2A,I5, A\)'\)                                      &) N
(ftsm.ftn) (Page 23/90) (Apr 16, 13 16:43) title
border
/v 1 store
/x0 x v get 3.147420 add sx cw mul add store
/y0 y v get bfs th add sub store
x0 y0 moveto
(     &    whoami, ' FOUND ',nstring,' REPLICAS.' ; __PRINT\(_MSGBUF\)) p n
(        endif) N
(      endif) N
(!) N
(      MPI_RTMD_TYPE =MPI_DATATYPE_NULL) N
(      MPI_RTMD_TYPE_=MPI_DATATYPE_NULL) N
(!    initialize free energy arrays) N
(      if \(allocated\(fe\)\) deallocate\(fe\)) N
(      if \(allocated\(feav\)\) deallocate\(feav\)) N
(      if \(allocated\(ds\)\) deallocate\(ds\)) N
(      if \(allocated\(curv\)\) deallocate\(curv\)) N
(      allocate\(fe\(nstring\), feav\(nstring\),                              &) N
(     &         ds\(nstring-1\), curv\(nstring-2\)\)) N
() N
(      fe=0d0; feav=0d0; avforce=0d0; ds=0d0; curv=0d0) N
(!) N
(      num_evolve_samples=0) N
(      num_fe_samples=0) N
(      num_force_samples=0) N
(!    set default restraint positions) N
(!) N
(      if \(mestring.eq.0\) then) N
(       dpar0=zero) N
(      elseif \(mestring.eq.nstring-1\) then) N
(       dpar0=one) N
(      else) N
(       dpar0=half) N
(      endif) N
(!) N
(      dperp0=one ; dperp0i=dperp0 ; dperp0f=__NAN ; dperp_adjust_iter=0) N
(      drms0=zero) N
(!) N
(      qorient=.false.) N
(      qdiffrot=.false.) N
(!) N
(      nullify\(rall_o, rall_new_o, rall_f, rall_new_o, rcom_all\)) N
(!) N
(      ftsm_initialized=.true.) N
(!) N
(      end subroutine ftsm_init) N
(!cccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccc) N
(      subroutine ftsm_done\(\)) N
(      use ftsm_rex, only: ftsm_rex_done) N
(      use ftsm_voronoi, only : ftsm_voronoi_done) N
(!) N
(      __DEP_OUTPUT) N
(      __DEP_PARSER ) N
(      __DEP_MULTICOM       __CHARMM_ONLY !##MULTICOM) N
(      __DEP_MPI ) N
(!) N
( __DECLARE_MSGBUF) N
(!) N
(      character\(len=11\) :: whoami) N
(!) N
(      data whoami /' FTSM_DONE>'/) N
(!) N
(      if \(MPI_COMM_STRNG.ne.MPI_COMM_NULL.and.ME_STRNG.eq.0\) then ) N
(       write\(_MSGBUF,'\(2A,I5, A\)'\) whoami, ' CLEANING UP.' ; __PRINT\(_MSGBUF\)) N
(      endif) N
(!) N
(      nstring=-1) N
(      mestring=-1) N
(#ifdef __CHARMM) N
(!      set envorinment variable) N
(      call setmsi\('NSTRING',nstring\)) N
(      call setmsi\('MESTRING',mestring\)) N
(#endif) N
(!) N
(!    deallocate arrays) N
(ftsm.ftn) (Page 24/90) (Apr 16, 13 16:43) title
border
grestore
(Printed by surgeon) rhead
(ftsm.ftn) (12/45) (Wednesday May 01, 2013) footer
end % of iso1dict
pagesave restore
showpage
%%Page: (25-26) 13
%%BeginPageSetup
/pagesave save def
sh 0 translate 90 rotate
%%EndPageSetup
iso1dict begin
gsave
llx lly 12 add translate
/v 0 store
/x0 x v get 3.147420 add sx cw mul add store
/y0 y v get bfs th add sub store
x0 y0 moveto
(!) p n
(      nforced=0) N
(      if \(associated\(r_f\)\) deallocate\(r_f\)) N
(      if \(associated\(iatom_f\)\) deallocate\(iatom_f\)) N
(      if \(associated\(iatom_a\)\) deallocate\(iatom_a\)) N
(      if \(associated\(orientWeights\)\) deallocate\(orientWeights\)) N
(      if \(associated\(forcedWeights\)\) deallocate\(forcedWeights\)) N
(      if \(associated\(rall_f\)\) deallocate\(rall_f\)) N
(      if \(associated\(rall_new_f\)\) deallocate\(rall_new_f\)) N
(!) N
(      if \(qdiffrot\) then) N
(       if \(associated\(r_o\)\) deallocate\(r_o\);) N
(       if \(associated\(rall_o\)\) deallocate\(rall_o\);) N
(       if \(associated\(rall_new_o\)\) deallocate\(rall_new_o\);) N
(       if \(associated\(iatom_o\)\) deallocate\(iatom_o\);) N
(       if \(associated\(iatom_both\)\) deallocate\(iatom_both\)) N
(      endif) N
(!) N
(      nullify\(r_o\)) N
(      nullify\(iatom_o\)) N
(      norient=0) N
(      nboth=0) N
(!) N
(      if \(associated\(iatom_a\)\) deallocate\(iatom_a\)) N
(      nany=0) N
(!) N
(      if \(associated\(rcom\)\) deallocate\(rcom\)) N
(      if \(associated\(rcom_all\)\) deallocate\(rcom_all\)) N
(      if \(allocated\(ds\)\) deallocate\(ds\)) N
(      if \(allocated\(curv\)\) deallocate\(curv\)) N
(      if \(allocated\(fe\)\) deallocate\(fe\)) N
(      if \(allocated\(feav\)\) deallocate\(feav\)) N
(!) N
(      num_evolve_samples=0) N
(      num_fe_samples=0) N
(      num_force_samples=0) N
(!) N
(      qdiffrot=.false.) N
(      qorient=.false.) N
(!) N
(      call ftsm_define_rtmd_type\(\) ! deallocate MPI type for transmitting forces) N
( \(this is the effect when norient=0\)) N
(!) N
(      call ftsm_rex_done\(\)) N
(!) N
(      call ftsm_mini_done\(\) ! deallocate minimization structures \(if any\)) N
(!) N
(      call ftsm_voronoi_done\(\)) N
(!) N
(      ftsm_initialized=.false.) N
(!) N
(      end subroutine ftsm_done) N
(!cccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccc) N
(      subroutine ftsm_repa_init\(comlyn, comlen\)) N
(!) N
(      __DEP_OUTPUT) N
(      __DEP_PARSER ) N
(      __DEP_MULTICOM       __CHARMM_ONLY !##MULTICOM) N
(      __DEP_MPI ) N
(      __IMPNONE) N
(!) N
( __DECLARE_MSGBUF) N
(!) N
(      CHARACTER\(LEN=*\) :: COMLYN) N
(      int :: COMLEN) N
(      character\(len=16\) :: whoami) N
(      bool :: qprint, qroot) N
(!) N
(      data whoami /' FTSM_REPA_INIT>'/) N
(ftsm.ftn) (Page 25/90) (Apr 16, 13 16:43) title
border
/v 1 store
/x0 x v get 3.147420 add sx cw mul add store
/y0 y v get bfs th add sub store
x0 y0 moveto
(!) p n
(      qroot=MPI_COMM_STRNG.ne.MPI_COMM_NULL) N
(      qprint=qroot.and.ME_STRNG.eq.0) N
(!) N
(      if \(qprint\) then ; write\(_MSGBUF,8002\) whoami ; __PRINT\(_MSGBUF\) ; endif) N
(      call smcv_repa_init\(comlyn, comlen\)) N
(!) N
( 8002 format\(/A,' USING SMCV INITIALIZATION ROUTINE'\)) N
(!) N
(      end subroutine ftsm_repa_init) N
(!cccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccc) N
(      subroutine ftsm_mini_init\(comlyn, comlen\)) N
(      use ftsm_var) N
(      __DEP_OUTPUT) N
(      __DEP_PARSER ) N
(      __DEP_MULTICOM       !__CHARMM_ONLY##MULTICOM) N
(      __DEP_MPI ) N
(      __DEP_NUMBER) N
(#ifdef __CHARMM) N
(      use datstr) N
(#endif) N
(!cccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccc) N
(      __IMPNONE) N
(!) N
(      character\(len=*\) :: comlyn) N
(      int :: comlen) N
(!) N
(      character\(len=16\) :: whoami) N
(      character\(len=8\) :: keyword) N
(!) N
(      int :: isd=0, iconj=0, mlen) N
(!) N
(!) N
(      bool :: qroot, qprint) N
(!) N
( __DECLARE_MSGBUF) N
(!) N
(      character\(len=20\) :: methods\(2\), method) N
(      data methods/ 'STEEPEST DESCENT','CONJUGATE GRADIENT'/) N
() N
(      data whoami /' FTSM_MINI_INIT>'/) N
(!) N
(      qroot=MPI_COMM_STRNG.ne.MPI_COMM_NULL) N
(      qprint=qroot.and.ME_STRNG.eq.0) N
(!) N
(      ftsm_mini_method=0) N
(      ftsm_mini_initialized=.false.) N
(!) N
(      isd=__INDX_RM\(comlyn, comlen, 'SD'\) ; if \(isd.gt.0\) ftsm_mini_method=sd) N
(      iconj=__INDX_RM\(comlyn, comlen, 'CONJ'\) ; if \(iconj.gt.0\) ftsm_mini_method) N
(=conj) N
(!) N
(      if \(\(iconj\).gt.0\) then) N
(        __WRN\(whoami,' ONLY SD MINIMIZATION IS CURRENTLY SUPPORTED. NOTHING DONE) N
('\)) N
(        return) N
(      endif) N
(!ccccccc CHECK FOR MULTIPLE OR MISSING OPTIONS) N
(      if \(\(abs\(isd\)+abs\(iconj\)\) .eq. 0\) then) N
(       if \(qprint\) then  ; write\(_MSGBUF,665\) whoami ; __PRINT\(_MSGBUF\) ; endif ) N
(! qprint) N
( 665   FORMAT\(A,' MINIMIZATION METHOD NOT SPECIFIED. WILL USE STEEPEST DESCENT.') N
(\)) N
(       ftsm_mini_method=sd) N
(      elseif \(\(isd+iconj\) .gt. 1\) then) N
(       __WRN\(whoami,'MORE THAN ONE MINIMIZATION METHOD SPECIFIED. NOTHING DONE'\)) N
(       return) N
(      endif) N
(!) N
(ftsm.ftn) (Page 26/90) (Apr 16, 13 16:43) title
border
grestore
(Printed by surgeon) rhead
(ftsm.ftn) (13/45) (Wednesday May 01, 2013) footer
end % of iso1dict
pagesave restore
showpage
%%Page: (27-28) 14
%%BeginPageSetup
/pagesave save def
sh 0 translate 90 rotate
%%EndPageSetup
iso1dict begin
gsave
llx lly 12 add translate
/v 0 store
/x0 x v get 3.147420 add sx cw mul add store
/y0 y v get bfs th add sub store
x0 y0 moveto
(      ftsm_mini_step=__GET_RM_F\(comlyn, comlen, 'STEP', one*0.01\) ! cast to corr) p n
(ect kind) N
(      if \(ftsm_mini_step.lt.zero\) then) N
(         __WRN\(whoami,'MINIMIZATION STEP MUST NOT BE NEGATIVE. SET TO 0.01 .'\)) N
(         ftsm_mini_step=0.01) N
(      endif) N
(!     number of minimization steps) N
(      ftsm_mini_bath_iterations=__GET_RM_I\(comlyn, comlen, 'BITER', ione*50\)) N
(      if \(ftsm_mini_bath_iterations.lt.0\) then) N
(         __WRN\(whoami,'NUMBER OF MINIMIZATION ITERATIONS CANNOT BE NEGATIVE. NOT) N
(HING DONE.'\)) N
(         return) N
(      endif) N
(!) N
(      ftsm_mini_forced_iterations=__GET_RM_I\(comlyn, comlen, 'SITER', ione*10\)) N
(      if \(ftsm_mini_forced_iterations.lt.0\) then) N
(         __WRN\(whoami,'NUMBER OF MINIMIZATION ITERATIONS CANNOT BE NEGATIVE. NOT) N
(HING DONE.'\)) N
(         return) N
(      endif) N
(!) N
(!     print summary) N
(!) N
(      if \(qprint\) then) N
(       mlen=len_trim\(methods\(ftsm_mini_method\)\)) N
(       write\(_MSGBUF\(1\),667\) whoami, methods\(ftsm_mini_method\)\(1:mlen\)) N
(       write\(_MSGBUF\(3\),669\) whoami, ftsm_mini_bath_iterations, ftsm_mini_forced) N
(_iterations) N
(       write\(_MSGBUF\(2\),668\) whoami, ftsm_mini_step) N
(       __PRINT\(_MSGBUF\)) N
(!) N
( 667  format\(A,'  WILL MINIMIZE STRING USING ',A,' MINIMIZATION'\)) N
( 669  format\(A,'  FOR ',I5,' BATH ITERATIONS AND ',I5,' STRING ITERATIONS'\)) N
( 668  format\(A,'  WITH INITIAL STEP ',F10.5\)) N
(!) N
(      endif) N
(!) N
(      ftsm_mini_initialized=.true.) N
(      __CHARMM_ONLY ftsm_nbond_image_data_initialized=.false. ! data for computi) N
(ng energy using CHARMM) N
(!) N
(      end subroutine ftsm_mini_init) N
(!cccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccc) N
(      subroutine ftsm_mini_done\(\)) N
(#ifdef __CHARMM) N
(      use datstr, only : FREEDT_nbond, FREEDT_image) N
(      call FREEDT_nbond\(ftsm_nbond_copy\)) N
(      call FREEDT_image\(ftsm_image_copy\)) N
(      ftsm_nbond_image_data_initialized=.false.) N
(#endif) N
(      ftsm_mini_method=0) N
(      ftsm_mini_initialized=.false.) N
(      end subroutine ftsm_mini_done) N
(!cccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccc) N
(      subroutine ftsm_list_atoms\(\)) N
(      __DEP_OUTPUT) N
(      __DEP_PARSER ) N
(      __DEP_MULTICOM       __CHARMM_ONLY !##MULTICOM) N
(      __DEP_MPI ) N
(      __DEP_ATOMID) N
(!) N
(      __IMPNONE) N
( __DECLARE_MSGBUF) N
(!) N
(      int :: j) N
(      character\(len=8\) :: sid, rid, ren, ac) N
(      character\(len=17\) :: whoami) N
(!) N
(      data whoami /' FTSM_LIST_ATOMS>'/) N
(ftsm.ftn) (Page 27/90) (Apr 16, 13 16:43) title
border
/v 1 store
/x0 x v get 3.147420 add sx cw mul add store
/y0 y v get bfs th add sub store
x0 y0 moveto
(!) p n
(      if \(MPI_COMM_STRNG.eq.MPI_COMM_NULL\) return ! only replica heads stay) N
(!) N
(      if \(ME_STRNG.eq.0\) then) N
(!) N
(       write\(_MSGBUF,'\(A\)'\) '\\t ORIENTATION ATOMS:') N
(        do j=1, norient;) N
(         __ATOMID\(iatom_o\(j\), sid, rid, ren, ac\)) N
(         write\(_MSGBUF,667\) '\\t',j, iatom_o\(j\), sid, rid, ren, ac) N
(        enddo) N
(!) N
(        if \(qdiffrot\) then) N
(         write\(_MSGBUF,'\(A\)'\) '\\t FORCING ATOMS') N
(         do j=1, nforced;) N
(          __ATOMID\(iatom_f\(j\), sid, rid, ren, ac\)) N
(          write\(_MSGBUF,667\) '\\t',j, iatom_f\(j\), sid, rid, ren, ac ; __PRINT\(_MS) N
(GBUF\)) N
(         enddo) N
(        else) N
(         write\(_MSGBUF,'\(A\)'\) '\\t FORCING AND ORIENTATION ATOMS ARE THE SAME' ; ) N
(__PRINT\(_MSGBUF\)) N
(        endif) N
(      endif ! ME_STRING) N
(!) N
( 667  format\(A,2I8,' ',4A\)) N
(!) N
(      end subroutine ftsm_list_atoms) N
(!cccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccc) N
(      subroutine ftsm_set_weights\(w,n\)) N
(      __DEP_OUTPUT) N
(      __DEP_NUMBER) N
(      __DEP_PARSER) N
(      __DEP_MULTICOM       __CHARMM_ONLY !##MULTICOM) N
(!) N
(      __IMPNONE) N
(      int :: i, j, n) N
(      float :: w\(n\), a) N
(      character\(len=18\) :: whoami) N
(!) N
( __DECLARE_MSGBUF) N
(!) N
(      data whoami /' FTSM_SET_WEIGHTS>'/) N
(!) N
(      if \(ME_STRNG.eq.0.and.ME_LOCAL.eq.0\) then) N
(       write\(_MSGBUF,668\)                                               &) N
(     & whoami,' A CHANGE IN THE ORIENTATION WEIGHTS REQUIRES ',         &) N
(     & whoami,' REDEFINING IMAGES \(e.g. USING FILL\)' ; __PRINT\(_MSGBUF\)) N
(      endif) N
( 668  format\(/2A,/2A\)) N
(!) N
(      if \(norient.eq.0.and.nforced.eq.0\) then) N
(       __WRN\(whoami,'NO STRING ATOMS FOUND. NOTHING DONE.'\)) N
(       return) N
(      endif) N
(!) N
(!      if \(norient.eq.0\)) N
(!     & __WRN\(whoami,'NO ORIENTATION ATOMS FOUND.'\)) N
(      if \(associated\(orientWeights\).and.associated\(iatom_o\)\) then) N
(       do i=1,norient) N
(        j=iatom_o\(i\)) N
(        if \(j.le.n\) then) N
(         orientWeights\(i\)=w\(j\)) N
(        else) N
(         __WRN\(whoami,'WEIGHT ARRAY BOUNDS EXCEEDED. ABORT.'\)) N
(         return) N
(        endif) N
(       enddo) N
(!) N
(       a=sum\(orientWeights\);) N
(ftsm.ftn) (Page 28/90) (Apr 16, 13 16:43) title
border
grestore
(Printed by surgeon) rhead
(ftsm.ftn) (14/45) (Wednesday May 01, 2013) footer
end % of iso1dict
pagesave restore
showpage
%%Page: (29-30) 15
%%BeginPageSetup
/pagesave save def
sh 0 translate 90 rotate
%%EndPageSetup
iso1dict begin
gsave
llx lly 12 add translate
/v 0 store
/x0 x v get 3.147420 add sx cw mul add store
/y0 y v get bfs th add sub store
x0 y0 moveto
(       if \(a.gt.__ERRTOL\) then ; orientWeights=orientWeights/a;) p n
(       else) N
(        __WRN\(whoami,'SUM OF ORIENTATION WEIGHTS IS VERY SMALL. ABORT.'\)) N
(        return) N
(       endif) N
(!) N
(      endif ! weights associated) N
(!) N
(!      if \(nforced.eq.0\)) N
(!     & __WRN\(whoami,'NO FORCED ATOMS FOUND.'\)) N
(      if \(associated\(forcedWeights\).and.associated\(iatom_f\)\) then) N
(       do i=1,nforced) N
(        j=iatom_f\(i\)) N
(        if \(j.le.n\) then) N
(         forcedWeights\(i\)=w\(j\)) N
(        else) N
(         __WRN\(whoami,'WEIGHT ARRAY BOUNDS EXCEEDED. ABORT.'\)) N
(         return) N
(        endif) N
(       enddo) N
(!) N
(       a=sum\(forcedWeights\);) N
(       if \(a.gt.__ERRTOL\) then ; forcedWeights=forcedWeights/a;) N
(       else) N
(        __WRN\(whoami,'SUM OF FORCING WEIGHTS IS VERY SMALL. ABORT.'\)) N
(        return) N
(       endif) N
(!) N
(      endif ! weights associated) N
(!) N
(      end subroutine ftsm_set_weights) N
(!) N
(!cccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccc) N
(      subroutine ftsm_swap\(c1,c2\)) N
(!      __DEP_OUTPUT) N
(      __IMPNONE) N
(      int :: c1, c2) N
(      float :: com\(3\)) N
(      character\(len=11\) :: whoami) N
(      int :: i,j) N
(!) N
(      data whoami /' FTSM_SWAP>'/) N
(!) N
(      if \(.not.ftsm_check\(qorient\)\) return) N
(!) N
(      if \(c1.gt.num_sets.or.c2.gt.num_sets\) then) N
(       __WRN\(whoami,'INVALID COLUMN SPECIFIED. ABORT.'\)) N
(       return) N
(      else) N
(       if \(qdiffrot\) then) N
(        r_o\(:,:,dummy\)=r_o\(:,:,c1\)) N
(        r_o\(:,:,c1\)=r_o\(:,:,c2\)) N
(        r_o\(:,:,c2\)=r_o\(:,:,dummy\)) N
(       endif) N
(       r_f\(:,:,dummy\)=r_f\(:,:,c1\)) N
(       r_f\(:,:,c1\)   =r_f\(:,:,c2\)) N
(       r_f\(:,:,c2\)   =r_f\(:,:,dummy\)) N
(!) N
(       com       =rcom\(:,c1\)) N
(       rcom\(:,c1\)=rcom\(:,c2\)) N
(       rcom\(:,c2\)=com) N
(!) N
(      endif) N
(!) N
(      end subroutine ftsm_swap) N
(!cccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccc) N
(      subroutine ftsm_copy\(c1,c2\)) N
(      __DEP_NUMBER ) N
(!) N
(ftsm.ftn) (Page 29/90) (Apr 16, 13 16:43) title
border
/v 1 store
/x0 x v get 3.147420 add sx cw mul add store
/y0 y v get bfs th add sub store
x0 y0 moveto
(      __IMPNONE) p n
(      int :: c1, c2) N
(      character\(len=11\) :: whoami) N
(      int :: i,j) N
(!) N
(      data whoami /' FTSM_COPY>'/) N
(!) N
(      if \(.not.ftsm_check\(qorient\)\) return) N
(!) N
(      if \(c1.gt.num_sets.or.c2.gt.num_sets\) then) N
(       __WRN\(whoami,'INVALID COLUMN SPECIFIED. ABORT.'\)) N
(       return) N
(      else) N
(       if \(qdiffrot\) r_o\(:,:,c2\)=r_o\(:,:,c1\)) N
(       r_f\(:,:,c2\)=r_f\(:,:,c1\)) N
(       rcom\(:,c2\) =rcom\(:,c1\)) N
(      endif) N
(!) N
(      end subroutine ftsm_copy) N
(!) N
(!cccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccc) N
(      subroutine ftsm_fill\(x,y,z\)) N
(      __DEP_NUMBER ) N
(      __DEP_MULTICOM       __CHARMM_ONLY !##MULTICOM) N
(!      __DEP_MPI ) N
(!) N
(      __IMPNONE) N
(!) N
(      float :: x\(:\), y\(:\), z\(:\)) N
(      character\(len=11\) :: whoami) N
(      int :: i,j,n) N
(      bool :: qroot, qslave) N
(      float, pointer, dimension\(:,:\) :: rl, rc, rr) N
(      int :: me) N
(!) N
(      data whoami /' FTSM_FILL>'/) N
(!) N
(      n=min\(size\(x\), size\(y\), size\(z\)\)) N
(!) N
(!      qroot=MPI_COMM_STRNG.ne.MPI_COMM_NULL) N
(!      qslave=\(\(MPI_COMM_LOCAL.ne.MPI_COMM_NULL\).and.SIZE_LOCAL.gt.1\)) N
(!) N
(      if \(.not.ftsm_check\(qorient\)\) return) N
(!) N
(      if \(any\(x.eq.__NAN\).or.any\(y.eq.__NAN\).or.any\(z.eq.__NAN\)\) then) N
(       __WRN\(whoami,'COORDINATE SET HAS UNDEFINED VALUES. NOTHING DONE.'\)) N
(       return) N
(      else ! if \(qroot\) then) N
(       do i=1,nforced) N
(        j=iatom_f\(i\)) N
(        if \(j.le.n\) then) N
(         r_f\(i,1,center\)=x\(j\)) N
(         r_f\(i,2,center\)=y\(j\)) N
(         r_f\(i,3,center\)=z\(j\)) N
(        else) N
(         __WRN\(whoami,'COORDINATE ARRAY BOUNDS EXCEEDED. ABORT.'\)) N
(         return) N
(        endif) N
(       enddo) N
(!) N
(       if \(qdiffrot\) then) N
(        do i=1,norient) N
(         j=iatom_o\(i\)) N
(         if \(j.le.n\) then) N
(          r_o\(i,1,center\)=x\(j\)) N
(          r_o\(i,2,center\)=y\(j\)) N
(          r_o\(i,3,center\)=z\(j\)) N
(         else) N
(          __WRN\(whoami,'COORDINATE ARRAY BOUNDS EXCEEDED. ABORT.'\)) N
(ftsm.ftn) (Page 30/90) (Apr 16, 13 16:43) title
border
grestore
(Printed by surgeon) rhead
(ftsm.ftn) (15/45) (Wednesday May 01, 2013) footer
end % of iso1dict
pagesave restore
showpage
%%Page: (31-32) 16
%%BeginPageSetup
/pagesave save def
sh 0 translate 90 rotate
%%EndPageSetup
iso1dict begin
gsave
llx lly 12 add translate
/v 0 store
/x0 x v get 3.147420 add sx cw mul add store
/y0 y v get bfs th add sub store
x0 y0 moveto
(          return) p n
(         endif) N
(        enddo) N
(       endif ! qdiffrot) N
(      endif ! x.eq.__NAN) N
(!     remove and save center of mass of orientation atoms) N
(!) N
(      call ftsm_save_com\(\)) N
(!) N
(      call ftsm_swap_bc\(.true.\) ! .true. : send to slaves) N
(!) N
(      r_f\(:,:,left_old:right_old\)=r_f\(:,:,left:right\)) N
(      r_f\(:,:,center_new\)=r_f\(:,:,center\)) N
(      if \(qdiffrot\) then) N
(       r_o\(:,:,left_old:right_old\)=r_o\(:,:,left:right\)) N
(       r_o\(:,:,center_new\)=r_o\(:,:,center\)) N
(      endif) N
(!) N
(!     now send to slaves) N
(!) N
(!      if \(qslave\) then) N
(!       call __BROADCAST_LOCAL_8B\(r_f,9*nforced\) ! send three adjacent sets) N
(!       if \(qdiffrot\) call __BROADCAST_LOCAL_8B\(r_o,9*norient\)) N
(!      endif ! qslave) N
(!) N
(      end subroutine ftsm_fill) N
(!) N
(!cccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccc) N
(      subroutine ftsm_compute_overlap_ind\(\) ! compute overlap indices in iatom_b) N
(oth) N
(      __IMPNONE) N
(      int :: i, j) N
(      int, allocatable :: temp\(:,:\)) N
(!) N
(!   note: both index arrays are assumed to be sorted !) N
(!) N
(      if \(associated\(iatom_both\)\) deallocate\(iatom_both\)) N
(      nboth=0) N
(      if \( .not. \( qorient .and. qdiffrot .and. ftsm_check\(qorient\)\)\) return) N
(!) N
(      i=1; j=1) N
(      allocate\(temp\(2,max\(nforced, norient\)\)\)) N
(      do while \(i.le.nforced .and. j.le.norient\)) N
(!) N
(       do while \(  j.lt.norient .and. \( iatom_f\(i\) .gt. iatom_o\(j\) \) \)) N
(        j=j+1) N
(       enddo) N
(       if \(iatom_f\(i\).eq.iatom_o\(j\)\) then) N
(        nboth=nboth+1;) N
(        temp\(1,nboth\)=i; temp\(2,nboth\)=j;) N
(        j=j+1; ! i-indices are unique, so safe to increment j) N
(       endif) N
(       i=i+1) N
(      enddo) N
(!) N
(      if \(nboth.gt.0\) then) N
(       allocate\(iatom_both\(2,nboth\)\)) N
(       iatom_both\(:,1:nboth\)=temp\(:,1:nboth\)) N
(      endif) N
(      deallocate\(temp\)) N
(!) N
(      end subroutine ftsm_compute_overlap_ind) N
(!ccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccc) N
(      subroutine ftsm_define_rtmd_type\(\)) N
(      use sm_config, only: sizeofreal) N
(      __DEP_MPI ) N
(      __DEP_NUMBER) N
(!) N
(      __IMPNONE) N
(ftsm.ftn) (Page 31/90) (Apr 16, 13 16:43) title
border
/v 1 store
/x0 x v get 3.147420 add sx cw mul add store
/y0 y v get bfs th add sub store
x0 y0 moveto
(!) p n
(      int4mpi :: error, norient_mpi) N
(      integer\(kind=MPI_ADDRESS_KIND\) :: lb, extent) N
(!) N
(!    create custom type for gathering array of shape \(norient,3\), in rows) N
(!    taken from rtmd code) N
(!) N
(      if \(MPI_RTMD_TYPE.ne.MPI_DATATYPE_NULL\)                           &) N
(     &  call mpi_type_free\(MPI_RTMD_TYPE, error\)) N
(      if \(MPI_RTMD_TYPE_.ne.MPI_DATATYPE_NULL\)                          &) N
(     & call mpi_type_free\(MPI_RTMD_TYPE_, error\)) N
(!) N
(      if \(norient.gt.0\) then) N
(       lb=0) N
(       extent=sizeofreal) N
(       norient_mpi=norient) N
(       call mpi_type_vector\(3, 1, norient_mpi,                         &) N
(     &   MPI_DOUBLE_PRECISION, MPI_RTMD_TYPE_, error\)) N
(!    corresponding resized type) N
(       call mpi_type_create_resized\(MPI_RTMD_TYPE_,lb,extent,           &) N
(     &   MPI_RTMD_TYPE, error\)) N
(       call mpi_type_commit\(MPI_RTMD_TYPE, error\)) N
(      endif) N
(!) N
(      end subroutine ftsm_define_rtmd_type) N
(!ccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccc) N
(      function ftsm_test_grad_fd\(x,y,z,h\) result\(error\)) N
(      __IMPNONE) N
(      float :: x\(:\), y\(:\), z\(:\)) N
(      float :: h) N
(      float, pointer :: error\(:,:\)) N
(      int :: i, j, jj) N
(      float :: d, ap, am, bp, bm) N
(      float :: s) N
(!) N
(      character\(len=19\) :: whoami) N
(      data whoami /' FTSM_TEST_GRAD_FD>'/) N
(!) N
(      allocate\(error\(2,3\)\)) N
(      ap=0d0; am=0d0; bp=0d0; bm=0d0; error\(1,1\)=9999d0) N
(!) N
(      if \(.not.ftsm_check\(qorient\)\) return) N
(!) N
(      if \(h.eq.0d0\) then) N
(       __WRN\(whoami,'COORDINATE PERTURBATION ZERO.'\)) N
(       return) N
(      endif) N
(!) N
(      s=1d0) N
(!      s=0.5d0) N
(! compute projection and derivatives analytically) N
(      call ftsm_calc\(x,y,z,.true.,s\)) N
(!) N
(! IMPORTANT: if the o and f atoms are different and overlapping, the o and f gra) N
(dient arrays) N
(! will each have partial contributions to the total derivative for the overlappi) N
(ng atoms) N
(! \(whereas, the FD calculation will include both contributions\)) N
(! therefore, I am "reducing" the different gradient contributions below \(which i) N
(nvalidates) N
(! the contents of the arrays\); the need to do this arises because I chose to kee) N
(p two) N
(! possibly overlapping coordinate arrays, even though the corresponding atoms ar) N
(e unique) N
(!) N
(      if \(qdiffrot\) then) N
(       do i=1, nboth) N
(         r_o\(iatom_both\(2,i\), :, fpar\) =                                &) N
(     &   r_o\(iatom_both\(2,i\), :, fpar\) + r_f\(iatom_both\(1,i\), :, fpar\)) N
(ftsm.ftn) (Page 32/90) (Apr 16, 13 16:43) title
border
grestore
(Printed by surgeon) rhead
(ftsm.ftn) (16/45) (Wednesday May 01, 2013) footer
end % of iso1dict
pagesave restore
showpage
%%Page: (33-34) 17
%%BeginPageSetup
/pagesave save def
sh 0 translate 90 rotate
%%EndPageSetup
iso1dict begin
gsave
llx lly 12 add translate
/v 0 store
/x0 x v get 3.147420 add sx cw mul add store
/y0 y v get bfs th add sub store
x0 y0 moveto
(         r_f\(iatom_both\(1,i\), :, fpar\) = r_o\(iatom_both\(2,i\), :, fpar\)) p n
(       enddo) N
(       if \(proj_on\) then) N
(        do i=1, nboth) N
(         r_o\(iatom_both\(2,i\), :, fperp\) =                               &) N
(     &   r_o\(iatom_both\(2,i\), :, fperp\) + r_f\(iatom_both\(1,i\), :, fperp\)) N
(         r_f\(iatom_both\(1,i\), :, fperp\) = r_o\(iatom_both\(2,i\), :, fperp\)) N
(        enddo) N
(       endif) N
(      endif) N
(!) N
(! no need for this because not overwriting force arrays) N
(!      r_f\(:,:,left_cur\)=r_f\(:,:,fpar\)) N
(!      if \(qdiffrot\) r_o\(:,:,left_cur\)=r_o\(:,:,fpar\)) N
(!      if \(proj_on\) then) N
(!       r_f\(:,:,right_cur\)=r_f\(:,:,fperp\)) N
(!       if \(qdiffrot\) r_o\(:,:,right_cur\)=r_o\(:,:,fperp\)) N
(!      endif) N
(!) N
(!        write\(mestring+500,*\) dpar, dperp) N
(!        write\(mestring+500,*\) r_f\(:,2,fpar\)) N
(!) N
(! loop over all coordinates and compute finite differences) N
(      error=0d0) N
(!) N
(      do jj=1, nforced) N
(       j=iatom_f\(jj\)) N
(! x-derivatives *******************************************) N
(       d=x\(j\) ; x\(j\)=d-h) N
(       call ftsm_calc\(x,y,z,.false.,s\)) N
(       if \(proj_on\) then; am=dpar;  bm=dperp; else; am=drms ; endif) N
(       x\(j\)=d+h) N
(       call ftsm_calc\(x,y,z,.false.,s\) ! overwrite zold cv value array \(warn abo) N
(ut this elsewhere\)) N
(       if \(proj_on\) then; ap=dpar;  bp=dperp; else; ap=drms ; endif) N
(       x\(j\)=d ! restore correct value) N
(! compute largest absolute error) N
(!         r_f\(jj,1,dummy\)=0.5d0/h*\(bp-bm\) ! aa) N
(!) N
(       error\(1,1\) = max \(error\(1,1\),                                    &) N
(     &         abs\(0.5d0/h*\(ap-am\)-r_f\(jj,1,fpar\) \) \)) N
(       if \(proj_on\)                                                     &) N
(     & error\(2,1\) = max \(error\(2,1\),                                    &) N
(     &        abs\(0.5d0/h*\(bp-bm\)-r_f\(jj,1,fperp\) \) \)) N
(! y-derivatives *******************************************) N
(       d=y\(j\) ; y\(j\)=d-h) N
(       call ftsm_calc\(x,y,z,.false.,s\)) N
(       if \(proj_on\) then; am=dpar;  bm=dperp; else; am=drms ; endif) N
(       y\(j\)=d+h) N
(       call ftsm_calc\(x,y,z,.false.,s\) ! overwrite zold cv value array \(warn abo) N
(ut this elsewhere\)) N
(       if \(proj_on\) then; ap=dpar;  bp=dperp; else; ap=drms ; endif) N
(       y\(j\)=d ! restore correct value) N
(! compute largest absolute error) N
(!         r_f\(jj,2,dummy\)=0.5d0/h*\(ap-am\) ! aa) N
(!) N
(       error\(1,2\) = max \(error\(1,2\),                                    &) N
(     &          abs\(0.5d0/h*\(ap-am\)-r_f\(jj,2,fpar\) \) \)) N
(       if \(proj_on\)                                                     &) N
(     & error\(2,2\) = max \(error\(2,2\),                                    &) N
(     &         abs\(0.5d0/h*\(bp-bm\)-r_f\(jj,2,fperp\) \) \)) N
(! z-derivatives *******************************************) N
(       d=z\(j\) ; z\(j\)=d-h) N
(       call ftsm_calc\(x,y,z,.false.,s\)) N
(       if \(proj_on\) then; am=dpar;  bm=dperp; else; am=drms ; endif) N
(       z\(j\)=d+h) N
(       call ftsm_calc\(x,y,z,.false.,s\) ! overwrite zold cv value array \(warn abo) N
(ut this elsewhere\)) N
(       if \(proj_on\) then; ap=dpar;  bp=dperp; else; ap=drms ; endif) N
(ftsm.ftn) (Page 33/90) (Apr 16, 13 16:43) title
border
/v 1 store
/x0 x v get 3.147420 add sx cw mul add store
/y0 y v get bfs th add sub store
x0 y0 moveto
(       z\(j\)=d ! restore correct value) p n
(! compute largest absolute error) N
(       error\(1,3\) = max \(error\(1,3\),                                    &) N
(     &         abs\(0.5d0/h*\(ap-am\)-r_f\(jj,3,fpar\) \) \)) N
(       if \(proj_on\)                                                     &) N
(     & error\(2,3\) = max \(error\(2,3\),                                    &) N
(     &         abs\(0.5d0/h*\(bp-bm\)-r_f\(jj,3,fperp\) \) \)) N
(      enddo ! forced atoms) N
(!) N
(!        write\(mestring+500,*\) r_f\(:,2,dummy\) ! aaa) N
(!           close\(mestring+500\)) N
(! orientation atoms:) N
(      if \(qorient.and.qdiffrot\) then) N
(       do jj=1, norient) N
(        j=iatom_o\(jj\)) N
(! x-derivatives *******************************************) N
(        d=x\(j\) ; x\(j\)=d-h) N
(        call ftsm_calc\(x,y,z,.false.,s\)) N
(        if \(proj_on\) then; am=dpar;  bm=dperp; else; am=drms ; endif) N
(        x\(j\)=d+h) N
(        call ftsm_calc\(x,y,z,.false.,s\) ! overwrite zold cv value array \(warn ab) N
(out this elsewhere\)) N
(        if \(proj_on\) then; ap=dpar;  bp=dperp; else; ap=drms ; endif) N
(        x\(j\)=d ! restore correct value) N
(! compute largest absolute error) N
(        error\(1,1\) = max\(error\(1,1\),                                    &) N
(     &         abs\(0.5d0/h*\(ap-am\)-r_o\(jj,1,fpar\) \) \)) N
(        if \(proj_on\)                                                    &) N
(     &  error\(2,1\) = max\(error\(2,1\),                                    &) N
(     &         abs\(0.5d0/h*\(bp-bm\)-r_o\(jj,1,fperp\) \) \)) N
(! y-derivatives *******************************************) N
(        d=y\(j\) ; y\(j\)=d-h) N
(        call ftsm_calc\(x,y,z,.false.,s\)) N
(        if \(proj_on\) then; am=dpar;  bm=dperp; else; am=drms ; endif) N
(        y\(j\)=d+h) N
(        call ftsm_calc\(x,y,z,.false.,s\) ! overwrite zold cv value array \(warn ab) N
(out this elsewhere\)) N
(        if \(proj_on\) then; ap=dpar;  bp=dperp; else; ap=drms ; endif) N
(        y\(j\)=d ! restore correct value) N
(! compute largest absolute error) N
(        error\(1,2\) = max \(error\(1,2\),                                   &) N
(     &         abs\(0.5d0/h*\(ap-am\)-r_o\(jj,2,fpar\) \) \)) N
(        if \(proj_on\)                                                    &) N
(     &  error\(2,2\) = max \(error\(2,2\),                                   &) N
(     &         abs\(0.5d0/h*\(bp-bm\)-r_o\(jj,2,fperp\) \) \)) N
(! z-derivatives *******************************************) N
(        d=z\(j\) ; z\(j\)=d-h) N
(        call ftsm_calc\(x,y,z,.false.,s\)) N
(        if \(proj_on\) then; am=dpar;  bm=dperp; else; am=drms ; endif) N
(        z\(j\)=d+h) N
(        call ftsm_calc\(x,y,z,.false.,s\) ! overwrite zold cv value array \(warn ab) N
(out this elsewhere\)) N
(        if \(proj_on\) then; ap=dpar;  bp=dperp; else; ap=drms ; endif) N
(        z\(j\)=d ! restore correct value) N
(! compute largest absolute error) N
(        error\(1,3\) = max \(error\(1,3\),                                   &) N
(     &         abs\(0.5d0/h*\(ap-am\)-r_o\(jj,3,fpar\) \) \)) N
(        if \(proj_on\)                                                    &) N
(     &  error\(2,3\) = max \(error\(2,3\),                                   &) N
(     &         abs\(0.5d0/h*\(bp-bm\)-r_o\(jj,3,fperp\) \) \)) N
(       enddo ! orientation atoms) N
(      endif ! qdiffrot and qorient) N
(!) N
(      end function ftsm_test_grad_fd) N
(!cccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccc) N
(      function ftsm_test_parallel\(x,y,z\) result\(error\)) N
(      __DEP_MULTICOM       !__CHARMM_ONLY##MULTICOM) N
(      __DEP_MPI ) N
(      __IMPNONE) N
(ftsm.ftn) (Page 34/90) (Apr 16, 13 16:43) title
border
grestore
(Printed by surgeon) rhead
(ftsm.ftn) (17/45) (Wednesday May 01, 2013) footer
end % of iso1dict
pagesave restore
showpage
%%Page: (35-36) 18
%%BeginPageSetup
/pagesave save def
sh 0 translate 90 rotate
%%EndPageSetup
iso1dict begin
gsave
llx lly 12 add translate
/v 0 store
/x0 x v get 3.147420 add sx cw mul add store
/y0 y v get bfs th add sub store
x0 y0 moveto
(!) p n
(      float :: x\(:\), y\(:\), z\(:\)) N
(      float, pointer :: error\(:,:\)) N
(      float :: am, bm) N
(!) N
(      int :: i) N
(      bool :: qpara) N
(      bool :: qgrp) N
(!) N
(      character\(len=20\) :: whoami) N
(      data whoami /' FTSM_TEST_PARALLEL>'/) N
(      allocate\(error\(2,4\)\) ! first column contains the CV values; then maximum d) N
(erivative error \(x,y,z\)) N
(      error\(2,:\)=0d0; error\(1,:\)=9999d0) N
(!) N
(      if \(.not.ftsm_check\(qorient\)\) return) N
(!) N
(      qgrp=\(MPI_COMM_LOCAL.ne.MPI_COMM_NULL\)                            &) N
(     & .and.\(SIZE_LOCAL.gt.1\)) N
(      if \(.not. qgrp\) then ! quit if cannot run in parallel) N
(       __WRN\(whoami,'CANNOT PERFORM TEST ON 1-PROCESSOR GROUPS'\)) N
(       return) N
(      endif) N
(! save values & force a serial calculation) N
(      qpara=calc_bestfit_grad_para; calc_bestfit_grad_para=.false.) N
(!) N
(! 1\) compute serially) N
(      call ftsm_calc\(x,y,z,.true.\)) N
(! using left_cur array : it should not be used unless an additional parameter is) N
( passed to calc) N
(! save gradients) N
(      r_f\(:,:,left_cur\)=r_f\(:,:,fpar\); r_f\(:,:,fpar\)=0d0;) N
(      if \(qdiffrot\) then) N
(       r_o\(:,:,left_cur\)=r_o\(:,:,fpar\); r_o\(:,:,fpar\)=0d0) N
(      endif) N
(!) N
(      if \(proj_on\) then) N
(       r_f\(:,:,right_cur\)=r_f\(:,:,fperp\); r_f\(:,:,fperp\)=0d0) N
(       if \(qdiffrot\) then) N
(        r_o\(:,:,right_cur\)=r_o\(:,:,fperp\); r_o\(:,:,fperp\)=0d0) N
(       endif) N
(      endif) N
(!        write\(me_GLOBAL+500,*\) drms, dpar, dperp) N
(!        write\(me_GLOBAL+500,*\) r_o\(:,2,left_cur\)) N
(! save projections) N
(      if \(proj_on\) then; am=dpar;  bm=dperp; else; am=drms ; endif) N
(!) N
(! 2\) compute in \(fully\) parallel) N
(      calc_bestfit_grad_para=.true.) N
(!) N
(      call ftsm_calc\(x,y,z,.true.\)) N
(!        write\(me_GLOBAL+500,*\) drms, dpar, dperp) N
(!        write\(me_GLOBAL+500,*\) r_o\(:,2,fpar\)) N
(!         close\(me_GLOBAL+500\)) N
(! compute largest absolute error) N
(! parallel component \(or drms\)) N
(      error\(1,1\) = maxval \( abs \(r_f\(:,1,left_cur\)-r_f\(:,1,fpar\) \) \)) N
(      error\(1,2\) = maxval \( abs \(r_f\(:,2,left_cur\)-r_f\(:,2,fpar\) \) \)) N
(      error\(1,3\) = maxval \( abs \(r_f\(:,3,left_cur\)-r_f\(:,3,fpar\) \) \)) N
(      if \(proj_on\) then) N
(       error\(2,1\) = maxval \( abs \(r_f\(:,1,right_cur\)-r_f\(:,1,fperp\) \) \)) N
(       error\(2,2\) = maxval \( abs \(r_f\(:,2,right_cur\)-r_f\(:,2,fperp\) \) \)) N
(       error\(2,3\) = maxval \( abs \(r_f\(:,3,right_cur\)-r_f\(:,3,fperp\) \) \)) N
(       error\(2,4\) = abs \( dperp - bm \)) N
(       error\(1,4\) = abs \( dpar  - am \)) N
(      else) N
(       error\(1,4\) = abs \( drms  - am \)) N
(      endif) N
(!) N
(ftsm.ftn) (Page 35/90) (Apr 16, 13 16:43) title
border
/v 1 store
/x0 x v get 3.147420 add sx cw mul add store
/y0 y v get bfs th add sub store
x0 y0 moveto
(      if \(qdiffrot.and.qorient\) then) p n
(       error\(1,1\) = max\(error\(1,1\),                                     &) N
(     &              maxval \( abs \(r_o\(:,1,left_cur\)-r_o\(:,1,fpar\) \) \) \)) N
(       error\(1,2\) = max\(error\(1,2\),                                     &) N
(     &              maxval \( abs \(r_o\(:,2,left_cur\)-r_o\(:,2,fpar\) \) \) \)) N
(       error\(1,3\) = max\(error\(1,3\),                                     &) N
(     &              maxval \( abs \(r_o\(:,3,left_cur\)-r_o\(:,3,fpar\) \) \) \)) N
(       if \(proj_on\) then) N
(        error\(2,1\) = max\(error\(2,1\),                                    &) N
(     &              maxval \( abs \(r_o\(:,1,right_cur\)-r_o\(:,1,fperp\) \) \)\)) N
(        error\(2,2\) = max\(error\(2,2\),                                    &) N
(     &              maxval \( abs \(r_o\(:,2,right_cur\)-r_o\(:,2,fperp\) \) \)\)) N
(        error\(2,3\) = max\(error\(2,3\),                                    &) N
(     &              maxval \( abs \(r_o\(:,3,right_cur\)-r_o\(:,3,fperp\) \) \)\)) N
(       endif) N
(      endif) N
(! restore original option) N
(      calc_bestfit_grad_para=qpara) N
(!) N
(      end function ftsm_test_parallel) N
(!ccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccc) N
(ccc) N
(      subroutine ftsm_write_dcd\(ifile, col, ibeg, iend\)) N
(!) N
(#ifdef __CHARMM) N
(      __DEP_PSF ) N
(      use cveloci_mod      !##CVELOCI) N
(#endif) N
(!) N
(      __DEP_SIZE) N
(      __DEP_COORDINATES) N
(      __DEP_MULTICOM       __CHARMM_ONLY !##MULTICOM) N
(      __DEP_PARSER ) N
(      __DEP_COORIO) N
(      __DEP_MPI ) N
(      __DEP_NUMBER) N
(!) N
(!    will use fixed atom arrays to print only the path atoms) N
(!) N
(      __IMPNONE) N
(      character\(len=16\) :: whoami) N
(#ifdef __CHARMM) N
(      character\(len=80\) :: title\(maxtit\)) N
(      int :: ntitle, ncv) N
(#endif) N
(#ifndef __CHARMM) N
(      int :: natom) N
(#endif) N
(      float, pointer :: r3\(:,:\)  ! coordinates) N
(      int, pointer :: stringatoms\(:\), string_inds\(:\)) N
(      int :: i, j, k) N
(      int :: ifile) N
(      int, optional :: col, ibeg, iend) N
(      int :: c, ierror, stat\(MPI_STATUS_SIZE\), ibg, ie, ind) N
(      int :: rtype=MPI_DOUBLE_PRECISION) N
(      bool :: qroot) N
(!) N
(      data whoami /' FTSM_WRITE_DCD>'/) N
(!) N
(      qroot=MPI_COMM_STRNG.ne.MPI_COMM_NULL) N
(!) N
(#ifdef __CHARMM) N
(      title\(1\) = '* FINITE TEMPERATURE STRING IMAGE FILE') N
(      ntitle=1) N
(#endif) N
(!) N
(      if \(.not. ftsm_check\(qorient\)\) return) N
(      if \(present\(col\)\) then ; c=col; else; c=center; endif) N
(      if \(c.lt.1.or.c.gt.num_sets\) then) N
(ftsm.ftn) (Page 36/90) (Apr 16, 13 16:43) title
border
grestore
(Printed by surgeon) rhead
(ftsm.ftn) (18/45) (Wednesday May 01, 2013) footer
end % of iso1dict
pagesave restore
showpage
%%Page: (37-38) 19
%%BeginPageSetup
/pagesave save def
sh 0 translate 90 rotate
%%EndPageSetup
iso1dict begin
gsave
llx lly 12 add translate
/v 0 store
/x0 x v get 3.147420 add sx cw mul add store
/y0 y v get bfs th add sub store
x0 y0 moveto
(       __WRN\( whoami, 'INVALID COLUMN. ABORT.'\)) p n
(       return) N
(      endif) N
(!) N
(      if \(present\(ibeg\)\) then ; ibg=ibeg; else; ibg=1; endif) N
(      if \(present\(iend\)\) then ; ie=iend; else; ie=nstring; endif) N
(!) N
(      if \(ibg.lt.1.or.ibg.gt.ie\) then) N
(       __WRN\( whoami, 'INVALID FRAMES REQUESTED. ABORT.'\)) N
(       return) N
(      endif) N
(!) N
(      nullify\(stringatoms, string_inds, r3\)) N
(!) N
(      if \(qroot\) then) N
(!) N
(      if \(ME_STRNG.eq.0\) then) N
(!) N
(#ifndef __CHARMM) N
( natom=__NATOM) N
(#endif) N
(!) N
(       allocate\(stringatoms\(natom\), string_inds\(natom\)\)) N
(       stringatoms=0) N
(!) N
(       stringatoms\(iatom_f\)=1) N
(       if \(qdiffrot\) stringatoms\(iatom_o\)=1) N
(       k=0) N
(       do i = 1, natom) N
(        if \(stringatoms\(i\).gt.0\) then; k=k+1; string_inds\(k\)=i; endif ! need thi) N
(s array for dcd writer below) N
(       enddo) N
(#ifdef __CHARMM) N
(       ncv=ncvel ; ncvel=0  !__CHARMM_ONLY##CVELOCI ! exclude constant velocity ) N
(atoms also) N
(#endif) N
(!      for first frame, output all coordinates: take from instantaneous set) N
(       allocate\(r3\(natom,3\)\) ; r3=0d0) N
(#ifdef __CHARMM) N
(       r3\(:,1\)=x\(1:natom\)-rcom\(1,instant\) ! bring all coordinates to zero COM fo) N
(r convenience \(assume rcom\(:,instant\) is reasonably accurate\)) N
(       r3\(:,2\)=y\(1:natom\)-rcom\(2,instant\)) N
(       r3\(:,3\)=z\(1:natom\)-rcom\(3,instant\)) N
(#elif defined \(__DMOL\)) N
(       r3\(:,1\)=r\(:,1\)-rcom\(1,instant\)) N
(       r3\(:,2\)=r\(:,2\)-rcom\(2,instant\)) N
(       r3\(:,3\)=r\(:,3\)-rcom\(3,instant\)) N
(#endif) N
(!) N
(       call ftsm_update_overlap_coor\(ione\)) N
(       do j=1,nforced;ind=iatom_f\(j\);r3\(ind,:\)=r_f\(j,:,c\);enddo) N
(       if \(qdiffrot\) then) N
(       do j=1,norient;ind=iatom_o\(j\);r3\(ind,:\)=r_o\(j,:,c\);enddo) N
(       endif) N
(! call trajectory writer) N
(#ifdef __CHARMM) N
(       call writcv\(r3\(:,1\), r3\(:,2\), r3\(:,3\),                           &) N
(     &  r3\(:,1\), .false.,                                               & !__CHA) N
(RMM_ONLY##CHEQ) N
(     &  natom,                                                          &) N
(     &  string_inds, k, ibg, ibg, 3*k, 0d0, 1, ie, title,ntitle,ifile,  &) N
(     &  .false., .false., stringatoms\(1:20\), .false., r3\(:,1\)\)       ! whew...) N
(#elif defined\(__DMOL\)) N
(       call dcd_write_frame\(ifile,r3,\(ibg.eq.1\),FREEATOMS=string_inds\(1:k\)\)) N
(#endif) N
(!from dynio.src) N
(!      SUBROUTINE WRITCV\(X,Y,Z,) N
(!     $                  CG,QCG,                             !__CHARMM_ONLY##CHE) N
(Q) N
(ftsm.ftn) (Page 37/90) (Apr 16, 13 16:43) title
border
/v 1 store
/x0 x v get 3.147420 add sx cw mul add store
/y0 y v get bfs th add sub store
x0 y0 moveto
(!     $                  NATOM,FREEAT,NFREAT,NPRIV,ISTEP,NDEGF,) p n
(!     $                  DELTA,NSAVC,NSTEP,TITLE,NTITLE,IUNCRD,QVEL,) N
(!     $                  QINCT,JCNTRL,DIM4,FDIM\)) N
(!C) N
(!C     WRITES A SET OF COORDINATES FOR A SINGLE DYNAMICS STEP. THE FORMAT) N
(!C     FOR THE TRAJECTORY FILE VARIES WITH WHETHER ANY ATOMS ARE FIXED.) N
(!C     ICNTRL\(9\) STORES THE NUMBER OF FIXED ATOMS WHICH WILL BE ZERO FOR) N
(!C     ALL PREVIOUS TRAJECTORY FILES SO COMPATIBILITY IS ASSURED.) N
(!C) N
(!C     Authors: S. Swaminathan) N
(!C              Robert Bruccoleri) N
(!) N
(!    repeat a few times to write out entire string) N
(       do i=2, nstring) N
(!) N
(        call MPI_RECV\(r_f\(:,:,dummy\),3*nforced,rtype,i-1,i-1,           &) N
(     &       MPI_COMM_STRNG,stat,ierror\)) N
(        if \(qdiffrot.and.qorient\)                                       &) N
(     &       call MPI_RECV\(r_o\(:,:,dummy\),3*norient,rtype,i-1,i-1,      &) N
(     &       MPI_COMM_STRNG,stat,ierror\)) N
(!    extract coordinates) N
(        do j=1, nforced; ind=iatom_f\(j\); r3\(ind,:\)=r_f\(j,:,dummy\); enddo) N
(        if \(qdiffrot.and.qorient\) then) N
(         do j=1, norient; ind=iatom_o\(j\); r3\(ind,:\)=r_o\(j,:,dummy\);enddo) N
(        endif) N
(!    write next frame) N
(#ifdef __CHARMM) N
(        call writcv\(r3\(:,1\), r3\(:,2\), r3\(:,3\),                          &) N
(     &   r3\(:,1\), .false.,                                              & !__CHA) N
(RMM_ONLY##CHEQ) N
(     &   natom,                                                         &) N
(     &   string_inds, k, ibg, ibg+i-1, 3*k, 0d0, 1, ie, title, 1, ifile,&) N
(     &   .false., .false., stringatoms\(1:20\), .false., r3\(:,1\)\)) N
(#elif defined\(__DMOL\)) N
(       call dcd_write_frame\(ifile,r3,.false.,FREEATOMS=string_inds\(1:k\)\)) N
(#endif) N
(       enddo) N
(!) N
(#ifdef __CHARMM) N
(       ncvel=ncv !##CVELOCI) N
(#endif) N
(      else) N
(       call MPI_SEND\(r_f\(:,:,c\),3*nforced,rtype,0,ME_STRNG,             &) N
(     &                      MPI_COMM_STRNG, ierror\)) N
(       if \(qdiffrot.and.qorient\)                                        &) N
(     &  call MPI_SEND\(r_o\(:,:,c\),3*norient,rtype,0,ME_STRNG,            &) N
(     &                      MPI_COMM_STRNG, ierror\)) N
(      endif) N
(!) N
(      endif ! qroot) N
(!) N
(      if \(associated\(stringatoms\)\) deallocate\(stringatoms\)) N
(      if \(associated\(string_inds\)\) deallocate\(string_inds\)) N
(      if \(associated\(r3\)\) deallocate\(r3\)) N
(!) N
(      end subroutine ftsm_write_dcd) N
(!ccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccc) N
(      subroutine ftsm_read_dcd\(ifile, col\)) N
(#ifdef __CHARMM) N
(      __DEP_PSF) N
(#endif) N
(      __DEP_SIZE) N
(      __DEP_COORDINATES) N
(      __DEP_MULTICOM       __CHARMM_ONLY !##MULTICOM) N
(      __DEP_PARSER ) N
(      __DEP_MPI) N
(      __DEP_COORIO) N
(!) N
(      __IMPNONE) N
(ftsm.ftn) (Page 38/90) (Apr 16, 13 16:43) title
border
grestore
(Printed by surgeon) rhead
(ftsm.ftn) (19/45) (Wednesday May 01, 2013) footer
end % of iso1dict
pagesave restore
showpage
%%Page: (39-40) 20
%%BeginPageSetup
/pagesave save def
sh 0 translate 90 rotate
%%EndPageSetup
iso1dict begin
gsave
llx lly 12 add translate
/v 0 store
/x0 x v get 3.147420 add sx cw mul add store
/y0 y v get bfs th add sub store
x0 y0 moveto
(      character\(len=15\) :: whoami) p n
(      float, pointer :: r3\(:,:\)) N
(      int, pointer :: stringatoms\(:\), string_inds\(:\)) N
(      int :: i, j, k, ind, ifile) N
(      int, optional :: col) N
(      int :: c, ierror, stat\(MPI_STATUS_SIZE\)) N
(      int :: rtype=MPI_DOUBLE_PRECISION) N
(!) N
(#ifdef __CHARMM) N
(      character\(len=80\) :: title\(maxtit\)) N
(      real*4 :: trash4\(natom\) ! scratch array for ugly routine) N
(      float :: trash8\(natom\) ! scratch array for ugly routine) N
(!     some dummy vars for coordinate read) N
(      int :: nfile, istep, istats, ndof, begin_, stop_,             &) N
(     &           skip_, nsavv_, satoms, ntitle) N
(      float :: delta) N
(      bool :: qdim4, qcg) N
(#else) N
(      int :: natom) N
(#endif) N
(!) N
(      data whoami /' FTSM_READ_DCD>'/) N
(!) N
(      if \(.not. ftsm_check\(qorient\)\) return) N
(      if \(present\(col\)\) then ; c=col; else; c=center; endif) N
(      if \(c.lt.1.or.c.gt.num_sets\) then) N
(       __WRN\( whoami, 'INVALID COLUMN. ABORT.'\)) N
(       return) N
(      endif) N
(!) N
(#ifndef __CHARMM) N
( natom=__NATOM) N
(#endif) N
(!) N
(      allocate\(r3\(natom,3\)\)) N
(      allocate\(stringatoms\(natom\), string_inds\(natom\)\)) N
(!) N
(      r3=0d0; stringatoms=0) N
(!) N
(      stringatoms\(iatom_f\)=1) N
(      if \(qdiffrot\) stringatoms\(iatom_o\)=1) N
(      k=0) N
(!) N
(      do i = 1, natom) N
(       if \(stringatoms\(i\).gt.0\) then ; k=k+1 ; string_inds\(k\)=i ; endif ! need t) N
(his array for dcd reader below) N
(      enddo) N
(!) N
(      if \(ME_STRNG.eq.0\) then) N
(!) N
(!    call trajectory reader) N
(!) N
(#ifdef __CHARMM) N
(       istats=1) N
(       qcg=.false.) N
(       qdim4=.false.) N
(       begin_=0 ! note begin <=0 forces a strange "reset" with begin=istep \(whic) N
(h is zero below\); this is to support trajectories) N
(                ! made with VMD) N
(       skip_=1) N
(       stop_=nstring) N
(       ntitle=0) N
(       istep=0) N
(!) N
(       call readcv\(r3\(:,1\), r3\(:,2\), r3\(:,3\),                              &) N
(     &  trash8, qcg,                                                    & !__CHA) N
(RMM_ONLY##CHEQ) N
(     &  trash4, natom,                                                  &) N
(     &  stringatoms, satoms, ifile, 1, ifile, nfile,                    &) N
(ftsm.ftn) (Page 39/90) (Apr 16, 13 16:43) title
border
/v 1 store
/x0 x v get 3.147420 add sx cw mul add store
/y0 y v get bfs th add sub store
x0 y0 moveto
(     &  istep, istats, ndof, delta, begin_, stop_, skip_,               &) p n
(     &  nsavv_, 'CORD', 'CORD', title, ntitle, qdim4, trash8, .false.\)) N
(#elif defined\(__DMOL\)) N
(       if \(associated\(stringatoms\)\) deallocate\(stringatoms\)) N
(       call dcd_read_frame\(ifile, r3, .true., FREEATOMS=stringatoms\)) N
(#endif) N
(!) N
(       if \( &) N
(#ifdef __CHARMM) N
(&       satoms &) N
(#else) N
(&      size\(stringatoms\) &) N
(#endif) N
(&       .eq.k\) then) N
(        if \( any\(stringatoms\(1:k\).ne.string_inds\(1:k\)\) \)                &) N
(     &   __WRN\(whoami,'INVALID STRING ATOM INDICES. BEWARE.'\)) N
(       else) N
(        __WRN\(whoami,'INCORRECT NUMBER OF STRING ATOMS. BEWARE.'\)) N
(       endif) N
(!) N
(!) N
(!      SUBROUTINE READCV\(X,Y,Z,) N
(!     $                  CG,QCG,                         !__CHARMM_ONLY##CHEQ) N
(!     $                  TEMP,NATOM,FREEAT,NFREAT,) N
(!     $                  FIRSTU,NUNIT,IUNIT,NFILE,) N
(!     $                  ISTEP,ISTATS,NDEGF,DELTA,) N
(!     $                  BEGIN,STOP,SKIP,NSAVV,HDR1,HDR2,) N
(!     $                  TITLE,NTITLE,DIM4,FDIM,Q_PLL\)) N
(! FREEAT WILL BE READ IF NFREAT IS NOT EQUAL TO NATOM.) N
(! ISTATS IS A FLAG WITH THE FOLLOWING FUNCTIONS:) N
(!CC             ON CALL) N
(!C             1 - OPEN A NEW UNIT FOR READING THE INFORMATION) N
(!C             2 - USE THE UNIT THAT IS ALREADY OPEN ON IUNIT) N
(!C             ON RETURN) N
(!C            -1 - THE REQUESTED INFORMATION HAS BEEN READ) N
(!C             1 - NOT DONE READING, BUT THIS FILE IS FINISHED) N
(!C             2 - NOT DONE READING, AND THIS FILE IS IS NOT DONE.) N
(!C     HDR1 AND HDR2 ARE OPTIONS FOR THE FILE HEADER THAT IS READ.) N
(!C     RECORDS WILL BE USED IF MOD\(ISTEP,SKIP\)=0 AND BEGIN<=ISTEP<=STOP.) N
(!C     DJS 1/25/81) N
(!C) N
(!C     Authors: S. Swaminathan) N
(!C              David Perahia) N
(!C              Dave States) N
(!C              Robert Bruccoleri) N
(!C) N
(!C    Q_PLL    mfc added bool variable to signal whether) N
(!C             the calling routine is being done in parallel or not.) N
(!C             When calling routine is not parallel, master hangs) N
(!C             trying to send data to slaves that are not receiving.) N
(!C) N
(!) N
(!) N
(       do j=1, nforced) N
(        ind=iatom_f\(j\);   r_f\(j,:,c\)=r3\(ind,:\)) N
(       enddo) N
(!) N
(       if \(qdiffrot\) then) N
(        do j=1, norient) N
(         ind=iatom_o\(j\);  r_o\(j,:,c\)=r3\(ind,:\)) N
(        enddo) N
(       endif) N
(!) N
(!    repeat a few times to read entire string) N
(       do i=2, nstring) N
(#ifdef __CHARMM) N
(        call readcv\(r3\(:,1\), r3\(:,2\), r3\(:,3\),                          &) N
(     &   trash8, qcg,                                                   & !__CHA) N
(RMM_ONLY##CHEQ) N
(ftsm.ftn) (Page 40/90) (Apr 16, 13 16:43) title
border
grestore
(Printed by surgeon) rhead
(ftsm.ftn) (20/45) (Wednesday May 01, 2013) footer
end % of iso1dict
pagesave restore
showpage
%%Page: (41-42) 21
%%BeginPageSetup
/pagesave save def
sh 0 translate 90 rotate
%%EndPageSetup
iso1dict begin
gsave
llx lly 12 add translate
/v 0 store
/x0 x v get 3.147420 add sx cw mul add store
/y0 y v get bfs th add sub store
x0 y0 moveto
(     &   trash4, natom,                                                 &) p n
(     &   stringatoms, satoms, ifile, 1, ifile, nfile,                   &) N
(     &   istep, istats, ndof, delta, begin_, stop_, skip_,              &) N
(     &   nsavv_, 'CORD', 'CORD', title, ntitle, qdim4, trash8, .false.\)) N
(#elif defined \(__DMOL\)) N
(        call dcd_read_frame\(ifile, r3, .false., FREEATOMS=stringatoms\)) N
(#endif) N
(!) N
(        call MPI_SEND\(r3,3*natom,rtype,i-1,i-1,                          &) N
(     &                      MPI_COMM_STRNG, ierror\)) N
(       enddo ! i) N
(!) N
(      else ! me_string == 0) N
(!) N
(       call MPI_RECV\(r3,3*natom,rtype,0,ME_STRNG,                        &) N
(     &                MPI_COMM_STRNG,stat,ierror\)) N
(!) N
(       do j=1, nforced) N
(         ind=iatom_f\(j\);   r_f\(j,:,c\)=r3\(ind,:\)) N
(       enddo) N
(!) N
(       if \(qdiffrot\) then) N
(        do j=1, norient) N
(          ind=iatom_o\(j\);  r_o\(j,:,c\)=r3\(ind,:\)) N
(        enddo) N
(       endif) N
(      endif) N
(!) N
(      call ftsm_save_com\(c\) ! compute and remove center of mass) N
(!) N
(      if \(associated\(stringatoms\)\) deallocate\(stringatoms\)) N
(      if \(associated\(string_inds\)\) deallocate\(string_inds\)) N
(      if \(associated\(r3\)\) deallocate\(r3\)) N
(!) N
(      end subroutine ftsm_read_dcd) N
(!ccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccc) N
(      subroutine ftsm_write_cor\(ifile, col\)) N
(#ifdef __CHARMM) N
(      __DEP_PSF ) N
(#endif) N
(      __DEP_COORDINATES) N
(      __DEP_SIZE) N
(      __DEP_PARSER) N
(      __DEP_COORIO) N
(      __DEP_NUMBER) N
(!) N
(      __IMPNONE) N
(      character\(len=16\) :: whoami) N
(#ifdef __CHARMM) N
(      character\(len=80\) :: title\(maxtit\)) N
(      int :: ntitle) N
(!     compatibility variables for coordinate reading/writing) N
(      float :: wdum\(natom+1\)) N
(      int :: icntrl\(20\)=0, modew) N
(#else) N
(      int :: natom) N
(#endif) N
(      float, pointer :: r3\(:,:\)) N
(      int, pointer :: stringatoms\(:\) ) N
(      int :: i, j, k, ind) N
(      int, optional :: col) N
(      int :: c, ifile) N
(!) N
(      data whoami /' FTSM_WRITE_COR>'/) N
(!) N
(#ifdef __CHARMM) N
(      ntitle = 1) N
(      title\(1\) = '* FINITE TEMPERATURE STRING IMAGE FILE') N
(#endif) N
(ftsm.ftn) (Page 41/90) (Apr 16, 13 16:43) title
border
/v 1 store
/x0 x v get 3.147420 add sx cw mul add store
/y0 y v get bfs th add sub store
x0 y0 moveto
(!) p n
(      if \(.not. ftsm_check\(qorient\)\) return) N
(      if \(present\(col\)\) then ; c=col; else; c=center; endif) N
(      if \(c.lt.1.or.c.gt.num_sets\) then) N
(       __WRN\( whoami, 'INVALID COLUMN. ABORT.'\)) N
(       return) N
(      endif) N
(!) N
(#ifndef __CHARMM) N
( natom=__NATOM) N
(#endif) N
(!) N
(      allocate\(r3\(natom,3\),stringatoms\(natom\)\)) N
(      r3=0d0; stringatoms=0) N
(!) N
(      stringatoms\(iatom_f\)=1) N
(      if \(qdiffrot\) stringatoms\(iatom_o\)=1) N
(!      k=sum\(stringatoms\)) N
(!) N
(      call ftsm_update_overlap_coor\(ione\)) N
(      do j=1, nforced) N
(       ind=iatom_f\(j\);   r3\(ind,:\)=r_f\(j,:,c\)) N
(      enddo) N
(!) N
(      if \(qdiffrot\) then) N
(       do j=1, norient) N
(        ind=iatom_o\(j\);   r3\(ind,:\)=r_o\(j,:,c\)) N
(       enddo) N
(      endif) N
(!) N
(#ifdef __CHARMM) N
(!    call writer) N
(!    formatted coor card files) N
(      modew=2) N
(      wdum=0d0) N
(!) N
(      call cwrite\(ifile,title,ntitle,icntrl,                            &) N
(     &              r3\(:,1\),r3\(:,2\),r3\(:,3\),wdum,                       &) N
(     &              res,atype,ibase,                                    &) N
(     &              nres,natom,stringatoms,modew,0,0,.false.\)) N
(#elif defined \(__DMOL\)) N
(      call ch_coor_write\(ifile, r3, MASK=stringatoms\)) N
(#endif) N
(!) N
(      if \(associated\(stringatoms\)\) deallocate\(stringatoms\)) N
(      if \(associated\(r3\)\) deallocate\(r3\)) N
(!) N
(      end subroutine ftsm_write_cor) N
(!ccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccc) N
(      subroutine ftsm_read_cor\(ifile, col\)) N
(!) N
(      __DEP_SIZE ) N
(      __DEP_COORDINATES) N
(      __DEP_PARSER ) N
(!) N
(#ifdef __CHARMM) N
(      __DEP_PSF ) N
(      use ctitla ) N
(#endif) N
(      __DEP_NUMBER ) N
(      __DEP_COORIO) N
(!) N
(      __IMPNONE) N
(      character\(len=15\) :: whoami) N
(      float, pointer :: r3\(:,:\)) N
(      int, pointer :: stringatoms\(:\) ) N
(      int :: i, j, k, ind) N
(      int, optional :: col) N
(      int :: c, ifile) N
(ftsm.ftn) (Page 42/90) (Apr 16, 13 16:43) title
border
grestore
(Printed by surgeon) rhead
(ftsm.ftn) (21/45) (Wednesday May 01, 2013) footer
end % of iso1dict
pagesave restore
showpage
%%Page: (43-44) 22
%%BeginPageSetup
/pagesave save def
sh 0 translate 90 rotate
%%EndPageSetup
iso1dict begin
gsave
llx lly 12 add translate
/v 0 store
/x0 x v get 3.147420 add sx cw mul add store
/y0 y v get bfs th add sub store
x0 y0 moveto
(!) p n
(#ifdef __CHARMM) N
(      character\(len=80\) :: title\(maxtit\), cdummy='') N
(!     compatibility variables for coordinate reading/writing) N
(      float :: xdum\(natom+1\), ydum\(natom+1\), zdum\(natom+1\),            &) N
(     &          wdum\(natom+1\)) N
(!) N
(      int :: icntrl\(20\), moder, ntitle=0) N
(      int :: ifree\(natom\)) N
(#else) N
(      int :: natom) N
(#endif) N
(!) N
(      data whoami /' FTSM_READ_COR>'/) N
(!) N
(      if \(.not. ftsm_check\(qorient\)\) return) N
(      if \(present\(col\)\) then ; c=col; else; c=center; endif) N
(      if \(c.lt.1.or.c.gt.num_sets\) then) N
(       __WRN\( whoami, 'INVALID COLUMN. ABORT.'\)) N
(       return) N
(      endif) N
(!) N
(#ifndef __CHARMM) N
( natom=__NATOM) N
(#endif) N
(!) N
(      allocate\(r3\(natom,3\),stringatoms\(natom\)\)) N
(      r3=0d0; stringatoms=0) N
(!) N
(      stringatoms\(iatom_f\)=1) N
(      if \(qdiffrot\) stringatoms\(iatom_o\)=1) N
(!      k=sum\(stringatoms\)) N
(!    call reader) N
(!    formatted coor card files) N
(#ifdef __CHARMM) N
(      moder=1) N
(      xdum=__NAN; ydum=__NAN; zdum=__NAN; wdum=__NAN) N
(!) N
(      call cread\(ifile, title, ntitle, icntrl,                          &) N
(     &        r3\(:,1\), r3\(:,2\), r3\(:,3\),                                & ! pass) N
( by reference ?) N
(     &        wdum, natom, moder, stringatoms,                          &) N
(     &        0, res, nres, atype, ibase, 1, ifree,                     &) N
(     &        segid, resid, nictot, nseg, .false., .false.,             &) N
(     &        cdummy, 80, 0, .false.\)) N
(!) N
(!) N
(! from coor.io) N
(!      SUBROUTINE CREAD\(IUNIT,TITLE,NTITL,ICNTRL,X,Y,Z,WMAIN,NATOM,) N
(!     &  NINPUT,ISLCT,IOFFS,RES,NRES,TYPE,IBASE,) N
(!     &  IFILE,FREEAT,SEGID,RESID,NICTOT,NSEG,LRSID,LFREE,LYN,MXLEN,) N
(!     &  MODEL,OFFICIAL\)) N
(!) N
(#elif defined\(__DMOL\)) N
(      call ch_coor_read\(ifile, r3, MASK=stringatoms\)) N
(#endif) N
(!) N
(      do j=1, nforced) N
(         ind=iatom_f\(j\);   r_f\(j,:,c\)=r3\(ind,:\)) N
(      enddo) N
(!) N
(      if \(qdiffrot\) then) N
(        do j=1, norient) N
(          ind=iatom_o\(j\);  r_o\(j,:,c\)=r3\(ind,:\)) N
(        enddo) N
(      endif) N
(!) N
(      call ftsm_save_com\(c\) ! compute remove center of mass) N
(!) N
(ftsm.ftn) (Page 43/90) (Apr 16, 13 16:43) title
border
/v 1 store
/x0 x v get 3.147420 add sx cw mul add store
/y0 y v get bfs th add sub store
x0 y0 moveto
(      if \(associated\(stringatoms\)\) deallocate\(stringatoms\)) p n
(      if \(associated\(r3\)\) deallocate\(r3\)) N
(!) N
(      end subroutine ftsm_read_cor) N
(!ccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccc) N
(      subroutine ftsm_stat_init\(comlyn, comlen\)) N
(!) N
(      use ftsm_var) N
(      use ftsm_rex, only: ftsm_rex_read_map) N
(      __DEP_OUTPUT) N
(      __DEP_SIZE) N
(      __DEP_PARSER ) N
(      __DEP_MULTICOM       __CHARMM_ONLY !##MULTICOM) N
(      __DEP_MPI ) N
(!cccccccccccccccccccccccccccccccccccccccccccccccccc) N
(      __IMPNONE) N
(!) N
( __DECLARE_MSGBUF) N
(!) N
(      CHARACTER\(LEN=*\) :: COMLYN) N
(      int :: COMLEN) N
(!) N
(      character\(len=80\) :: rex_fname_old) N
(      int :: rex_flen_old, oldiol, error) N
(!) N
(      character\(len=8\) :: keyword) N
(      character\(len=16\), parameter :: whoami=' FTSM_STAT_INIT>') N
(!) N
(      bool :: qroot, qprint) N
(!ccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccc) N
(      qroot=MPI_COMM_STRNG.ne.MPI_COMM_NULL) N
(      qprint=qroot.and.ME_STRNG.eq.0) N
(#ifdef __CHARMM) N
(      if \(qprint\) then; oldiol=iolev; iolev=0; endif) N
(#endif) N
(!     begin) N
(!     reset iteration counter) N
(!     did the user specify it?) N
(      stat_iteration_counter=__GET_RM_I\(comlyn, comlen, 'COUN', -1\)) N
(      stat_iteration_counter=max\(stat_iteration_counter,0\)) N
(      if \(stat_iteration_counter.gt.0\) then) N
(       if \(qprint\) then ; write\(_MSGBUF,639\) whoami, stat_iteration_counter ; __) N
(PRINT\(_MSGBUF\) ; endif) N
( 639  format\(A,' SETTING ITERATION COUNTER TO ',I7\)) N
(      endif) N
(!) N
(      forces_fname='') N
(      output_forces=.false.) N
(!) N
(      rmsd0_fname='') N
(      output_rmsd0=.false.) N
(!) N
(      c_fname='') N
(      output_curvature=.false.) N
(!) N
(      s_fname='') N
(      output_arclength=.false.) N
(! distance to string \(dpar & dperp, or drms, depending on proj_on\)) N
(      dist_fname='') N
(      output_dist=.false.) N
(!) N
(      fe_fname='') N
(      output_fe=.false.) N
(      fe_curvature=.false.) N
(      fe_curv=0d0) N
(!) N
(      centers_fname='') N
(      output_centers=.false.) N
(!) N
(ftsm.ftn) (Page 44/90) (Apr 16, 13 16:43) title
border
grestore
(Printed by surgeon) rhead
(ftsm.ftn) (22/45) (Wednesday May 01, 2013) footer
end % of iso1dict
pagesave restore
showpage
%%Page: (45-46) 23
%%BeginPageSetup
/pagesave save def
sh 0 translate 90 rotate
%%EndPageSetup
iso1dict begin
gsave
llx lly 12 add translate
/v 0 store
/x0 x v get 3.147420 add sx cw mul add store
/y0 y v get bfs th add sub store
x0 y0 moveto
(      rex_fname_old='') p n
(      rex_fname='') N
(      output_rex_log=.false.) N
(      output_rex_map=.false.) N
(!) N
(!ccccccccccccccccc first process the RMSD-related commands) N
(!!!!!!!!!!!!!! RMSD from static structure in comp \(zts/fts\)) N
(      if \(__INDX_RM\(comlyn,comlen,'RMSD'\).gt.0\) then ! request for RMSD) N
(       output_rmsd0=.true.) N
(       __GET_RM_A\(COMLYN,COMLEN,'RNAM',4,rmsd0_fname,80,rmsd0_flen\)) N
(       if \(rmsd0_flen.eq.0\) then) N
(         __WRN\(whoami,'NO RMSD FILE NAME SPECIFIED. WILL WRITE TO STDOUT.'\)) N
(         rmsd0_funit=__OSTREAM) N
(       else) N
(         if \(__INDX_RM\(comlyn,comlen,'RAPP'\).gt.0\) then ! APPEND?) N
(           rform='APPEND') N
(         else) N
(           rform='WRITE') N
(         endif) N
(       endif) N
(!cccccccccccc print summary) N
(       if \(qprint\) then) N
(         if \(rmsd0_flen.gt.0\) then) N
(          write\(_MSGBUF,660 \) whoami,rmsd0_fname\(1:rmsd0_flen\) ; __PRINT\(_MSGBUF) N
(\)) N
(         else) N
(          write\(_MSGBUF,661 \) whoami ; __PRINT\(_MSGBUF\)) N
(         endif) N
(       endif) N
( 660  format\(A,' WILL WRITE STRING RMSD TO FILE ',A\)) N
( 661  format\(A,' WILL WRITE STRING RMSD TO STDOUT.'\)) N
(!) N
(      endif !! RMSD) N
(!======================= ARCLENGTH) N
(      if \(__INDX_RM\(comlyn,comlen,'ARCL'\).gt.0\) then) N
(        output_arclength=.true.) N
(        __GET_RM_A\(COMLYN,COMLEN,'ANAM',4,s_fname,80,s_flen\)) N
(        if \(s_flen.eq.0\) then) N
(         __WRN\(whoami,'STRING LENGTH FILE NAME NOT SPECIFIED. WILL WRITE TO STDO) N
(UT.'\)) N
(         s_funit=__OSTREAM) N
(        else) N
(         if \(__INDX_RM\(comlyn,comlen,'AAPP'\).gt.0\) then ! APPEND?) N
(           sform='APPEND') N
(         else) N
(           sform='WRITE') N
(         endif) N
(        endif) N
(!ccccccccccc print summary) N
(        if \(qprint\) then) N
(         if \(s_flen.gt.0\) then) N
(          write\(_MSGBUF,652\) whoami,s_fname\(1:s_flen\) ; __PRINT\(_MSGBUF\)) N
(         else) N
(          write\(_MSGBUF,653\) whoami ; __PRINT\(_MSGBUF\)) N
(         endif) N
(        endif) N
( 652  format\(A,' WILL WRITE STRING LENGTH TO FILE ',A\)) N
( 653  format\(A,' WILL WRITE STRING LENGTH TO STDOUT.'\)) N
(!) N
(      endif ! ARCLENGTH) N
(!======================================= CURVATURE) N
(      if \(__INDX_RM\(comlyn,comlen,'CURV'\).gt.0\) then) N
(        output_curvature=.true.) N
(        __GET_RM_A\(COMLYN,COMLEN,'CVNM',4,c_fname,80,c_flen\)) N
(        if \(c_flen.eq.0\) then) N
(         __WRN\(whoami,'CURVATURE FILE NAME NOT SPECIFIED. WILL WRITE TO STDOUT.') N
(\)) N
(         c_funit=__OSTREAM) N
(        else) N
(ftsm.ftn) (Page 45/90) (Apr 16, 13 16:43) title
border
/v 1 store
/x0 x v get 3.147420 add sx cw mul add store
/y0 y v get bfs th add sub store
x0 y0 moveto
(         if \(__INDX_RM\(comlyn,comlen,'CAPP'\).gt.0\) then ! APPEND?) p n
(           cform='APPEND') N
(         else) N
(           cform='WRITE') N
(         endif) N
(        endif) N
(!ccccccccccc print summary) N
(        if \(qprint\) then) N
(         if \(c_flen.gt.0\) then) N
(          write\(_MSGBUF,6521\) whoami,c_fname\(1:c_flen\) ; __PRINT\(_MSGBUF\)) N
(         else) N
(          write\(_MSGBUF,6531\) whoami ; __PRINT\(_MSGBUF\)) N
(         endif) N
(        endif) N
( 6521 format\(A,' WILL WRITE CURVATURE TO FILE ',A\)) N
( 6531 format\(A,' WILL WRITE CURVATURE TO STDOUT.'\)) N
(!) N
(      endif ! CURVATURE) N
(!======================================= DISTANCE TO STRING IMAGES) N
(      if \(__INDX_RM\(comlyn,comlen,'DIST'\).gt.0\) then) N
(        output_dist=.true.) N
(        __GET_RM_A\(COMLYN,COMLEN,'DNAM',4,dist_fname,80,dist_flen\)) N
(        if \(dist_flen.eq.0\) then) N
(         __WRN\(whoami,'DISTANCE TO STRING FILE NAME NOT SPECIFIED. WILL WRITE TO) N
( STDOUT.'\)) N
(         dist_funit=__OSTREAM) N
(        else) N
(         if \(__INDX_RM\(comlyn,comlen,'DAPP'\).gt.0\) then) N
(           distform='APPEND') N
(         else) N
(           distform='WRITE') N
(         endif) N
(        endif) N
(!ccccccccccc print summary) N
(        if \(qprint\) then) N
(         if \(dist_flen.gt.0\) then) N
(          write\(_MSGBUF,6522\) whoami, dist_fname\(1:dist_flen\) ; __PRINT\(_MSGBUF\)) N
(         else) N
(          write\(_MSGBUF,6523\) whoami ; __PRINT\(_MSGBUF\)) N
(         endif) N
(        endif) N
( 6522 format\(A,' WILL WRITE DISTANCE TO STRING TO FILE ',A\)) N
( 6523 format\(A,' WILL WRITE DISTANCE TO STRING TO STDOUT.'\)) N
(!) N
(      endif ! DISTANCE TO STRING) N
(!!!!!!!!!!!!!! FREE ENERGY) N
(      if \(__INDX_RM\(comlyn,comlen,'FREE'\).gt.0\) then) N
(        output_fe=.true.) N
(        __GET_RM_A\(COMLYN,COMLEN,'FENM',4,fe_fname,80,fe_flen\)) N
(        if \(fe_flen.eq.0\) then) N
(         __WRN\(whoami,'NO F.E. FILE NAME SPECIFIED. WILL WRITE TO STDOUT.'\)) N
(         fe_funit=__OSTREAM) N
(        else) N
(         if \(__INDX_RM\(comlyn,comlen,'FAPP'\).gt.0\) then ! APPEND?) N
(           feform='APPEND') N
(         else) N
(           feform='WRITE') N
(         endif) N
(        endif) N
(!) N
(        fe_curvature=\(__INDX_RM\(comlyn,comlen,'NOCV'\).le.0\)) N
(!ccccccccccc print summary cccccccccccccccccccccccccccccccccccccc) N
(        if \(qprint\) then) N
(         if \(fe_flen.gt.0\) then) N
(          write\(_MSGBUF,6520\) whoami,fe_fname\(1:fe_flen\) ; __PRINT\(_MSGBUF\)) N
(         else) N
(          write\(_MSGBUF,6530\) whoami ; __PRINT\(_MSGBUF\)) N
(         endif) N
(         if \(.not.fe_curvature\) then) N
(ftsm.ftn) (Page 46/90) (Apr 16, 13 16:43) title
border
grestore
(Printed by surgeon) rhead
(ftsm.ftn) (23/45) (Wednesday May 01, 2013) footer
end % of iso1dict
pagesave restore
showpage
%%Page: (47-48) 24
%%BeginPageSetup
/pagesave save def
sh 0 translate 90 rotate
%%EndPageSetup
iso1dict begin
gsave
llx lly 12 add translate
/v 0 store
/x0 x v get 3.147420 add sx cw mul add store
/y0 y v get bfs th add sub store
x0 y0 moveto
(          write\(_MSGBUF,6540\) whoami ; __PRINT\(_MSGBUF\)) p n
(         endif) N
(        endif) N
( 6520 format\(A,' WILL WRITE FREE ENERGY TO FILE ',A\)) N
( 6530 format\(A,' WILL WRITE FREE ENERGY TO STDOUT.'\)) N
( 6540 format\(A,' FREE ENERGY PROFILE WILL EXCLUDE CONTRIBUTIONS FROM STRING CURV) N
(ATURE.'\)) N
(!) N
(      endif ! F.E.) N
(!cccccccccc process PATH CENTERS output options ccccccccccccccccccccccc) N
(      if \(__INDX_RM\(comlyn,comlen,'CENT'\).gt.0\) then) N
(!       get file name) N
(        __GET_RM_A\(COMLYN,COMLEN,'CNAM',4,centers_fname,80,centers_flen\)) N
(!cccccccccccc print summary) N
(        if \(centers_flen.gt.0\) then) N
(         output_centers=.true.) N
(         if \(qprint\) then) N
(          write\(_MSGBUF,6620 \) whoami,centers_fname\(1:centers_flen\) ;__PRINT\(_MS) N
(GBUF\)) N
(         endif) N
(         if \(__INDX_RM\(comlyn,comlen,'CEAP'\).gt.0\) then ! APPEND?) N
(           cenform='APPEND' ! note: if appending, should not duplicate DCD heade) N
(r !) N
(         else) N
(           cenform='WRITE') N
(         endif) N
(        else) N
(          __WRN\(whoami,'NO FILE NAME GIVEN. WILL NOT WRITE PATH CENTERS.'\)) N
(        endif) N
( 6620 format\(A,' WILL WRITE PATH CENTERS TO FILE ',A,'.'\)) N
(!) N
(      endif ! centers output) N
(!ccccccccccccc replica exchange map cccccccccccccc) N
(      rex_flen=0) N
(      if \(__INDX_RM\(comlyn,comlen,'REXM'\).gt.0\) then) N
(!       get file name) N
(        __GET_RM_A\(COMLYN,COMLEN,'RXNM',4,rex_fname,80,rex_flen\)) N
(!       check if user specified an custom map \(e.g. from an older run\)) N
(        __GET_RM_A\(COMLYN,COMLEN,'RXOL',4,rex_fname_old,80,rex_flen_old\)) N
(!) N
(        if \(rex_flen.gt.0\) then) N
(         output_rex_map=.true.) N
(         if \(qprint\) then) N
(          write\(_MSGBUF,6721\) whoami,rex_fname\(1:rex_flen\) ; __PRINT\(_MSGBUF\)) N
(         endif) N
(         if \(rex_flen_old.gt.0\) then) N
(          if \(qprint\) then) N
(             write\(_MSGBUF,6722\) whoami,rex_fname_old\(1:rex_flen_old\) ; __PRINT\() N
(_MSGBUF\)) N
(             rex_funit=-1) N
(             __OPEN_FILE\(rex_funit,rex_fname_old\(1:rex_flen_old\),'FORMATTED','RE) N
(AD'\)) N
(          endif) N
(!) N
(          call ftsm_rex_read_map\(rex_funit\)) N
(!) N
(          if \(qprint\) __CLOSE_FILE\(rex_funit, 'KEEP', error\)) N
(         endif) N
(!) N
(        else) N
(          __WRN\(whoami,'NO FILE NAME GIVEN. WILL NOT WRITE REPLICA EXCHANGE MAP.) N
('\)) N
(        endif) N
( 6721 format\(A,' WILL WRITE REPLICA EXCHANGE MAP TO FILE ',A,'.MAP'\)) N
( 6722 format\(A,' WILL RESTART FROM REPLICA EXCHANGE MAP IN FILE ',A\)) N
(!) N
(      endif ! replica exchange map) N
(!cccccccccccccc replica exchange log cccccccccccccccccccccccccccccccccccccccc) N
(      if \(__INDX_RM\(comlyn,comlen,'REXL'\).gt.0\) then) N
(ftsm.ftn) (Page 47/90) (Apr 16, 13 16:43) title
border
/v 1 store
/x0 x v get 3.147420 add sx cw mul add store
/y0 y v get bfs th add sub store
x0 y0 moveto
(!       get file name) p n
(        if \(rex_flen.eq.0\) then ! in the case that name was read above) N
(         __GET_RM_A\(COMLYN,COMLEN,'RXNM',4,rex_fname,80,rex_flen\)) N
(        endif) N
(!       check for timestep offset) N
(        rextime_offset=__GET_RM_I\(comlyn, comlen, 'ROFF', 0\);) N
(        if \(rextime_offset.gt.0\) then) N
(         if \(qprint\) then ; write\(_MSGBUF,6724\) whoami, whoami,rextime_offset ; ) N
(__PRINT\(_MSGBUF\) ; endif) N
( 6724 format\(A,' WILL OFFSET STEP COUNTER IN REPLICA EXCHANGE LOG BY '  &) N
(     &       /,A,' ',I10\)) N
(        endif) N
(!) N
(        if \(rex_flen.gt.0\) then) N
(         output_rex_log=.true.) N
(         if \(qprint\) then) N
(          write\(_MSGBUF,6723\) whoami,whoami,rex_fname\(1:rex_flen\) ; __PRINT\(_MSG) N
(BUF\)) N
(         endif) N
(         if \(__INDX_RM\(comlyn,comlen,'RXAP'\).gt.0\) then ! APPEND?) N
(           rxlform='APPEND') N
(         else) N
(           rxlform='WRITE') N
(         endif ! rxap) N
(        else) N
(          __WRN\(whoami,'NO FILE NAME GIVEN. WILL NOT WRITE REPLICA EXCHANGE LOG.) N
('\)) N
(        endif ! rex_flen.gt.0) N
( 6723 format\(A,' WILL WRITE REPLICA EXCHANGE LOG TO FILE ',/,           &) N
(     & A,' ',A,'.DAT'\)) N
(!) N
(      endif ! replica exchange log) N
(!cccccccccccc process Voronoi histogram output options ccccccccccc) N
(      voronoi_flen=0) N
(      if \(__INDX_RM\(comlyn,comlen,'VORO'\).gt.0\) then) N
(!       get file name) N
(        __GET_RM_A\(COMLYN,COMLEN,'VNAM',4,voronoi_fname,80,voronoi_flen\)) N
(!ccccccccccc print summary) N
(        if \(voronoi_flen.gt.0\) then) N
(         output_voronoi_hist=.true.) N
(         if \(qprint\) then) N
(          write\(_MSGBUF,6622\) whoami,voronoi_fname\(1:voronoi_flen\)) N
(          __PRINT\(_MSGBUF\)) N
(         endif) N
(        else) N
(         __WRN\(whoami,'NO FILE NAME GIVEN. WILL NOT WRITE VORONOI HISTOGRAMS.'\)) N
(        endif) N
( 6622 format\(A,' WILL WRITE VORONOI HISTOGRAMS TO FILE ',A,'.DAT'\)) N
(!) N
(      endif ! voronoi histograms) N
(!cccccccccccccc voronoi map cccccccccccccccccccccccccccccccccccccccc) N
(      if \(__INDX_RM\(comlyn,comlen,'VMAP'\).gt.0\) then) N
(!       get file name) N
(        if \(voronoi_flen.eq.0\) then) N
(         __GET_RM_A\(COMLYN,COMLEN,'VNAM',4,voronoi_fname,80,voronoi_flen\)) N
(        endif) N
(!) N
(        if \(voronoi_flen.gt.0\) then) N
(         output_voronoi_map=.true.) N
(         if \(qprint\) then) N
(          write\(_MSGBUF,6627\) whoami,voronoi_fname\(1:voronoi_flen\)) N
(          __PRINT\(_MSGBUF\)) N
(         endif) N
(        else) N
(          __WRN\(whoami,'NO FILE NAME GIVEN. WILL NOT WRITE VORONOI MAP.'\)) N
(        endif) N
( 6627 format\(A,' WILL WRITE VORONOI MAP TO FILE ',A,'.MAP'\)) N
(!) N
(      endif ! voronoi map) N
(ftsm.ftn) (Page 48/90) (Apr 16, 13 16:43) title
border
grestore
(Printed by surgeon) rhead
(ftsm.ftn) (24/45) (Wednesday May 01, 2013) footer
end % of iso1dict
pagesave restore
showpage
%%Page: (49-50) 25
%%BeginPageSetup
/pagesave save def
sh 0 translate 90 rotate
%%EndPageSetup
iso1dict begin
gsave
llx lly 12 add translate
/v 0 store
/x0 x v get 3.147420 add sx cw mul add store
/y0 y v get bfs th add sub store
x0 y0 moveto
(!cccccccccccccc voronoi log cccccccccccccccccccccccccccccccccccccccc) p n
(      if \(__INDX_RM\(comlyn,comlen,'VLOG'\).gt.0\) then) N
(!       get file name) N
(        if \(voronoi_flen.eq.0\) then) N
(         __GET_RM_A\(COMLYN,COMLEN,'VNAM',4,voronoi_fname,80,voronoi_flen\)) N
(        endif) N
(!       check for timestep offset) N
(        vtime_offset=__GET_RM_I\(comlyn, comlen, 'VOFF', 0\);) N
(        if \(vtime_offset.gt.0\) then) N
(         if \(qprint\) then ; write\(_MSGBUF,6624\) whoami, vtime_offset ; __PRINT\(_) N
(MSGBUF\) ; endif) N
( 6624 format\(A,' WILL OFFSET STEP COUNTER IN VORONOI LOG BY ',I10\)) N
(        endif) N
(!) N
(        if \(voronoi_flen.gt.0\) then) N
(         output_voronoi_log=.true.) N
(         if \(qprint\) then) N
(          write\(_MSGBUF,6623\) whoami,voronoi_fname\(1:voronoi_flen\)) N
(          __PRINT\(_MSGBUF\)) N
(         endif) N
(         if \(__INDX_RM\(comlyn,comlen,'VLAP'\).gt.0\) then ! APPEND?) N
(           vlform='APPEND') N
(         else) N
(           vlform='WRITE') N
(         endif ! vlap) N
(!) N
(        else) N
(          __WRN\(whoami,'NO FILE NAME GIVEN. WILL NOT WRITE VORONOI LOG.'\)) N
(        endif ! voronoi_flen.gt.0) N
( 6623 format\(A,' WILL WRITE VORONOI LOG TO BINARY FILE ',A,'.DAT'\)) N
(!) N
(      endif ! complete voronoi log) N
(!cccccccccccccccccc process forces output options cccccccccccccccccc) N
(      if \(__INDX_RM\(comlyn,comlen,'FORC'\).gt.0\) then) N
(!       get nergy file name) N
(        __GET_RM_A\(COMLYN,COMLEN,'FCNM',4,forces_fname,80,forces_flen\)) N
(!ccccccccccc print summary) N
(        if \(forces_flen.gt.0\) then) N
(         output_forces=.true.) N
(         if \(qprint\) then) N
(          write\(_MSGBUF,6625\) whoami,forces_fname\(1:forces_flen\) ; __PRINT\(_MSGB) N
(UF\)) N
(         endif) N
(         if \(__INDX_RM\(comlyn,comlen,'FCAP'\).gt.0\) then ! APPEND?) N
(           fform='APPEND') N
(         else) N
(           fform='WRITE') N
(         endif) N
(        else) N
(         __WRN\(whoami,'NO FILE NAME GIVEN. WILL NOT WRITE AVERAGE FORCE.'\)) N
(        endif) N
( 6625 format\(A,' WILL WRITE AVERAGE FORCE TO FILE ',A,'.'\)) N
(      endif ! forces) N
(!) N
(#ifdef __CHARMM) N
(      if \(qprint\) iolev=oldiol) N
(#endif) N
(!) N
(!      if we got this far, we are probably OK) N
(      stat_initialized=.true.) N
(!) N
(      end subroutine ftsm_stat_init) N
(!ccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccc) N
(      subroutine ftsm_stat\(\)) N
(      use ftsm_rex, only: ftsm_rex_print_map,  ftsm_rex_print_log) N
(      use ftsm_voronoi) N
(      __DEP_OUTPUT) N
(      __DEP_MULTICOM       __CHARMM_ONLY !##MULTICOM) N
(      __DEP_PARSER) N
(ftsm.ftn) (Page 49/90) (Apr 16, 13 16:43) title
border
/v 1 store
/x0 x v get 3.147420 add sx cw mul add store
/y0 y v get bfs th add sub store
x0 y0 moveto
(      __DEP_MPI) p n
(      __DEP_NUMBER) N
(!) N
(      __IMPNONE) N
(      int :: i, fmt_len, ifile) N
(!) N
(#ifdef __CHARMM) N
(      int :: oldiol) N
(#endif) N
(!) N
(#include "../../mpitype.def") N
(!) N
(      character\(len=80\) :: fmt_real, fmt_int, fmt) N
(      float :: projdist\(3\) ! dpar, dperp, drms) N
(      float :: u \(3,3\)= RESHAPE\( \(/1.,0.,0.,0.,1.,0.,0.,0.,1./\), \(/3,3/\) \) ! rot) N
(ation matrix) N
(      float :: rmsd0, rmsd0_all\(nstring\), fc_all\(3,nstring\)) N
(!) N
(      int :: ierror) N
(      character\(len=11\) :: whoami) N
(      data whoami/' FTSM_STAT>'/) N
(!) N
(      bool :: qroot, qprint, qgrp) N
(!) N
(      qroot=MPI_COMM_STRNG.ne.MPI_COMM_NULL) N
(      qprint=qroot.and.ME_STRNG.eq.0) N
(      qgrp=MPI_COMM_LOCAL.ne.MPI_COMM_NULL.and.SIZE_LOCAL.gt.1) N
(!) N
(#ifdef __CHARMM) N
(!     ad hoc fix for REX :) N
(!     when string ranks are permuted, it might happen that a new root is silent) N
(      if \(qprint\) then ; oldiol=iolev; iolev=0; endif) N
(#endif) N
(!ccccccccccccccccccccccc begin ccccccccccccccccccccccccccccccccccccccccccccccccc) N
(cccccc) N
(! check if the user has made an initialization call) N
(      if \(.not.ftsm_initialized\) call ftsm_init\(\)) N
(      if \(.not.stat_initialized\) then) N
(       __WRN\(whoami,'NO OUTPUT OPTIONS SELECTED. NOTHING DONE'\)) N
(       return) N
(      endif) N
(!) N
(      stat_iteration_counter=stat_iteration_counter+1) N
(      if \(qroot\) then) N
(!     define number format strings for output) N
(       write\(fmt_int,'\(I5\)'\) stat_iteration_counter) N
(       write\(fmt_real,*\) nstring) N
(       fmt_len=len\(fmt_real\)) N
(       __TRIMA\(fmt_real,fmt_len\)) N
(      endif) N
(!ccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccc) N
(cccccccc) N
(      if \(output_rmsd0\) then) N
(!    compute rmsd) N
(       if \(qorient\) then) N
(        if \(qdiffrot\) call ftsm_update_overlap_coor\(ione\) ! just in case, make s) N
(ure orientation coordiantes are up-to-date) N
(        call RMSBestFit\( r_o\(:,:,ref\), r_o\(:,:,center\),                 &) N
(     &                                orientWeights, u \)  ! superpose ref onto c) N
(enter) N
(       endif) N
(       rmsd0=rmsd\( r_f\(:,:,ref\), matmul \( r_f\(:,:,center\), u \),         & ! rota) N
(te center using transpose of u) N
(     &  forcedWeights \) ! note: I am assuming that COMs have been removed, which) N
( should be true) N
(!) N
(          if \(qroot\) call mpi_gather\(rmsd0,1,MPI_DOUBLE_PRECISION       & ! head) N
(s communicate) N
(     &                ,rmsd0_all,1,MPI_DOUBLE_PRECISION,0,              &) N
(ftsm.ftn) (Page 50/90) (Apr 16, 13 16:43) title
border
grestore
(Printed by surgeon) rhead
(ftsm.ftn) (25/45) (Wednesday May 01, 2013) footer
end % of iso1dict
pagesave restore
showpage
%%Page: (51-52) 26
%%BeginPageSetup
/pagesave save def
sh 0 translate 90 rotate
%%EndPageSetup
iso1dict begin
gsave
llx lly 12 add translate
/v 0 store
/x0 x v get 3.147420 add sx cw mul add store
/y0 y v get bfs th add sub store
x0 y0 moveto
(     &                 MPI_COMM_STRNG, ierror\)) p n
(          if \(qprint\) then ! root writes) N
(           if \(rmsd0_funit.eq.__OSTREAM\) then) N
(            fmt='\("RMSD0> '//fmt_int\(1:5\)//' ",'                        &) N
(     &                //fmt_real\(1:fmt_len\)//real_format//'\)') N
(           else) N
(            rmsd0_funit=-1) N
(            __OPEN_FILE\(rmsd0_funit, rmsd0_fname,'FORMATTED',rform\)) N
(            fmt='\("'//fmt_int\(1:5\)//' ",'                               &) N
(     &                //fmt_real\(1:fmt_len\)//real_format//'\)') N
(           endif) N
(           write\(rmsd0_funit,fmt\) \(rmsd0_all\(i\),i=1,nstring\)) N
(!) N
(           if \(rmsd0_funit.ne.__OSTREAM\) then) N
(            __CLOSE_FILE\(rmsd0_funit, 'KEEP', ierror\)) N
(           endif) N
(          endif ! qprint) N
(          rform='APPEND') N
(      endif) N
(!cccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccc) N
(      if \(output_arclength\) then) N
(       if \(qprint\) then) N
(        if \(repa_initialized\) then ! proceed only if arclength defined) N
(!) N
(         if \(s_funit.eq.__OSTREAM\) then) N
(          fmt='\("ARCL> '//fmt_int\(1:5\)//' ",'                           &) N
(     &                //fmt_real\(1:fmt_len\)//real_format//'\)') N
(         else) N
(          s_funit=-1) N
(          __OPEN_FILE\(s_funit, s_fname,'FORMATTED',sform\)) N
(          fmt='\("'//fmt_int\(1:5\)//' ",'//fmt_real\(1:fmt_len\)            &) N
(     &                                 //real_format//'\)') N
(         endif) N
(!) N
(         write\(s_funit, fmt\) ds * sqrt\(3d0\) ! correction factor for consistency ) N
(with atomic RMSD) N
(!     flush unit: close and reopen later) N
(         if \(s_funit.ne.__OSTREAM\) then) N
(          __CLOSE_FILE\(s_funit, 'KEEP', ierror\)) N
(         endif) N
(        else ! repa) N
(          __WRN\(whoami,'NO REPARAMETRIZATION OPTIONS SELECTED. SKIPPING ARCLENGT) N
(H.'\)) N
(        endif) N
(       endif ! qprint) N
(       sform='APPEND') N
(      endif ! output_arclength) N
(!cccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccc) N
(      if \(output_curvature\) then) N
(       if \(qprint\) then) N
(        if \(repa_initialized\) then ! curvature computed by repa routines) N
(!) N
(         if \(c_funit.eq.__OSTREAM\) then) N
(          fmt='\("CURV> '//fmt_int\(1:5\)//' ",'                           &) N
(     &                //fmt_real\(1:fmt_len\)//real_format//'\)') N
(         else) N
(          c_funit=-1) N
(          __OPEN_FILE\(c_funit, c_fname,'FORMATTED',cform\)) N
(          fmt='\("'//fmt_int\(1:5\)//' ",'//fmt_real\(1:fmt_len\)            &) N
(     &                                 //real_format//'\)') N
(         endif) N
(!) N
(         write\(s_funit, fmt\) curv / sqrt\(3d0\) ! correction factor for consistenc) N
(y with atomic RMSD) N
(!     flush unit: close and reopen later) N
(         if \(c_funit.ne.__OSTREAM\) then) N
(          __CLOSE_FILE\(c_funit, 'KEEP', ierror\)) N
(         endif) N
(        else) N
(ftsm.ftn) (Page 51/90) (Apr 16, 13 16:43) title
border
/v 1 store
/x0 x v get 3.147420 add sx cw mul add store
/y0 y v get bfs th add sub store
x0 y0 moveto
(          __WRN\(whoami,'NO REPARAMETRIZATION OPTIONS SELECTED. SKIPPING CURVATUR) p n
(E.'\)) N
(        endif) N
(       endif) N
(       cform='APPEND') N
(      endif ! output_curvature) N
(!cccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccc) N
(      if \(output_dist\) then ! projection distance variables) N
(!    gather on root processor) N
(       if \(qroot\) then) N
(        projdist\(1\)=dpar; projdist\(2\)=dperp; projdist\(3\)=drms) N
(!    reuse fc_all) N
(        call mpi_gather\(projdist,3,mpifloat,                & ! heads communicat) N
(e) N
(     &                 fc_all,3,mpifloat,0,                 &) N
(     &                 MPI_COMM_STRNG, ierror\)) N
(!) N
(        fmt='\('//fmt_real\(1:fmt_len\)//real_format//'\)') N
(        if \(qprint\) then) N
(         if \(dist_funit.eq.__OSTREAM\) then) N
(          write\(dist_funit,'\("PROJECTION DISTANCE> ",I8\)'\) stat_iteration_counte) N
(r) N
(         else) N
(          dist_funit=-1) N
(          __OPEN_FILE\(dist_funit, dist_fname,'FORMATTED',distform\)) N
(          write\(dist_funit,'\("% ",I8\)'\) stat_iteration_counter ! % is a MATLAB c) N
(omment) N
(         endif) N
(!) N
(!    print) N
(         if \(proj_on\) then) N
(          write\(dist_funit, fmt\) fc_all\(1,:\) ! parallel distance component) N
(          write\(dist_funit, fmt\) fc_all\(2,:\) ! perpendicular distance component) N
(         else) N
(          write\(dist_funit, fmt\) fc_all\(3,:\) ! total distance) N
(         endif) N
(!) N
(!     flush unit: close and reopen later) N
(         if \(dist_funit.ne.__OSTREAM\)                                      &) N
(     &     __CLOSE_FILE\(dist_funit, 'KEEP', ierror\)) N
(        endif ! qprint) N
(        distform='APPEND') N
(       endif ! qroot) N
(!) N
(      endif ! output_dist) N
(!cccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccc) N
(      if \(output_fe\) then) N
(!    compute free energy) N
(       call ftsm_compute_fe_fd\(\)) N
(       if \(qprint\) then) N
(         if \(fe_funit.eq.__OSTREAM\) then) N
(          fmt='\("FE> '//fmt_int\(1:5\)//' ",'                             &) N
(     &                //fmt_real\(1:fmt_len\)//real_format//'\)') N
(         else) N
(          fe_funit=-1) N
(          __OPEN_FILE\(fe_funit, fe_fname,'FORMATTED',feform\)) N
(          fmt='\("'//fmt_int\(1:5\)//' ",'//fmt_real\(1:fmt_len\)            &) N
(     &                                 //real_format//'\)') N
(         endif) N
(!) N
(!    print) N
(         write\(fe_funit, fmt\) fe) N
(!     flush unit: close and reopen later) N
(         if \(fe_funit.ne.__OSTREAM\) then) N
(          __CLOSE_FILE\(fe_funit, 'KEEP', ierror\)) N
(         endif) N
(       endif ! qprint) N
(       feform='APPEND') N
(      endif) N
(ftsm.ftn) (Page 52/90) (Apr 16, 13 16:43) title
border
grestore
(Printed by surgeon) rhead
(ftsm.ftn) (26/45) (Wednesday May 01, 2013) footer
end % of iso1dict
pagesave restore
showpage
%%Page: (53-54) 27
%%BeginPageSetup
/pagesave save def
sh 0 translate 90 rotate
%%EndPageSetup
iso1dict begin
gsave
llx lly 12 add translate
/v 0 store
/x0 x v get 3.147420 add sx cw mul add store
/y0 y v get bfs th add sub store
x0 y0 moveto
(!ccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccc) p n
(      if \(output_rex_map\) then ! output replica exchange map) N
(       if \(rex_flen.eq.0\) then) N
(        __WRN\(whoami,'NO FILE NAME SPECIFIED. WILL NOT WRITE REPLICA EXCHANGE MA) N
(P.'\)) N
(       else) N
(        if \(qprint\) then) N
(         rex_funit=-1) N
(         rex_fname\(rex_flen+1:rex_flen+4\)='.map' ! append to name) N
(         __OPEN_FILE\(rex_funit,rex_fname\(1:rex_flen+4\), 'FORMATTED','WRITE'\)) N
(         rex_fname\(rex_flen+1:\)='' ! erase extension) N
(         call ftsm_rex_print_map\(rex_funit\) ! all processes enter) N
(!) N
(         __CLOSE_FILE\(rex_funit, 'KEEP', ierror\)) N
(        endif ! qprint) N
(       endif) N
(      endif) N
(!ccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccc) N
(      if \(output_rex_log\) then) N
(       if \(rex_flen.eq.0\) then) N
(         __WRN\(whoami,'NO FILE NAME SPECIFIED. WILL NOT WRITE REPLICA EXCHANGE L) N
(OG.'\)) N
(       else) N
(        if \(qprint\) then) N
(         rex_funit=-1) N
(         rex_fname\(rex_flen+1:rex_flen+4\)='.dat' ! append to name) N
(         __OPEN_FILE\(rex_funit,rex_fname\(1:rex_flen+4\),'FORMATTED', rxlform\)) N
(         rex_fname\(rex_flen+1:\)='' ! erase extension) N
(        endif) N
(        rxlform='APPEND') N
(!) N
(        call ftsm_rex_print_log\(rex_funit\)) N
(!    flush unit:) N
(        if \(qprint\) __CLOSE_FILE\(rex_funit,'KEEP',ierror\)) N
(       endif) N
(      endif) N
(!cccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccc) N
(      if \(output_centers\) then) N
(        if \(qprint\) then) N
(         centers_funit=-1) N
(         __OPEN_FILE\(centers_funit, centers_fname,'UNFORMATTED', cenform\)) N
(        endif) N
(!    write current centers as a trajectory frame \(adopted from write_dcd\)) N
(!--------------------------------------------------------------------) N
(! header will be written only if IBEG=1, so be careful, or will have a corrupt f) N
(ile) N
(! however, if header missing, can cat file to another trajectory file w header \() N
(e.g. "cat path1.dcd path2.dcd > path1-2.dcd" \)) N
(! VO 10.2012 : "cheat" by looking at whether the append option is set) N
(        if \(cenform.eq.'APPEND'\) then ; i=\(stat_iteration_counter-1\) * nstring +) N
( 1 ; else ; i=1 ; endif) N
(        call ftsm_write_dcd\(IFILE=centers_funit,                        &) N
(     &       IBEG=i,                                                    &) N
(!     &       IBEG=\(stat_iteration_counter-1\) * nstring + 1,             &) N
(!     &       IEND=2**31-1\) ! largest 4-byte int     ) N
(     &       IEND= ione*\(-1 + 2**30 + 2**30\)\) ! possible i4 => i8 cast) N
(!    NOTE: should write the correct number of records to header at the end of ca) N
(lculation) N
(!--------------------------------------------------------------------) N
(!    flush unit:) N
(        if \(qprint\) __CLOSE_FILE\(centers_funit, 'KEEP', ierror\)) N
(        cenform='APPEND') N
(      endif) N
(!cccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccc) N
(      if \(output_forces\) then ! NOTE: these are the forces acting on the project) N
(ion variables) N
(!    gather on root processor) N
(       if \(qroot\) then) N
(        call mpi_gather\(avforce,3,MPI_DOUBLE_PRECISION,                 & ! head) N
(ftsm.ftn) (Page 53/90) (Apr 16, 13 16:43) title
border
/v 1 store
/x0 x v get 3.147420 add sx cw mul add store
/y0 y v get bfs th add sub store
x0 y0 moveto
(s communicate) p n
(     &                 fc_all,3,MPI_DOUBLE_PRECISION,0,                 &) N
(     &                 MPI_COMM_STRNG, ierror\)) N
(!) N
(        fmt='\('//fmt_real\(1:fmt_len\)//real_format//'\)') N
(        if \(qprint\) then) N
(         if \(forces_funit.eq.__OSTREAM\) then) N
(          write\(forces_funit,'\("FORCES> ",I8\)'\) stat_iteration_counter ! % is a ) N
(MATLAB comment) N
(         else) N
(          forces_funit=-1) N
(          __OPEN_FILE\(forces_funit, forces_fname,'FORMATTED',fform\)) N
(          write\(forces_funit,'\("% ",I8\)'\) stat_iteration_counter ! % is a MATLAB) N
( comment) N
(         endif) N
(!) N
(!    print) N
(         write\(forces_funit, fmt\) fc_all\(1,:\) ! parallel forces) N
(         if \(fe_curvature\) write\(forces_funit, fmt\) fc_all\(2,:\) ! curvature forc) N
(es) N
(         write\(forces_funit, fmt\) fc_all\(3,:\) ! perpendicular forces) N
(!) N
(!     flush unit: close and reopen later) N
(         if \(forces_funit.ne.__OSTREAM\)                                      &) N
(     &     __CLOSE_FILE\(forces_funit, 'KEEP', ierror\)) N
(        endif ! qprint) N
(        fform='APPEND') N
(       endif ! qroot) N
(!) N
(      endif ! output_force) N
(!ccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccc) N
(      if \(output_voronoi_hist\) then ! output voronoi data) N
(        if \(voronoi_flen.eq.0\) then) N
(         __WRN\(whoami,'NO FILE NAME SPECIFIED. WILL NOT WRITE VORONOI DATA.'\)) N
(        else) N
(         if \(qprint\) then) N
(          ifile=-1) N
(          voronoi_fname\(voronoi_flen+1:voronoi_flen+4\)='.dat') N
(          __OPEN_FILE\(ifile,voronoi_fname\(1:voronoi_flen+4\),'FORMATTED','WRITE'\)) N
(          voronoi_fname\(voronoi_flen+1:\)='') N
(         endif) N
(         call ftsm_voronoi_print_data\(ifile\) ! all root processes enter) N
(         if \(qprint\) then ; __CLOSE_FILE\(ifile,'KEEP',ierror\) ; endif) N
(        endif) N
(      endif) N
(!cccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccc) N
(      if \(output_voronoi_log\) then) N
(       if \(voronoi_flen.eq.0\) then) N
(         __WRN\(whoami,'NO FILE NAME SPECIFIED. WILL NOT WRITE VORONOI LOG.'\)) N
(       else) N
(         if \(qprint\) then) N
(           vlog_funit=-1) N
(           voronoi_fname\(voronoi_flen+1:voronoi_flen+4\)='.log') N
(           __OPEN_FILE\(vlog_funit,voronoi_fname\(1:voronoi_flen+4\),'UNFORMATTED',) N
( vlform\)) N
(           voronoi_fname\(voronoi_flen+1:\)='') N
(         endif) N
(         vlform='APPEND') N
(         if \(qroot\) call ftsm_voronoi_print_log\(vlog_funit\)) N
(!    flush unit:) N
(         if \(qprint\) then ; __CLOSE_FILE\(vlog_funit,'KEEP',ierror\) ; endif) N
(       endif) N
(      endif) N
(!ccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccc) N
(      if \(output_voronoi_map\) then ! output voronoi map) N
(        if \(voronoi_flen.eq.0\) then) N
(         __WRN\(whoami,'NO FILE NAME SPECIFIED. WILL NOT WRITE VORONOI MAP.'\)) N
(        else) N
(!    put 'whereami' into the map) N
(ftsm.ftn) (Page 54/90) (Apr 16, 13 16:43) title
border
grestore
(Printed by surgeon) rhead
(ftsm.ftn) (27/45) (Wednesday May 01, 2013) footer
end % of iso1dict
pagesave restore
showpage
%%Page: (55-56) 28
%%BeginPageSetup
/pagesave save def
sh 0 translate 90 rotate
%%EndPageSetup
iso1dict begin
gsave
llx lly 12 add translate
/v 0 store
/x0 x v get 3.147420 add sx cw mul add store
/y0 y v get bfs th add sub store
x0 y0 moveto
(          if \(qroot.and.SIZE_STRNG.gt.1\) then) p n
(! GATHER +BCAST) N
(           call MPI_GATHER\(ftsm_voronoi_whereami, 1, mpiint, ftsm_voronoi_map, 1) N
(, mpiint, 0, MPI_COMM_STRNG, ierror\)) N
(           __BROADCAST_STRING\(ftsm_voronoi_map,nstring,mpiint\)) N
(          else) N
(           ftsm_voronoi_map\(mestring+1\)=ftsm_voronoi_whereami) N
(          endif) N
(          if \(qgrp\) then) N
(#ifdef __CHARMM) N
(           __BROADCAST_LOCAL_4B\(ftsm_voronoi_map,nstring\)  !__CHARMM_ONLY##.not.) N
(INTEGER8) N
(           __BROADCAST_LOCAL_8B\(ftsm_voronoi_map,nstring\)  !__CHARMM_ONLY##INTEG) N
(ER8) N
(#elif defined \(__DMOL\)) N
(           __BROADCAST_LOCAL\(ftsm_voronoi_map,nstring,mpiint\)) N
(#endif) N
(          endif ! qgrp) N
(!) N
(         if \(qroot\) then) N
(          ifile=-1) N
(          voronoi_fname\(voronoi_flen+1:voronoi_flen+4\)='.map') N
(          if \(qprint\) then ) N
(           __OPEN_FILE\(ifile,voronoi_fname\(1:voronoi_flen+4\), 'FORMATTED','WRITE) N
('\)) N
(           voronoi_fname\(voronoi_flen+1:\)='') N
(          endif) N
(          call ftsm_voronoi_print_map\(ifile\)) N
(          if \(qprint\) then ; __CLOSE_FILE\(ifile,'KEEP',ierror\) ; endif) N
(         endif ! qroot) N
(        endif) N
(      endif) N
(!) N
(!) N
(#ifdef __CHARMM) N
(!     ad hoc fix for REX) N
(      if \(qprint\) iolev=oldiol) N
(#endif) N
(!ccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccc) N
(ccc) N
(!    reset force averages -- relevant for f.e.) N
(      num_force_samples=0) N
(!) N
(      end subroutine ftsm_stat) N
(!ccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccc) N
(ccc) N
(      function ftsm_check\(qorie\) result \(ok\)) N
(      __DEP_PARSER) N
(      __IMPNONE) N
(      character\(len=12\) :: whoami) N
(      int :: error) N
(      bool :: ok, qorie) N
(!) N
( __DECLARE_MSGBUF) N
(!) N
(      data whoami /' FTSM_CHECK>'/) N
(!) N
(      error=0) N
(!) N
(      if \(.not.ftsm_initialized\) then) N
(       __WRN\(whoami,'FTSM NOT INITIALIZED. ABORT.'\)) N
(       error=1) N
(!) N
(      elseif \( qorie.and.                                               &) N
(     & \( norient.eq.0 .or. .not. associated\(r_o\)                        &) N
(     &      .or. .not. associated\(iatom_o\)\)\) then) N
(       __WRN\(whoami,'NO ORIENTATION ATOMS FOUND. ABORT.'\)) N
(       error=2) N
(      elseif \(nforced.eq.0 .or. .not. associated\(r_f\)                   &) N
(ftsm.ftn) (Page 55/90) (Apr 16, 13 16:43) title
border
/v 1 store
/x0 x v get 3.147420 add sx cw mul add store
/y0 y v get bfs th add sub store
x0 y0 moveto
(     &      .or. .not. associated\(iatom_f\)\) then) p n
(       __WRN\(whoami,'NO FORCING ATOMS FOUND. ABORT.'\)) N
(       error=3) N
(      endif) N
(!) N
(      ok=error.eq.0) N
(!) N
(      end function ftsm_check) N
(!ccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccc) N
(cccc) N
(! VO 1/2013 modifying function call to include string minimization option) N
(      subroutine ftsm_main\(x,y,z,xcomp,ycomp,zcomp,fx,fy,fz,iteration           ) N
(& ! include comparison set for voronoi calculations) N
(#ifdef __CHARMM) N
(     &                    , wmain, nbond_data, image_data     & ! to be passed o) N
(n to ftsm_mini) N
(#endif) N
(     &                    \)) N
(!) N
(      __DEP_PARSER ) N
(      __DEP_MULTICOM       __CHARMM_ONLY !##MULTICOM) N
(      __DEP_MPI ) N
(      __DEP_OUTPUT) N
(      __DEP_NUMBER) N
(      __CHARMM_ONLY use chm_types, only : nonbondDataStructure, imageDataStructu) N
(re) N
(!) N
(      __IMPNONE) N
(!) N
(      __DECLARE_MSGBUF) N
(!) N
(      float, dimension\(:\) :: x, y, z, xcomp, ycomp, zcomp, fx, fy, fz) N
(      int :: iteration ! MD iteration) N
(!) N
(#ifdef __CHARMM) N
(! CHARMM - dependent energy evaluation routines/vars) N
(      float :: wmain\(:\)) N
(      type\(nonbondDataStructure\) :: nbond_data) N
(      type\(imageDataStructure\)   :: image_data) N
(#endif) N
(!     locals) N
(      float :: s=zero) N
(      character\(len=11\) :: whoami) N
(      bool :: qgrp) N
(      int :: i, bug, qfac) N
(!) N
(      data whoami /' FTSM_MAIN>'/) N
(!cccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccc) N
(      if \(ftsm_ini_iteration.lt.0\) ftsm_ini_iteration=iteration) N
(!) N
(      qgrp=\(MPI_COMM_LOCAL.ne.MPI_COMM_NULL\)                            &) N
(     & .and.\(SIZE_LOCAL.gt.1\)) N
(!==========================================================================) N
(!     evolution of dperp, if requested) N
(      if \(dperp_adjust_iter.gt.0\) then) N
(       if \(dperp0f.ne.__NAN\) then) N
(        s=one*\(iteration-ftsm_ini_iteration\)/dperp_adjust_iter ; s=min\(max\(s,zer) N
(o\),one\); ! limit s to range [0,1]) N
(        dperp0 = s * dperp0f + \(one-s\) * dperp0i) N
(       endif) N
(      endif) N
(! aa) N
(!       write\(me_global+600,*\) dperp0, dperp0i, dperp0f, dperp_adjust_iter) N
(!) N
(      if \(restrained_on\) then ! impose restraints) N
(        if \(restrained_eq_steps.gt.0\) then) N
(         s=one*\(iteration-restrained_eq0\)/restrained_eq_steps ; s=min\(max\(s,zero) N
(\),one\); ! limit s to range [0,1], even though calc works fine with s>1) N
(        else) N
(ftsm.ftn) (Page 56/90) (Apr 16, 13 16:43) title
border
grestore
(Printed by surgeon) rhead
(ftsm.ftn) (28/45) (Wednesday May 01, 2013) footer
end % of iso1dict
pagesave restore
showpage
%%Page: (57-58) 29
%%BeginPageSetup
/pagesave save def
sh 0 translate 90 rotate
%%EndPageSetup
iso1dict begin
gsave
llx lly 12 add translate
/v 0 store
/x0 x v get 3.147420 add sx cw mul add store
/y0 y v get bfs th add sub store
x0 y0 moveto
(         s=one) p n
(        endif ! restrained equilibration is on) N
(!aa) N
(! write\(600+ME_GLOBAL,*\) iteration, restrained_eq0, restrained_eq_steps, s ; ! c) N
(lose\(600+ME_GLOBAL\)) N
(        call ftsm_calc\(x,y,z,.true.,s\)             ! compute gradients) N
(        call ftsm_addforce\(fx,fy,fz,s.ge.one\)      ! add restraint forces to glo) N
(bal force arrays) N
(!) N
(      endif ! restrained_on) N
(!cccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccc) N
(!     the following only gets executed if iteration > olditeration;) N
(!     this is because CHARMM executes frequent 'restarts' at the least frequency) N
(!     that is common to all output counters; a restart will require two calls to) N
( smcv_master;) N
(!     to avoid duplicating statistics + evolution etc \(since the step # is the s) N
(ame!\) I keep track) N
(!     of the iteration counter, and proceed only if the iteration counter has in) N
(creased.) N
(      if \(iteration.gt.olditeration\) then) N
(       if \(evolve_ftsm_on.and.evolve_freq.gt.0\) then) N
(!) N
(        if \( mod\(iteration,evolve_freq\).eq.0 .and.                      &) N
(     &       \(iteration-restrained_eq0.gt.evolve_nskip\)\)                &) N
(     &       call ftsm_evolve\(x,y,z\)) N
(       endif) N
(!cccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccc) N
(       if \(update_on.and.update_freq.gt.0\) then) N
(        if \(mod\(iteration,update_freq\).eq.0\) then) N
(         if \(.not.string_noprint\) then ) N
(          write\(_MSGBUF,'\(2A,I10\)'\) whoami,' UPDATING STRING AT STEP ',iteration) N
( ; __PRINTL\(_MSGBUF,3\)) N
(         endif) N
(!) N
(         if \(proj_on\) then) N
(!    save old reference coordinates) N
(          r_f\(:,:,left_old:right_old\)=r_f\(:,:,left:right\)) N
(          r_f\(:,:,center\)=r_f\(:,:,center_new\)) N
(          if \(qdiffrot\) then) N
(           r_o\(:,:,left_old:right_old\)=r_o\(:,:,left:right\)) N
(           r_o\(:,:,center\)=r_o\(:,:,center_new\)) N
(!    make sure orientation coordinates are current) N
(           call ftsm_update_overlap_coor\(ione\) ! r_f --> r_o) N
(          endif) N
(         else  ! not proj_on \(voronoi tessellation should also be covered in thi) N
(s case\)) N
(!    save old reference coordinates and switch to new reference coordinates) N
(          if \(.not.string_noprint\) then ) N
(           write\(_MSGBUF,'\(2A\)'\) whoami,' UPDATING REFERENCE IMAGES.' ) N
(           __PRINTL\(_MSGBUF,3\)) N
(          endif) N
(          r_f\(:,:,center_old\)=r_f\(:,:,center\)) N
(          r_f\(:,:,center\)=r_f\(:,:,center_new\)) N
(          if \(qdiffrot\) then) N
(           r_o\(:,:,center_old\)=r_o\(:,:,center\)) N
(           r_o\(:,:,center\)=r_o\(:,:,center_new\)) N
(!    make sure orientation coordinates are current) N
(           call ftsm_update_overlap_coor\(ione\) ! r_f --> r_o) N
(          endif) N
(         endif ! proj_on) N
(!) N
(! VO 1.2013 : see if image minimization is requested) N
(         if \(ftsm_mini_on\) then) N
(            if \(.not.string_noprint\) then ) N
(             write\(_MSGBUF,'\(2A\)'\) whoami,' MINIMIZING IMAGE ENERGY.' ; __PRINTL) N
(\(_MSGBUF,3\)) N
(            endif) N
(            call ftsm_mini\(x, y, z                           &) N
(#ifdef __CHARMM) N
(ftsm.ftn) (Page 57/90) (Apr 16, 13 16:43) title
border
/v 1 store
/x0 x v get 3.147420 add sx cw mul add store
/y0 y v get bfs th add sub store
x0 y0 moveto
(     &                    ,wmain, nbond_data, image_data     &) p n
(     &                    ,fx, fy, fz                        & ! to make sure fo) N
(rces are not overwritten ) N
(#endif) N
(     &                    \)) N
(         endif ! ftsm_mini_on) N
(!    see if reparametrization requested) N
(         if \(repa_on\) then) N
(          if \(.not.string_noprint\) then ) N
(             write\(_MSGBUF,'\(2A\)'\) whoami,' REPARAMETRIZING IMAGES.' ) N
(             __PRINTL\(_MSGBUF,3\)) N
(          endif) N
(          call ftsm_repa\(.not.proj_on\) ! reparametrize string, proj_on: do not b) N
(roadcast to slaves b/c ftsm_swap_bc ; removes COM) N
(         else) N
(!    recompute and remove centers of mass \(which will change due to repa\)) N
(           call ftsm_save_com\(\)) N
(         endif ! repa_on) N
(!    update reference coordinates) N
(         if \(proj_on\) then) N
(          if \(.not.string_noprint\) then ) N
(           write\(_MSGBUF,'\(2A\)'\) whoami,' UPDATING NEIGHBOR IMAGES.' ; __PRINTL\() N
(_MSGBUF,3\)) N
(          endif) N
(          call ftsm_swap_bc\(.true.\) ! VO changed from false to true 1/2013 \(why ) N
(was it false? problem only in parallel\)) N
(         endif ! proj_on) N
(!------------------------------------------------------------------------) N
(!    Voronoi tessellation:) N
(!    smart-update voronoi data: if update too aggressive and some replicas end u) N
(p in a wrong v. cell, string coords will be rolled back; ) N
(         if \(voronoi_hist_on\) call ftsm_voronoi_smart_update\(x,y,z,xcomp,ycomp,z) N
(comp\) ) N
(!) N
(!    reset arrays for updating reference structure) N
(         r_f\(:,:,center_new\)=r_f\(:,:,center\)) N
(         if \(qdiffrot\) r_o\(:,:,center_new\)=r_o\(:,:,center\)) N
(!) N
(         restrained_eq0=iteration) N
(!) N
(        endif ! update_on) N
(       endif ! update_on) N
(!) N
(       if \(repl_x_on.and.repl_x_freq.gt.0\) then) N
(        if \(mod\(iteration, repl_x_freq\).eq.0\) then) N
(         if \(.not.string_noprint\) then ) N
(          write\(_MSGBUF,'\(2A\)'\) whoami,' ATTEMPTING EXCHANGE OF NEIGHBORING REPL) N
(ICAS.' ; __PRINTL\(_MSGBUF,3\)) N
(         endif) N
(         call ftsm_repl_exchange\(x, y, z, iteration\)) N
(        endif) N
(       endif) N
(!) N
(       if \(stat_on.and.stat_freq.gt.0\) then) N
(         if \(mod\(iteration,stat_freq\).eq.0\) then) N
(           write\(_MSGBUF,'\(2A\)'\) whoami,' CALLING STRING STATISTICS.' ; __PRINTL) N
(\(_MSGBUF,3\)) N
(           call ftsm_stat\(\) ! output statistics) N
(         endif) N
(       endif ! stat_on) N
(      endif ! iteration > olditeration) N
(!     update internal iteration counter) N
(      olditeration=iteration) N
(!) N
(      end subroutine ftsm_main) N
(!ccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccc) N
(      subroutine ftsm_calc\(x,y,z,deriv,t\)) N
(!) N
(      __DEP_NUMBER ) N
(ftsm.ftn) (Page 58/90) (Apr 16, 13 16:43) title
border
grestore
(Printed by surgeon) rhead
(ftsm.ftn) (29/45) (Wednesday May 01, 2013) footer
end % of iso1dict
pagesave restore
showpage
%%Page: (59-60) 30
%%BeginPageSetup
/pagesave save def
sh 0 translate 90 rotate
%%EndPageSetup
iso1dict begin
gsave
llx lly 12 add translate
/v 0 store
/x0 x v get 3.147420 add sx cw mul add store
/y0 y v get bfs th add sub store
x0 y0 moveto
(      __DEP_MULTICOM       __CHARMM_ONLY !##MULTICOM) p n
(      __DEP_MPI ) N
(!) N
(      __IMPNONE) N
(!) N
(      float :: x\(:\), y\(:\), z\(:\)) N
(      bool :: deriv, qgrp, qcombine) N
(      float, optional :: t) N
(      float :: s, oms ! this value indicates how much of the old reference set t) N
(o take) N
(!) N
(      int :: ind, i, j, k, obeg, oend, p, q, ierror) N
(!) N
(      float :: u \(3,3\), u1\(3,3\), u2\(3,3\), u3\(3,3\)) N
(      float, pointer :: r_com\(:\)) N
(      float :: rho, rho1, rho2, r1\(3\), r2\(3\), r3\(3\), d, d1, d2, d3,    &) N
(     &                                                d4, d5, d6, w) N
(      float :: omdpar) N
(      float :: a11, a12, a13, a21, a22, a23, a31, a32, a33) N
(      float :: b11, b12, b13, b21, b22, b23, b31, b32, b33) N
(      float, dimension\(:,:,:,:\), pointer :: ugrad, ugrad1, ugrad2) N
(      float, pointer, dimension\(:,:\) :: roi,rol,ror,roc,               &) N
(     &    rol_old,roc_old,ror_old,rol_cur,roc_cur,ror_cur) N
(      float, pointer, dimension\(:,:\) :: rfi,rfl,rfr,rfc,rfl_rot,rfr_rot&) N
(     &   ,rfc_rot,rfl_old,rfc_old,rfr_old,rfl_cur,rfc_cur,rfr_cur) N
(      float, pointer, dimension\(:,:\) :: fopar, foprp, ffpar, ffprp) N
(      float, pointer, dimension\(:,:\) :: rfpar, rfprp) N
(      float, pointer :: M\(:,:\)) N
(!) N
(      int4mpi, allocatable :: orient_count\(:\), orient_displ\(:\) ! if declared as ) N
(int*8 parallelization will break) N
(!) N
(      float :: tol) N
(!) N
(      float, pointer :: ow\(:\), fw\(:\)) N
(!) N
(      interface) N
(       subroutine hypercube_allgatherv\(message,count,displ,type,        &) N
(     &                                comm, ierror, rank, size\)) N
(      __CHARMM_ONLY __DEP_KINDS) N
(       float :: message\(*\)) N
(       int :: ierror) N
(       int4mpi :: comm, rank, size, type, count\(size\), displ\(size\)) N
(       end subroutine hypercube_allgatherv) N
(      end interface) N
(!) N
(      tol=__ERRTOL) N
(!) N
(      if \(present\(t\)\) then ; s=min\(max\(t,zero\),one\); else ; s=one ; endif ! limi) N
(t the range of s for clarity; the code works for s>1 b/c of qcombine below) N
(!) N
(      qcombine=s.lt.one) N
(!) N
(      qgrp=\( SIZE_LOCAL.gt.1.and.MPI_COMM_LOCAL.ne.MPI_COMM_NULL        &) N
(     &       .and.calc_bestfit_grad_para\)) N
(! shorthand) N
(      ow=>orientWeights) N
(      r_com=>rcom\(:,instant\)) N
(      roi=>r_o\(:,:,instant\);) N
(      rol=>r_o\(:,:,left\); ror=>r_o\(:,:,right\); roc=>r_o\(:,:,center\);) N
(      fopar=>r_o\(:,:,fpar\);  foprp=>r_o\(:,:,fperp\) ! parallel forces) N
(!-------------------------------------------------------------------------------) N
(-------) N
(      fw=>forcedWeights) N
(      rfi=>r_f\(:,:,instant\);) N
(      rfl=>r_f\(:,:,left\); rfr=>r_f\(:,:,right\); rfc=>r_f\(:,:,center\);) N
(      rfl_rot=>r_f\(:,:,left_rot\);  rfr_rot=>r_f\(:,:,right_rot\); rfc_rot=>r_f\(:,:) N
(,center_rot\);) N
(      ffpar=>r_f\(:,:,fpar\);  ffprp=>r_f\(:,:,fperp\) ! forces) N
(ftsm.ftn) (Page 59/90) (Apr 16, 13 16:43) title
border
/v 1 store
/x0 x v get 3.147420 add sx cw mul add store
/y0 y v get bfs th add sub store
x0 y0 moveto
(      rfpar=>r_f\(:,:,vpar\);  rfprp=>r_f\(:,:,vperp\) ! displacement vectors) p n
(!) N
(!      load coordinates) N
(      do k=1,nforced) N
(       ind=iatom_f\(k\)) N
(       rfi\(k,1\)=x\(ind\)) N
(       rfi\(k,2\)=y\(ind\)) N
(       rfi\(k,3\)=z\(ind\)) N
(      enddo) N
(!) N
(      if \(qorient\) then) N
(       if \(qdiffrot\) then) N
(        do k=1,norient ! when qorient false, norient zero) N
(         ind=iatom_o\(k\)) N
(         roi\(k,1\)=x\(ind\)) N
(         roi\(k,2\)=y\(ind\)) N
(         roi\(k,3\)=z\(ind\)) N
(        enddo) N
(       endif ! qdiffrot \(otherwise rfi and roi point to the same thing\)) N
(!) N
(!       translate forced atoms to centroid) N
(       r_com\(:\)=0d0;) N
(       do j=1,3 ; do k=1, norient;) N
(          r_com\(j\) = r_com\(j\)+ow\(k\)*roi\(k,j\)) N
(       enddo ;    enddo) N
(!) N
(       rfi\(:,1\)=rfi\(:,1\)-r_com\(1\)) N
(       rfi\(:,2\)=rfi\(:,2\)-r_com\(2\)) N
(       rfi\(:,3\)=rfi\(:,3\)-r_com\(3\)) N
(!) N
(       if \(qdiffrot\) then ! also use orientation atoms \(otherwise, they are the ) N
(same -- see above!\)) N
(         roi\(:,1\)=roi\(:,1\)-r_com\(1\)) N
(         roi\(:,2\)=roi\(:,2\)-r_com\(2\)) N
(         roi\(:,3\)=roi\(:,3\)-r_com\(3\)) N
(       endif ! qdiffrot) N
(!) N
(      else) N
(       u = RESHAPE\( \(/one,zero,zero,zero,one,zero,zero,zero,one/\), \(/3,3/\) \) ! r) N
(otation matrix) N
(       u1= u) N
(       u2= u) N
(       u3= u) N
(      endif ! qorient) N
(!) N
(      if \(qcombine\) then ! use a combination of old and new reference structures) N
( for mild restart) N
(       oms=one-s) N
(!) N
(       rfl_old=>r_f\(:,:,left_old\); rfr_old=>r_f\(:,:,right_old\);) N
(       rfc_old=>r_f\(:,:,center_old\);) N
(       rfl_cur=>r_f\(:,:,left_cur\); rfr_cur=>r_f\(:,:,right_cur\);) N
(       rfc_cur=>r_f\(:,:,center_cur\);) N
(!) N
(       rol_old=>r_o\(:,:,left_old\); ror_old=>r_o\(:,:,right_old\);) N
(       roc_old=>r_o\(:,:,center_old\);) N
(       rol_cur=>r_o\(:,:,left_cur\); ror_cur=>r_o\(:,:,right_cur\);) N
(       roc_cur=>r_o\(:,:,center_cur\);) N
(!) N
(       if \(proj_on\) then) N
(        if \(qorient\) then) N
(         call RMSBestFit\(rol,roi,ow,u\)) N
(         call RMSBestFit\(rol_old,roi,ow,u1\)) N
(         call RMSBestFit\(ror,roi,ow,u2\)) N
(         call RMSBestFit\(ror_old,roi,ow,u3\)) N
(!    combine rotated structures) N
(!    left) N
(!) N
(         u=u*s; u1=u1*oms;) N
(ftsm.ftn) (Page 60/90) (Apr 16, 13 16:43) title
border
grestore
(Printed by surgeon) rhead
(ftsm.ftn) (30/45) (Wednesday May 01, 2013) footer
end % of iso1dict
pagesave restore
showpage
%%Page: (61-62) 31
%%BeginPageSetup
/pagesave save def
sh 0 translate 90 rotate
%%EndPageSetup
iso1dict begin
gsave
llx lly 12 add translate
/v 0 store
/x0 x v get 3.147420 add sx cw mul add store
/y0 y v get bfs th add sub store
x0 y0 moveto
(         u2=u2*s; u3=u3*oms;) p n
(         rfl_cur=0d0; rfr_cur=0d0;) N
(         do k=1,3; do j=1,3) N
(           rfl_cur\(:,j\)=rfl_cur\(:,j\) + rfl\(:,k\)     * u\(j,k\) +          &) N
(     &                                 rfl_old\(:,k\) * u1\(j,k\)) N
(           rfr_cur\(:,j\)=rfr_cur\(:,j\) + rfr\(:,k\)     * u2\(j,k\) +         &) N
(     &                                 rfr_old\(:,k\) * u3\(j,k\)) N
(         enddo;    enddo) N
(!) N
(         if \(qdiffrot\) then) N
(          rol_cur=0d0; ror_cur=0d0) N
(          do k=1,3; do j=1,3) N
(           rol_cur\(:,j\)=rol_cur\(:,j\) + rol\(:,k\)     * u\(j,k\) +          &) N
(     &                                 rol_old\(:,k\) * u1\(j,k\)) N
(           ror_cur\(:,j\)=ror_cur\(:,j\) + ror\(:,k\)     * u2\(j,k\) +         &) N
(     &                                 ror_old\(:,k\) * u3\(j,k\)) N
(          enddo;    enddo) N
(         endif) N
(!) N
(        else ! not qorient) N
(!) N
(         do j=1,3) N
(           rfl_cur\(:,j\)=s*rfl\(:,j\)+oms*rfl_old\(:,j\)) N
(           rfr_cur\(:,j\)=s*rfr\(:,j\)+oms*rfr_old\(:,j\)) N
(         enddo;) N
(!) N
(        endif ! qorient) N
(!    point to combined reference structures) N
(        rfl=>rfl_cur) N
(        rfr=>rfr_cur) N
(        rol=>rol_cur) N
(        ror=>ror_cur) N
(!) N
(       endif ! proj) N
(!) N
(       if \(.not.proj_on .or. fe_curvature\) then) N
(        rfc_cur=0d0;) N
(        if \(qorient\) then) N
(         call RMSBestFit\(roc,roi,ow,u\)) N
(         call RMSBestFit\(roc_old,roi,ow,u1\)) N
(!    combine rotated structures) N
(!    left) N
(!) N
(         u=u*s;  u1=u1*oms;) N
(         do k=1,3; do j=1,3) N
(           rfc_cur\(:,j\)=rfc_cur\(:,j\) + rfc\(:,k\)     * u\(j,k\) +          &) N
(     &                                 rfc_old\(:,k\) * u1\(j,k\)) N
(         enddo;    enddo) N
(!) N
(         if \(qdiffrot\) then) N
(          roc_cur=0d0;) N
(          do k=1,3; do j=1,3) N
(           roc_cur\(:,j\)=roc_cur\(:,j\) + roc\(:,k\)     * u\(j,k\) +          &) N
(     &                                 roc_old\(:,k\) * u1\(j,k\)) N
(          enddo;    enddo) N
(         endif) N
(!) N
(        else ! not qorient) N
(!) N
(         do j=1,3) N
(           rfc_cur\(:,j\)=rfc_cur\(:,j\) + s*rfc\(:,j\)+oms*rfc_old\(:,j\)) N
(         enddo;) N
(!) N
(        endif ! qorient) N
(!    point to combined reference structures) N
(        rfc=>rfc_cur) N
(        roc=>roc_cur) N
(!) N
(       endif ! \(not proj\) / curvature) N
(ftsm.ftn) (Page 61/90) (Apr 16, 13 16:43) title
border
/v 1 store
/x0 x v get 3.147420 add sx cw mul add store
/y0 y v get bfs th add sub store
x0 y0 moveto
(      endif ! qcombine) p n
(!) N
(!!                write\(600+me_global,*\) matmul\(ow,rol\) ! correct \(0\)) N
(!!                write\(600+me_global,*\) matmul\(ow,roc\)) N
(!!                write\(600+me_global,*\) matmul\(ow,ror\)) N
(!!                write\(600+me_global,*\) matmul\(ow,roi\)) N
(!) N
(      if \(qorient\) then) N
(!     compute rotation matrices \(and gradients, if needed\)) N
(!) N
(       if \(deriv\) then) N
(!%%%%%%%%%%%%%%%%%%% set up indices %%%%%%%%%%%%%%%%%%%) N
(         if \(qgrp\) then) N
(!) N
(          j=ceiling\(1.0d0*norient/SIZE_LOCAL\)) N
(!) N
(          allocate\(orient_displ\(SIZE_LOCAL\), orient_count\(SIZE_LOCAL\)\)) N
(!) N
(          do i=1,SIZE_LOCAL) N
(           orient_displ\(i\)=min\(\(i-1\)*j,norient-1\)) N
(           orient_count\(i\)=max\(0,min\(j,norient-j*\(i-1\)\)\)) N
(          enddo) N
(!) N
(          obeg=orient_displ\(ME_LOCAL+1\) + 1) N
(          oend=obeg - 1 + orient_count\(ME_LOCAL+1\)) N
(!) N
(         else ! not qgrp) N
(          obeg=1; oend=norient) N
(         endif ! qgrp) N
(!%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%) N
(         if \(proj_on\) then) N
(          allocate\(ugrad \(3,3,3,norient\),                               &) N
(     &             ugrad1\(3,3,3,norient\),                               &) N
(     &             ugrad2\(3,3,3,norient\) \)) N
(!) N
(          call RMSBestFit\(rol,roi,ow,u, obeg,oend,ugrad\)) N
(          call RMSBestFit\(ror,roi,ow,u1,obeg,oend,ugrad1\)) N
(! fe_curvature \(do not need gradient\)) N
(          if \(fe_curvature\) call RMSBestFit\(roc,roi,ow,u2\) ! here, u2 correspond) N
(s to the center image) N
(!) N
(         elseif \(qdiffrot\) then ! not proj_on but need derivatives of rotations) N
(          allocate\(ugrad \(3,3,3,norient\)\)) N
(          call RMSBestFit\(roc,roi,ow,u2, obeg,oend,ugrad\)) N
(         else ! no need to calculate gradients) N
(          call RMSBestFit\(roc,roi,ow,u2\)) N
(         endif ! proj_on) N
(!) N
(       else ! not deriv) N
(         if \(proj_on\) then) N
(          call RMSBestFit\(rol,roi,ow,u\)) N
(          call RMSBestFit\(ror,roi,ow,u1\)) N
(          if \(fe_curvature\) call RMSBestFit\(roc,roi,ow,u2\)) N
(         else  ! not proj_on) N
(          call RMSBestFit\(roc,roi,ow,u2\) ! orientation between center image and ) N
(current coords) N
(         endif ! proj_on) N
(       endif ! deriv) N
() N
(!     rotate target structures to overlap with current) N
(!     conventional way \(might be faster\)) N
(       if \(proj_on .and. fe_curvature\) then) N
(        rfr_rot=0d0;   rfl_rot=0d0;    rfc_rot=0d0;) N
(        do k=1,3; do j=1,3) N
(           rfl_rot\(:,j\)=rfl_rot\(:,j\)+rfl\(:,k\)*u \(j,k\)) N
(           rfr_rot\(:,j\)=rfr_rot\(:,j\)+rfr\(:,k\)*u1\(j,k\)) N
(           rfc_rot\(:,j\)=rfc_rot\(:,j\)+rfc\(:,k\)*u2\(j,k\)) N
(        enddo;    enddo) N
(!) N
(ftsm.ftn) (Page 62/90) (Apr 16, 13 16:43) title
border
grestore
(Printed by surgeon) rhead
(ftsm.ftn) (31/45) (Wednesday May 01, 2013) footer
end % of iso1dict
pagesave restore
showpage
%%Page: (63-64) 32
%%BeginPageSetup
/pagesave save def
sh 0 translate 90 rotate
%%EndPageSetup
iso1dict begin
gsave
llx lly 12 add translate
/v 0 store
/x0 x v get 3.147420 add sx cw mul add store
/y0 y v get bfs th add sub store
x0 y0 moveto
(       elseif \(proj_on\) then) p n
(        rfr_rot=0d0;   rfl_rot=0d0;) N
(        do k=1,3; do j=1,3) N
(           rfl_rot\(:,j\)=rfl_rot\(:,j\)+rfl\(:,k\)*u \(j,k\)) N
(           rfr_rot\(:,j\)=rfr_rot\(:,j\)+rfr\(:,k\)*u1\(j,k\)) N
(        enddo;    enddo) N
(!) N
(       else  ! not proj_on) N
(        rfc_rot=0d0) N
(        do k=1,3; do j=1,3) N
(           rfc_rot\(:,j\)=rfc_rot\(:,j\)+rfc\(:,k\)*u2\(j,k\)) N
(        enddo;    enddo) N
(       endif ! proj_on) N
(!) N
(      else ! not qorient) N
(       if \(proj_on\) then) N
(        rfl_rot=>rfl; rfr_rot=>rfr ! no rotation) N
(        if \(fe_curvature\) rfc_rot=>rfc) N
(       else) N
(        rfc_rot=>rfc) N
(       endif) N
(      endif ! qorient) N
(!) N
(      if \(proj_on\) then) N
(!     compute projection \(delta\)) N
(       rho=0d0) N
(       rho1=0d0) N
(       rho2=0d0) N
(       fe_curv=0d0) N
(!) N
(       if \(deriv\) then) N
(!) N
(        r1=0d0;) N
(        do k=1,3 ; do j=1,nforced) N
(                     d = rfi\(j,k\)    -rfl_rot\(j,k\)) N
(                     d1= rfr_rot\(j,k\)-rfl_rot\(j,k\)) N
(                     d2= rfc_rot\(j,k\)-rfl_rot\(j,k\) ! for curvature) N
(!) N
(                     rfpar\(j,k\) = d    ! displacement to first reference) N
(                     rfprp\(j,k\) = d-d1 ! displacement to second reference) N
(                     fe_curv = fe_curv + fw\(j\) * \( d1-2d0*d2 \) * \(d-d2 \) ! curva) N
(ture) N
(!) N
(                     rho1=rho1 + d1*d1 * fw\(j\) ! denominator in dpar) N
(                     d1 = d1 * fw\(j\)) N
(                     rho =rho  + d *d1        ! numerator) N
(!     COM contribution to gradient for orientation atoms:) N
(                     r1\(k\)=r1\(k\)+d1 ! will only be used if \(qdiffrot\)) N
(!     derivative components from the forcing atoms:) N
(                     ffpar\(j,k\)=d1 !) N
(        enddo ;    enddo) N
(        if \(rho1.le.tol\) then ; rho1=1d0 ; else ; rho1=1d0/rho1 ; endif ! a rath) N
(er unlikely event) N
(        dpar=rho*rho1 ! length projection along line connecting left and right s) N
(tructures) N
(        rho=sqrt\(rho1\)! for normalization of perpendicular derivatives) N
(        fe_curv = fe_curv * rho1 * 4d0 ! for internal pts will need x 4 because ) N
(rho1 is \(2\)^2 times the string length increment ds) N
(        omdpar=1d0-dpar) N
(        d5=dpar*omdpar) N
(! the next loop is required for the perpendicular component) N
(        r2=0d0;) N
(        do k=1,3 ; do j=1,nforced) N
(                     d1 = dpar * rfprp\(j,k\) + omdpar * rfpar\(j,k\)) N
(                     rfprp\(j,k\)=d1            ! true perpendicular component) N
(                     rho2=rho2 + d1*d1 *fw\(j\) ! squared length of perpendicular ) N
(vector) N
(!) N
(                     d1=d1 * fw\(j\)) N
(ftsm.ftn) (Page 63/90) (Apr 16, 13 16:43) title
border
/v 1 store
/x0 x v get 3.147420 add sx cw mul add store
/y0 y v get bfs th add sub store
x0 y0 moveto
(!     COM contribution to gradient for orientation atoms:) p n
(                     r2\(k\)=r2\(k\) + d1) N
(!     derivative components from the forcing atoms:) N
(                     ffprp\(j,k\)=d1) N
(        enddo ;    enddo) N
(!) N
(        d6=d5+rho1*rho2  ! rho1*rho2 is then normalized perp. component squared) N
(        dperp=sqrt\(rho2\) ! unnormalized perp component) N
(        if \(dperp.le.tol\) then; rho2=1d0; else; rho2=1d0/dperp; endif ! a rather) N
( unlikely event) N
(        dperp=dperp*rho ! normalize perp component) N
(!) N
(        if \(qorient\) then ! this part nonzero only if orientation is on) N
(!) N
(         w=omdpar-dpar ! \(1-2d\)) N
(         if \(qdiffrot\) then) N
(!) N
(          do k=obeg, oend) N
(!    COM contribution to gradients on orientation atoms) N
(            fopar\(k,:\)=-r1*ow\(k\) ! parallel) N
(            foprp\(k,:\)=-r2*ow\(k\) ! perpendicular) N
(!    in this loop we also compute the gradients of [transpose\(A\) B ]) N
(            do j=1,3) N
(!    multiplications `by hand') N
(             M=>ugrad\(:,:,j,k\)) N
(             a11=M\(1,1\); a21=M\(2,1\); a31=M\(3,1\);) N
(             a12=M\(1,2\); a22=M\(2,2\); a32=M\(3,2\);) N
(             a13=M\(1,3\); a23=M\(2,3\); a33=M\(3,3\);) N
(             M=>ugrad1\(:,:,j,k\)) N
(             b11=M\(1,1\); b21=M\(2,1\); b31=M\(3,1\);) N
(             b12=M\(1,2\); b22=M\(2,2\); b32=M\(3,2\);) N
(             b13=M\(1,3\); b23=M\(2,3\); b33=M\(3,3\);) N
(             M=>ugrad2\(:,:,j,k\)) N
(!) N
(             M\(1,1\)=a11*u1\(1,1\) + a21*u1\(2,1\) + a31*u1\(3,1\) +           &) N
(     &              u\(1,1\)*b11 + u\(2,1\)*b21 + u\(3,1\)*b31) N
(             M\(2,1\)=a12*u1\(1,1\) + a22*u1\(2,1\) + a32*u1\(3,1\) +           &) N
(     &              u\(1,2\)*b11 + u\(2,2\)*b21 + u\(3,2\)*b31) N
(             M\(3,1\)=a13*u1\(1,1\) + a23*u1\(2,1\) + a33*u1\(3,1\) +           &) N
(     &              u\(1,3\)*b11 + u\(2,3\)*b21 + u\(3,3\)*b31) N
(!) N
(             M\(1,2\)=a11*u1\(1,2\) + a21*u1\(2,2\) + a31*u1\(3,2\) +           &) N
(     &              u\(1,1\)*b12 + u\(2,1\)*b22 + u\(3,1\)*b32) N
(             M\(2,2\)=a12*u1\(1,2\) + a22*u1\(2,2\) + a32*u1\(3,2\) +           &) N
(     &              u\(1,2\)*b12 + u\(2,2\)*b22 + u\(3,2\)*b32) N
(             M\(3,2\)=a13*u1\(1,2\) + a23*u1\(2,2\) + a33*u1\(3,2\) +           &) N
(     &              u\(1,3\)*b12 + u\(2,3\)*b22 + u\(3,3\)*b32) N
(!) N
(             M\(1,3\)=a11*u1\(1,3\) + a21*u1\(2,3\) + a31*u1\(3,3\) +           &) N
(     &              u\(1,1\)*b13 + u\(2,1\)*b23 + u\(3,1\)*b33) N
(             M\(2,3\)=a12*u1\(1,3\) + a22*u1\(2,3\) + a32*u1\(3,3\) +           &) N
(     &              u\(1,2\)*b13 + u\(2,2\)*b23 + u\(3,2\)*b33) N
(             M\(3,3\)=a13*u1\(1,3\) + a23*u1\(2,3\) + a33*u1\(3,3\) +           &) N
(     &              u\(1,3\)*b13 + u\(2,3\)*b23 + u\(3,3\)*b33) N
(! aa: this is what we are doing above:) N
(!            ugrad2\(:,:,j,k\)=matmul\(transpose\(ugrad\(:,:,j,k\)\),u1\)+) N
(!     &                      matmul\(transpose\(u\),ugrad1\(:,:,j,k\)\)) N
(           enddo ! j) N
(          enddo ! k) N
(!    contribution from quadratics \(3 terms\)) N
(          do j=1, nforced) N
(           r1=fw\(j\)*rfi\(j,:\)) N
(           r2=fw\(j\)*rfl\(j,:\)) N
(!           r3=d5*r2) N
(           r3=d6*r2 ! for normalized distance) N
(           r2=w*r2) N
(!) N
(           do k=obeg, oend) N
(!) N
(ftsm.ftn) (Page 64/90) (Apr 16, 13 16:43) title
border
grestore
(Printed by surgeon) rhead
(ftsm.ftn) (32/45) (Wednesday May 01, 2013) footer
end % of iso1dict
pagesave restore
showpage
%%Page: (65-66) 33
%%BeginPageSetup
/pagesave save def
sh 0 translate 90 rotate
%%EndPageSetup
iso1dict begin
gsave
llx lly 12 add translate
/v 0 store
/x0 x v get 3.147420 add sx cw mul add store
/y0 y v get bfs th add sub store
x0 y0 moveto
(            do p=1,3) p n
(             do q=1,3) N
(!) N
(              d =r1\(p\)) N
(              d1=rfl\(j,q\)) N
(              d2=rfr\(j,q\)) N
(              d3=r2\(p\)*d2) N
(              d4=r3\(p\)*d2) N
(! not sure how to compute this more efficiently) N
(              fopar\(k,:\)=fopar\(k,:\) +                                   &) N
(     &          d  * \( ugrad1\(p,q,:,k\) * d2 - ugrad\(p,q,:,k\) * d1 \) -   &) N
(     &          d3 * \( ugrad2\(p,q,:,k\) \)) N
(!) N
(              foprp\(k,:\)=foprp\(k,:\) -                                   &) N
(     &          d  * \(   dpar * ugrad1\(p,q,:,k\) * d2 +                  &) N
(     &                 omdpar * ugrad \(p,q,:,k\) * d1 \) +                &) N
(     &          d4 * \( ugrad2\(p,q,:,k\) \)) N
(!) N
(             enddo ! q) N
(            enddo ! p) N
(           enddo ! k \(orientation atoms\)) N
(          enddo ! j \(forcing atoms\)) N
(!) N
(!    scale orientation atoms derivatives) N
(          fopar=rho1*fopar) N
(          foprp=rho*rho2*foprp) N
(!) N
(         else ! not qdiffrot) N
(! NOTE: in this case, the forces on the f and o atoms are stored in the same loc) N
(ation, so that below we are adding to the f forces) N
(          do k=obeg, oend) N
(!    compute the gradients of [transpose\(A\) B ]) N
(           do j=1,3) N
(!    multiplications `by hand') N
(             M=>ugrad\(:,:,j,k\)) N
(             a11=M\(1,1\); a21=M\(2,1\); a31=M\(3,1\);) N
(             a12=M\(1,2\); a22=M\(2,2\); a32=M\(3,2\);) N
(             a13=M\(1,3\); a23=M\(2,3\); a33=M\(3,3\);) N
(             M=>ugrad1\(:,:,j,k\)) N
(             b11=M\(1,1\); b21=M\(2,1\); b31=M\(3,1\);) N
(             b12=M\(1,2\); b22=M\(2,2\); b32=M\(3,2\);) N
(             b13=M\(1,3\); b23=M\(2,3\); b33=M\(3,3\);) N
(             M=>ugrad2\(:,:,j,k\)) N
(!) N
(             M\(1,1\)=a11*u1\(1,1\) + a21*u1\(2,1\) + a31*u1\(3,1\) +           &) N
(     &              u\(1,1\)*b11 + u\(2,1\)*b21 + u\(3,1\)*b31) N
(             M\(2,1\)=a12*u1\(1,1\) + a22*u1\(2,1\) + a32*u1\(3,1\) +           &) N
(     &              u\(1,2\)*b11 + u\(2,2\)*b21 + u\(3,2\)*b31) N
(             M\(3,1\)=a13*u1\(1,1\) + a23*u1\(2,1\) + a33*u1\(3,1\) +           &) N
(     &              u\(1,3\)*b11 + u\(2,3\)*b21 + u\(3,3\)*b31) N
(!) N
(             M\(1,2\)=a11*u1\(1,2\) + a21*u1\(2,2\) + a31*u1\(3,2\) +           &) N
(     &              u\(1,1\)*b12 + u\(2,1\)*b22 + u\(3,1\)*b32) N
(             M\(2,2\)=a12*u1\(1,2\) + a22*u1\(2,2\) + a32*u1\(3,2\) +           &) N
(     &              u\(1,2\)*b12 + u\(2,2\)*b22 + u\(3,2\)*b32) N
(             M\(3,2\)=a13*u1\(1,2\) + a23*u1\(2,2\) + a33*u1\(3,2\) +           &) N
(     &              u\(1,3\)*b12 + u\(2,3\)*b22 + u\(3,3\)*b32) N
(!) N
(             M\(1,3\)=a11*u1\(1,3\) + a21*u1\(2,3\) + a31*u1\(3,3\) +           &) N
(     &              u\(1,1\)*b13 + u\(2,1\)*b23 + u\(3,1\)*b33) N
(             M\(2,3\)=a12*u1\(1,3\) + a22*u1\(2,3\) + a32*u1\(3,3\) +           &) N
(     &              u\(1,2\)*b13 + u\(2,2\)*b23 + u\(3,2\)*b33) N
(             M\(3,3\)=a13*u1\(1,3\) + a23*u1\(2,3\) + a33*u1\(3,3\) +           &) N
(     &              u\(1,3\)*b13 + u\(2,3\)*b23 + u\(3,3\)*b33) N
(! aa: this is what we are doing above:) N
(!            ugrad2\(:,:,j,k\)=matmul\(transpose\(ugrad\(:,:,j,k\)\),u1\)+) N
(!     &                      matmul\(transpose\(u\),ugrad1\(:,:,j,k\)\)) N
(           enddo ! j) N
(          enddo ! k) N
(ftsm.ftn) (Page 65/90) (Apr 16, 13 16:43) title
border
/v 1 store
/x0 x v get 3.147420 add sx cw mul add store
/y0 y v get bfs th add sub store
x0 y0 moveto
(!    contribution from quadratics) p n
(!   aa) N
(!           write\(0,*\) 'U: ', u) N
(!           write\(0,*\) 'U1: ', u1) N
(!) N
(          do j=1, nforced) N
(           r2=fw\(j\)*rfl\(j,:\)) N
(!           r3=d5*r2) N
(           r3=d6*r2) N
(           r2=w*r2) N
(!) N
(           do k=obeg, oend) N
(!) N
(            do p=1,3) N
(             do q=1,3) N
(              d3=r2\(p\)*rfr\(j,q\)) N
(              d4=r3\(p\)*rfr\(j,q\)) N
(              fopar\(k,:\)=fopar\(k,:\) - d3 * ugrad2\(p,q,:,k\) ! parallel) N
(              foprp\(k,:\)=foprp\(k,:\) + d4 * ugrad2\(p,q,:,k\) ! perpendicular) N
(             enddo ! q) N
(            enddo ! p) N
(           enddo ! k \(orientation atoms\)) N
(          enddo ! j \(forcing atoms\)) N
(!) N
(         endif ! qdiffrot) N
(!) N
(!    NOTE: when diffrot false, fopar and ffpar point to the same thing; gather b) N
(elow should still work fine) N
(         if \(qgrp\) then ! gather orientation forces) N
(          if \(mod\(SIZE_LOCAL,2\).eq.0.and.allgather_method.eq.hypercube_\) then ! ) N
(use hypercube allgather) N
(           call hypercube_allgatherv\(                                   &) N
(     &         fopar, orient_count, orient_displ, MPI_RTMD_TYPE,        &) N
(     &         MPI_COMM_LOCAL, ierror, ME_LOCAL, SIZE_LOCAL \)) N
(           call hypercube_allgatherv\(                                   &) N
(     &         foprp, orient_count, orient_displ, MPI_RTMD_TYPE,        &) N
(     &         MPI_COMM_LOCAL, ierror, ME_LOCAL, SIZE_LOCAL \)) N
(          elseif \(allgather_method.eq.allgather_\) then) N
(! ALLGATHER) N
(           call MPI_ALLGATHERV\(MPI_IN_PLACE,                            &) N
(     &         orient_count\(ME_LOCAL+1\),MPI_RTMD_TYPE,                  &) N
(     &         fopar, orient_count, orient_displ, MPI_RTMD_TYPE,        &) N
(     &         MPI_COMM_LOCAL, ierror\)) N
(           call MPI_ALLGATHERV\(MPI_IN_PLACE,                            &) N
(     &         orient_count\(ME_LOCAL+1\),MPI_RTMD_TYPE,                  &) N
(     &         foprp, orient_count, orient_displ, MPI_RTMD_TYPE,        &) N
(     &         MPI_COMM_LOCAL, ierror\)) N
(          elseif \(allgather_method.eq.gather_bcast_.or.mod\(SIZE_LOCAL,2\).eq.1\) t) N
(hen ! default method when cores are not in multiples of two) N
(! GATHER + BCAST) N
(           if \(ME_LOCAL.eq.0\) then) N
(            call MPI_GATHERV\(MPI_IN_PLACE,                              &) N
(     &         orient_count\(ME_LOCAL+1\),MPI_RTMD_TYPE,                  &) N
(     &         fopar, orient_count, orient_displ, MPI_RTMD_TYPE,        &) N
(     &         0, MPI_COMM_LOCAL, ierror\)) N
(            call MPI_GATHERV\(MPI_IN_PLACE,                             &) N
(     &         orient_count\(ME_LOCAL+1\),MPI_RTMD_TYPE,                  &) N
(     &         foprp, orient_count, orient_displ, MPI_RTMD_TYPE,        &) N
(     &         0, MPI_COMM_LOCAL, ierror\)) N
(           else) N
(            call MPI_GATHERV\(fopar\(obeg,1\),                             &) N
(     &         orient_count\(ME_LOCAL+1\),MPI_RTMD_TYPE,                  &) N
(     &         fopar, orient_count, orient_displ, MPI_RTMD_TYPE,        &) N
(     &         0, MPI_COMM_LOCAL, ierror\)) N
(            call MPI_GATHERV\(foprp\(obeg,1\),                             &) N
(     &         orient_count\(ME_LOCAL+1\),MPI_RTMD_TYPE,                  &) N
(     &         foprp, orient_count, orient_displ, MPI_RTMD_TYPE,        &) N
(     &         0, MPI_COMM_LOCAL, ierror\)) N
(           endif ! ME_LOCAL) N
(ftsm.ftn) (Page 66/90) (Apr 16, 13 16:43) title
border
grestore
(Printed by surgeon) rhead
(ftsm.ftn) (33/45) (Wednesday May 01, 2013) footer
end % of iso1dict
pagesave restore
showpage
%%Page: (67-68) 34
%%BeginPageSetup
/pagesave save def
sh 0 translate 90 rotate
%%EndPageSetup
iso1dict begin
gsave
llx lly 12 add translate
/v 0 store
/x0 x v get 3.147420 add sx cw mul add store
/y0 y v get bfs th add sub store
x0 y0 moveto
(! send to slaves) p n
(           __BROADCAST_LOCAL_8B\(r_o\(1,1,fpar\),6*norient\) ! perp follows par in m) N
(emory, so send both by doubling data count) N
(          endif ! hypercube_allgather) N
(         endif ! qgrp) N
(!) N
(!    free memory) N
(         deallocate\(ugrad, ugrad1, ugrad2\)) N
(         if \(qgrp\) deallocate\(orient_count, orient_displ\)) N
(!) N
(        endif ! qorient) N
(!    scale forcing atoms derivatives) N
(        ffpar=rho1*ffpar) N
(        ffprp=rho*rho2*ffprp) N
(!-------------------------------------------------------------------------------) N
(---------------) N
(       else ! derivative calculation not requested) N
(         do k=1,3 ; do j=1,nforced) N
(                    d = rfi\(j,k\)    -rfl_rot\(j,k\)) N
(                    d1= rfr_rot\(j,k\)-rfl_rot\(j,k\)) N
(                    d2= rfc_rot\(j,k\)-rfl_rot\(j,k\) ! for curvature) N
(!) N
(                    rfpar\(j,k\) = d    ! displacement to first reference) N
(                    rfprp\(j,k\) = d-d1 ! displacement to second reference) N
(                    fe_curv = fe_curv + fw\(j\) * \( d1-2d0*d2 \) * \(d-d2 \) ! curvat) N
(ure) N
(!) N
(                    rho =rho  + d *d1 *fw\(j\) ! numerator) N
(                    rho1=rho1 + d1*d1 *fw\(j\) ! denominator) N
(         enddo ;    enddo) N
(         if \(rho1.le.tol\) then ; rho1=1d0 ; else ; rho1=1d0/rho1 ; endif ! a ver) N
(y unlikely event) N
(         dpar=rho*rho1 ! length projection along line connecting left and right ) N
(structures) N
(         fe_curv = fe_curv * rho1 * 4d0 ! for internal pts, will need x 4 becaus) N
(e rho1 is \(2\)^2 times the string length increment ds) N
(         omdpar=1d0-dpar) N
(! the next loop is required for the perpendicular component) N
(         do k=1,3 ; do j=1,nforced) N
(                     d1 = dpar * rfprp\(j,k\) + omdpar * rfpar\(j,k\) !) N
(                     rfprp\(j,k\)=d1                           ! true perpendicula) N
(r component) N
(                     rho2=rho2 + d1*d1 *fw\(j\)                ! length of perpend) N
(icular vector) N
(         enddo ;    enddo) N
(!) N
(        dperp=sqrt\(rho2*rho1\) ! normalized perpendicular length) N
(!) N
(       endif ! deriv) N
(!ccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccc) N
(cccccccccccccccccccccc) N
(      else ! not proj_on) N
(!    NOTE: will put forces into parallel force array; fperp is unused) N
(!    compute the RMSD) N
(        drms=rmsd\(rfi, rfc_rot, fw\)) N
(!) N
(        if \(deriv\) then) N
(!    to scale derivatives by 1/drms) N
(         if \(drms.gt.tol\) then) N
(           rho=1d0/drms) N
(         else) N
(           rho=1d0 ! avoid singularity at near zero separation) N
(         endif) N
(!) N
(         if \(qdiffrot.and.qorient\) then) N
(!     compute COM contribution to gradient for orientation atoms:) N
(!     and add forces on forcing atoms) N
(          r1\(:\)=0d0;) N
(          do k=1, nforced) N
(ftsm.ftn) (Page 67/90) (Apr 16, 13 16:43) title
border
/v 1 store
/x0 x v get 3.147420 add sx cw mul add store
/y0 y v get bfs th add sub store
x0 y0 moveto
(           ffpar\(k,:\) = rho * fw\(k\) * \(rfi\(k,:\)-rfc_rot\(k,:\)\)) p n
(           r1\(:\)      = r1\(:\) + ffpar\(k,:\)) N
(          enddo) N
(          do j=obeg, oend) N
(           fopar\(j,:\)=-r1\(:\)*ow\(j\)) N
(          enddo) N
(!) N
(          do j=1, nforced) N
(           r2=fw\(j\)*rfi\(j,:\)  * rho) N
(           do k=obeg, oend) N
(            do p=1,3) N
(             do q=1,3) N
(              d=r2\(p\)*rfc\(j,q\)) N
(!) N
(              fopar\(k,:\)=fopar\(k,:\) - ugrad\(p,q,:,k\) * d) N
(             enddo ! q) N
(            enddo ! p) N
(           enddo ! k \(orientation atoms\)) N
(          enddo ! j \(forcing atoms\)) N
(!) N
(          deallocate\(ugrad\)) N
(!) N
(          if \(qgrp\) then ! gather orientation forces) N
(           if \(mod\(SIZE_LOCAL,2\).eq.0.and.allgather_method.eq.hypercube_\) then !) N
( use hypercube allgather) N
(            call hypercube_allgatherv\(                                   &) N
(     &         fopar, orient_count, orient_displ, MPI_RTMD_TYPE,        &) N
(     &         MPI_COMM_LOCAL, ierror, ME_LOCAL, SIZE_LOCAL \)) N
(           elseif \(allgather_method.eq.allgather_\) then) N
(!ALLGATHER) N
(            call MPI_ALLGATHERV\(MPI_IN_PLACE,                           &) N
(     &         orient_count\(ME_LOCAL+1\),MPI_RTMD_TYPE,                  &) N
(     &         fopar, orient_count, orient_displ, MPI_RTMD_TYPE,        &) N
(     &         MPI_COMM_LOCAL, ierror\)) N
(           elseif \(allgather_method.eq.gather_bcast_.or.mod\(SIZE_LOCAL,2\).eq.1\) ) N
(then ! default method when cores are not in multiples of two) N
(! GATHER + BCAST) N
(            if \(ME_LOCAL.eq.0\) then) N
(             call MPI_GATHERV\(MPI_IN_PLACE,                             &) N
(     &         orient_count\(ME_LOCAL+1\),MPI_RTMD_TYPE,                  &) N
(     &         fopar, orient_count, orient_displ, MPI_RTMD_TYPE,        &) N
(     &         0, MPI_COMM_LOCAL, ierror\)) N
(            else) N
(             call MPI_GATHERV\(fopar\(obeg,1\),                             &) N
(     &         orient_count\(ME_LOCAL+1\),MPI_RTMD_TYPE,                  &) N
(     &         fopar, orient_count, orient_displ, MPI_RTMD_TYPE,        &) N
(     &         0, MPI_COMM_LOCAL, ierror\)) N
(            endif) N
(! send to slaves) N
(            __BROADCAST_LOCAL_8B\(fopar,3*norient\)) N
(           endif) N
(          endif ! qgrp) N
(!cccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccc) N
(         else ! not qdiffrot .or. not qorient) N
(!     apply forces to the forcing atoms) N
(          do j=1,nforced) N
(           ffpar\(j,:\)=rho * fw\(j\) * \(rfi\(j,:\)-rfc_rot\(j,:\)\)) N
(          enddo) N
(         endif ! qdiffrot.and.qorient) N
(!) N
(         if \(qgrp\) deallocate\(orient_count, orient_displ\)) N
(        endif ! deriv) N
(!) N
(      endif ! proj_on) N
(!) N
(      end subroutine ftsm_calc) N
(!) N
(!ccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccc) N
(      subroutine ftsm_addforce\(fx,fy,fz,addforce\)) N
(ftsm.ftn) (Page 68/90) (Apr 16, 13 16:43) title
border
grestore
(Printed by surgeon) rhead
(ftsm.ftn) (34/45) (Wednesday May 01, 2013) footer
end % of iso1dict
pagesave restore
showpage
%%Page: (69-70) 35
%%BeginPageSetup
/pagesave save def
sh 0 translate 90 rotate
%%EndPageSetup
iso1dict begin
gsave
llx lly 12 add translate
/v 0 store
/x0 x v get 3.147420 add sx cw mul add store
/y0 y v get bfs th add sub store
x0 y0 moveto
() p n
(      __IMPNONE) N
(!    note: boundary points require special treatment: x0.25 force constant and x) N
(2 dperp0) N
(!    this is because distance between replicas is halved for the endpoints, but ) N
(still corresponds to 1 \(as for the inner pts\)) N
(      float :: fx\(:\), fy\(:\), fz\(:\)) N
(      float, pointer, dimension\(:,:\) :: ffpar, ffprp, fopar, foprp) N
(      float :: pre1, pre2) N
(      float :: fac, fac2, t, omt) N
(      int :: i, ind) N
(      bool :: addforce  ! whether to add forces to running force average) N
(      bool :: qendpoint) N
(!) N
(      qendpoint=\(mestring.eq.0.or.mestring.eq.nstring-1\)) N
(!) N
(      ffpar=>r_f\(:,:,fpar\);  ffprp=>r_f\(:,:,fperp\) ! forcing forces) N
(      fopar=>r_o\(:,:,fpar\);  foprp=>r_o\(:,:,fperp\) ! orientation forces) N
(!) N
(      if \(addforce\) then) N
(       num_force_samples=num_force_samples+1) N
(       omt=1d0/num_force_samples) N
(       t=1d0-omt) N
(      else) N
(       t=1d0; omt=0d0) N
(      endif) N
(! lowering the force constants for endpoints is necessary to get the equivalent ) N
(fluctuations) N
(! can think of either scaling the force constants, or scaling the distances \(and) N
( gradients\) by 0.5 and keeping the same force constans) N
(! perpendicular component normalized by physical interimage dist. \(which is halv) N
(ed for endpoints\); so it appears too large, and is halved below) N
(!) N
(! for the internal points, integrating the force through one inter-image distanc) N
(e is equivalent to multiplying) N
(! the force by 0.5 \(0.5 is the scaled distance between adjacent inner images\)) N
(! for the endpoints, the distance between adjacent images is 1, so take the forc) N
(e \(scaled down\) and multiply by 1) N
(      if \(qendpoint\) then ; fac=0.5d0 ; fac2=1d0 ; fe_curv=0d0 ! no curvature at) N
( endpoints) N
(                     else ; fac=1.0d0 ; fac2=0.5d0) N
(      endif) N
(!) N
(      if \(proj_on\) then) N
(! restraint force parallel to string) N
(       pre1 = kpara * fac * fac * \( dpar-dpar0 \)                ! scale down the) N
( force constant of endpoints \(one for d, one for gradients\)) N
(       pre2 = kperp * fac * max   \( fac * dperp - dperp0, 0d0 \) ! ignore negativ) N
(e values; dperp0 criterion in inner-replica d-metric) N
(! update force: for inner points, multiply force by 0.5; for boundary use 1d0; t) N
(he FE is then simply the sum of the forces along the string) N
(       avforce\(1\) = t * avforce\(1\) + omt * pre1 * fac2 ! force acting on dpar0 i) N
(s pre1 \(integrate negative to get f.e.\)) N
(       avforce\(2\) = t * avforce\(2\) - omt * pre1 * fac2 * \(fe_curv * fac * fac\) !) N
( force due to curvature \(note: either fac=1 or curv=0\)) N
(       avforce\(3\) = t * avforce\(3\) + omt * pre2 * fac2 ! force acting on derp0 i) N
(s pre2 \( NOTE: this is not a true force along the path\)) N
(!                                                      ! even if I am treating i) N
(t here as such; it is an orthogonal `correction') N
(       if \(pre2 .gt. 0d0\) then) N
(!) N
(        do i=1, nforced) N
(         ind=iatom_f\(i\)) N
(         fx\(ind\) = fx\(ind\) + pre1 * ffpar\(i,1\) + pre2 * ffprp\(i,1\)) N
(         fy\(ind\) = fy\(ind\) + pre1 * ffpar\(i,2\) + pre2 * ffprp\(i,2\)) N
(         fz\(ind\) = fz\(ind\) + pre1 * ffpar\(i,3\) + pre2 * ffprp\(i,3\)) N
(        enddo) N
(        if \(qorient.and.qdiffrot\) then) N
(         do i=1, norient) N
(ftsm.ftn) (Page 69/90) (Apr 16, 13 16:43) title
border
/v 1 store
/x0 x v get 3.147420 add sx cw mul add store
/y0 y v get bfs th add sub store
x0 y0 moveto
(          ind=iatom_o\(i\)) p n
(          fx\(ind\) = fx\(ind\) + pre1 * fopar\(i,1\) + pre2 * foprp\(i,1\)) N
(          fy\(ind\) = fy\(ind\) + pre1 * fopar\(i,2\) + pre2 * foprp\(i,2\)) N
(          fz\(ind\) = fz\(ind\) + pre1 * fopar\(i,3\) + pre2 * foprp\(i,3\)) N
(         enddo) N
(        endif) N
(       else ! parallel force only) N
(        do i=1, nforced) N
(         ind=iatom_f\(i\)) N
(         fx\(ind\) = fx\(ind\) + pre1 * ffpar\(i,1\)) N
(         fy\(ind\) = fy\(ind\) + pre1 * ffpar\(i,2\)) N
(         fz\(ind\) = fz\(ind\) + pre1 * ffpar\(i,3\)) N
(        enddo) N
(        if \(qorient.and.qdiffrot\) then) N
(         do i=1, norient) N
(          ind=iatom_o\(i\)) N
(          fx\(ind\) = fx\(ind\) + pre1 * fopar\(i,1\)) N
(          fy\(ind\) = fy\(ind\) + pre1 * fopar\(i,2\)) N
(          fz\(ind\) = fz\(ind\) + pre1 * fopar\(i,3\)) N
(         enddo) N
(        endif) N
(       endif) N
(      else ! .not.  proj_on) N
(       pre1 = krms * \( drms-drms0 \)) N
(! update force \(which will not likely be used\)) N
(!) N
(       avforce\(1\) = t * avforce\(1\) + omt * pre1 ! force acting on dpar0 is pre1 ) N
(\(integrate negative to get f.e.\)) N
(!) N
(       do i=1, nforced) N
(        ind=iatom_f\(i\)) N
(        fx\(ind\) = fx\(ind\) + pre1 * ffpar\(i,1\)) N
(        fy\(ind\) = fy\(ind\) + pre1 * ffpar\(i,2\)) N
(        fz\(ind\) = fz\(ind\) + pre1 * ffpar\(i,3\)) N
(       enddo) N
(       if \(qorient.and.qdiffrot\) then) N
(        do i=1, norient) N
(          ind=iatom_o\(i\)) N
(          fx\(ind\) = fx\(ind\) + pre1 * fopar\(i,1\)) N
(          fy\(ind\) = fy\(ind\) + pre1 * fopar\(i,2\)) N
(          fz\(ind\) = fz\(ind\) + pre1 * fopar\(i,3\)) N
(        enddo) N
(       endif) N
(!) N
(      endif) N
(!) N
(      end subroutine ftsm_addforce) N
(!ccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccc) N
(      subroutine ftsm_evolve\(x,y,z\)) N
(      __IMPNONE) N
(      float :: x\(:\), y\(:\), z\(:\)) N
(      int :: ind, j, k) N
(      float :: t, omt) N
(      float :: u \(3,3\)= RESHAPE\( \(/1,0,0,0,1,0,0,0,1/\), \(/3,3/\) \) ! rotation mat) N
(rix) N
(      float, pointer :: r_com\(:\), ow\(:\), fw\(:\)) N
(      float, pointer, dimension\(:,:\) :: roi, roc, rfi, rfc) N
(!) N
(      roi=>r_o\(:,:,instant\)) N
(      ow=>orientWeights) N
(      rfi=>r_f\(:,:,instant\)) N
(      r_com=>rcom\(:,instant\)) N
(!) N
(      roc=>r_o\(:,:,center_new\)) N
(      rfc=>r_f\(:,:,center_new\)) N
(!) N
(      if \(evolve_aver_on\) then) N
(       if \(num_evolve_samples.lt.max_evolve_samples.or.                 &) N
(     &     max_evolve_samples.le.0\)                                     &) N
(ftsm.ftn) (Page 70/90) (Apr 16, 13 16:43) title
border
grestore
(Printed by surgeon) rhead
(ftsm.ftn) (35/45) (Wednesday May 01, 2013) footer
end % of iso1dict
pagesave restore
showpage
%%Page: (71-72) 36
%%BeginPageSetup
/pagesave save def
sh 0 translate 90 rotate
%%EndPageSetup
iso1dict begin
gsave
llx lly 12 add translate
/v 0 store
/x0 x v get 3.147420 add sx cw mul add store
/y0 y v get bfs th add sub store
x0 y0 moveto
(     &                num_evolve_samples=num_evolve_samples+1) p n
(       omt=1d0/num_evolve_samples) N
(       t=1d0-omt) N
(      elseif \(evolve_expo_on\) then) N
(       t=evolve_expo_mem) N
(       omt=1d0-t) N
(      endif) N
(!) N
(      if \(.not. restrained_on\) then ! load coordinates, unless restraints on, in) N
( which case, they are loaded) N
(!) N
(       do k=1,nforced) N
(        ind=iatom_f\(k\)) N
(        rfi\(k,1\)=x\(ind\)) N
(        rfi\(k,2\)=y\(ind\)) N
(        rfi\(k,3\)=z\(ind\)) N
(       enddo) N
(!) N
(       if \(qorient\) then) N
(        if \(qdiffrot\) then) N
(         do k=1,norient) N
(          ind=iatom_o\(k\)) N
(          roi\(k,1\)=x\(ind\)) N
(          roi\(k,2\)=y\(ind\)) N
(          roi\(k,3\)=z\(ind\)) N
(         enddo) N
(        endif ! qdiffrot \(otherwise rfi and roi point to the same thing\)) N
(!) N
(!       translate forced atoms to centroid) N
(        r_com\(:\)=0d0;) N
(        do j=1,3 ; do k=1, norient;) N
(          r_com\(j\) = r_com\(j\)+ow\(k\)*roi\(k,j\)) N
(        enddo ;    enddo) N
(!) N
(        rfi\(:,1\)=rfi\(:,1\)-r_com\(1\)) N
(        rfi\(:,2\)=rfi\(:,2\)-r_com\(2\)) N
(        rfi\(:,3\)=rfi\(:,3\)-r_com\(3\)) N
(!) N
(        if \(qdiffrot\) then) N
(         roi\(:,1\)=roi\(:,1\)-r_com\(1\)) N
(         roi\(:,2\)=roi\(:,2\)-r_com\(2\)) N
(         roi\(:,3\)=roi\(:,3\)-r_com\(3\)) N
(        endif ! qdiffrot) N
(!) N
(       endif ! qorient) N
(      endif ! .not. restrained on) N
(!) N
(      if \(qorient\) then ! orient w.r.t. center image) N
(       call RMSBestFit\(roc,roi,ow,u\) ! superpose roc onto roi) N
(       rfc = t * rfc + omt * matmul\(rfi, u\) !          apply transpose \(=inverse) N
(\) of u to rfi) N
(      else) N
(!    evolve image using instantaneous structure) N
(       rfc = t * rfc + omt *rfi) N
(      endif) N
(!    NOTE that if the forcing set overlaps with orientation set, we also need to) N
(!    update some atom coords in the orientation set; this is done elsewhere to s) N
(ave CPU time) N
(!    NOTE also that rfi is not rotated) N
(      end subroutine ftsm_evolve) N
(!cccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccc) N
(      subroutine ftsm_compute_fe_fd\(\)) N
(      __DEP_MULTICOM       !__CHARMM_ONLY##MULTICOM) N
(      __DEP_MPI ) N
(      __DEP_NUMBER) N
(      __IMPNONE) N
(!) N
(#include "../../mpitype.def") N
(!) N
(ftsm.ftn) (Page 71/90) (Apr 16, 13 16:43) title
border
/v 1 store
/x0 x v get 3.147420 add sx cw mul add store
/y0 y v get bfs th add sub store
x0 y0 moveto
(      float :: avforces\(3,nstring\), qcurv) p n
(      int :: ierror, i) N
(      character\(len=20\) :: whoami) N
(      data whoami /' FTSM_COMPUTE_FE_FD>'/) N
(!) N
(      if \(proj_on\) then) N
(       if \(MPI_COMM_STRNG.ne.MPI_COMM_NULL.and.                         &) N
(     &                         SIZE_STRNG.gt.1\) then) N
() N
(        call MPI_GATHER\(avforce, 3, mpifloat,               &) N
(     &                 avforces, 3, mpifloat,               &) N
(     &                 0, MPI_COMM_STRNG, ierror\)) N
(        fe\(1\)=0d0) N
(!) N
(        if \(fe_curvature\) then ; qcurv=one ; else ; qcurv=zero ; endif) N
(!) N
(        do i=2, nstring) N
(         fe\(i\)  =fe\(i-1\) - half * \( avforces\(1,i-1\) + avforces\(1,i\) + qcurv*\( av) N
(forces\(2,i-1\) + avforces\(2,i\) \) \)) N
(!         fe\(i-1\)=fe\(i-1\) - \( avforces\(2,i-1\) - avforces\(2,1\) \)) N
(        enddo) N
(!        fe\(nstring\)=fe\(nstring\) - \( avforces\(2,nstring\) - avforces\(2,1\)\)) N
(       endif ! qroot) N
(      endif ! proj_on) N
(!) N
(!      send free energy to slaves -- no need at present time) N
(!       if \(MPI_COMM_LOCAL.ne.MPI_COMM_NULL.and.) N
(!     &                         SIZE_LOCAL.gt.1\) then) N
(!        call __BROADCAST_LOCAL_8B\(fe,nstring\)) N
(!       endif) N
(!) N
(      end subroutine ftsm_compute_fe_fd) N
(!ccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccc) N
(      subroutine ftsm_save_com\(c\)) N
(      __DEP_NUMBER) N
(      __IMPNONE) N
(!      float :: r_com\(3\)) N
(      float :: w) N
(      float, pointer :: ro_com\(:\)) N
(      int, optional :: c) N
(      int :: col, i) N
(      float, pointer, dimension\(:,:\) :: ro, rf) N
(!) N
(! compute and save COM of current reference structure) N
(!) N
(      if \(qorient\) then) N
(!) N
(        if \(present\(c\)\) then ; col=c ; else ; col=center ; endif) N
(        if \(col.le.num_sets.and.col.gt.0\) then) N
(         ro_com=>rcom\(:,col\)) N
(!) N
(!         r_com=ro_com ! save old COM) N
(         ro_com=zero   ! will recompute COM using new weights) N
(         ro  => r_o\(:,:,col\)) N
(         rf  => r_f\(:,:,col\)) N
(!       compute new COM) N
(         do i=1, norient) N
(          w=orientWeights\(i\)) N
(          ro_com\(1\)=ro_com\(1\) + w * ro\(i,1\)) N
(          ro_com\(2\)=ro_com\(2\) + w * ro\(i,2\)) N
(          ro_com\(3\)=ro_com\(3\) + w * ro\(i,3\)) N
(         enddo) N
(! translate orientation structure to centroid) N
(         ro\(:,1\)=ro\(:,1\) - ro_com\(1\)) N
(         ro\(:,2\)=ro\(:,2\) - ro_com\(2\)) N
(         ro\(:,3\)=ro\(:,3\) - ro_com\(3\)) N
(! translate forcing structure to centroid) N
(         if \(qdiffrot\) then) N
(          rf\(:,1\)=rf\(:,1\) - ro_com\(1\)) N
(ftsm.ftn) (Page 72/90) (Apr 16, 13 16:43) title
border
grestore
(Printed by surgeon) rhead
(ftsm.ftn) (36/45) (Wednesday May 01, 2013) footer
end % of iso1dict
pagesave restore
showpage
%%Page: (73-74) 37
%%BeginPageSetup
/pagesave save def
sh 0 translate 90 rotate
%%EndPageSetup
iso1dict begin
gsave
llx lly 12 add translate
/v 0 store
/x0 x v get 3.147420 add sx cw mul add store
/y0 y v get bfs th add sub store
x0 y0 moveto
(          rf\(:,2\)=rf\(:,2\) - ro_com\(2\)) p n
(          rf\(:,3\)=rf\(:,3\) - ro_com\(3\)) N
(         endif) N
(! centroid relative to original coords:) N
(!         ro_com = ro_com + r_com ! this is no longer useful; VO 1/2013) N
(       endif) N
(      endif) N
(!) N
(      end subroutine ftsm_save_com) N
(!) N
(!ccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccc) N
(cccccccccccccccccc) N
(      subroutine ftsm_swap_bc\(qsendo\)) N
(      __DEP_MULTICOM       !__CHARMM_ONLY##MULTICOM) N
(      __DEP_MPI ) N
(      __DEP_NUMBER) N
(      __IMPNONE) N
(      bool :: qroot, qslave, qsend_o) N
(      bool, optional :: qsendo) N
(      float, pointer, dimension\(:,:\) :: rlf, rcf, rrf, rlo, rco, rro) N
(      int :: me, ierror) N
(      int4mpi :: stat\(MPI_STATUS_SIZE\)) N
(!) N
(      qroot=MPI_COMM_STRNG.ne.MPI_COMM_NULL) N
(      qslave=MPI_COMM_LOCAL.ne.MPI_COMM_NULL.and.SIZE_LOCAL.gt.1) N
(      if \(present\(qsendo\)\) then) N
(        qsend_o=qsendo.and.qorient.and.qdiffrot) N
(      else) N
(        qsend_o=qorient.and.qdiffrot) N
(      endif) N
(!) N
(! note that I can avoid sending the orientation coordinates, since they only evo) N
(lve through the forced atoms) N
(!) N
(!) N
(      me=mestring+1 ! slaves need me too) N
(!) N
(      if \(qroot.and.nstring.gt.1\) then) N
(        rcf=>r_f\(:,:,center\)) N
(        rlf=>r_f\(:,:,left\)) N
(        rrf=>r_f\(:,:,right\)) N
(!) N
(        if \(qdiffrot\) then) N
(         rco=>r_o\(:,:,center\)) N
(         rlo=>r_o\(:,:,left\)) N
(         rro=>r_o\(:,:,right\)) N
(        endif) N
(!     replicas send to the right and receive from the left) N
(        if \(me.eq.1\) then) N
(         call MPI_SEND\(rcf, 3*nforced, MPI_DOUBLE_PRECISION,            &) N
(     &                 me, 0, MPI_COMM_STRNG, ierror\)) N
(         if \(qsend_o\)                                                   &) N
(     &    call MPI_SEND\(rco, 3*norient, MPI_DOUBLE_PRECISION,           &) N
(     &                 me, 1, MPI_COMM_STRNG, ierror\)) N
(!) N
(        elseif \(me.eq.nstring\) then) N
(         call MPI_RECV\(rlf, 3*nforced, MPI_DOUBLE_PRECISION,            &) N
(     &                 mestring-1, 0, MPI_COMM_STRNG, stat, ierror\)) N
(         if \(qsend_o\)                                                   &) N
(     &    call MPI_RECV\(rlo, 3*norient, MPI_DOUBLE_PRECISION,           &) N
(     &                 mestring-1, 1, MPI_COMM_STRNG, stat, ierror\)) N
(        else ! inner replicas) N
(         call MPI_SENDRECV\(rcf, 3*nforced, MPI_DOUBLE_PRECISION, me, 0, &) N
(     &                     rlf, 3*nforced, MPI_DOUBLE_PRECISION,        &) N
(     &                     mestring-1, 0, MPI_COMM_STRNG, stat,ierror\)) N
(         if \(qsend_o\)                                                   &) N
(     &    call MPI_SENDRECV\(rco, 3*norient, MPI_DOUBLE_PRECISION, me, 1,&) N
(     &                      rlo, 3*norient, MPI_DOUBLE_PRECISION,       &) N
(     &                      mestring-1, 1, MPI_COMM_STRNG, stat,ierror\)) N
(ftsm.ftn) (Page 73/90) (Apr 16, 13 16:43) title
border
/v 1 store
/x0 x v get 3.147420 add sx cw mul add store
/y0 y v get bfs th add sub store
x0 y0 moveto
(        endif ! me.eq.1) p n
(!    replicas send to the left and receive from the right) N
(        if \(me.eq.nstring\) then) N
(         call MPI_SEND\(rcf, 3*nforced, MPI_DOUBLE_PRECISION,            &) N
(     &                 mestring-1, 0, MPI_COMM_STRNG, ierror\)) N
(         if \(qsend_o\)                                                   &) N
(     &    call MPI_SEND\(rco, 3*norient, MPI_DOUBLE_PRECISION,           &) N
(     &                 mestring-1, 1, MPI_COMM_STRNG, ierror\)) N
(!) N
(        elseif \(me.eq.1\) then) N
(         call MPI_RECV\(rrf, 3*nforced, MPI_DOUBLE_PRECISION,            &) N
(     &                 me, 0, MPI_COMM_STRNG, stat, ierror\)) N
(         if \(qsend_o\)                                                   &) N
(     &    call MPI_RECV\(rro, 3*norient, MPI_DOUBLE_PRECISION,           &) N
(     &                 me, 1, MPI_COMM_STRNG, stat, ierror\)) N
(        else ! inner replicas) N
(         call MPI_SENDRECV\(rcf, 3*nforced, MPI_DOUBLE_PRECISION,        &) N
(     &                     mestring-1, 0,                               &) N
(     &                     rrf, 3*nforced, MPI_DOUBLE_PRECISION,        &) N
(     &                     me, 0, MPI_COMM_STRNG, stat,ierror\)) N
(         if \(qsend_o\)                                                   &) N
(     &     call MPI_SENDRECV\(rco, 3*norient, MPI_DOUBLE_PRECISION,      &) N
(     &                     mestring-1, 1,                               &) N
(     &                     rro, 3*norient, MPI_DOUBLE_PRECISION,        &) N
(     &                     me, 1, MPI_COMM_STRNG, stat,ierror\)) N
(        endif ! me.eq.nstring) N
(      endif ! qroot & nstring > 1) N
(!) N
(!    send to slaves) N
(      if \(qslave\) then) N
(       __BROADCAST_LOCAL_8B\(r_f\(:,:,left\),9*nforced\) ! send three sets at once \() N
(see ftsm_var\)) N
(       if \(qsend_o\) __BROADCAST_LOCAL_8B\(r_o\(:,:,left\),9*norient\)) N
(      endif) N
(!) N
(!     duplicate endpoints for force calculations:) N
(!) N
(      if \(me.eq.1\) then) N
(       r_f\(:,:,left\)=r_f\(:,:,center\)) N
(       if \(qdiffrot\) then) N
(        r_o\(:,:,left\)=r_o\(:,:,center\)) N
(       endif) N
(!) N
(      elseif \(me.eq.nstring\) then) N
(       r_f\(:,:,right\)=r_f\(:,:,center\)) N
(       if \(qdiffrot\) then) N
(        r_o\(:,:,right\)=r_o\(:,:,center\)) N
(       endif) N
(      endif) N
(!) N
(!    update any orientation coordinates that have changes) N
(      if \(qdiffrot\) call ftsm_update_overlap_coor\(ithree\)) N
(!) N
(      end subroutine ftsm_swap_bc) N
(!ccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccc) N
(cccccccccccccccccc) N
(      subroutine ftsm_mini\(x, y, z &) N
(#ifdef __CHARMM) N
(     &                    ,wmain, nbond_data, image_data     &) N
(     &                    ,fx, fy, fz                        & ) N
(#endif) N
(     &                    \)) N
() N
(      __DEP_PARSER ) N
(      __DEP_MULTICOM       !__CHARMM_ONLY##MULTICOM) N
(      __DEP_OUTPUT) N
(      __DEP_NUMBER) N
(#ifdef __CHARMM) N
(      use chm_kinds, only : wrnlev) N
(ftsm.ftn) (Page 74/90) (Apr 16, 13 16:43) title
border
grestore
(Printed by surgeon) rhead
(ftsm.ftn) (37/45) (Wednesday May 01, 2013) footer
end % of iso1dict
pagesave restore
showpage
%%Page: (75-76) 38
%%BeginPageSetup
/pagesave save def
sh 0 translate 90 rotate
%%EndPageSetup
iso1dict begin
gsave
llx lly 12 add translate
/v 0 store
/x0 x v get 3.147420 add sx cw mul add store
/y0 y v get bfs th add sub store
x0 y0 moveto
(      use chm_types, only : nonbondDataStructure, imageDataStructure) p n
(      use datstr, only : DUPLDT_nbond, DUPLDT_image) N
(      use energym, only : eprop, eterm, epot) N
(      use shake, only : qholo ! for turning off shake during the \(unphysical\) mi) N
(nimization) N
(!      use facts_module, only : FactsDataStructure, FCTBND, FCTBNDC, fctaim, fct) N
(run ! an extremely ugly workaround for compatibility with FACTS) N
(#endif) N
(!) N
(      __IMPNONE) N
(      float :: x\(:\), y\(:\), z\(:\)) N
(#ifdef __CHARMM) N
(! to restore forces : some energy functions will access x and dx directly \(sigh\)) N
(      float, optional :: fx\(:\), fy\(:\), fz\(:\)) N
(      float :: fxt\(size\(x,1\)\), fyt\(size\(x,1\)\), fzt\(size\(x,1\)\)) N
(      bool :: saveforces) N
(      int :: wrnlev_) N
(#endif) N
(      float :: dummy\(0\)) N
(!) N
(! local variables) N
(      character\(len=11\) :: whoami) N
(      bool :: qprint) N
(      bool :: qshake) N
(!) N
(      float :: u\(3,3\)= RESHAPE\( \(/1,0,0,0,1,0,0,0,1/\), \(/3,3/\) \) ! rotation matr) N
(ix) N
(      float, pointer :: r_com\(:\), ow\(:\)) N
(      float, pointer, dimension\(:,:\) :: roi, roc, rfc, roc_rot, rfc_rot) N
(      float :: w) N
(!) N
(      int :: i, j, k, ierror) N
(!) N
(! temporary coordinate and force arrays) N
(      float :: xt\(size\(x,1\)\)) N
(      float :: yt\(size\(x,1\)\)) N
(      float :: zt\(size\(x,1\)\)) N
(      float :: dxt\(size\(x,1\)\)) N
(      float :: dyt\(size\(x,1\)\)) N
(      float :: dzt\(size\(x,1\)\)) N
(      int :: stringatoms\(size\(x,1\)\)) N
(      int :: natom, ind, iter, nbath, nfree, ibeg) N
(!    other variables for minimization) N
(      float :: oonbath, oonfree, gradnorm, mini_step, norm_step, energy_new, ene) N
(rgy_old) N
(!) N
( __DECLARE_MSGBUF) N
(!) N
(#ifdef __CHARMM) N
(! CHARMM - dependent energy evaluation routines/vars) N
(      float :: wmain\(:\), wt\(size\(x,1\)\)) N
(      type\(nonbondDataStructure\) :: nbond_data) N
(      type\(imageDataStructure\)   :: image_data) N
(!      type\(FactsDataStructure\)   :: fctbnd_copy, fctbndc_copy   !##FACTS) N
(      float :: eprop_save\(size\(eprop\)\), eterm_save\(size\(eterm\)\) ! arrays to save) N
( energy values \(not certain how essential this is\)) N
(!) N
(      interface ! to subroutines which compute gradients) N
(!) N
(!*************************************************************) N
(! straight from CHARMM code v. c37a1) N
( SUBROUTINE ENERGY\(X, Y, Z, DX, DY, DZ, BNBND, BIMAG, &) N
(     NDD1, DD1, QSECD, ICALL\)) N
(  !-----------------------------------------------------------------------) N
(  !       CALCULATES THE ENERGY AND FORCES FOR A STRUCTURE.) N
(  !     The total energy and individual energy contributions are) N
(  !     returned in the ENERGY.FCM common block.) N
(  !) N
(  !      X,Y,Z         - Coordinates) N
(ftsm.ftn) (Page 75/90) (Apr 16, 13 16:43) title
border
/v 1 store
/x0 x v get 3.147420 add sx cw mul add store
/y0 y v get bfs th add sub store
x0 y0 moveto
(  !      DX,DY,DZ      - Forces returned) p n
(  !      BNBND,BIMAG   - Nonbond and Images data structure bases) N
(  !      NDD1            The dimension of the second derivative matrix.) N
(  !      DD1           - Second derivative arrays) N
(  !      QSECD         - Second derivative flags) N
(  !      ICALL         - ECALLS increment) N
(!) N
(  use chm_types, only : nonbondDataStructure, imageDataStructure) N
(  use chm_kinds) N
(!) N
(  real\(chm_real\) X\(*\),Y\(*\),Z\(*\)) N
(  real\(chm_real\) DX\(*\),DY\(*\),DZ\(*\)) N
(!) N
(  type\(nonbondDataStructure\) BNBND) N
(  type\(imageDataStructure\) BIMAG) N
(!) N
(  INTEGER NDD1, ICALL) N
(  real\(chm_real\) DD1\(*\)) N
(  LOGICAL QSECD) N
(!) N
( END SUBROUTINE ENERGY) N
(!***************************************************************) N
(      SUBROUTINE UPDECI\(ISTEP,X,Y,Z,WMAIN, &) N
(                        LDYNAM,XOLD,YOLD,ZOLD,VX,VY,VZ\)) N
(!-----------------------------------------------------------------------) N
(! By Stefan Fischer.) N
(!) N
(! Makes the decision whether to update the various non-bond lists.) N
(!) N
(! UPDECI\(\) is controled through INBFRQ \(in CONTRL.FCM\)) N
(!  and ISTEP as follows :) N
(!) N
(! If INBFRQ = +n --> non-bond list is performed when MOD\(ISTEP,n\) == 0) N
(!                    Image and H-bond lists are updated according to) N
(!                    IMGFRQ and IHBFRQ.) N
(! If INBFRQ =  0 --> non-bond list update is not performed. Image and) N
(!                    H-bond lists are updated according to IMGFRQ) N
(!                    and IHBFRQ.) N
(! If INBFRQ = -n --> non-bond list is updated when necessary \(heuristic) N
(!                    test\) if n=-1. If n < -1, then update-testing is done) N
(!                    every n steps \(not recommended !\). Heuristic will) N
(!                    be used for Image and H-bond list-updates, but only) N
(!                    if IMGFRQ and IHBFRQ are also = -1 .) N
(!) N
(! Passed variables) N
(      use chm_kinds) N
(!) N
(      INTEGER ISTEP) N
(      real\(chm_real\) X\(*\),Y\(*\),Z\(*\),WMAIN\(*\)) N
(      INTEGER LDYNAM) N
(      real\(chm_real\) XOLD\(*\),YOLD\(*\),ZOLD\(*\),VX\(*\),VY\(*\),VZ\(*\)) N
(!) N
(      END SUBROUTINE UPDECI) N
(!***************************************************************) N
(!) N
(      end interface) N
(#endif) N
(!) N
(      data whoami/' FTSM_MINI>'/) N
(!) N
(! check if the user has made an initialization call to the minimizer) N
(!) N
(      if \(.not.ftsm_mini_initialized\) then) N
(       __WRN\( whoami,'NO MINIMIZATION OPTIONS SELECTED. NOTHING DONE.'\)) N
(       return) N
(      endif) N
(!) N
(!      qroot =MPI_COMM_STRNG.ne.MPI_COMM_NULL.and.SIZE_STRNG.gt.1) N
(!      qslave=MPI_COMM_LOCAL.ne.MPI_COMM_NULL.and.SIZE_LOCAL.gt.1) N
(ftsm.ftn) (Page 76/90) (Apr 16, 13 16:43) title
border
grestore
(Printed by surgeon) rhead
(ftsm.ftn) (38/45) (Wednesday May 01, 2013) footer
end % of iso1dict
pagesave restore
showpage
%%Page: (77-78) 39
%%BeginPageSetup
/pagesave save def
sh 0 translate 90 rotate
%%EndPageSetup
iso1dict begin
gsave
llx lly 12 add translate
/v 0 store
/x0 x v get 3.147420 add sx cw mul add store
/y0 y v get bfs th add sub store
x0 y0 moveto
(      qprint=MPI_COMM_STRNG.ne.MPI_COMM_NULL.and.ME_STRNG.eq.0) p n
(!) N
(#ifdef __CHARMM) N
(! initialize nbond data structure on first use) N
(      if \(.not.ftsm_nbond_image_data_initialized\) then) N
(       call DUPLDT_nbond\(ftsm_nbond_copy, nbond_data\)) N
(       call DUPLDT_image\(ftsm_image_copy, image_data\)) N
(       ftsm_nbond_image_data_initialized=.true.) N
(      endif) N
(#endif) N
(!) N
(      if \(qprint\) then) N
(       write\(_MSGBUF,691\) whoami ; __PRINTL\(_MSGBUF,5\)) N
(      endif) N
( 691  format\(/A,' PERFORMING STRING MINIMIZATION.'\)) N
(!) N
(!    create coordinate arrays) N
(!) N
(      ow=>orientWeights) N
(      r_com=>rcom\(:,instant\)) N
(      roi=>r_o\(:,:,instant\)) N
(      roc=>r_o\(:,:,center\)) N
(      rfc=>r_f\(:,:,center\)) N
(      roc_rot=>r_o\(:,:,center_rot\)) N
(      rfc_rot=>r_f\(:,:,center_rot\)) N
(      natom=size\(x,1\)) N
(! write\(0,*\) 'natom:', natom) N
(! use instantaneous coordinates to fill missing coords) N
(! save forces:) N
(#ifdef __CHARMM) N
(      saveforces=present\(fx\).and.present\(fy\).and.present\(fz\)) N
(      if \(saveforces\) then ; do i=1, natom ;  fxt\(i\)=fx\(i\) ;  fyt\(i\)=fy\(i\) ;  fz) N
(t\(i\)=fz\(i\) ; enddo ; endif) N
(#endif) N
(!) N
(      do i=1, natom ;  xt\(i\)=x\(i\) ;  yt\(i\)=y\(i\) ;  zt\(i\)=z\(i\) ; enddo) N
(      stringatoms=0;) N
(! copy string coordinates to corresponding instantaneous coordinates) N
(! first, align string coordinates with the instantaneous coordinates, if needed) N
(!) N
(      if \(.not. restrained_on\) then ! load coordinates, unless restraints on, in) N
( which case, they are loaded) N
(!) N
(       if \(qorient\) then) N
(        do k=1,norient) N
(          ind=iatom_o\(k\)) N
(          roi\(k,1\)=xt\(ind\)) N
(          roi\(k,2\)=yt\(ind\)) N
(          roi\(k,3\)=zt\(ind\)) N
(        enddo) N
(!) N
(!       translate forced atoms to centroid) N
(!) N
(        r_com\(:\)=0d0;) N
(        do j=1,3 ; do k=1, norient;) N
(          r_com\(j\) = r_com\(j\)+ow\(k\)*roi\(k,j\)) N
(        enddo ;    enddo) N
(!) N
(        roi\(:,1\)=roi\(:,1\)-r_com\(1\)) N
(        roi\(:,2\)=roi\(:,2\)-r_com\(2\)) N
(        roi\(:,3\)=roi\(:,3\)-r_com\(3\)) N
(!) N
(       endif ! qorient) N
(      endif ! .not. restrained on) N
(!) N
(      if \(qorient\) then ! orient center image w.r.t. instantaneous coordinates) N
(       call RMSBestFit\(roi,roc,ow,u\) ! superpose roi onto roc \(assuming string i) N
(s COM-free\)) N
(!) N
(ftsm.ftn) (Page 77/90) (Apr 16, 13 16:43) title
border
/v 1 store
/x0 x v get 3.147420 add sx cw mul add store
/y0 y v get bfs th add sub store
x0 y0 moveto
(       rfc_rot = matmul\(rfc, u\) !          apply transpose \(=inverse\) of u to rf) p n
(c) N
(       rfc_rot\(:,1\)=rfc_rot\(:,1\)+r_com\(1\)) N
(       rfc_rot\(:,2\)=rfc_rot\(:,2\)+r_com\(2\)) N
(       rfc_rot\(:,3\)=rfc_rot\(:,3\)+r_com\(3\)) N
(!) N
(       if \(qdiffrot\) then) N
(        roc_rot = matmul\(roc, u\) !          apply transpose \(=inverse\) of u to r) N
(oc) N
(!     move to COM of the instantaneous coordinates) N
(        roc_rot\(:,1\)=roc_rot\(:,1\)+r_com\(1\)) N
(        roc_rot\(:,2\)=roc_rot\(:,2\)+r_com\(2\)) N
(        roc_rot\(:,3\)=roc_rot\(:,3\)+r_com\(3\)) N
(!     insert orientation coordinates into all-atom coordinate array) N
(        do k=1,norient) N
(         ind=iatom_o\(k\)) N
(         x\(ind\)=roc_rot\(k,1\)) N
(         y\(ind\)=roc_rot\(k,2\)) N
(         z\(ind\)=roc_rot\(k,3\)) N
(         stringatoms\(ind\)=-1 ! these coordinates are fixed through all minimizat) N
(ion \(unless they are also forced atoms\)) N
(        enddo) N
(       endif ! qdiffrot) N
(      else ! no orientation) N
(       rfc_rot=>rfc) N
(      endif ! qorient) N
(!) N
(!     insert forced coordinates into all-atom coordinate array) N
(!) N
(      do k=1,nforced) N
(       ind=iatom_f\(k\)) N
(       x\(ind\)=rfc_rot\(k,1\)) N
(       y\(ind\)=rfc_rot\(k,2\)) N
(       z\(ind\)=rfc_rot\(k,3\)) N
(       stringatoms\(ind\)=1 ! these coordinates will be minimized \(but at the end\)) N
(      enddo) N
(!) N
(! perform minimization with string coordinates fixed) N
(!) N
(#ifdef __CHARMM) N
(      wt=wmain) N
(      qshake=qholo ; if \(qholo\) qholo=.false. ! turn off shake for speed) N
(      eprop_save=eprop ; eterm_save=eterm  ! save current energy value, since CH) N
(ARMM uses it to determine stability) N
(      wrnlev_=wrnlev ! save warning level) N
(#endif) N
(!) N
(      mini_step=ftsm_mini_step ! initial minimization step) N
(!) N
(      nbath=ithree*count\(stringatoms.eq.0\) ;  if \(nbath.gt.0\) oonbath=one/nbath ) N
(; ) N
(      nfree=ithree*count\(stringatoms.ne.-1\) ; if \(nfree.gt.0\) oonfree=one/nfree ) N
(; ) N
(!) N
(      if \(nbath.eq.0\) then ; ibeg = ftsm_mini_bath_iterations+1 ; else ; ibeg=1 ) N
(; endif ! skip bath iterations is there are no bath atoms) N
(!) N
(      do iter=ibeg, ftsm_mini_bath_iterations+ftsm_mini_forced_iterations) N
(#ifdef __CHARMM) N
(       call UPDECI\(iter, x, y, z, wt, 0, dummy, dummy, dummy, dummy, dummy, dumm) N
(y\) ! following calling format in SD) N
(       call ENERGY\(x, y, z, dxt, dyt, dzt, ftsm_nbond_copy, ftsm_image_copy, 0, ) N
(dummy, .false., 1\)) N
(       energy_new=eprop\(epot\)) N
(#endif) N
(! SD hardwired for now:) N
(!    adaptive minimization strategy  \(a la CHARMM\)) N
(!) N
(       if \(iter .eq. ftsm_mini_bath_iterations+1\) then) N
(ftsm.ftn) (Page 78/90) (Apr 16, 13 16:43) title
border
grestore
(Printed by surgeon) rhead
(ftsm.ftn) (39/45) (Wednesday May 01, 2013) footer
end % of iso1dict
pagesave restore
showpage
%%Page: (79-80) 40
%%BeginPageSetup
/pagesave save def
sh 0 translate 90 rotate
%%EndPageSetup
iso1dict begin
gsave
llx lly 12 add translate
/v 0 store
/x0 x v get 3.147420 add sx cw mul add store
/y0 y v get bfs th add sub store
x0 y0 moveto
(__CHARMM_ONLY        wrnlev=wrnlev_ ! restore old level \(works only is siter>0\)) p n
(        mini_step=ftsm_mini_step                                        ! reset ) N
(step for string minimization) N
(       elseif \(energy_new .lt. energy_old .and. iter .gt. ibeg\) then ) N
(__CHARMM_ONLY        wrnlev=-1 ! turn off warnings for the first part of minimiz) N
(ation) N
(        mini_step=mini_step*1.5d0 ! accelerate) N
(       else) N
(        mini_step=mini_step*half  ! decelerate) N
(       endif) N
(       energy_old=energy_new) N
(!) N
(! note that the evolution is not parallel) N
(       if \(iter.le.ftsm_mini_bath_iterations\) then) N
(! first, minimize the instantaneous atoms with the string atoms fixed) N
(        where\(stringatoms.ne.0\) ! zero out gradients corresponding to string ato) N
(ms) N
(         dxt=zero ; dyt=zero; dzt=zero) N
(        endwhere) N
(        gradnorm  = sqrt \( \( dot_product\(dxt,dxt\)+dot_product\(dyt,dyt\)+dot_produ) N
(ct\(dzt,dzt\) \) * oonbath\)) N
(!) N
(       else ! now minimize all coordinates except the string orientation coordin) N
(ates) N
(        where\(stringatoms.eq.-1\) ! gradients on orientation atoms zero-ed) N
(         dxt=zero ; dyt=zero; dzt=zero) N
(        endwhere) N
(        gradnorm  = sqrt \( \( dot_product\(dxt,dxt\)+dot_product\(dyt,dyt\)+dot_produ) N
(ct\(dzt,dzt\) \) * oonfree\)) N
(       endif) N
(!) N
(       norm_step = mini_step/max\(gradnorm,__ERRTOL\) ! using __ERRTOL might lead ) N
(to oscillations) N
(       x = x - norm_step * dxt) N
(       y = y - norm_step * dyt) N
(       z = z - norm_step * dzt) N
(!) N
(!write\(0,*\) 'step: ', iter, mini_step, norm_step, oonfree, oonbath) N
(!) N
(      enddo ! iterations) N
(!) N
(!     put minimized string coordinates back into r_f array) N
(      do k=1,nforced) N
(        ind=iatom_f\(k\)) N
(        rfc_rot\(k,1\)=x\(ind\)) N
(        rfc_rot\(k,2\)=y\(ind\)) N
(        rfc_rot\(k,3\)=z\(ind\)) N
(      enddo) N
(!) N
(      if \(qorient\) then) N
(        u=transpose\(u\)) N
(        rfc = matmul\(rfc_rot, u\) ! rotate back for consistency) N
(        if \(qdiffrot\) call ftsm_update_overlap_coor\(ione\) ! update orientation c) N
(oordinates) N
(      endif) N
(!) N
(      call ftsm_save_com\(\) !   remove COM from center coordinates) N
(!) N
(      do i=1, natom ;  x\(i\)=xt\(i\) ;  y\(i\)=yt\(i\) ;  z\(i\)=zt\(i\) ; enddo ! restore ) N
(original coordinates) N
(!) N
(#ifdef __CHARMM) N
(      if \(saveforces\) then ; do i=1, natom ;  fx\(i\)=fxt\(i\) ;  fy\(i\)=fyt\(i\) ;  fz) N
(\(i\)=fzt\(i\) ; enddo ; endif ! restore forces) N
(      eprop=eprop_save ; eterm=eterm_save  ! restore current energy values) N
(      qholo=qshake) N
(      wrnlev=wrnlev_) N
(#endif) N
(!) N
(ftsm.ftn) (Page 79/90) (Apr 16, 13 16:43) title
border
/v 1 store
/x0 x v get 3.147420 add sx cw mul add store
/y0 y v get bfs th add sub store
x0 y0 moveto
(      end subroutine ftsm_mini) p n
(!ccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccc) N
(cccccccccccccccccc) N
(      subroutine ftsm_lift\(x, y, z\)) N
(!) N
(      __DEP_PARSER ) N
(      __DEP_MULTICOM       !__CHARMM_ONLY##MULTICOM) N
(      __DEP_OUTPUT) N
(      __DEP_NUMBER) N
(!) N
(      __IMPNONE) N
(      float :: x\(:\), y\(:\), z\(:\)) N
(!) N
(! local variables) N
(      character\(len=11\) :: whoami) N
(!) N
(      float :: u\(3,3\)= RESHAPE\( \(/1,0,0,0,1,0,0,0,1/\), \(/3,3/\) \) ! rotation matr) N
(ix) N
(      float, pointer :: r_com\(:\), ow\(:\)) N
(      float, pointer, dimension\(:,:\) :: roi, roc, rfc, roc_rot, rfc_rot) N
(      float :: w) N
(!) N
(      int :: i, j, k, ierror) N
(!) N
(      int :: natom, ind, iter) N
(!) N
( __DECLARE_MSGBUF) N
(!) N
(      data whoami/' FTSM_LIFT>'/) N
(!) N
(! check if the user has made an initialization call to the minimizer) N
(!) N
(      if \(.not.ftsm_check\(qorient\)\) return) N
(!) N
(!    create coordinate arrays) N
(!) N
(      ow=>orientWeights) N
(      r_com=>rcom\(:,instant\)) N
(      roi=>r_o\(:,:,instant\)) N
(      roc=>r_o\(:,:,center\)) N
(      rfc=>r_f\(:,:,center\)) N
(      roc_rot=>r_o\(:,:,center_rot\)) N
(      rfc_rot=>r_f\(:,:,center_rot\)) N
(      natom=size\(x,1\)) N
(! copy string coordinates to corresponding instantaneous coordinates) N
(! first, align string coordinates with the instantaneous coordinates, if needed) N
(!) N
(      if \(qorient\) then) N
(        do k=1,norient) N
(          ind=iatom_o\(k\)) N
(          roi\(k,1\)=x\(ind\)) N
(          roi\(k,2\)=y\(ind\)) N
(          roi\(k,3\)=z\(ind\)) N
(        enddo) N
(!) N
(!       translate forced atoms to centroid) N
(!) N
(        r_com\(:\)=0d0;) N
(        do j=1,3 ; do k=1, norient;) N
(          r_com\(j\) = r_com\(j\)+ow\(k\)*roi\(k,j\)) N
(        enddo ;    enddo) N
(!) N
(        roi\(:,1\)=roi\(:,1\)-r_com\(1\)) N
(        roi\(:,2\)=roi\(:,2\)-r_com\(2\)) N
(        roi\(:,3\)=roi\(:,3\)-r_com\(3\)) N
(!) N
(      endif ! qorient) N
(!) N
(      if \(qorient\) then ! orient center image w.r.t. instantaneous coordinates) N
(ftsm.ftn) (Page 80/90) (Apr 16, 13 16:43) title
border
grestore
(Printed by surgeon) rhead
(ftsm.ftn) (40/45) (Wednesday May 01, 2013) footer
end % of iso1dict
pagesave restore
showpage
%%Page: (81-82) 41
%%BeginPageSetup
/pagesave save def
sh 0 translate 90 rotate
%%EndPageSetup
iso1dict begin
gsave
llx lly 12 add translate
/v 0 store
/x0 x v get 3.147420 add sx cw mul add store
/y0 y v get bfs th add sub store
x0 y0 moveto
(       call RMSBestFit\(roi,roc,ow,u\) ! superpose roi onto roc \(assuming string i) p n
(s COM-free\)) N
(!) N
(       rfc_rot = matmul\(rfc, u\) !          apply transpose \(=inverse\) of u to rf) N
(c) N
(       rfc_rot\(:,1\)=rfc_rot\(:,1\)+r_com\(1\)) N
(       rfc_rot\(:,2\)=rfc_rot\(:,2\)+r_com\(2\)) N
(       rfc_rot\(:,3\)=rfc_rot\(:,3\)+r_com\(3\)) N
(!) N
(       if \(qdiffrot\) then) N
(!     move to COM of the instantaneous coordinates) N
(        roc_rot = matmul\(roc, u\) !          apply transpose \(=inverse\) of u to r) N
(oc) N
(        roc_rot\(:,1\)=roc_rot\(:,1\)+r_com\(1\)) N
(        roc_rot\(:,2\)=roc_rot\(:,2\)+r_com\(2\)) N
(        roc_rot\(:,3\)=roc_rot\(:,3\)+r_com\(3\)) N
(!     insert orientation coordinates into all-atom coordinate array) N
(        do k=1,norient) N
(         ind=iatom_o\(k\)) N
(         x\(ind\)=roc_rot\(k,1\)) N
(         y\(ind\)=roc_rot\(k,2\)) N
(         z\(ind\)=roc_rot\(k,3\)) N
(        enddo) N
(       endif ! qdiffrot) N
(      else ! no orientation) N
(       rfc_rot=>rfc) N
(      endif ! qorient) N
(!) N
(!     insert forced coordinates into all-atom coordinate array) N
(!) N
(      do k=1,nforced) N
(        ind=iatom_f\(k\)) N
(        x\(ind\)=rfc_rot\(k,1\)) N
(        y\(ind\)=rfc_rot\(k,2\)) N
(        z\(ind\)=rfc_rot\(k,3\)) N
(      enddo) N
(!) N
(      end subroutine ftsm_lift) N
(!ccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccc) N
(ccccccccccccccccc) N
(      subroutine ftsm_repa\(qbcast\)) N
(      __DEP_PARSER ) N
(      __DEP_MULTICOM       !__CHARMM_ONLY##MULTICOM) N
(      __DEP_MPI ) N
(      __DEP_OUTPUT) N
(      __DEP_NUMBER) N
(      __DEP_CONST) N
(!) N
(      __IMPNONE) N
(! local variables) N
(      character\(len=11\) :: whoami) N
(      bool :: qroot, qslave, qprint) N
(      bool, optional :: qbcast) N
(      float :: u\(3,3\)= RESHAPE\( \(/one,zero,zero,zero,one,zero,zero,zero,one/\), \() N
(/3,3/\) \) ! rotation matrix) N
(      float, pointer :: r_o_com\(:\) ! COM vector) N
(      float, pointer, dimension\(:,:\) :: ro, rf, ro1, rf1) N
(      float :: w) N
(      float :: weights\(nforced,3\) ! assuming nforced is reasonably defined) N
(      int4mpi :: RTYPE=MPI_DOUBLE_PRECISION) N
(      int4mpi :: stat\(MPI_STATUS_SIZE\)) N
(      int :: i, ierror) N
(!) N
( __DECLARE_MSGBUF) N
(!) N
(      interface) N
(        subroutine interp_driver_sci\(rin,rout,wgt,n,                    &) N
(     &   interp_method,tol,max_iterations,d_arclength, curvature,       &) N
(     &   dst_cutoff, dr,r_bc_0, r_bc_1\)) N
(ftsm.ftn) (Page 81/90) (Apr 16, 13 16:43) title
border
/v 1 store
/x0 x v get 3.147420 add sx cw mul add store
/y0 y v get bfs th add sub store
x0 y0 moveto
(      __CHARMM_ONLY __DEP_KINDS) p n
(      __DEP_OUTPUT) N
(        int n) N
(        float rin\(n\), rout\(n\), wgt\(n\)) N
(        int, intent\(in\) ::  interp_method) N
(        int max_iterations) N
(        float :: tol, d_arclength\(:\), curvature\(:\)) N
(        float, optional :: dst_cutoff) N
(        float, optional :: dr\(n\) ,r_bc_0\(n\), r_bc_1\(n\)) N
(        end subroutine interp_driver_sci) N
(!) N
(        subroutine interp_linear_exact\(rin,rout,wgt,n,                  &) N
(     &   d_arclength, curvature,                                        &) N
(     &   drout,                                                         &) N
(     &   r_bc_0, r_bc_1\)) N
(      __CHARMM_ONLY __DEP_KINDS) N
(        int :: n) N
(        float :: rin\(n\), rout\(n\), wgt\(n\)) N
(        float :: d_arclength\(:\), curvature\(:\)) N
(        float, optional :: drout\(n\) ! optional computation of tangent) N
(        float , optional :: r_bc_0\(n\), r_bc_1\(n\)   ! optional fixed bc data) N
(       end subroutine interp_linear_exact) N
(!) N
(      end interface) N
(!) N
(      data whoami/' FTSM_REPA>'/) N
(!) N
(!) N
(      qroot =MPI_COMM_STRNG.ne.MPI_COMM_NULL.and.SIZE_STRNG.gt.1) N
(      qslave=MPI_COMM_LOCAL.ne.MPI_COMM_NULL.and.SIZE_LOCAL.gt.1) N
(      qprint=MPI_COMM_STRNG.ne.MPI_COMM_NULL.and.ME_STRNG.eq.0) N
(!) N
(      if \(present\(qbcast\)\) qslave=qslave.and.qbcast ! in case qbcast false do no) N
(t broadcast to slaves) N
(!) N
(! check if the user has made an initialization call) N
(!) N
(      if \(.not.repa_initialized\) then) N
(       __WRN\( whoami,'NO REPARAMETRIZATION OPTIONS SELECTED. NOTHING DONE.'\)) N
(       return) N
(      endif) N
(      if \(qprint\) then) N
(       write\(_MSGBUF,690\) whoami ; __PRINTL\(_MSGBUF,5\)) N
(      endif) N
( 690  format\(/A,' PERFORMING STRING REPARAMETRIZATION.'\)) N
(!) N
(! shorthand) N
(      rf => r_f\(:,:,center\)) N
(      ro  => r_o\(:,:,center\)) N
(      ro1 => r_o\(:,:,dummy\)) N
(      r_o_com=>rcom\(:,center\)) N
(!) N
(      if \(qroot\) then) N
(!) N
(       if \(qorient\) then) N
(!       translate structure to centroid) N
(!       note: this should not be needed because the structure should always be k) N
(ept COM-free) N
(!       but is kept in case things change in the future \(overhead of repa is sma) N
(ll\)) N
(        r_o_com=zero) N
(        do i=1, norient) N
(         w=orientWeights\(i\)) N
(         r_o_com\(1\)=r_o_com\(1\) + w * ro\(i,1\)) N
(         r_o_com\(2\)=r_o_com\(2\) + w * ro\(i,2\)) N
(         r_o_com\(3\)=r_o_com\(3\) + w * ro\(i,3\)) N
(        enddo) N
(! orientation atoms ! comment out to avoid unneeded roudoff with qdiffrot=false) N
(!        ro\(:,1\)=ro\(:,1\)-r_o_com\(1\)) N
(ftsm.ftn) (Page 82/90) (Apr 16, 13 16:43) title
border
grestore
(Printed by surgeon) rhead
(ftsm.ftn) (41/45) (Wednesday May 01, 2013) footer
end % of iso1dict
pagesave restore
showpage
%%Page: (83-84) 42
%%BeginPageSetup
/pagesave save def
sh 0 translate 90 rotate
%%EndPageSetup
iso1dict begin
gsave
llx lly 12 add translate
/v 0 store
/x0 x v get 3.147420 add sx cw mul add store
/y0 y v get bfs th add sub store
x0 y0 moveto
(!        ro\(:,2\)=ro\(:,2\)-r_o_com\(2\)) p n
(!        ro\(:,3\)=ro\(:,3\)-r_o_com\(3\)) N
(! forced atoms) N
(        if \(qdiffrot\) then) N
(         rf\(:,1\)=rf\(:,1\)-r_o_com\(1\)) N
(         rf\(:,2\)=rf\(:,2\)-r_o_com\(2\)) N
(         rf\(:,3\)=rf\(:,3\)-r_o_com\(3\)) N
(        endif) N
(!) N
(!ccccccccccc orientation ccccccc) N
(!      send/receive orientation structure) N
(!      this is a slow procedure, as the orientation is done) N
(!      sequentially) N
(!) N
(        if \(mestring.gt.0\) then) N
(         call MPI_RECV\(ro1,3*norient,rtype,mestring-1, 1,               &) N
(     &        MPI_COMM_STRNG, stat, ierror\)) N
(!       orient current structure) N
(         call RMSBestFit\(ro,ro1,orientWeights,u\)) N
(!       transform current structure to overlap with reference) N
(!       \(if orientation is off, u=I\)) N
(         if \(.not.qdiffrot\) ro1=>rf) N
(         ro1\(:,1\)=ro\(:,1\)-r_o_com\(1\)) N
(         ro1\(:,2\)=ro\(:,2\)-r_o_com\(2\)) N
(         ro1\(:,3\)=ro\(:,3\)-r_o_com\(3\)) N
(!) N
(         u=transpose\(u\)) N
(         ro1=matmul\(ro1,u\)) N
(         if \(qdiffrot\) rf=matmul\(rf,u\)) N
(!) N
(        else ! first replica enters below) N
(!         ro1=>ro ! make sure 1st replica sends the center, not dummy coords) N
(! technically, the above line is correct \(since ro is com-free; com is never sub) N
(tracted with qdiffrot=false above\)) N
(! however, conceptually, the COM _should_ be subtracted as in the loop above \(e.) N
(g. note ro1=>rf, which can modify both rf and ro\)) N
(! I also do not like the fact that the code below involves copying, which slows ) N
(down the first replica!) N
(         if \(.not.qdiffrot\) ro1=>rf ! will remove the COM from actual ro/rf coor) N
(dinates below \(they are modified anyway by interp\)) N
(         ro1\(:,1\)=ro\(:,1\)-r_o_com\(1\)) N
(         ro1\(:,2\)=ro\(:,2\)-r_o_com\(2\)) N
(         ro1\(:,3\)=ro\(:,3\)-r_o_com\(3\)) N
(        endif ! mestring) N
(!) N
(        if \(mestring.lt.nstring-1\) then) N
(         call mpi_send\(ro1,3*norient,rtype,mestring+1, 1,               &) N
(     &        MPI_COMM_STRNG, ierror\)) N
(        endif ! me) N
(       endif ! qorient) N
(!cccccccccccccc now call the appropriate interpolation subroutine) N
(       weights\(:,1\)=forcedWeights) N
(       weights\(:,2\)=forcedWeights) N
(       weights\(:,3\)=forcedWeights) N
(!) N
(       if \(interp_method.eq.linear_exact\) then) N
(        call interp_linear_exact\(rf,rf,weights,3*nforced,ds,curv\)) N
(       else) N
(        call interp_driver_sci\(rf,rf,weights,3*nforced,                 &) N
(     &   interp_method,def,iterations,ds,curv,dst_cutoff\)) N
(       endif) N
(!) N
(       if \(qorient\) then) N
(        u=transpose\(u\)) N
(        if \(mestring.gt.0\) rf=matmul\(rf, u\)    ! rotate back) N
(!     restore original COM) N
(        rf\(:,1\)=rf\(:,1\)+r_o_com\(1\)) N
(        rf\(:,2\)=rf\(:,2\)+r_o_com\(2\)) N
(        rf\(:,3\)=rf\(:,3\)+r_o_com\(3\)) N
(ftsm.ftn) (Page 83/90) (Apr 16, 13 16:43) title
border
/v 1 store
/x0 x v get 3.147420 add sx cw mul add store
/y0 y v get bfs th add sub store
x0 y0 moveto
(!) p n
(       endif ! orient) N
(      endif ! root) N
(!) N
(!    broadcast coordinates to slaves) N
(      if \(qslave\) then ; __BROADCAST_LOCAL_8B\(rf,3*nforced\) ; endif) N
(!    update any orientation coordinates that have changes) N
(      if \(qdiffrot\) call ftsm_update_overlap_coor\(ione\)) N
(!) N
(      call ftsm_save_com\(\)) N
(!) N
(      end subroutine ftsm_repa) N
(!cccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccc) N
(      subroutine ftsm_update_overlap_coor\(which\)) N
(      __IMPNONE) N
(      int :: which) N
(      int :: i) N
(!    copy overlapping coordinates from one set to another) N
(      if \(which.eq.1\) then) N
(       do i=1, nboth) N
(        r_o\(iatom_both\(2,i\), :, center\)=r_f\(iatom_both\(1,i\), :, center\)) N
(       enddo) N
(      elseif \(which.eq.2\) then) N
(       do i=1, nboth) N
(        r_f\(iatom_both\(1,i\), :, center\)=r_o\(iatom_both\(2,i\), :, center\)) N
(       enddo) N
(      elseif \(which.eq.3\) then ! special case of left:right sets all being updat) N
(ed) N
(       do i=1, nboth) N
(        r_o\(iatom_both\(2,i\), :, left:right\)=                            &) N
(     &  r_f\(iatom_both\(1,i\), :, left:right\)) N
(       enddo) N
(      endif) N
(!) N
(      end subroutine ftsm_update_overlap_coor) N
(!) N
(!ccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccc) N
(      subroutine ftsm_repl_exchange\(x,y,z,itime\)) N
(!     attempt to swap restraints that correspond to two adjacent replicas) N
(      use multicom, only: multicom_permute_string_ranks) N
(      use ftsm_rex, only: ftsm_rex_init, rex_initialized, rex_map,      &) N
(     &   rex_log, rex_beta, rex_string_datatype, rex_string_data_mpi) N
(      use ivector, only: int_vector_add) N
(!) N
(      __DEP_MULTICOM       !__CHARMM_ONLY##MULTICOM) N
(      __DEP_CONST ) N
(      __DEP_NUMBER) N
(      __DEP_RANDOM) N
(      __DEP_MDOUT) N
(      __DEP_PARSER ) N
(      __DEP_MPI ) N
(!) N
(      __IMPNONE) N
(#include "../../mpitype.def") N
(!) N
(      float :: x\(:\), y\(:\), z\(:\) ! mass\(size\(x,1\)\)) N
(      int :: itime) N
(!) N
(      int :: i, j, ibeg, iend, stat\(MPI_STATUS_SIZE\)) N
(      int4mpi :: ierror) N
(      integer\(KIND=MPI_ADDRESS_KIND\) :: lb, extent) N
(      bool :: deriv, qendpoint, qgrp, qvalid) N
(!) N
(      int :: which   ! replica with which the exchange was attempted) N
(      bool :: success ! whether the exchange attempt was successful) N
(      int :: nodelist\(nstring\) ! holds new string replica order after exchange a) N
(ttempt) N
(      int :: itype ! MPI_INTEGER type) N
(      int :: ndata, nfiles) N
(ftsm.ftn) (Page 84/90) (Apr 16, 13 16:43) title
border
grestore
(Printed by surgeon) rhead
(ftsm.ftn) (42/45) (Wednesday May 01, 2013) footer
end % of iso1dict
pagesave restore
showpage
%%Page: (85-86) 43
%%BeginPageSetup
/pagesave save def
sh 0 translate 90 rotate
%%EndPageSetup
iso1dict begin
gsave
llx lly 12 add translate
/v 0 store
/x0 x v get 3.147420 add sx cw mul add store
/y0 y v get bfs th add sub store
x0 y0 moveto
(!) p n
(!     variables for exchanging string-dependent properties) N
(      type\(rex_string_datatype\) :: rex_string_data, rex_string_data_new) N
(      float :: dE_me, dE, s, dpar0i, dperp0i, drms0i, dpar_ori,        &) N
(     &                                 dperp_ori, drms_ori, fac) N
(!) N
(      character\(len=150\) :: fnames\(5\)              ! for storing output file nam) N
(es) N
(      character\(len=150\) :: new_fnames\(5\)          ! for storing swapped file na) N
(mes) N
(      bool :: openun\(5\), qform, qwrite) N
(      int :: oldiol) N
(!) N
(      float, pointer, dimension\(:,:,:\) :: r_f2, r_o2, r_f3, r_o3) N
(!) N
(      character\(len=20\) :: whoami) N
(      data whoami /' FTSM_REPL_EXCHANGE>'/) N
(!) N
(      if \(.not.rex_initialized\) call ftsm_rex_init\(\)) N
(!) N
(      if \(.not.ftsm_check\(qorient\)\) return) N
(      if \(.not.restrained_on\) return      ! restrained dynamics required) N
(!) N
(      qgrp=\(MPI_COMM_LOCAL.ne.MPI_COMM_NULL\)                            &) N
(     &  .and.\(SIZE_LOCAL.gt.1\)) N
(!) N
(      deriv=.false. ! do not compute derivatives) N
(      dE=zero) N
(      success=.false.) N
(!) N
(!     determine exchange partner) N
(      if \(MPI_COMM_STRNG.ne.MPI_COMM_NULL\) then) N
(       if \(ME_STRNG.eq.0\) which=INT\(__RANDOMU\(__SEED\)*2d0\) ! either 0 or 1) N
(       call MPI_BCAST\(which, 1, mpiint, 0, MPI_COMM_STRNG, ierror\)     ! string ) N
(root broadcasts to all replicas) N
(!    determine whether swapping w. left \(-1\) or w. right \(+1\) neighbor & calcula) N
(te rank of neighbor) N
(       which=ME_STRNG + \(mod\(ME_STRNG + which, itwo\)*itwo - ione\)) N
(!      if which == 0, then: -1, 2, 1, 4, 3, ...) N
(!      if which == 1, then:  1, 0, 3, 2, ...) N
(!      communicate:) N
(       qvalid=\(which.ge.0\).and.\(which.lt.SIZE_STRNG\)) N
(       if \(qvalid\) then) N
(!     store reference values in dummy) N
(!     need to store all replica-dependent parameters) N
(        rex_string_data%dpar0 = dpar0;) N
(        rex_string_data%dperp0= dperp0;) N
(        rex_string_data%drms0 = drms0;) N
(        rex_string_data%kpara = kpara;) N
(        rex_string_data%kperp = kperp;) N
(        rex_string_data%krms  = krms;) N
(        rex_string_data%evolve_expo_mem = evolve_expo_mem;) N
(        rex_string_data%num_evolve_samples = num_evolve_samples;) N
(        rex_string_data%avforce = avforce) N
(        rex_string_data%ftsm_mini_on = ftsm_mini_on) N
(        rex_string_data%evolve_expo_on = evolve_expo_on) N
(        rex_string_data%evolve_aver_on = evolve_aver_on) N
(!) N
(!     send/receive) N
(!     allocate storage for new restraints) N
(        allocate\(r_f2\(nforced,3,num_sets\)\)) N
(        ndata=3*\(nforced*9\) ! number of reals to send) N
(        call MPI_SENDRECV\(r_f, ndata, mpifloat,             & ! send almost ever) N
(ything) N
(     &   which, which, r_f2, ndata, mpifloat,               & ! put into the sam) N
(e array, starting at position 11) N
(     &   which, ME_STRNG, MPI_COMM_STRNG, stat, ierror\)) N
(        if \(qorient\) then) N
(         if \(qdiffrot\) then ! orientation atoms) N
(ftsm.ftn) (Page 85/90) (Apr 16, 13 16:43) title
border
/v 1 store
/x0 x v get 3.147420 add sx cw mul add store
/y0 y v get bfs th add sub store
x0 y0 moveto
(!     allocate storage for new restraints) p n
(          allocate\(r_o2\(nforced,3,num_sets\)\)) N
(          ndata=27*norient) N
(          call MPI_SENDRECV\(r_o, ndata, mpifloat,           &) N
(     &    which, which, r_o2, ndata, mpifloat,              &) N
(     &    which, ME_STRNG, MPI_COMM_STRNG, stat, ierror\)) N
(         else) N
(          r_o2=>r_f2) N
(         endif ! qdiffrot) N
(        endif ! qorient) N
(! also exchange string image properties) N
(        call MPI_SENDRECV\(rex_string_data, 1, rex_string_data_mpi, which, which,) N
( & ) N
(     &                    rex_string_data_new, 1, rex_string_data_mpi, which, ME) N
(_STRNG,&) N
(     &                    MPI_COMM_STRNG, stat, ierror\)) N
() N
(! NOTE: in the above communication it is essential to have certain sets adjacent) N
(, as indicated by numbering in fts_var; do not break this) N
(!     calculate new string energies) N
(        dpar_ori=dpar; dperp_ori=dperp; drms_ori=drms; ! first, save this replic) N
(a's projection values) N
(!     swap arrays:) N
(        r_f3=>r_f; r_o3=>r_o ! save in case move is rejected) N
(        r_f=>r_f2; r_o=>r_o2 ! point to new array) N
(!    call calculation) N
(!    consider the possibility that equilibration is underway:) N
(        if \(restrained_eq_steps.gt.0\) then) N
(         s=one*\(itime-restrained_eq0\)/restrained_eq_steps ; s=min\(one,max\(zero,s) N
(\)\)) N
(        else) N
(         s=one) N
(        endif ! restrained equilibration is on) N
(!) N
(        deriv=.false. ! skip derivative calculation) N
(        call ftsm_calc\(x,y,z,deriv,s\) ! will compute new dpar, dperp, drms) N
(!) N
(!    calculate energies \(adapted from _addforce\):) N
(!) N
(        if \(proj_on\) then) N
(! restraint force parallel to string) N
(         qendpoint=\(which.eq.0.or.which.eq.nstring-1\)) N
(         if \(qendpoint\) then ; fac=half ; else ; fac=one  ; endif) N
(! compare energies \(NOTE: in this version of REX, I am sending reference values,) N
( NOT coordinates\)) N
(!    new energy) N
(         dE_me =  rex_string_data_new%kpara * fac * fac * \( dpar-rex_string_data) N
(_new%dpar0 \)**2               & ! scale down the force constant of endpoints \(on) N
(e for d, one for gradients\)) N
(     &         +  rex_string_data_new%kperp * fac * max   \( fac * dperp - rex_st) N
(ring_data_new%dperp0, zero \)**2 ! ignore negative values; dperp0 criterion in in) N
(ner-replica d-metric) N
(!    old energy) N
(         qendpoint=\(mestring.eq.0.or.mestring.eq.nstring-1\)) N
(         if \(qendpoint\) then ; fac=half ; else ; fac=one  ; endif) N
(!) N
(         dE_me =  dE_me                                                 &) N
(     &        - kpara * fac * fac * \( dpar_ori-dpar0 \)**2               &) N
(     &        - kperp * fac * max   \( fac * dperp_ori - dperp0, zero \)**2) N
() N
(        else ! .not.  proj_on) N
(         dE_me = rex_string_data_new%krms * \( \( drms-rex_string_data_new%drms0 \)) N
(**2 - \( drms_ori-drms0 \)**2 \)) N
(        endif) N
(!) N
(!    combine energies from two replicas:) N
(        call MPI_SENDRECV\(dE_me, 1, mpifloat,               &) N
(     &   which, which, dE, 1, mpifloat,                     &) N
(     &   which, ME_STRNG, MPI_COMM_STRNG, stat, ierror\)) N
(ftsm.ftn) (Page 86/90) (Apr 16, 13 16:43) title
border
grestore
(Printed by surgeon) rhead
(ftsm.ftn) (43/45) (Wednesday May 01, 2013) footer
end % of iso1dict
pagesave restore
showpage
%%Page: (87-88) 44
%%BeginPageSetup
/pagesave save def
sh 0 translate 90 rotate
%%EndPageSetup
iso1dict begin
gsave
llx lly 12 add translate
/v 0 store
/x0 x v get 3.147420 add sx cw mul add store
/y0 y v get bfs th add sub store
x0 y0 moveto
(        dE = half * \( dE+dE_me \)) p n
(!    5\) apply Metropolis criterion) N
(        if \(dE.le.0d0\) then) N
(         success=.true.) N
(        else) N
(!    the higher-rank replica draws random number) N
(!    this may not be correct because the random numbers will not come from the s) N
(ame sequence;) N
(!    may change this later) N
(         if \(which.lt.ME_STRNG\) then) N
(          success=\(__RANDOMU\(__SEED\).le.exp\(-rex_beta*dE\)\)) N
(!     send to othe replica) N
(          call MPI_SEND\(success, 1, mpibool, which, which,          &) N
(     &    MPI_COMM_STRNG, ierror\)) N
(         else) N
(          call MPI_RECV\(success, 1, mpibool, which, ME_STRNG,       &) N
(     &    MPI_COMM_STRNG, stat, ierror\)) N
(         endif ! which lt ME_STRNG) N
(        endif ! apply Metropolis) N
(!) N
(       endif ! qvalid ...) N
(!    all root nodes continue \(success=false for idle node\(s\)\) :) N
(       if \(success\) then) N
(        call MPI_ALLGATHER\(which, 1, mpiint,                             &) N
(     &       nodelist, 1, mpiint, MPI_COMM_STRNG, ierror\)) N
(!) N
(!     make entry in REX log \(only lower-rank replica does this\)) N
(        if \(ME_STRNG.lt.which\) then) N
(          j=ME_STRNG ! possible cast i4=>i8 accommodates in8 compilations) N
(          i=int_vector_add\(rex_log, j\) ! this replica) N
(          i=int_vector_add\(rex_log, which\)    ! exchanged with this replica) N
(          i=int_vector_add\(rex_log, itime + rextime_offset\)    ! at this time) N
(        endif ! ME_STRNG) N
(!) N
(!*******************************************************************************) N
(*************) N
(!     swap restart & traj file info; otherwise restart files will correspond to ) N
(wrong replica) N
(!#ifdef __CHARMM) N
(!        oldiol=iolev) N
(!        iolev=1 ! so that vinqre works) N
(!#endif) N
(!) N
(#ifndef __DMOL) N
(        nfiles=2) N
(!      can add others here) N
(        if \(__RESTART_FILE_UNIT.gt.0\)                                           ) N
(     &) N
(!    CHARMM VINQUIRE gives problems, did not bother to debug, since that code is) N
( obsolete anyway) N
(     &    INQUIRE\(UNIT=__RESTART_FILE_UNIT, OPENED=openun\(1\), NAME=fnames\(1\)\)) N
(!     &   CALL VINQRE\('UNIT',fnames\(1\),i,j,) N
(!     &                    OPENUN\(1\),QFORM,QWRITE,iunwri\)) N
(        if \(__TRAJ_FILE_UNIT.gt.0\)                                              ) N
(  &) N
(     &    INQUIRE\(UNIT=__TRAJ_FILE_UNIT, OPENED=openun\(2\), NAME=fnames\(2\)\)) N
(!     &   CALL VINQRE\('UNIT',fnames\(2\),i,j,) N
(!     &                    OPENUN\(2\),QFORM,QWRITE,iuncrd\)) N
(! aa) N
(!         write\(600+ME_STRNG,*\) iunwri, fnames\(1\), iuncrd, fnames\(2\)) N
(!) N
(#else) N
(! DYNAMOL does not store restart fid;) N
(! furthermore, files are not kept open \(so that they are complete in the case of) N
( a crash\)) N
(! all we have to do is exchange the file names) N
(        nfiles=3) N
(        fnames\(1\)=trajectoryoutname) N
(        fnames\(2\)=restartoutname) N
(ftsm.ftn) (Page 87/90) (Apr 16, 13 16:43) title
border
/v 1 store
/x0 x v get 3.147420 add sx cw mul add store
/y0 y v get bfs th add sub store
x0 y0 moveto
(        fnames\(3\)=statisticsoutname) p n
(#endif) N
(!) N
(        i=nfiles*len\(fnames\(1\)\) ! length of broadcast buffer) N
(#ifndef __DMOL) N
(        if \( __RESTART_FILE_UNIT .gt. 0 .or. __TRAJ_FILE_UNIT .gt. 0 \)&) N
(#endif) N
(         call MPI_SENDRECV\(fnames, i, MPI_BYTE,                     &) N
(     &   which, which, new_fnames, i, MPI_BYTE,                     &) N
(     &   which, ME_STRNG, MPI_COMM_STRNG, stat, ierror\)) N
(!         write\(600+ME_STRNG,*\) iunwri, new_fnames\(1\),) N
(!     &            iuncrd, new_fnames\(2\)) N
(!         close\(600+ME_STRNG\)) N
(! assuming that the restart file is formatted \(might change this later\)) N
(#ifndef __DMOL) N
(        if \(__RESTART_FILE_UNIT.gt.0.and.openun\(1\)\) then) N
(         close\(__RESTART_FILE_UNIT\)) N
(         i=len\(new_fnames\(1\)\)) N
(         __TRIMA\(new_fnames\(1\), i\)) N
(         open\(UNIT=__RESTART_FILE_UNIT, FILE=new_fnames\(1\)\(1:i\), FORM='FORMATTED) N
(',   &) N
(     &    STATUS='OLD', ACCESS='SEQUENTIAL'\)) N
(        endif) N
(! assuming that dcd file is unformatted) N
(        if \(__TRAJ_FILE_UNIT.gt.0.and.openun\(2\)\) then) N
(         close\(__TRAJ_FILE_UNIT\)) N
(         i=len\(new_fnames\(2\)\)) N
(         __TRIMA\(new_fnames\(2\), i\)) N
(         open\(UNIT=__TRAJ_FILE_UNIT, FILE=new_fnames\(2\)\(1:i\), FORM='UNFORMATTED') N
(, &) N
(!     &    STATUS='OLD', ACCESS='APPEND'\)) N
(     &    STATUS='OLD', POSITION='APPEND'\)) N
(        endif) N
(#else) N
(        trajectoryoutname=new_fnames\(1\)) N
(        restartoutname   =new_fnames\(2\)) N
(        statisticsoutname=new_fnames\(3\)) N
(#endif) N
(!#ifdef __CHARMM) N
(!        iolev=oldiol) N
(!#endif) N
(!     done with swap output file info) N
(!*******************************************************************************) N
(*************) N
(!) N
(         deallocate\(r_f3\); nullify\(r_f2\);) N
(         if \(qorient\) then) N
(          nullify\(r_o2\);) N
(          if \(qdiffrot\) then ; deallocate\(r_o3\);) N
(          else ; nullify\(r_o3\); endif) N
(         endif ! qorient) N
(       else ! success \( move rejected \)) N
(        call MPI_ALLGATHER\(ME_STRNG, 1, mpiint,                          &) N
(     &       nodelist, 1, mpiint, MPI_COMM_STRNG, ierror\)) N
(!) N
(!    move rejected, so restore string) N
(!) N
(        if \(qvalid\) then) N
(         r_f=>r_f3; deallocate\(r_f2\); nullify\(r_f3\);) N
(         if \(qorient\) then) N
(          r_o=>r_o3; nullify\(r_o3\);) N
(          if \(qdiffrot\) then ; deallocate\(r_o2\);) N
(          else ; nullify\(r_o2\); endif) N
(         endif ! qorient) N
(        endif ! qvalid) N
(       endif ! success) N
(! aa) N
(!        dE=exp\(-rex_beta*dE\)) N
(!        call MPI_ALLGATHER\(dE, 1, MPI_DOUBLE_PRECISION,) N
(ftsm.ftn) (Page 88/90) (Apr 16, 13 16:43) title
border
grestore
(Printed by surgeon) rhead
(ftsm.ftn) (44/45) (Wednesday May 01, 2013) footer
end % of iso1dict
pagesave restore
showpage
%%Page: (89-90) 45
%%BeginPageSetup
/pagesave save def
sh 0 translate 90 rotate
%%EndPageSetup
iso1dict begin
gsave
llx lly 12 add translate
/v 0 store
/x0 x v get 3.147420 add sx cw mul add store
/y0 y v get bfs th add sub store
x0 y0 moveto
(!     &   dEG, 1, MPI_DOUBLE_PRECISION, MPI_COMM_STRNG, bug\)) p n
(!) N
(      endif ! MPI_COMM_STRNG) N
(!    from here on all nodes continue:) N
(!    broadcast success to all slave nodes) N
(      if \(qgrp\) then) N
(#ifdef __CHARMM) N
(       __BROADCAST_LOCAL_4B\(success,1\)) N
(       __BROADCAST_LOCAL_4B\(nodelist,nstring\)       !__CHARMM_ONLY##.not.INTEGER) N
(8) N
(       __BROADCAST_LOCAL_8B\(nodelist,nstring\)       !__CHARMM_ONLY##INTEGER8) N
(#else) N
(       __BROADCAST_LOCAL\(success,1,mpibool\)) N
(       __BROADCAST_LOCAL\(nodelist,nstring,mpiint\)) N
(#endif) N
(!    broadcast new reference to slaves \(what about dperp0, dpar0, drms0?\) ) N
(       if \(success\) then) N
(#ifdef __CHARMM) N
(        __BROADCAST_LOCAL_4B\(r_f,27*nforced\)       !__CHARMM_ONLY##SINGLE) N
(        __BROADCAST_LOCAL_8B\(r_f,27*nforced\)       !__CHARMM_ONLY##.not.SINGLE) N
(#else) N
(        __BROADCAST_LOCAL\(r_f,27*nforced,mpifloat\)) N
(#endif) N
(        if \(qorient.and.qdiffrot\) then ; ) N
(#ifdef __CHARMM) N
(         __BROADCAST_LOCAL_4B\(r_o,27*norient\) ;   !__CHARMM_ONLY##SINGLE) N
(         __BROADCAST_LOCAL_8B\(r_o,27*norient\) ;   !__CHARMM_ONLY##.not.SINGLE) N
(#else) N
(         __BROADCAST_LOCAL\(r_o,27*norient,mpifloat\) ; ) N
(#endif) N
(        endif) N
(!) N
(!       broadcast reference values) N
(!       command below does not work in NERSC with pathscale) N
(!        __BROADCAST_LOCAL\(rex_string_data_new,1,rex_string_data_mpi\) ! broadcas) N
(t to slaves) N
(        call mpi_type_get_extent\(rex_string_data_mpi, lb, extent, ierror\)) N
(#ifdef __CHARMM) N
(         __BROADCAST_LOCAL_4B\(rex_string_data_new,extent/4\)) N
(#else) N
(        __BROADCAST_LOCAL\(rex_string_data_new,extent,MPI_BYTE\)) N
(#endif) N
(!) N
(       endif ! success) N
(      endif ! qgrp) N
(!) N
(!        write\(600+ME_GLOBAL, *\) ME_STRNG) N
(!     if replica order has changed, switch communicator) N
(!        if \(ME_GLOBAL.eq.0\) write\(600,*\) nodelist !aa) N
(!        if \(ME_GLOBAL.eq.0\) write\(600,*\) dEG !aa) N
(!        if \(ME_GLOBAL.eq.0\) write\(600,*\) '***************', cv%rex_beta !aa) N
(!        close\(600\)) N
(!) N
(! modify replica map \(assumes that only adjacent switches are possible\)) N
(      j=1) N
(      do while \(j.lt.nstring\)) N
(        if \(nodelist\(j\).gt.nodelist\(j+1\)\) then ! node numbers start at 0) N
(          i=rex_map\(j\)) N
(          rex_map\(j\)=rex_map\(j+1\)) N
(          rex_map\(j+1\)=i) N
(          j=j+1) N
(        endif) N
(        j=j+1) N
(      enddo) N
(!) N
(      if \(any\(nodelist.ne.\(/ \(i, i=0,nstring-1\) /\)\)\)                    &) N
(     &  call multicom_permute_string_ranks\(nodelist+1\) ! special-purpose routine) N
( to reorder ranks in order of string replicas) N
(!                                                        added 1 because in mult) N
(ftsm.ftn) (Page 89/90) (Apr 16, 13 16:43) title
border
/v 1 store
/x0 x v get 3.147420 add sx cw mul add store
/y0 y v get bfs th add sub store
x0 y0 moveto
(icom node indices start from 1) p n
(      if \(success\) then) N
(!    finish updating reference values) N
(       dpar0 =rex_string_data_new%dpar0) N
(       dperp0=rex_string_data_new%dperp0) N
(       drms0 =rex_string_data_new%drms0) N
(       kpara =rex_string_data_new%kpara) N
(       kperp =rex_string_data_new%kperp) N
(       krms  =rex_string_data_new%krms) N
(       evolve_expo_mem   =rex_string_data_new%evolve_expo_mem) N
(       num_evolve_samples=rex_string_data_new%num_evolve_samples) N
(       avforce           =rex_string_data_new%avforce) N
(       ftsm_mini_on      =rex_string_data_new%ftsm_mini_on) N
(       evolve_expo_on    =rex_string_data_new%evolve_expo_on) N
(       evolve_aver_on    =rex_string_data_new%evolve_aver_on) N
() N
(!) N
(       if \(MPI_COMM_STRNG.ne.MPI_COMM_NULL\) mestring=ME_STRNG) N
(!      broadcast string size to all slave nodes) N
(       if \(qgrp\) then) N
(#ifdef __CHARMM) N
(        __BROADCAST_LOCAL_4B\(mestring,1\)             !__CHARMM_ONLY##.not.INTEGE) N
(R8) N
(        __BROADCAST_LOCAL_8B\(mestring,1\)             !__CHARMM_ONLY##INTEGER8) N
(        call setmsi\('MESTRING',mestring\)) N
(#else) N
(        __BROADCAST_LOCAL\(mestring,1,mpiint\)) N
(#endif) N
(       endif ! qgrp) N
(      endif ! success) N
(!        write\(600+ME_GLOBAL, *\) ME_STRNG) N
(!           close\(600+ME_GLOBAL\)) N
(!) N
(      end subroutine ftsm_repl_exchange) N
(!ccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccc) N
(cc) N
(      end module ftsm) N
(!) N
(__CHARMM_ONLY##ENDIF) N
(ftsm.ftn) (Page 90/90) (Apr 16, 13 16:43) title
border
grestore
(Printed by surgeon) rhead
(ftsm.ftn) (45/45) (Wednesday May 01, 2013) footer
end % of iso1dict
pagesave restore
showpage

%%Trailer
end
%%EOF
