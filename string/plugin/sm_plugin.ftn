#define __SMCVINITCTX SMCV_INIT
#define __SMCVDONECTX SMCV_DONE
#define __FTSMINITCTX FTSM_INIT
#define __FTSMDONECTX FTSM_DONE
!
#define __CBIND use, intrinsic :: iso_c_binding
!
module sm_plugin
 use system, only : r, rcomp, m, q, bfactor, occupancy, fr, natom, system_PDB_initialized, system_minimal_initialized, system_PDB_init, system_done
 use system, f=>fr
 use unitcell
 __DEP_OUTPUT, set_minwarnlev, set_minerrorlev, set_minmessagelev
 __DEP_CONST
 __CBIND

 __IMPNONE

 private

 int, parameter :: ftsm_flavor=1, smcv_flavor=2, unknown=-1
 int, save :: sm_flavor = unknown
 character(len=9) :: initctx='UNDEFINED', donectx='UNDEFINED'
 bool, save :: defer_init_until_dyna=.false. ! if true, will call initializer after coordinates are available
 bool, save :: sm_initialized=.false.
 bool, save :: minimal_system=.true. ! a minimal system results when a PDB file is not provided
 int, save :: iteration
 float, save :: sm_energy=zero
 int(__FCINT), save, allocatable, target :: atomlist(:)
!
 interface
  subroutine smcv_exec(ctx)
  character(len=*) :: ctx
  end subroutine smcv_exec
 end interface
!
 contains
! subroutines to call the string code from external MD programs
!
#define __CSUB(__NAME, ...) subroutine __NAME (__VA_ARGS__) bind(c, name=__STRING(__NAME))
#define __CFUN(__NAME, ...) function __NAME (__VA_ARGS__) bind(c, name=__STRING(__NAME))
!
#define _ME sm_init_plugin
 __CFUN(_ME, n, mass, charge, inputname, il, outputname, ol, alist, qper, box)
 __DEP_VECTORS
 __DEP_PARSER
 __DEP_FILES
 __DEP_MPI
! smcv modules :
 use cv_common, only : cv
! ftsm modules :
 use ftsm, only : ftsm_exec
 use ftsm_var, only : iatom_a ! needed to compute atoms used by ftsm
 use ftsm_util, only : ftsm_compute_atomlist
!
 int(__FCINT) :: _ME
 type(c_ptr), intent(out) :: alist ! send back a list of atom indices
 type(c_ptr), value, intent(in) :: inputname, outputname
 real(__FCFLOAT), intent(in), dimension(n) :: mass, charge
 int( __FCINT), intent(in), value :: n, il, ol
 logical(__FCBOOL), value, intent(in) :: qper
 real(__FCFLOAT), intent(in), dimension(3,3) :: box ! lattice vectors
!
 character(len=il), pointer :: ifname
 character(len=ol), pointer :: ofname
!
 character(len=vartaglen) :: structurefile, fl_name
!
 int :: i, fid, ierr, l
 __IAM(_ME)
 _ME=1
!
!==================================================
 if (sm_initialized) call sm_done_plugin() ! reinitialize to clean up from a previous run
!
 call c_f_pointer(inputname, ifname)
 call c_f_pointer(outputname, ofname)
!
 call output_init(ofname)
!
! open input file
 fid=-1
 call files_open(fid, ifname, 'FORMATTED', 'READ')
! parse input file
 call parse_file(fid, &
#ifdef __PARALLEL
 & MPI_COMM_NULL, &
#endif
 & quiet_=.false.)
 call files_close(fid)
!=== output options
 if (existtag_nocase('minwarnlev'   ,__STRING(__OUTCTX))) call set_minwarnlev   (atoi(getval('minwarnlev',__STRING(__OUTCTX))))
 if (existtag_nocase('minmessagelev',__STRING(__OUTCTX))) call set_minmessagelev(atoi(getval('minmessagelev',__STRING(__OUTCTX))))
 if (existtag_nocase('minerrorlev'  ,__STRING(__OUTCTX))) call set_minerrorlev  (atoi(getval('minerrorlev',__STRING(__OUTCTX  ))))
!# init 1
!=================================================
! determine the string method flavor :
!=================================================
 __GET_OPT_PAR(string_method, fl_name, 'SMCV', maincontext_name);
 i=len_trim(fl_name)
!
 select case(fl_name(1:i))
  case('FTSM','FTS','FINITE','FINITETEMPERATURE','FINITET','FINITETEMP','FTEMP','FITEMP','FINTEMP','FINITEMP');
   sm_flavor=ftsm_flavor;
   initctx=__STRING(__FTSMINITCTX)
   donectx=__STRING(__FTSMDONECTX)
   __MESSAGE(whoami, 'FINITE TEMPERATURE STRING METHOD (FTSM) REQUESTED');
  case('SMCV', 'COLVAR','CV','SCV','CVS','COLLECTIVE','COLVARS','COLLVAR','COLLVARS','COLV','COLLV','COLLECT'); 
   sm_flavor=smcv_flavor;
   initctx=__STRING(__SMCVINITCTX)
   donectx=__STRING(__SMCVDONECTX)
   __MESSAGE(whoami, 'STRING METHOD IN COLLECTIVE VARIABLES (SMCV) REQUESTED');
  case default ; sm_flavor=unknown
   __MESSAGE(whoami, 'UNKNOWN METHOD "'//fl_name(1:i)//'" REQUESTED. ABORT.');
   return
 end select
! check for structure (PDB) file
 if (existtag_nocase('structure', initctx)) then
  structurefile=getval_nocase('structure', initctx);
  l=len_trim(structurefile)
  __MESSAGE(whoami, 'READING STRUCTURE FROM FILE "'//structurefile(1:l)//'"');
  call system_PDB_init(structurefile, 'PDB');
  system_PDB_initialized=.true.
! save coordinates in rcomp
  if (associated(rcomp) .and. associated(r)) rcomp=r
  minimal_system = .false.
! check to make sure that the MD code sent the correct number of atoms
  if (n.ne.natom) then
   __WRN(whoami, 'NUMBER OF ATOMS RECEIVED('//itoa(n)//') MUST EQUAL THAT IN THE STRUCTURE FILE ('//itoa(natom)//'). ABORT.')
   return
  endif
 else
  call warning(whoami, 'STRUCTURE PDB FILE UNSPECIFIED. ASSUMING A MINIMAL SYSTEM WITH NO TOPOLOGY.',0)
  minimal_system=.true.
  if (n<0) then
   __WRN(whoami, 'NUMBER OF ATOMS RECEIVED MUST BE POSITIVE (RECEIVED '//itoa(n)//'). ABORT')
   return
  endif
!
  __MESSAGE(whoami, 'INITIALIZING STRUNA PLUGIN WITH '//itoa(n)//' ATOMS RECEIVED');
! maintaining coordinate compatibility with dynamol
! however, not using state variables below, i.e. allocating here
  allocate(r(3,n), rcomp(3,n), f(3,n), m(n), q(n), bfactor(n), occupancy(n)) ! note transposed dimensions relative to acemd plugin + dynamol
  natom=n
  system_minimal_initialized=.true.
  r=__NAN
  rcomp=__NAN
  bfactor=__NAN
  occupancy=__NAN
 endif ! structure file exists
! currently, mass and charge can only be passed in from external code:
 m=mass
 q=charge
!
 __GET_OPT_PAR_B(defer_init_dyna, defer_init_until_dyna, .false., initctx);
!
! defer initialization until coordinates are available
 if ( defer_init_until_dyna ) then 
  __MESSAGE(whoami, 'WILL DEFER EXECUTION OF INITIALIZATION STACK UNTIL DYNAMICS');
 else
  __MESSAGE(whoami, 'EXECUTING INITIALIZATION STACK');
  if (noexec(initctx)) then
   call warning(whoami, 'CONTEXT "'//initctx//'" DOES NOT CONTAIN EXECUTABLE STATEMENTS.', -1);
  else
   select case(sm_flavor);
     case(ftsm_flavor);    call ftsm_exec(initctx)
     case(smcv_flavor);
      if (qper) then 
       call cv%ucell%update_vectors(box) ; ! note that this is a hack since SMCV is not initialized yet
       call cv%ucell%print() ;
      endif
      call smcv_exec(initctx)
     case default ; __WRN(whoami, ' UNKNOWN METHOD REQUESTED.')
   end select
  endif
!
  call parser_clear_context(initctx)
  if (fatal_warning()) return
! compute atomlist
#include "../atomlist.def"
 endif ! defer
!
 sm_initialized=.not.defer_init_until_dyna
 iteration=-abs(__NAN)
 _ME=0
!
end function _ME
#undef _ME
!===================================================================
#define _ME sm_dyna_plugin
 __CFUN(_ME, iteration_, r_plugin, f_plugin, e, alist, qper, box)
! SMCV modules:
 use cv_common, only : cv
 use smcv_master, only : smcv_main
! FTSM modules:
 use ftsm, only : ftsm_main, ftsm_exec
 use ftsm_var, only : iatom_a ! needed to compute atoms used by ftsm
 use ftsm_util, only : ftsm_compute_atomlist

 __DEP_PARSER
!
 int(C_LONG), value, intent(in) :: iteration_
 real(__FCFLOAT), intent(in), dimension(3, natom) :: r_plugin
 real(__FCFLOAT), intent(out), dimension(3, natom) :: f_plugin
 real(__FCFLOAT), intent(out) :: e
 type(c_ptr), intent(out) :: alist ! send back a list of atom indices if smcv not initialized
 logical(__FCBOOL), value, intent(in) :: qper
 logical(__FCBOOL) :: qper_ ! copy that I can modify
 real(__FCFLOAT), intent(in), dimension(3,3) :: box ! lattice vectors
 int(__FCINT) :: _ME
 int :: i, ierr
!
 __IAM(_ME)
!
 _ME=1 ! default return is failure
!
 e=zero ; ! not computed yet
!
 if (sm_initialized .or. defer_init_until_dyna) then

  iteration=iteration_
  qper_=qper
!
  if (sm_initialized) then ! just load coordinates
   r(:,atomlist(2:))=r_plugin(:,atomlist(2:))
  else
! complete initialization
   __MESSAGE(whoami, 'EXECUTING INITIALIZATION STACK');
! load all coords (we do not know which ones we will need b/c initialization is incomplete)
   r=r_plugin
   if (noexec(initctx)) then
    call warning(whoami, 'CONTEXT "'//trim(initctx)//'" DOES NOT CONTAIN EXECUTABLE STATEMENTS.', -1);
   else
    select case(sm_flavor);
     case(ftsm_flavor);    call ftsm_exec(initctx)
     case(smcv_flavor);
      if (qper_) then
       call cv%ucell%update_vectors(box) ; ! note that this is a hack since SMCV is not initialized yet
       call cv%ucell%print() ;
       qper_=.false. ! prevent repeat call
      endif
     call smcv_exec(initctx)
     case default ; __WRN(whoami, ' UNKNOWN METHOD REQUESTED.')
    end select
   endif
   call parser_clear_context(initctx)
   if (fatal_warning()) return
!
   sm_initialized=.true.
! compute unique atomlist
#include "../atomlist.def"
! now the atom list should be defined -- use it below for forces
  endif ! not sm_initialized
!
  f(:,atomlist(2:))=zero ! start from zero force
!
  select case(sm_flavor);
   case(ftsm_flavor);
    call ftsm_main(__X, __Y, __Z, __XCOMP, __YCOMP, __ZCOMP, f(1,:), f(2,:), f(3,:), m, iteration)
   case(smcv_flavor);
    if (qper_) then 
     call cv%ucell%update_vectors(box) ! may move this functionality inside smcv_main; for now, minimal changes
! debug/test unit cell output
!     call cv%ucell%print()
    endif
    call smcv_main(__X, __Y, __Z, __XCOMP, __YCOMP, __ZCOMP, m, f(1,:), f(2,:), f(3,:), iteration, sm_energy)
   case default ;
    __WRN(whoami, ' UNKNOWN METHOD REQUESTED.')
  end select
!
! update namd forces
! note that per CHARMM convention, which the plugin code inherits, forces correspond to grad V, not -grad V !
  f_plugin(:,atomlist(2:)) = - f(:,atomlist(2:))
! update energy
  e=sm_energy
 endif
!
 _ME=0
!
end function _ME
#undef _ME
!===================================================================
#define _ME sm_done_plugin
 __CSUB(_ME)
 use sm_var, only : smcv_initialized
 use ftsm, only : ftsm_exec, ftsm_done
 use ftsm_var, only : ftsm_initialized
 use state, only : state_done
 use files, only : files_done
 __DEP_PARSER, only : parser_done, parser_clear_context
!
 __IAM(_ME)
!
 select case(sm_flavor);
  case(smcv_flavor); call smcv_exec(donectx)
  case(ftsm_flavor); call ftsm_exec(donectx)
  case default ; __WRN(whoami, ' UNKNOWN METHOD REQUESTED.')
 end select
!
 if (.not. sm_initialized) return ! avoid multiple done calls
!
! NAMD may have multiple runs concatenated in one script file (e.g. minimization followed by dynamics); for this reason
! we will not destruct this object
! if ( .false. ) then
!
 call parser_clear_context(donectx)
 call parser_done()

 select case(sm_flavor);
  case(smcv_flavor); if (smcv_initialized) call smcv_done()
  case(ftsm_flavor); if (ftsm_initialized) call ftsm_done()
  case default ; __WRN(whoami, ' UNKNOWN METHOD REQUESTED.')
 end select
!
 call system_done()
!
 if (minimal_system) then ! free variables allocated outside of state
  __FREE(r)
  __FREE(rcomp)
  __FREE(f)
  __FREE(m)
  __FREE(q)
  __FREE(bfactor)
  __FREE(occupancy)
 else
  call state_done() ! state module is not used with minimal system
 endif
!
 call files_done()
!
 __DEALL(atomlist)
 sm_flavor=unknown
 sm_initialized=.false.
 defer_init_until_dyna=.false.
!
! endif
!
end subroutine _ME
!
end module sm_plugin
