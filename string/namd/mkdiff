#!/bin/bash
# make a NAMD patch file for patching NAMD source code
# using a provided original source code directory.
# This directory should correspond to the actual code
# used for development, otherwise the patches may be
# correct, and the compilation might fail (or worse,
# there will be runtime errors or incorrect results)
#==================== original source code directory :
OUT="===>";
ERR="WARNING:"
BREAK="===================================================================================";
#
echo $BREAK
#
if [ -z $1 ] ; then
 echo " Source (existing) directory name unspecified."
 exit 1
else
 dold=$1
 echo " Source (existing) directory name is \"$dold\""
fi
#
if [ ! -d "$dold" ]; then
 echo " Directory "$dold" does not exist. Abort."
 exit 1
fi
#========= create a list of files to patch
newfiles=( "Make.depends" "Makefile.namd" "ComputeMgr.C" \
           "SimParameters.C" "SimParameters.h" \
           "GlobalMasterSM.C" "GlobalMasterSM.h" );

oldfiles=( "$dold/Make.depends" "$dold/Makefile" "$dold/src/ComputeMgr.C" \
           "$dold/src/SimParameters.C" "$dold/src/SimParameters.h" \
           "$dold/src/"                "$dold/src/" );

# loop over files and generate a patch for each file
echo $BREAK
ifile=0;
for newfile in ${newfiles[@]} ; do
 oldfile=${oldfiles[$ifile]}
 ofname=${oldfile##*/}
 if [ -z $ofname ] ; then
  patchfile=${newfile}.patch
# to modify file names in the patches :
  pnewfile=${oldfile#*/}$newfile
  oldfile="/dev/null"
  poldfile=$oldfile
 else
# to modify file names in the patches :
  poldfile=${oldfile#*/}
  pnewfile=${poldfile}
#
  patchfile=${ofname}.patch
 fi
#
 ifile=`expr $ifile + 1`
 echo "$OUT Generating patch $patchfile : $newfile ==> $oldfile"
 diff --text --unified=3 $oldfile $newfile > $patchfile
# modify file names inside patch
 sed -i -e "s*--- $oldfile*--- $poldfile*" -e "s*+++ $newfile*+++ $pnewfile*" $patchfile
# echo "$oldfile => $poldfile"
# echo "$newfile => $pnewfile"
# concatenate patches :
 cat *.patch > ${dold}.struna.patch
done
