#define __SMCVINITCTX SMCV_INIT
#define __SMCVDONECTX SMCV_DONE
#define __FTSMINITCTX FTSM_INIT
#define __FTSMDONECTX FTSM_DONE
!
#define __CBIND use, intrinsic :: iso_c_binding
!
module sm_acemd
 use minimal_system
 __DEP_OUTPUT, set_minwarnlev, set_minerrorlev, set_minmessagelev
 __DEP_CONST
 __CBIND

 __IMPNONE

 private
!
 int, parameter :: ftsm_flavor=1, smcv_flavor=2, unknown=-1
 int, save :: sm_flavor = -1
 character(len=9) :: initctx='UNDEFINED', donectx='UNDEFINED'
 bool, save :: defer_init_until_dyna=.false. ! if true, will call initializer after coordinates are available
 bool, save :: initialized=.false.
 int, save :: iteration
 float, save :: sm_energy=zero
 int(__FCINT), save, allocatable, target :: atomlist(:)
!
 interface
  subroutine smcv_exec(ctx)
  character(len=*) :: ctx
  end subroutine smcv_exec
 end interface
!
 contains
! a collection of subroutines to call the SMCV code from ACEMD plugin interface
! module encapsulation allows storage
!
#define __CSUB(__NAME, ...) subroutine __NAME (__VA_ARGS__) bind(c, name=__STRING(__NAME))
#define __CFUN(__NAME, ...) function __NAME (__VA_ARGS__) bind(c, name=__STRING(__NAME))
!
#define _ME sm_init_from_acemd
 __CFUN(_ME, n, mass, charge, inputname, il, outputname, ol, alist, flavorname, fl)
 __DEP_VECTORS
 __DEP_PARSER
 __DEP_FILES
 __DEP_MPI
! smcv modules :
 use cv_common, only : cv
! ftsm modules :
 use ftsm, only : ftsm_exec
 use ftsm_var, only : iatom_a ! needed to compute atoms used by ftsm
 use ftsm_util, only : ftsm_compute_atomlist
!
 int(__FCINT) :: _ME
 int( __FCINT), intent(in), value :: n, il, ol, fl
 real(__FCFLOAT), intent(in), dimension(n) :: mass, charge
 type(c_ptr), intent(out) :: alist ! send back a list of atom indices, if computable
 type(c_ptr), value, intent(in) :: inputname, outputname
 type(c_ptr), value, intent(in) :: flavorname ! type of string method (ftsm vs. smcv)
!
 character(len=il), pointer :: ifname
 character(len=ol), pointer :: ofname
 character(len=fl), pointer :: fl_name

 int :: i, fid, ierr
 __IAM(_ME)
 _ME=1
!
 call c_f_pointer(outputname, ofname)
!
 call output_init(ofname)
! make sure that the string method flavor is valid
!=================================================
 call c_f_pointer(flavorname, fl_name)
 call toupper(fl_name)
 i=len_trim(fl_name)
 select case(fl_name(1:i))
  case('FTSM','FTS','FINITE','FINITETEMPERATURE','FINITET','FINITETEMP','FTEMP','FITEMP','FINTEMP','FINITEMP');
   sm_flavor=ftsm_flavor;
   initctx=__STRING(__FTSMINITCTX)
   donectx=__STRING(__FTSMDONECTX)
   __MESSAGE(whoami, 'FINITE TEMPERATURE STRING METHOD (FTSM) REQUESTED');
  case('SMCV', 'COLVAR','CV','SCV','CVS','COLLECTIVE','COLVARS','COLLVAR','COLLVARS','COLV','COLLV','COLLECT'); 
   sm_flavor=smcv_flavor;
   initctx=__STRING(__SMCVINITCTX)
   donectx=__STRING(__SMCVDONECTX)
   __MESSAGE(whoami, 'STRING METHOD IN COLLECTIVE VARIABLES (SMCV) REQUESTED');
  case default ; sm_flavor=unknown
   __MESSAGE(whoami, 'UNKNOWN METHOD "'//fl_name(1:i)//'" REQUESTED. ABORT.');
   return
 end select
!==================================================
 if (n<0) then
  __WRN(whoami, 'NUMBER OF ATOMS MUST BE POSITIVE (RECEIVED '//itoa(n)//')')
  return
 else
  __MESSAGE(whoami, 'INITIALIZING STRING METHOD PLUGIN WITH '//itoa(n)//' ATOMS');
  allocate(r(3,n), rcomp(3,n), f(3,n), m(n), q(n))
  minimal_system_natom=n
  m=mass
  q=charge
  r=__NAN
  rcomp=__NAN
! open input file
  call c_f_pointer(inputname, ifname)
  fid=-1
  call files_open(fid, ifname, 'FORMATTED', 'READ')
! parse input file
  call parse_file(fid, MPI_COMM_NULL, quiet_=.false.)
  call files_close(fid)
!=== output options
  if (existtag_nocase('minwarnlev'   ,__STRING(__OUTCTX))) call set_minwarnlev   (atoi(getval('minwarnlev',__STRING(__OUTCTX))))
  if (existtag_nocase('minmessagelev',__STRING(__OUTCTX))) call set_minmessagelev(atoi(getval('minmessagelev',__STRING(__OUTCTX))))
  if (existtag_nocase('minerrorlev'  ,__STRING(__OUTCTX))) call set_minerrorlev  (atoi(getval('minerrorlev',__STRING(__OUTCTX  ))))
!=== output options
!
  __GET_OPT_PAR_B(defer_init_dyna, defer_init_until_dyna, .false., initctx);
!
! defer initialization until coordinates are available
  if ( defer_init_until_dyna ) then 
   __MESSAGE(whoami, 'WILL DEFER EXECUTION OF INITIALIZATION STACK UNTIL DYNAMICS');
  else
   __MESSAGE(whoami, 'EXECUTING INITIALIZATION STACK');
   if (noexec(initctx)) then
    call warning(whoami, 'CONTEXT "'//trim(initctx)//'" DOES NOT CONTAIN EXECUTABLE STATEMENTS.', -1);
   else
    select case(sm_flavor);
     case(ftsm_flavor);    call ftsm_exec(initctx)
     case(smcv_flavor);    call smcv_exec(initctx)
     case default ; __WRN(whoami, ' UNKNOWN METHOD REQUESTED.')
    end select
   endif
   call parser_clear_context(initctx)
   if (fatal_warning()) return
! compute unique atomlist
#include "atomlist.def"
  endif ! defer
!
  initialized=.not.defer_init_until_dyna
  _ME=0
!
 endif ! n<0

end function _ME
#undef _ME
!===================================================================
#define _ME sm_dyna_from_acemd
 __CFUN(_ME, iteration_, r_acemd, f_acemd, e, alist)
! SMCV modules:
 use cv_common, only : cv
 use smcv_master, only : smcv_main
! FTSM modules:
 use ftsm, only : ftsm_main, ftsm_exec
 use ftsm_var, only : iatom_a ! needed to compute atoms used by ftsm
 use ftsm_util, only : ftsm_compute_atomlist
 __DEP_PARSER
!
 int(C_LONG), value, intent(in) :: iteration_
 real(__FCFLOAT), intent(in), dimension(3, minimal_system_natom) :: r_acemd
 real(C_FLOAT), intent(out), dimension(3, minimal_system_natom) :: f_acemd
 real(__FCFLOAT), intent(out) :: e
 type(c_ptr), intent(out) :: alist ! send back a list of atom indices if smcv not initialized
 int(__FCINT) :: _ME
 int :: i, ierr
!
 __IAM(_ME)
!
 _ME=1 ! default return is failure
!
 e=zero ; ! not computed yet
!
 if (initialized .or. defer_init_until_dyna) then

  iteration=iteration_
!
  if (initialized) then ! just load coordinates
   r(:,atomlist(2:))=r_acemd(:,atomlist(2:))
  else
! complete initialization
   __MESSAGE(whoami, 'EXECUTING INITIALIZATION STACK');
! load all coords (we do not know which ones we will need b/c initialization is incomplete)
   r=r_acemd
   if (noexec(initctx)) then
    call warning(whoami, 'CONTEXT "'//trim(initctx)//'" DOES NOT CONTAIN EXECUTABLE STATEMENTS.', -1);
   else
    select case(sm_flavor);
     case(ftsm_flavor);    call ftsm_exec(initctx)
     case(smcv_flavor);    call smcv_exec(initctx)
     case default ; __WRN(whoami, ' UNKNOWN METHOD REQUESTED.')
    end select
   endif
   call parser_clear_context(initctx)
   if (fatal_warning()) return
!
   initialized=.true.
! now the atom list should be defined -- use it below for forces
! compute unique atomlist
#include "atomlist.def"
  endif ! not initialized
!
  f(:,atomlist(2:))=zero ! start from zero force
!
  select case(sm_flavor);
   case(ftsm_flavor);
     call ftsm_main(__X, __Y, __Z, __XCOMP, __YCOMP, __ZCOMP, f(1,:), f(2,:), f(3,:), m, iteration)
   case(smcv_flavor);
     call smcv_main(__X, __Y, __Z, __XCOMP, __YCOMP, __ZCOMP, m, f(1,:), f(2,:), f(3,:), iteration, sm_energy)
   case default ;
    __WRN(whoami, ' UNKNOWN METHOD REQUESTED.')
  end select
!
! update acemd forces
! note that per CHARMM convention, which the plugin code inherits, forces correspond to grad V, not -grad V !
  f_acemd(:,atomlist(2:)) = - f(:,atomlist(2:))
! update energy
  e=sm_energy
 endif
!
 _ME=0
!
end function _ME
#undef _ME
!===================================================================
#define _ME sm_done_from_acemd
 __CSUB(_ME)
 use sm_var, only : smcv_initialized
 use ftsm, only : ftsm_exec, ftsm_done
 use ftsm_var, only : ftsm_initialized
 __DEP_PARSER, only : parser_done, parser_clear_context
!
 __IAM(_ME)
!
 select case(sm_flavor);
  case(smcv_flavor); call smcv_exec(donectx)
  case(ftsm_flavor); call ftsm_exec(donectx)
  case default ; __WRN(whoami, ' UNKNOWN METHOD REQUESTED.')
 end select
!
 call parser_clear_context(donectx)
 call parser_done()

 select case(sm_flavor);
  case(smcv_flavor); if (smcv_initialized) call smcv_done()
  case(ftsm_flavor); if (ftsm_initialized) call ftsm_done()
  case default ; __WRN(whoami, ' UNKNOWN METHOD REQUESTED.')
 end select
!
 __FREE(r)
 __FREE(rcomp)
 __FREE(m)
 __FREE(q)
!
 __DEALL(atomlist)
 sm_flavor=-1
 initialized=.false.
end subroutine _ME
!
end module sm_acemd
