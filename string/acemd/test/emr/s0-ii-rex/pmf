#!/bin/bash
#
# load utility functions :
source struna.sh
template=template
stringtemplate=template-rex.smcv
#
# preliminaries
# output directories
datadir=data
dcddir=scratch
#
mkdir -p $datadir
#mkdir -p $dcddir
#
pos=89   # staple position (0 -- no staple)
#================ MD configuration parameters :
psffile=../struc/emr-s${pos}-tpp-dmpcx.psf
pdbfile=../struc/emr-s${pos}-tpp-dmpc-protein.res # needed by ACEMD regardless of wheher bin coords are present
parameters=../param/emr-tpp-dmpc-staple.prm
cutoff=9
switchdist=7.25 # consistency with prior calcs
pmefreq=2
hmass=4     # scaling of H mass for faster integration
dt=4
shake=all
restraints=off     # harmonic positional restraints
restraintfile=none # harmonic reference positions file
thermostat=off
friction=0.1 # consistency with prior calculations
temperature=298
barostat=off
# cell size ; unused if restarting form xsc
sizex=7.308466e+01
sizez=8.066982e+01
sizey=$sizex 
membrane=on
#
index=1 # simulation "index"
#================== string replica parameters
#
brep=1  # first replica index
erep=15 # last replica index
outputbase=s$pos-$index

# replica exchange parameters :
qrex=1 # whether replica exchange is on
nsteps=10000 ; # also, replica exchange frequency ( if on )
ministeps=0 ; # optional minimization
freq=10000 ; # output frequency
firstrun=1 ; # index of run ; facilitates restarting
numrun=250 ; # also, number of exchange attempts ( if on )
# anealing in replica exchange temp
temprex0=1000 ; #initial rex temp
temprex1=$temperature ; # final rex temp
dtemprex=5 ; # temp increment/decrement
rexlog=${outputbase}.rex.log
#
#==============================================================================
# erase replica exchange log
if [ $qrex -eq 1 ]; then
 if [ -f $rexlog ]; then
  mv $rexlog ${rexlog}.old
 fi
 temprex=$temprex0 ;# initialize replica exchange annealing
fi
#
#outer loop over number of runs
lastrun=$((firstrun+numrun-1))
for irun in `seq $firstrun $lastrun`; do 
 echo " ===> Run $irun (will quit after $lastrun) "
 echo " ========================="
#if [ 0 -eq 1 ]; then
 for irep in `seq $brep $erep`; do
# run each string replica
# prepare input file from template
  config=${outputbase}_${irep}
  output=${config}.out
  pluginfile=${config}.smcv
  pluginout=${pluginfile}.out
  usdir=us
#
  vecs=(`cat ${usdir}/cv$pos.vec`)
  vec1="${vecs[@]:0:3}"
  vec2="${vecs[@]:3:3}"
  vec3="${vecs[@]:6:3}"
#
  kpos=5 ;# set sufficiently low fgor replica exchange
  fbw1=0.5
  fbw2=5
  fbw3=5
  frame1=`cat us/emr2.sel`
  frame2=`cat us/stapled2.sel`
#
  ileft=`ileft   $irep $brep $erep`
  iright=`iright $irep $brep $erep`
  irestart=$irep

# prepare acemd config files
# different behavior on first run :
  outputname=${outputbase}_${irep}
  if [ $irun -gt 1 ]; then
   restartname=$dcddir/$outputname
   windowappend=wiap # append to stat files
   histappend=happ
  else
   restartname=restart/emr-s${pos}-tpp-dmpc${irep}pmf
   windowappend="" # do not append to statistics files
   histappend=""
  fi
  echo "bincoordinates $restartname.coor" > $config
  echo "binvelocities  $restartname.vel" >> $config
  echo "extendedsystem $restartname.xsc" >> $config

# for string method config file
  cat $stringtemplate > $pluginfile # use cpp to process includes
  for var in datadir usdir pos vec1 vec2 vec3 kpos fbw1 fbw2 fbw3 frame1 frame2 ileft irep iright irestart windowappend histappend freq ; do
    update $pluginfile $var
  done

# for md config file
  cat template >> $config
  update $config sminput $pluginfile
  update $config smlog $pluginout

  for var in parameters psffile pdbfile dt hmass shake temperature cutoff switchdist pmefreq thermostat barostat friction restraints restraintfile sizex sizey sizez \
             ministeps membrane nsteps freq ; do
   update $config "$var"
  done

  update $config outputname "$dcddir\/$outputname"
# run calculation
  echo "  ===> Running replica #$irep ..."
#
#exit
  run_acemd $config $output # implement this as a function so that crashes can be detected
#
  if [ -f output.dcd ]; then 
   mv output.dcd $dcddir/$outputname.dcd # perhaps should use catdcd to join all dcds
  fi
#exit
 done
#fi
#
 if [ $qrex -eq 1 ] ; then
# perform replica exchange :
# (1) decide which way to try exchange:
  xdir=`sm_rex_dir`
# loop over all exchange pairs
  ibeg=$((brep + xdir))
  iend=$((erep - 1))
  for ifirst in `seq $ibeg 2 $iend` ; do
   isecond=$((ifirst+1))
   echo -n "  ===> Attempting replica exchange : $ifirst <==> $isecond :"
#=================================== read energy file for first replica
   efile=$datadir/sm_ene${pos}-${ifirst}.dat
   edata=(`cat $efile`);
# extract energies
   efirst_old=${edata[2]}
# (right shift)
   efirst_new=${edata[8]}

#=================================== read energy file for second replica
   efile=$datadir/sm_ene${pos}-${isecond}.dat
   edata=(`cat $efile`);
# extract energies
   esecond_old=${edata[2]}
# (left shift)
   esecond_new=${edata[5]}
# total energy change :
   esum="$efirst_new - $efirst_old + $esecond_new - $esecond_old"
   de=`echo print $esum | python2` # energy difference in kcal/mol
   echo -n " dE = $de, ";
# apply metropolis
   success=`metropolis $de $temprex`
   echo " T=$temprex,  accept ? : $success"
# if move is accepted, replicas exchange simulation restrart files
   if [ $success -eq 1 ] ; then
    for ext in coor vel idx xsc ; do
     mv -f $dcddir/${outputbase}_${ifirst}.${ext} _tmp_ && \
     mv -f $dcddir/${outputbase}_${isecond}.${ext} $dcddir/${outputbase}_${ifirst}.${ext} && 
     mv -f _tmp_ $dcddir/${outputbase}_${isecond}.${ext}
    done
# update exchange log
    echo -e "$ifirst \t $isecond \t $((irun*nsteps))" >> $rexlog
   fi # success
  done # over all exchange pairs
# update rex temperature
  temprex=`calc "if ($temprex1 > $temprex0) { t = min($temprex1, $temprex + abs($dtemprex)) } else { t = max($temprex1, $temprex - abs($dtemprex)) } ; print t"`
 fi # rex on

done # over all runs
