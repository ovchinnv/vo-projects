module output
! NOTE : 
! for a warning to be printed, need level  > minwarnlev
! for a message to be printed, need level  > minmessagelev
! for a error   to be printed, need level  > minerrorlev
!
 __IMPNONE
 int, save :: fout=-1
 bool, save :: output_initialized=.false.
 bool, save :: qprint = .true.
 character(len=80) :: msg__ ! buffer for output (see message.src) macro
 character(len=10), public, parameter :: realfmt = 'ES20.7E3'
!
 int, parameter, private :: reserved_streams(3)=(/0, 5, 6/)
 int, private :: minerrorlev=0, minwarnlev=0, minmessagelev=0
 int, private :: defaulterrorlev=0, defaultwarnlev=0, defaultmessagelev=0
 int, private :: l
 int, private, save :: warnlev, errorlev ! last warning/error levels
 character(len=9), private :: stat
!
 private warning4
 private warning8
 private error4
 private error8
 private plainmessage4
 private plainmessage8
 private set_minerrorlev4
 private set_minerrorlev8
 private set_minwarnlev4
 private set_minwarnlev8
 private set_minmessagelev4
 private set_minmessagelev8
 private reset_minmessagelev
 private reset_minerrorlev
 private reset_minwarnlev
!
 interface warning
  module procedure warning4
  module procedure warning8
 end interface warning
!
 interface error
  module procedure error4
  module procedure error8
 end interface error
!
 interface plainmessage
  module procedure plainmessage4
  module procedure plainmessage8
  module procedure plainmessage_
 end interface plainmessage
!
 interface set_minerrorlev
  module procedure set_minerrorlev4
  module procedure set_minerrorlev8
  module procedure reset_minerrorlev
 end interface set_minerrorlev
!
 interface set_minwarnlev
  module procedure set_minwarnlev4
  module procedure set_minwarnlev8
  module procedure reset_minwarnlev
 end interface set_minwarnlev
!
 interface set_minmessagelev
  module procedure set_minmessagelev4
  module procedure set_minmessagelev8
  module procedure reset_minmessagelev
 end interface set_minmessagelev
!

 contains
!%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
 subroutine error4(whoami,msg,level)
  integer*4 :: level
  character(len=*) :: whoami, msg
!
  if (.not.output_initialized) call output_init()
  if (level.lt.minerrorlev) then
   stat=' FATAL'; l=6
  else
   stat=' NONFATAL'; l=9
  endif
!
  if (qprint) then
   write(fout,'(5A)') stat(1:l),' ERROR (',whoami,'): ', msg(1:len_trim(msg))
  endif
!
  if (level.lt.minerrorlev) stop
!
 end subroutine error4
!%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
 subroutine error8(whoami,msg,level)
  integer*8 :: level
  character(len=*) :: whoami, msg
!
  if (.not.output_initialized) call output_init()
  if (level.lt.minerrorlev) then
   stat=' FATAL'; l=6
  else
   stat=' NONFATAL'; l=9
  endif
!
  if (qprint) then
   write(fout,'(5A)') stat(1:l),' ERROR (',whoami,'): ', msg(1:len_trim(msg))
  endif
!
  if (level.lt.minerrorlev) stop
!
 end subroutine error8
!%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
 subroutine terminate( whoami )
#ifdef __PARALLEL
 __DEP_MPI
 int :: i
 bool :: mpiinit
#endif
!
 character(len=*) :: whoami
!
 if (.not.output_initialized) call output_init()
!
 if (qprint) then
  write(fout,'(5A)') ' TERMINATION INVOKED FROM : (',whoami,').'
 endif
!
#ifdef __PARALLEL
#ifndef __STRING_SERIAL
 call mpi_initialized(mpiinit,i)
 if (mpiinit) call mpi_finalize(i)
#endif
#endif
!
 stop
!
 end subroutine terminate
!%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
 subroutine warning4(whoami,msg,level)
  integer*4 :: level
  character(len=*) :: whoami, msg
!
  if (.not.output_initialized) call output_init()
  if (level.lt.minwarnlev) then
   stat=' FATAL'; l=6
  else
   stat=' NONFATAL'; l=9
  endif
!
  if (qprint.and.level.le.minmessagelev) then
   write(fout,'(5A)') stat(1:l),' WARNING (',whoami,'): ', msg(1:len_trim(msg))
  endif
!
  warnlev=min(warnlev,level) ! keep the most severe level
!
! termination due to a fatal warning is triggered by user (usually via routine below)
!
 end subroutine warning4
!%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
 subroutine warning8(whoami,msg,level)
  integer*8 :: level
  character(len=*) :: whoami, msg
!
  if (.not.output_initialized) call output_init()
  if (level.lt.minwarnlev) then
   stat=' FATAL'; l=6
  else
   stat=' NONFATAL'; l=9
  endif
!
  if (qprint.and.level.le.minmessagelev) then
   write(fout,'(5A)') stat(1:l),' WARNING (',whoami,'): ', msg(1:len_trim(msg))
  endif
!
  warnlev=INT(min(warnlev,level)) ! keep the most severe level
!
! termination due to a fatal warning is triggered by user (usually via routine below)
!
 end subroutine warning8
!%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
 function fatal_warning(             &
#ifdef __PARALLEL
 &                      communicator &
#endif
 &                          )
!
#ifdef __PARALLEL
 __DEP_MPI
 int4mpi, optional :: communicator
 int4mpi :: comm
 int :: bug
#endif
 int :: level
 bool :: fatal_warning
! reduce to the minimum value of errorcodes across all nodes
!
#ifdef __PARALLEL
 if (present(communicator)) then 
  if (communicator.ne.MPI_COMM_NULL) then
#ifndef __STRING_SERIAL
   call mpi_allreduce(warnlev, level, 1, mpiint, MPI_MIN, communicator, bug)
#else
   level=warnlev
#endif
  else
! this is a compatibility hack ; beware.
   level=warnlev
  endif
 else
#ifndef __STRING_SERIAL
  call mpi_allreduce(warnlev, level, 1, mpiint, MPI_MIN, MPI_COMM_WORLD, bug)
#else
 level=warnlev
#endif
 endif ! present(communicator)
#else /* not parallel */
 level=warnlev ! current value of the error level
#endif
!
 fatal_warning=(level.lt.minwarnlev)
!
 end function fatal_warning
!
!%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
 subroutine message(whoami,msg,level_)
  character(len=*) :: whoami, msg
  int, optional :: level_
  int :: level
!
  if (.not.output_initialized) call output_init()
!
  if (qprint) then
   if (present(level_)) then ; level = level_ ; else ; level=defaultmessagelev ; endif
   if (level.le.minmessagelev) write(fout,'(4A)') ' MESSAGE (',whoami,'): ', msg(1:len_trim(msg))
  endif
!
 end subroutine message
!%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
 subroutine plainmessage4(msg,level_)
! write message without ay other info.
  character(len=*) :: msg
  integer*4 :: level_
!
  if (.not.output_initialized) call output_init()
!
  if (qprint) then
   if (level_.le.minmessagelev) write(fout,'(A)') msg(1:len_trim(msg))
  endif
!
 end subroutine plainmessage4
!%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
 subroutine plainmessage8(msg,level_)
! write message without ay other info.
  character(len=*) :: msg
  integer*8 :: level_
!
  if (.not.output_initialized) call output_init()
!
  if (qprint) then
   if (level_.le.minmessagelev) write(fout,'(A)') msg(1:len_trim(msg))
  endif
!
 end subroutine plainmessage8
!%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
 subroutine plainmessage_(msg)
! write message without ay other info.
  character(len=*) :: msg
  if (.not.output_initialized) call output_init()
!
  if (qprint) then
   if (defaultmessagelev.le.minmessagelev) write(fout,'(A)') msg(1:len_trim(msg))
  endif
!
 end subroutine plainmessage_
!%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
!
 subroutine output_init(filename)
 character(len=*), optional :: filename
 character(len=200) :: fname
 int :: flen
 call output_done()
!
 if (present(filename)) then
  fname=adjustl(filename)
  flen=len_trim(fname)
  fout=987
  open(unit=fout,file=fname(1:flen),form='FORMATTED',status='UNKNOWN')
 else
  fout=6
 endif
!
 minerrorlev=0; minwarnlev=0; minmessagelev=0
!
 output_initialized=.true.
 end subroutine output_init
!%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
!
 subroutine output_done()
 if (output_initialized) then
  if (all(fout.ne.reserved_streams)) close(fout)
  output_initialized=.false.
  fout=-1
 endif
 end subroutine output_done
!%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
 subroutine set_minwarnlev4(level) ;	 integer*4 :: level ; if (.not.output_initialized) call output_init()
  minwarnlev=level  ; warnlev =max(warnlev,minwarnlev); 	end subroutine set_minwarnlev4
 subroutine set_minerrorlev4(level) ; 	 integer*4 :: level ; if (.not.output_initialized) call output_init()
  minerrorlev=level ; errorlev=max(errorlev,minerrorlev);	end subroutine set_minerrorlev4
 subroutine set_minmessagelev4(level) ;  integer*4 :: level ; if (.not.output_initialized) call output_init()
  minmessagelev=level ; end subroutine set_minmessagelev4
!
 subroutine set_minwarnlev8(level) ;	 integer*8 :: level ; if (.not.output_initialized) call output_init()
  minwarnlev=INT(level)  ; warnlev =max(warnlev,minwarnlev); 	end subroutine set_minwarnlev8
 subroutine set_minerrorlev8(level) ; 	 integer*8 :: level ; if (.not.output_initialized) call output_init()
  minerrorlev=INT(level) ; errorlev=max(errorlev,minerrorlev);	end subroutine set_minerrorlev8
 subroutine set_minmessagelev8(level) ;  integer*8 :: level ; if (.not.output_initialized) call output_init()
  minmessagelev=INT(level) ; end subroutine set_minmessagelev8
!
 subroutine reset_minwarnlev() ; if (.not.output_initialized) call output_init()
  minwarnlev=defaultwarnlev ; warnlev =max(warnlev,minwarnlev); end subroutine reset_minwarnlev
 subroutine reset_minerrorlev() ; if (.not.output_initialized) call output_init()
  minerrorlev=defaulterrorlev ; errorlev=max(errorlev,minerrorlev);	end subroutine reset_minerrorlev
 subroutine reset_minmessagelev() ; if (.not.output_initialized) call output_init()
  minmessagelev=defaultmessagelev ; end subroutine reset_minmessagelev
!%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
 function get_minwarnlev() result(level);	 int :: level ; level=minwarnlev;	end function get_minwarnlev
 function get_minerrorlev()  result(level); 	 int :: level ; level=minerrorlev;	end function get_minerrorlev
 function get_minmessagelev()  result(level); 	 int :: level ; level=minmessagelev ; 	end function get_minmessagelev
!%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
end module output
