module output
 __IMPNONE
 int, save :: fout=-1
 bool, save :: output_initialized=.false.
 bool, save :: qprint = .true.
 bool, private, save :: loud = .true.
 character(len=80) :: msg__ ! buffer for output (see message.src) macro
 character(len=10), public, parameter :: realfmt = 'ES20.7E3'
!
 int, parameter, private :: reserved_streams(3)=(/0, 5, 6/)
 int, private, parameter :: minerrorlev=0, minwarnlev=0, minmessagelev=0
 int, private :: l
 int, private, save :: warnlev, errorlev ! last warning/error levels
 character(len=9), private :: stat
 contains
!%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
 subroutine error(whoami,msg,level)
  int :: level
  character(len=*) :: whoami, msg
!
  if (.not.output_initialized) call output_init()
  if (level.lt.minerrorlev) then
   stat=' FATAL'; l=6
  else
   stat=' NONFATAL'; l=9
  endif
!
  if (qprint.and.loud) then
   write(fout,'(5A)') stat(1:l),' ERROR (',whoami,'): ', msg(1:len_trim(msg))
  endif
!
  if (level.lt.minerrorlev) stop
!
 end subroutine error
!%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
 subroutine terminate(whoami)
  character(len=*) :: whoami
!
  if (.not.output_initialized) call output_init()
!
  if (qprint) then
   write(fout,'(5A)') ' TERMINATION INVOKED FROM (',whoami,').'
  endif
!
  stop
!
 end subroutine terminate
!%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
 subroutine warning(whoami,msg,level)
  int :: level
  character(len=*) :: whoami, msg
!
  if (.not.output_initialized) call output_init()
  if (level.lt.minwarnlev) then
   stat=' FATAL'; l=6
  else
   stat=' NONFATAL'; l=9
  endif
!
  if (qprint) then
   write(fout,'(5A)') stat(1:l),' WARNING (',whoami,'): ', msg(1:len_trim(msg))
  endif
!
  warnlev=min(warnlev,level) ! keep the most severe level
!
! termination due to a fatal warning is triggered by user (usually via routine below)
!
 end subroutine warning
!%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
 function fatal_warning(             &
#ifdef __PARALLEL
 &                      communicator &
#endif
 &                          )
!
!
#ifdef __PARALLEL
 __DEP__MPI
 int4mpi, optional :: communicator
 int4mpi :: comm
#endif
 int :: level, bug
 bool :: fatal_warning
! compute the maximum value of errorcodes across all nodes; then decice whether to terminate
!
#ifdef __PARALLEL
 if (present(communicator)) then ; comm=communicator ; else ; comm=MPI_COMM_WORLD ; endif
 call mpi_allreduce(warnlev, level, 1, mpiint, MPI_MAX, comm, bug)
#else
 level=warnlev ! current value of the error level
#endif
!
!
 fatal_warning=(level.lt.minerrorlev)
!
 end function fatal_warning
!
!%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
 subroutine message(whoami,msg,level)
  character(len=*) :: whoami, msg
  int, optional :: level
!
  if (.not.output_initialized) call output_init()
!
  if (qprint) then
   if (present(level)) then
    if (level.gt.minmessagelev) write(fout,'(4A)') ' MESSAGE (',whoami,'): ', msg(1:len_trim(msg))
   else
     write(fout,'(4A)') ' MESSAGE (',whoami,'): ', msg(1:len_trim(msg))
   endif
  endif
!
 end subroutine message
!%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
 subroutine plainmessage(msg,level)
! write message without ay other info.
  character(len=*) :: msg
  int, optional :: level
!
  if (.not.output_initialized) call output_init()
!
  if (qprint) then
   if (present(level)) then
    if (level.gt.minmessagelev) write(fout,'(A)') msg(1:len_trim(msg))
   else
    write(fout,'(A)') msg(1:len_trim(msg))
   endif
  endif
!
 end subroutine plainmessage
!%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
!
 subroutine output_init(filename)
 character(len=*), optional :: filename
 character(len=200) :: fname
 int :: flen
 call output_done()
!
 if (present(filename)) then
  fname=adjustl(filename)
  flen=len_trim(fname)
  fout=987
  open(unit=fout,file=fname(1:flen),form='FORMATTED',status='UNKNOWN')
 else
  fout=6
 endif
!
 output_initialized=.true.
 end subroutine output_init
!%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
!
 subroutine output_done()
 if (output_initialized) then
  if (all(fout.ne.reserved_streams)) close(fout)
  output_initialized=.false.
  fout=-1
 endif
 end subroutine output_done
!%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
end module output
