module constants
!
 public
!
! integer parameters
 int, parameter :: izero=0
 int, parameter :: ione=1
 int, parameter :: iminusone=-1
 int, parameter :: itwo=2
 int, parameter :: ithree=3
 int, parameter :: ifour=4
 int, parameter :: ifive=5
 int, parameter :: isix=6
 int, parameter :: iseven=7
 int, parameter :: ieight=8
 int, parameter :: inine=9
 int, parameter :: itwentyseven=27
!********************************************************** 
!float parameters
 float, parameter :: pi = 3.141592653589793d0
 float, parameter :: twopi = 3.141592653589793d0*2d0
! 
 float, parameter :: avogadro=6.022d23
 float, parameter :: joule = 1d0/4184d0             ! kcal
 float, parameter :: kjoule = joule * 1000          ! kcal
 float, parameter :: plancksi=6.62606957d-34        ! m^2 x kg / s = J * s
 float, parameter :: planck=plancksi*avogadro*joule ! in kcal/mol
 float, parameter :: lightspeed=2.998d10 ! vacuum cm/s
 float, parameter :: kboltzmann = 1.987191d-3        ! Boltzmann constant (kcal/mol/Kelvin)
 float, parameter :: fs_per_akma = 48.8882129d0      ! factor to convert between AKMA time units and picoseconds 
 float, parameter :: akma_per_fs=1d0/fs_per_akma
 float, parameter :: zero=0d0
 float, parameter :: one=1d0
 float, parameter :: two=2d0
 float, parameter :: three=3d0
 float, parameter :: four=4d0
 float, parameter :: five=5d0
 float, parameter :: seven=7d0
 float, parameter :: nine=9d0
 float, parameter :: ten=10d0
 float, parameter :: twentyseven=27d0
 float, parameter :: half=0.5d0
 float, parameter :: quarter=0.25d0
 float, parameter :: third=one/three
 float, parameter :: fourth=quarter
 float, parameter :: twothirds=two/three
 float, parameter :: fifth=one/five
 float, parameter :: seventh=one/seven
 float, parameter :: sqrt2=sqrt(two)
 float, parameter :: sqrt3=sqrt(three)
 int,   parameter :: ismall=(ishftc(1,-1)) ! smallest representable int
 int,   parameter :: unknowni=ismall
 int,   parameter :: ilarge=not(ismall)
 float, parameter :: unknownf=one*unknowni
!
 float, parameter :: opi = one / pi
!
 float, parameter :: Id3(3,3)=reshape( (/one, zero, zero, zero, one, zero, zero, zero, one/),(/3,3/))
! float, parameter :: DTOL = 1.0e-14
! float, parameter :: FTOL = 1.0e-7
 float, save, private :: TOL = -one ! error tolerance
!********************************************************** 
 contains
  function ERRTOL()
   implicit none
   float :: a, b, ERRTOL
   if (TOL.lt.0) then ! compute machine precision
    a=1.0; b=1.0;
    do
     if ( a - a / b .ne.  a ) then ; b = b * 10 ; else ; TOL = 50 / b ; exit ; endif
    enddo
   endif
   ERRTOL=TOL
  end function ERRTOL
!
end module constants
