#define _N energy_grid

module _N

 __DEP_OUTPUT
 __DEP_CONSTANTS
 use griddata

 __IMPNONE
 private

 type(grid) :: energy
 bool :: initialized = .false.
 float, pointer, dimension(:) :: beta, esum, e2sum, eavg, e2avg, wgt, nsamp ! inverse temp, energy sum, squared energy sum, averages, weighted nsamp, actual nsamp
 float :: dbeta=-one ;
 float :: oodbeta=-one ; ! a precomputed constant for determining bin size
 float :: Cg=zero
 int :: interp_width=5 ! number of bins over which to fit an interpolating curve
! storage for interpolation
 float, pointer, dimension(:,:) :: interp_data
!
 int, public, parameter :: ndim=7

 public __NM(init)
 public __NM(done)
 public __NM(update_averages)
 public __NM(lookup_average_energy)
 public __NM(griddata_ptr)         ! return pointer to grid data
 public __NM(apply_bc)

 contains 
!=====================================================
  __SUB(init) (mintemp, maxtemp, gridsize, damping_constant, interp_bin_width, ini_data)
   __IAM(__NM(init))
   float, intent(in) :: mintemp, maxtemp
   int, intent(in) :: gridsize
   int, intent(in), optional :: interp_bin_width ! number of bins on either side of central bin that form the support for interpolation
   float, optional, intent(in) :: damping_constant
   float, optional, dimension(ndim*gridsize), intent(in), target :: ini_data
   float, pointer :: data(:)
   float :: minbeta, maxbeta
   int :: i
!
   __ASSERT(gridsize,>,1)
!
   if (present(ini_data)) then
! attempt to initialize from provided initial data
    __MESSAGE(whoami, ' INITIALIZING FROM RESTART DATA AND IGNORING MIN/MAX TEMPERATURES')
! some checks:
! size
    __ASSERT(size(ini_data),==,ndim*gridsize)
! positive temps
    beta=>ini_data(1:gridsize)
    __ASSERT(minval(beta),>,zero)
! monotone increasing
    __ASSERT(minval(beta(2:)-beta(1:gridsize-1)),>,zero)
! nonnegative sample numbers
     wgt  =>ini_data(5*gridsize+1:6*gridsize)
    __ASSERT(minval(wgt),>=,zero)
     nsamp=>ini_data(6*gridsize+1:7*gridsize)
    __ASSERT(minval(nsamp),>=,zero)

    allocate(data(ndim*gridsize)); data=ini_data

   else
    __ASSERT(maxtemp,>,zero)
    __ASSERT(mintemp,>,zero)
    __ASSERT(maxtemp,>,mintemp)
!
    allocate(data(ndim*gridsize))
    data=zero ;
! generate grid
    beta=>data(1:gridsize)
    minbeta=one/(kboltz*maxtemp)
    maxbeta=one/(kboltz*mintemp)
    dbeta=(maxbeta-minbeta)/(gridsize-1)
    beta(1)=minbeta
!
    do i=2, gridsize
     beta(i)=beta(i-1)+dbeta
    enddo
!
   endif
!
!   set damping constant
   if (present(damping_constant)) then
    __ASSERT(damping_constant,>=,zero)
! VO 5/2017 : dropping the requirement that the damping constant must be less than one
! this means that for Cg = n, gamma = 1-Cg/n will be negative, but we can bound it below by zero (see below)
! larger Cg values allow greater initial transients to be thrown out
!    __ASSERT(damping_constant,<=,one)
    Cg=damping_constant
   endif
!   set interpolation bin width
!   note that the bin width could be larger than the gridsize -- there is no check -- in which case, we are fitting _all_ data to a line
   if (present(interp_bin_width)) then
    __ASSERT(interp_bin_width,>=,zero)
    interp_width=interp_bin_width
   endif
!
!
   __DBGOUT('calling griddata_init with ', ndim, ' variables and ', gridsize,' grid points')
!
   call griddata_init(energy, gridsize, ndim, data)

   dbeta = beta(2)-beta(1)
   oodbeta = one / dbeta

   deallocate(data)
!
   beta  => energy%data(           1:  gridsize)
   esum  => energy%data(  gridsize+1:2*gridsize)
   e2sum => energy%data(2*gridsize+1:3*gridsize)
   eavg  => energy%data(3*gridsize+1:4*gridsize)
   e2avg => energy%data(4*gridsize+1:5*gridsize)
   wgt   => energy%data(5*gridsize+1:6*gridsize)
   nsamp => energy%data(6*gridsize+1:          )
!
!  storage for interpolation
   allocate(interp_data( min(energy%size,2*interp_width+1), 3 )) ;
!
   initialized=.true.
!
  end __SUB(init)
!================================================
  __SUB(done)
  call griddata_done(energy)
  __FREE(interp_data)
  nullify(beta, esum, e2sum, eavg, e2avg, wgt, nsamp)
  dbeta=-one
  oodbeta=-one
  Cg=zero
  initialized=.false.
  end __SUB(done)
!================================================
  __SUB(update_averages) (temperature, e)
  __IAM(__NM(update_averages))
  float, intent(in) :: e, temperature
  float :: b, omg, t
  int :: ibin
!
! get inverse temperature
  __ASSERT(temperature,>,zero);
  b=one/(kboltz*temperature)
! find bin, assuming uniform grid
  ibin = INT(oodbeta*(b-beta(1)))+1
!
__DBGOUT('oodbeta=',one/oodbeta)
__DBGOUT('temperature=',temperature)
__DBGOUT('beta=',b)
__DBGOUT('betagrid(1)=',beta(1))
__DBGOUT('betagrid(end)=',beta(energy%size))
!
  __ASSERT(ibin,>,0)
  __ASSERT(ibin,<=,energy%size)

 __DBGOUT('updating averages in bin ',ibin)

! update sums in bin #ibin
! procedure of Zhang/Ma 2010
! Note that the procedure accumulates very large sums, and may overflow;
! a less naive implementation may be needed
!
  __INC (nsamp(ibin))
  omg=min(Cg/nsamp(ibin),one)
  __INCR(esum(ibin),  e   - omg* esum(ibin)) ! same as : esum = g*esum + a 
  __INCR(e2sum(ibin), e*e - omg*e2sum(ibin))
  __INCR(wgt(ibin),   one - omg*  wgt(ibin))
! update averages
  __ASSERT(wgt(ibin),>,__ERRTOL)
  t=one/wgt(ibin)
  eavg(ibin)=t*esum(ibin)
  e2avg(ibin)=t*e2sum(ibin)
!
 __DBGOUT('esum = ',esum(ibin))
 __DBGOUT('eavg = ',eavg(ibin))
 __DBGOUT('wgt = ', wgt(ibin))
 __DBGOUT('nsamp = ', nsamp(ibin))

!
  end __SUB(update_averages)
!================================================
  __FUN(lookup_average_energy) (temperature) result (e)
! use the grid data to find the average energy corresponding to the provided temperature by interpolation/fitting
! note that we are using the inverse temperature, so that the first step is to compute beta=1/(kBT)
  __IAM(__NM(lookup_average_energy))
  float, intent(in) :: temperature
  float :: e
  float :: bet
  int :: ibin, bin, ebin, nbin, i
!
! using fit to linear model y=a+bx
!
 float, pointer, dimension(:) :: w, &! weights
 &                               x, &!
 &                               y
 float :: a, b, det, ws, xs, ys, x2s, xy, wx

! get inverse temperature
  __ASSERT(temperature,>,zero);
  bet=one/(kboltz*temperature)
! find bin that contains the desired temperature, assuming uniform grid
  bin = INT(oodbeta*(bet-beta(1)))+1
!
  __ASSERT(bin,>,0)
  __ASSERT(bin,<=,energy%size)
!
! compute bin range
  ibin=max(bin-interp_width,1);
  ebin=min(bin+interp_width,energy%size);
  nbin=ebin-ibin+1
!
 __DBGOUT('this bin =',bin)
 __DBGOUT('first bin=',ibin)
 __DBGOUT('last bin =',ebin)
 __DBGOUT('size of interp_data=',size(interp_data))
!
  e=eavg(bin) ! failsafe (no interpolation)
!
 __DBGOUT('failsafe energy = ', e)
!
! count the number of bins for which the weights are positive ; bail out if this number is less than 2 (not enough samples for interpolation)
  if ( (nbin.gt.1) .and. (count(wgt(ibin:ebin).gt.zero).gt.1 )) then
   w =>interp_data(:,1)
   x =>interp_data(:,2)
   y =>interp_data(:,3)
!
   w(1:nbin)= wgt(ibin:ebin)
   x(1:nbin)=beta(ibin:ebin) + half*(beta(2)-beta(1)) ! use bin centers (for clarity; it is also possible to [equivalently] shift the provided temperature)
   y(1:nbin)=eavg(ibin:ebin)

 __DBGOUT(' interp beta grid :',x)
 __DBGOUT(' interp energies  :',y)
 __DBGOUT(' interp weights   :',w)

!
   ws=zero; xs=zero; x2s=zero; xy=zero; ys=zero
!
   do i=1,nbin
    __INCR(ws,w(i))
    wx=w(i)*x(i)
    __INCR(xs,wx)
    __INCR(x2s,wx*x(i))
    __INCR(xy,wx*y(i))
    __INCR(ys,w(i)*y(i))
   enddo
   det=ws*x2s-xs*xs ! inverse determinant
   a = x2s*ys-xs*xy
   b = ws*xy-xs*ys
   __ASSERT(det,>,__ERRTOL)
   e = ( a + b * bet ) / det ! evaluate linear fit
  endif
 __DBGOUT(' returning energy ', e)
  end __FUN(lookup_average_energy)
!================================================
  __FUN(griddata_ptr) () result(ptr)
  float, pointer, dimension(:) :: ptr
  ptr=>energy%data
  end __FUN(griddata_ptr)
!================================================
  __SUB(apply_bc)(temperature)
  __IAM(__NM(APPLY_BC))
  float, intent(inout) :: temperature
  float :: b
  b=one/(kboltz*temperature)
!
 __DBGOUT(' minimum beta = ', beta(1))
 __DBGOUT(' maximum beta = ', beta(energy%size)+(beta(2)-beta(1)))
!
  if (b.le.beta(1)) then
!   b = beta(1) + (beta(1) - b) ! reflect from b(1) boundary
   b=min(2*beta(1)-b, beta(energy%size)) ! also make sure that we stay within the temperature grid
   temperature=one/(kboltz*b)
  elseif (b.ge.beta(energy%size)+dbeta ) then
!   b=beta(energy%size)+dbeta - (b - (beta(energy%size)+dbeta)) ! reflect from b(size)+db boundary
   b=max(2*(beta(energy%size)+dbeta)-b, beta(1)) ! stay within temperature grid
   temperature=one/(kboltz*b)
  endif
! otherwise no need to update temp
!
!
  end __SUB(apply_bc)
!================================================
end module _N
