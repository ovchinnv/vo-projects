! data structures and subroutines to store the grid

#define _N griddata

module _N
!
 __DEP_OUTPUT

 __IMPNONE
 public

 type grid
  int :: size=0                          ! number of points
  int :: dim=0                           ! dimensionality
  bool :: initialized=.false.            ! whether an initialization call has been made (must be set before data is used)
  float, dimension(:), pointer :: data   ! pointer to data; note that this is to be used in any dimensions
 end type grid

 __DEF_MSGBUF
!
 contains
!===============
  __SUB(init) (energy,n,dim,data)
  __IAM(__NM(init))
  type (grid) :: energy
  int, intent(in) :: n, dim
  float, intent(in) :: data(n*dim)
  __ASSERT(n,>,0)
  __ASSERT(dim,>,0)
  if (energy%initialized) call __NM(done) (energy)
  energy%size=n
  energy%dim=dim
  __DBGOUT('allocating energy%data with size ', n*dim)
  allocate(energy%data(n*dim))
  energy%data=data
  energy%initialized=.true.
!
  end __SUB(init)
!================
  __SUB(done) (energy)
  type (grid) :: energy
  if (energy%initialized) then
   deallocate(energy%data)
  else
   nullify(energy%data)
  endif
  energy%size=0
  energy%dim=0
  energy%initialized=.false.
  end __SUB(done)


end module _N
