#define __CTX __TEMPERINGCTX
#ifdef __ACEMD
#define __INITCTX TEMPERING_INIT
#define __DONECTX TEMPERING_DONE
#endif

module tempering
 __DEP_PARSER
 __DEP_OUTPUT
 __DEP_CONST
 __DEP_FILES
 __DEP_RANDOM

 __IMPNONE

 private

 public tempering_initialize
! public tempering_done
! public tempering_compute

 bool, save :: tempering_initialized=.false.
!
! macro for parameter definition
#define __PAR(_PAR,_TYPE,_DEF) _TYPE, save :: _PAR ; _TYPE, parameter :: __CONCAT(default_,_PAR)=_DEF;

 __PAR(mintemp,float,298d0)
 __PAR(maxtemp,float,500d0)
 __PAR(temp,float,-one)       ! current temperature
 __PAR(timestep,float,1.0d-4) ! integration step
 __PAR(gridsize,int,1000)     ! size for temperature grid
 __PAR(dgrid,float,(default_maxtemp-default_mintemp)/(default_gridsize-1)) ! resolution for temperature grid

 __PAR(inverse_dist, character(len=vartaglen), 'POWERLAW') ! prescribed distribution of inverse temperature
 __PAR(inverse_dist_exp, float, -one) ! coefficent in the distribution of inverse temperature
 __PAR(energy_interp_freq,int, 10)
!
 __PAR(restart_file, character(len=vartaglen), 'NONE') ! restart file
 __PAR(output_file, character(len=vartaglen), 'tempering.restart.txt') ! output file
 
!
 contains
!====================================================================================
 subroutine tempering_initialize()
 character(len=vartaglen) :: keyword
 int :: l
 __IAM(TEMPERING_INITIALIZE)
!
#ifdef __ACEMD
#define __CONTEXT __STRING(__INITCTX)
#else
#define __CONTEXT __STRING(__CTX)
#endif
!
#define __CHAR
#define __WARNIFMISSING
#define __DEFAULT
!
#define __VAR	inverse_dist
#define __TAG	inverse_temperature_distribution
#define __NAME	inverse temperature distribution
#include "parser/parser_macro1.src"
!
#define __VAR	output_file
#define __TAG	output_file
#define __NAME	tempering output file
#include "parser/parser_macro1.src"
!
#undef __WARNIFMISSING
#define __VAR	restart_file
#define __TAG	restart_file
#define __NAME	restart file
#include "parser/parser_macro1.src"
!
#undef __CHAR
#define __INT
#define __LEZEROERR
#define __VAR	gridsize
#define __TAG	inverse_temperature_gridsize
#define __NAME	size of inverse temperature grid
#include "parser/parser_macro1.src"
!
! grid resolution parameters
#define __LEZEROERR
#define __VAR	energy_interp_freq
#define __TAG	energy_interp_freq
#define __NAME	frequency of recomputing energy distribution
#include "parser/parser_macro1.src"
!
#undef __INT
#define __FLOAT
#define __VAR	dgrid
#define __TAG	inverse_temperature_spacing
#define __NAME	resolution of inverse temperature grid
#include "parser/parser_macro1.src"
! check here for invalid grid options
!
! temperature parameters
#define __VAR	temp
#define __TAG	temperature
#define __NAME	starting temperature
#include "parser/parser_macro1.src"
!
#define __WARNIFMISSING
#define __VAR	mintemp
#define __TAG	minimum_temperature
#define __NAME	minimum temperature
#include "parser/parser_macro1.src"
!
#define __VAR	maxtemp
#define __TAG	maximum_temperature
#define __NAME	maximum temperature
#include "parser/parser_macro1.src"
!
! timestep
!
#define __VAR	timestep
#define __TAG	timestep
#define __NAME	integration step
#include "parser/parser_macro1.src"
!
#define __VAR	inverse_dist_exp
#define __TAG	inverse_temperature_distribution_exponent
#define __NAME	exponent for inverse temperature distribution
#include "parser/parser_macro1.src"

!======================================
 end subroutine tempering_initialize

end module tempering
