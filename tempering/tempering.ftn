#define __CTX __TEMPERINGCTX
#define __RESTARTCTX __CONCAT(__TEMPERINGCTX,_RESTART)
#ifdef __ACEMD
#define __INITCTX TEMPERING_INIT
#define __DONECTX TEMPERING_DONE
#endif
#define _N TEMPERING
#//define __CHKUPDATE(_WHAT)   ( (mod(iteration, _WHAT) .eq. ione) .or. _WHAT.eq.ione )
#define __CHKUPDATE(_WHAT)   (mod(iteration, _WHAT) .eq. izero)

module _N

 __DEP_PARSER
 __DEP_OUTPUT
 __DEP_CONST
 __DEP_FILES
 __DEP_RANDOM
 __DEP_MPI
 use energy_grid

 __IMPNONE

 private

 public __NM(initialize)
 public __NM(done)
 public __NM(main)

 bool, save :: __NM(initialized)=.false.
!
! macro for parameter definition
#define __PAR(_PAR,_TYPE,_DEF) _TYPE, save :: _PAR ; _TYPE, parameter :: __CONCAT(default_,_PAR)=_DEF;

 __PAR(mintemp,float,298d0)
 __PAR(maxtemp,float,500d0)
 __PAR(temp,float,default_mintemp)       ! current temperature
 __PAR(timestep,float,1.0d-4) ! integration step
 __PAR(iteration,int,izero)   ! iteration
 __PAR(gridsize,int,1000)     ! size for (inverse) temperature grid (note that this is the number of temp. points ; number of bins would be gridsize-1 )
 __PAR(dgrid,float,(one/default_mintemp-one/default_maxtemp)/(kboltz*(default_gridsize-1))) ! resolution for (inverse) temperature grid 
!                                                                                           ! ( note that it is easier to set the gridsize )
 __PAR(damping_average,float,one/ten) ! damping constant for computing averages (C_\gamma in Zhang & Ma)
!
 __PAR(inverse_dist, character(len=vartaglen), 'POWERLAW') ! prescribed distribution of inverse temperature
 __PAR(inverse_dist_exp, float, -one) ! coefficent in the distribution of inverse temperature
 __PAR(energy_interp_width, int, 10)  ! number of bins over which the linear fit of average energy is made
 __PAR(average_update_freq, int, 1)   ! frequency of updating average energy
 __PAR(temperature_update_freq, int, 1)   ! frequency of temperature evolution
 __PAR(output_file_freq, int, 1000)   ! frequency of writing tempering output file
!
 __PAR(restart_file, character(len=vartaglen), 'NONE') ! restart file
 __PAR(output_file, character(len=vartaglen), 'tempering.restart.txt') ! output file
!
 __PAR(random_seeds(4), int, (/ione, itwo, ithree, ifour/))
! grid data array:
 float, pointer, dimension(:) :: restart_grid_data=>NULL() ! energy grid data for reading/writing restart/output files

!
 int :: betadist ! temperature distribution type flag
 int, parameter :: constant=1, powerlaw=2
!
 int :: fid, i, ierr
 bool :: qrestart=.false. ! whether we are restarting from a restart file
!
! for storing random numbers
 int, parameter :: nrandmax = 100000 ! maximum random number array size (many numbers precomputed for speed)
 int :: nrand = 0 !actual size of random number array size
 int :: irand=0 ! pointer into random number array eta
 float :: eta(0:nrandmax-1)
 float, parameter :: ookb=one/kboltzmann
 float :: sqrt2dt  = sqrt(two * default_timestep) ! precomputed sqrt(2 x dt) for BD integrator
!
! for time series (history) output
 int, parameter :: maxhist = 100000 ! size of history array ; this is the largest size that can be stored between outputs 
 int, parameter :: numhistvar  = 4      ! for now, plugin iteration, thermostat temperature and instantaneous energy, mditeration
 float :: hist(numhistvar,0:maxhist-1)
 int, parameter :: istep=1, itemp=2, iene=3, imdstep=4  ! indices into hist
 int :: bhist=0, ehist=-1 ! beginning and final indices into history array
 __PAR(stat_add_freq, int, 10)     ! frequency of storing time series
 __PAR(stat_output_freq, int, 1000)   ! frequency of time series output
 __PAR(stat_output_file, character(len=vartaglen), 'tempering.series.txt') ! time series file
 character(len=7) :: stat_acc='WRITE' ! access mode for series file ('WRITE'/'READ'/'APPEND')
 character(len=vartaglen) :: line ! for reading grid data from restart file
!
 contains
!====================================================================================
 __SUB(initialize) ()
 character(len=vartaglen) :: keyword, context
 int :: l
 __IAM(__NM(INITIALIZE))
!
#ifdef __ACEMD
#define __CONTEXT __STRING(__INITCTX)
#else
#define __CONTEXT __STRING(__CTX)
#endif
!
 context=__CONTEXT ;
! first, check for restart file
! if present, read it and skip initialization options
! read restart file
#define __CHAR
#define __VAR	restart_file
#define __TAG	restart_file
#define __NAME	restart file
#include "parser/parser_macro2.src"
#undef __CHAR
!
 qrestart = ( existtag_nocase('restart_file', context) .and. trim(ftoupper(restart_file)).ne.'NONE')
!
 if (qrestart) then
  __MESSAGE(whoami,' READING RESTART FILE. COMMAND FILE TEMPERATURE AND GRID SIZE PARAMETERS ARE IGNORED.')
! read and parse restart file
  fid=-1
  call files_open(fid, restart_file, 'FORMATTED', 'READ')
  call parse_file(fid, &
#ifdef __PARALLEL
 &  MPI_COMM_NULL, &
#endif
 &  quiet_=.false.)
  call files_close(fid)
! now comes a trick : change context name temporarily to process the restart file using the same calls
  context= __STRING(__RESTARTCTX)
 else ! only read below if no restart file provided
!
#define __LEZEROERR
#define __VAR	dgrid
#define __TAG	inverse_temperature_spacing
#define __NAME	resolution of inverse temperature grid
#define __DOIFOK gridsize = INT(one + (one/mintemp-one/maxtemp)/(kboltz*dgrid))
#include "parser/parser_macro2.src"

! warn if both dgrid and gridsize provided
  if (existtag_nocase('inverse_temperature_spacing', context).and.existtag_nocase('inverse_temperature_gridsize', context)) then
   __WRN(whoami, ' GRID SIZE AND GRID SPACING CANNOT BOTH BE SPECIFIED.')
  endif
!
 endif ! qrestart
!
! check for random seeds
 if (existtag_nocase('random_seeds', context)) then ;
  random_seeds=atoiv(getval_nocase('random_seeds', context),4);
 else
  __WARN('RANDOM_INIT','SEEDS NOT SPECIFIED, USING [',default_random_seeds,']')
  random_seeds=default_random_seeds
 endif

!
#undef __LEZEROERR
#define __WARNIFMISSING
#define __DEFAULT
#define __VAR	damping_average
#define __TAG	average_damping_constant
#define __NAME	damping constant for weighted average
#include "parser/parser_macro2.src"
!
#define __INT
#define __VAR	iteration
#define __TAG	__VAR
#define __NAME	starting iteration
#include "parser/parser_macro2.src"
!
! temperature parameters (note that the temperature cannot be zero; otherwise beta=\infty)
!
#define __LEZEROERR
#undef __INT
#define __VAR	temp
#define __TAG	temperature
#define __NAME	starting temperature
#include "parser/parser_macro2.src"
!
#define __WARNIFMISSING
#define __VAR	mintemp
#define __TAG	minimum_temperature
#define __NAME	minimum temperature
#include "parser/parser_macro2.src"
!
#define __VAR	maxtemp
#define __TAG	maximum_temperature
#define __NAME	maximum temperature
#include "parser/parser_macro2.src"
!
#define __INT
#define __VAR	gridsize
#define __TAG	inverse_temperature_gridsize
#define __NAME	size of inverse temperature grid
#define __DOIFOK dgrid=(one/mintemp-one/maxtemp)/(kboltz*(gridsize-1))
#include "parser/parser_macro2.src"
! read grid data (ndim is public in energy_grid)
 allocate(restart_grid_data(ndim*gridsize))
! check for grid data if restart_file present
 if (qrestart) then
  do i=1, gridsize
   line=getval_nocase('gdata_'//trim(itoa(i)),context)
   if (len_trim(line).gt.0) then
    read(line,*,iostat=ierr) restart_grid_data(i::gridsize)
    if (ierr.ne.0) then
     __WRN(whoami, 'ERROR READING GRID DATA FROM LINE "'//trim(line)//'"')
     cycle
    endif
   else
    __WRN(whoami, 'ERROR READING GRID DATA FROM LINE "'//trim(line)//'"')
   endif ! line
  enddo ! grid size
 endif ! restart_file

! distribution parameters
#undef __INT
#define __CHAR
#define __VAR	inverse_dist
#define __TAG	inverse_temperature_distribution
#define __NAME	inverse temperature distribution
#include "parser/parser_macro2.src"
!
 call toupper(inverse_dist)
 select case(inverse_dist)
  case('CONSTANT', 'CONST','UNIFORM', 'UNIF') ; betadist=constant; 
  case('PLAW','POWER','POWERLAW') ; betadist=powerlaw;
  case default;
   __WRN(whoami, ' UNKNOWN DISTRIBUTION SPECIFIED ('//trim(inverse_dist)//')')
 end select
!
#undef __CHAR

#define __MINUSERR
#define __INT
#define __VAR	energy_interp_width
#define __TAG	__VAR
#define __NAME	number of bins for energy interpolation
#include "parser/parser_macro2.src"
!
#undef __MINUSERR
#undef __LEZEROERR
#undef __INT
#define __VAR	inverse_dist_exp
#define __TAG	inverse_temperature_distribution_exponent
#define __NAME	exponent for inverse temperature distribution
#include "parser/parser_macro2.src"
!
 if (betadist.eq.constant) then
  if (existtag_nocase('inverse_temperature_distribution_exponent', context)) then
   __WRN(whoami, ' FOR UNIFORM 1/T DISTRIBUTION EXPONENT IS SET TO ZERO.')
   inverse_dist_exp=zero
  endif
 endif
!
 if (fatal_warning()) return
! ====== done with (possible) restart file data
 context=__CONTEXT ! reset context if changed
!
! other parameters
#define __MINUSERR
#define __INT
#define __VAR	average_update_freq
#define __TAG	__VAR
#define __NAME	frequency of updating averages
#define __DOIFOK if (__VAR.eq.izero) __MESSAGE(whoami, ' UPDATE OF AVERAGE ENERGY IS OFF.')
#include "parser/parser_macro2.src"
!
#define __VAR	temperature_update_freq
#define __TAG	__VAR
#define __NAME	frequency of updating temperature
#define __DOIFOK if (__VAR.eq.izero) __MESSAGE(whoami, ' TEMPERATURE UPDATE IS OFF.')
#include "parser/parser_macro2.src"
!
#define __VAR	stat_add_freq
#define __TAG	__VAR
#define __NAME	frequency of saving temperature/energy time series
#define __DOIFOK if (__VAR.eq.izero) __WRN(whoami, ' WILL NOT SAVE TIME SERIES.')
#include "parser/parser_macro2.src"
!
#define __VAR	stat_output_freq
#define __TAG	__VAR
#define __NAME	frequency of writing temperature/energy time series file
#define __DOIFOK if (__VAR.eq.izero) then ; stat_add_freq=izero ; __MESSAGE(whoami, ' WILL NOT WRITE TIME SERIES.') ; endif
#include "parser/parser_macro2.src"
!
! statistics
#undef __INT
#define __CHAR
#define __VAR	stat_output_file
#define __TAG	__VAR
#define __NAME	temperature/energy time series file
#include "parser/parser_macro2.src"
!
! output
#define __CHAR
#define __VAR	output_file
#define __TAG	__VAR
#define __NAME	tempering output file
#include "parser/parser_macro2.src"
!
#undef __CHAR
#define __INT
#define __VAR	output_file_freq
#define __TAG	__VAR
#define __NAME	frequency for writing tempering output/restart file
#include "parser/parser_macro2.src"
!
 if (output_file_freq.le.zero) then
  __WRN(whoami, ' TEMPERING RESTART FILE WILL BE WRITTEN AT THE END ONLY')
  nrand=nrandmax ;
 else
  nrand=output_file_freq ! this is to ensure that the random deviates are a continuous sequence
 endif

#undef __MINUSERR
#define __LEZEROERR
!
! timestep
!
#undef __INT
#define __VAR	timestep
#define __TAG	timestep
#define __NAME	integration step
#define __DOIFOK  sqrt2dt=sqrt(two*timestep) ! precompute sqrt(2dt)
#include "parser/parser_macro2.src"
 __DBGOUT(' integration step =',timestep)
!======================================
! call lower-level initialization

! initialize RNG
 call random_init(seeds=random_seeds)
 irand=0 ! make sure that we are pointing to the beginning of random number array
! make sure nrand=0 is not allowed
 __ASSERT(nrand,>,0)
! make sure we do not overflow eta array
 __ASSERT(nrand,<=,nrandmax)
 if (fatal_warning()) return
! initialize grid data

 if (qrestart) then
  call energy_grid_init(mintemp, maxtemp, gridsize, damping_average, energy_interp_width, restart_grid_data)
 else
  call energy_grid_init(mintemp, maxtemp, gridsize, damping_average, energy_interp_width) ! no restart data
 endif

! statistics
! for now, make sure history array does not overflow during dynamics
 __ASSERT(stat_output_freq/stat_add_freq,<=,maxhist)
 bhist=0
 ehist=-1
!
 tempering_initialized=.true.
!
 end __SUB(initialize)

!======================================
 __SUB(main) (energy,temperature,mditeration_)
 float, intent(in) :: energy
 float, intent(inout) :: temperature ! new temperature (if requested) will be returned in the same variable
 __OPAR(mditeration,int)
 __IAM(__NM(COMPUTE))

! check initialization :
 if (.not. tempering_initialized) then
  __WRN(whoami, ' TEMPERING NOT INITIALIZED. NOTHING DONE')
  return
 endif
!
 __INC(iteration)
 __PRESENT(mditeration,izero)
 __DBGOUT('iteration = ', iteration)
! check that temperature is consistent
 if ( abs(temperature-temp) .gt. __FERRTOL ) then
  __WRN(whoami, ' TEMPERATURE MISMATCH: '//ftoa(temperature)//'(SIMULATION THERMOSTAT) vs.'//ftoa(temp)//'(THIS MODULE)')
! not clear what to next; for now, adopt the most permissive behaviour, assuming that MD is has the desired temperature"
  temp=temperature
 endif
!
!========================================== update averages
 if (average_update_freq.gt.izero) then
  if __CHKUPDATE(average_update_freq) &
  & call energy_grid_update_averages(temperature,energy)
 endif
!========================================== compute new temperature
 if (temperature_update_freq.gt.izero) then
  if __CHKUPDATE(temperature_update_freq) then
! compute average energy
! NOTE : the Langevin equation to solve is :
! dT/dt = ( E-Eavg )/kB - \alpha T + T sqrt[2] x \eta(t), where \alpha is the inverse temp distribution exponent ; \eta is Wiener process derivative
! the corresponding FPE is
! dp/dt = (T^2 V(T)'p)' + (T^2 p)'' ; where V(T)=V(\beta (T))=V(1/(kBT));
! we only need V(beta)' to solve the Langevin, which is E-Eavg(beta)-[ln(w(beta))]' = E-Eavg - kBT\alpha; for w(beta) ~ beta^\alpha
! to solve the Langevin we use the regular Brownian Dynamics integrator :
! T(n+1) = T(n) + [ (E - Eavg)/kB - \alpha T(n) ] + T sqrt[2dt]\eta(n) ; where \eta is a normal deviate

! determine whether we need to generate random numbers:
   if (irand.eq.0) call randomg_vector(eta, nrand) ! draw nrand normal deviates
! compute new temperature

 __DBGOUT('current energy = ', energy)
 __DBGOUT('interpolated energy = ', energy_grid_lookup_average_energy(temp))
!
 __DBGOUT('force from distribution = ',inverse_dist_exp*temp)
 __DBGOUT('random force = ',temp*sqrt2dt*eta(irand))
 __DBGOUT('energy difference force = ',(energy - energy_grid_lookup_average_energy(temp))*ookb)
 __DBGOUT('timestep=',timestep)

   temp = temp &
   &    + timestep*( (energy - energy_grid_lookup_average_energy(temp)) * ookb - inverse_dist_exp*temp ) & ! drift
!   &    - timestep*inverse_dist_exp*temp & ! to test integrator in the absence of potential : PASSED -- obtain the prescribed distribution
   &    + temp*sqrt2dt*eta(irand)
!
 __DBGOUT('new temperature = ', temp)
!
! increment random number pointer
   __INC(irand); if (irand.eq.nrand) irand=izero
!
! apply relflective boundary conditions to temperature (essentially ensuring that we stay inside the correct temp window)
   call energy_grid_apply_bc(temp)
!
 __DBGOUT('corrected temperature = ', temp)
!
! update temperature for output
   temperature=temp
  endif
 endif
!
!============================================= save temperature time series
 if (stat_add_freq.gt.izero) then
  if __CHKUPDATE(stat_add_freq) then

   __INC(ehist)
   if (ehist.gt.0) then ! true for all samples except the first
    ehist=mod(ehist,maxhist) ! increment and wrap
!  if the history array is full (i.e. of length maxhist) ehist now is the same as bhist (i.e. we overwrite the oldest element) ; thus, increment bhist as well
    if (ehist.eq.bhist) bhist=mod(bhist+1,maxhist)
   endif
! update history
   hist(istep,ehist) = iteration
   hist(itemp,ehist) = temp
   hist(iene, ehist) = energy
   hist(imdstep, ehist) = mditeration
  endif
 endif
!
!============================================= output temperature time series
 if (stat_output_freq.gt.izero) then
  if __CHKUPDATE(stat_output_freq) then
!
   __MESSAGE(whoami, ' WRITING TIME SERIES TO FILE ("'//trim(stat_output_file)//'")')
   call tempering_write_history(present(mditeration_))

  endif
 endif
!
!============================================= output restart file
 if (output_file_freq.gt.izero) then
  if __CHKUPDATE(output_file_freq) then
!
   __MESSAGE(whoami, ' WRITING OUTPUT/RESTART FILE TO ("'//trim(output_file)//'")')
   call tempering_write_restart_file()
!
  endif
 endif

 end __SUB(main)
!======================================
 __SUB(done)
 __IAM(__NM(DONE))
! a possible future modification is to process content in __DONECTX
!
! write restart file
 if (tempering_initialized) then
! write remaining history
  if ( stat_output_freq.gt.izero) then
   __MESSAGE(whoami, ' WRITING REMAINING TIME SERIES TO FILE ("'//trim(stat_output_file)//'")')
   call tempering_write_history()
  endif
!
  __MESSAGE(whoami, ' WRITING OUTPUT FILE')
  call tempering_write_restart_file()
 endif
!
 call energy_grid_done()
 call parser_done()
 __FREE(restart_grid_data)
 tempering_initialized=.false.
!
 end __SUB(done)
!======================================
 __SUB(write_history) (qmdstep_)
 __IAM(_NM(WRITE_HISTORY))
 __OPAR(qmdstep,bool)
 int::i, numvar
 character(len=vartaglen) :: fmt
!
 __DBGOUT('beginning history index : ', bhist)
 __DBGOUT('ending history index    : ', ehist)
!
 if (ehist.ge.0) then
!
  fid=-1
  call files_open(fid, stat_output_file, 'FORMATTED', stat_acc)
  i=bhist
!
  numvar=numhistvar
  if (.not.qmdstep) __INCR(numvar,-1) ! md iterations not supplied so skip this field
!
  fmt='('//itoa(size(hist,2))//realfmt//')'
  do
   write(fid,fmt)  hist(1:numvar,i)
   if (i.eq.ehist) exit
   __INC(i); if(i.eq.maxhist) i=izero
  enddo
! reset history counter
  bhist=0;
  ehist=-1;
!
  call files_close(fid)
  stat_acc='APPEND' ! make sure that we append to existing file on future output
!
 else
  __WRN(whoami, ' HISTORY ARRAY DOES NOT CONTAIN ANY SAMPLES. ABORT.')
 endif
!
 end __SUB(write_history)
!======================================
 __SUB(write_restart_file) ()
 __IAM(__NM(WRITE_RESTART_FILE))
 int :: ifile, j
 ifile=-1 ! make sure files_open determines the handle automatically
 call files_open(ifile, output_file, 'FORMATTED','WRITE')
!
#define _W write(ifile,*)
 _W '#TEMPERING RESTART FILE'
 _W __STRING(__RESTARTCTX)//' {'
 _W 'iteration=',iteration
 _W 'temperature=',temp,' # starting thermostat temperature'
 _W 'minimum_temperature=',mintemp
 _W 'maximum_temperature=',maxtemp
 _W 'inverse_temperature_distribution=',trim(inverse_dist)
 _W 'inverse_temperature_distribution_exponent=',inverse_dist_exp, ' # exponent for power-law distribution'
 _W 'inverse_temperature_gridsize=',gridsize,' # number of points used for inverse temperature grid discretization'
 _W 'average_damping_constant=',damping_average,' # constant used in adaptive averaging (Cg)'
 _W 'energy_interp_width=',energy_interp_width,' # number of bins on either side of current bin for interpolation'
 _W 'random_seeds=(',random_get_seeds(),') # current seeds from RNG for seamless restart'
!
! retrieve energy grid :
 restart_grid_data=energy_grid_griddata_ptr()
! write the energy grid :
 _W '# gdata_i (i=1, gridsize) ; for ith bin write : \beta(i), SUM E(i), SUM E(i)^2, AVG E(i), AVG E(i)^2, WGT(i), NUM_SAMPLES(i) '
 do j=1, gridsize
  _W 'gdata_'//trim(itoa(j)),'=(',restart_grid_data(j::gridsize),')'
 enddo ! forced atoms
 _W '}'
! close file
 call files_close(ifile)
!
 end __SUB(write_restart_file)
!======================================
end module _N
