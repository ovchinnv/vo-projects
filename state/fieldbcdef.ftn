module fieldbcdef
#ifdef __BINDC
 use, intrinsic :: iso_c_binding
#endif
!
!*****************************************************************
!* boundary numbering:        1 - 'left'            2 - 'right'  *
!*                            3 - 'bottom'          4 - 'top'    *
!*                            5 - 'front'           6 - 'back'   *
!*****************************************************************
      int, parameter, public :: numbc=6
!
      int, parameter, public :: left=1, right=2, bottom=3, top=4, front=5, back=6
!      int, parameter, public :: west=1, east=2, south=3,  north=4
      int, parameter, public :: west=1, east=2, south=3,  north=4
      int, parameter, public :: bcx0=1, bcx1=2, bcy0=3, bcy1=4, bcz0=5, bcz1=6
!     corresponding boundary names:
      character(len=4), parameter :: bc_names(numbc) = (/'BCX0','BCX1','BCY0','BCY1','BCZ0','BCZ1'/);
      int, public, parameter :: dirichlet=1,  &
     &                          neumann=2,    &
     &                          periodic=3,   &
     &                          dirichletg=4, & ! dirichlet applied at ghostpoint
     &                          neumanng=5,   & ! neumann applied at ghostpoint
     &                          objectbc=6,     & ! boundary condition codes
     &                          undefined=0
!
#ifdef __BINDC
#//define __MKC(_WHAT) bind (c, name=__STRING(__CONCAT(b,_WHAT))) :: _WHAT
#define __MKC(_WHAT) int, protected, bind (c, name=__STRING(__CONCAT(bc,_WHAT))) :: __CONCAT(_WHAT,_C) = _WHAT
! export boundary codes :
      __MKC(left)
      __MKC(right)
      __MKC(bottom)
      __MKC(top)
      __MKC(front)
      __MKC(back)
      __MKC(west)
      __MKC(east)
      __MKC(south)
      __MKC(north)
! export bc codes :
      __MKC(dirichlet)
      __MKC(dirichletg)
      __MKC(neumann)
      __MKC(neumanng)
      __MKC(periodic)
      __MKC(undefined)
#undef __MKC
#endif
end module fieldbcdef
!
! utility subroutines
!
#include "bcutil/bc_util.src"
!
