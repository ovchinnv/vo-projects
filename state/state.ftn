#ifdef __PARALLEL
#define __COMM __CONCAT(MPI_COMM_,__STATECOMM )
#define __ME   __CONCAT(ME_,__STATECOMM )
#define __NCPU __CONCAT(SIZE_,__STATECOMM )
#else
#define __COMM
#define __ME 0
#define __NCPU 1
#endif
!
module state
 __DEP_OUTPUT
 __DEP_CONST
 __DEP_PARSER
  use fieldbcdef
  use datatypes
#ifdef __PARALLEL
 __DEP_MPI
 __DEP_MULTICOM
#endif
!
 __IMPNONE
!
 private
!
 type(varray3df), pointer, public :: vars3df(:) ! holds all arrays 
 int :: warnlev=0
!================================================================
 int, parameter :: expand_increment=8
 int :: nvar3df
!
 bool, save :: state_initialized=.false.
!
 public state_add3df ! add a 3D array
 public state_bc_add3df ! add a 3D array
 public state_get3df ! return pointer to a 3D array
 public state_initialized
 public state_initialize
 public state_done
!
 contains
!=====================================================================
  subroutine state_initialize()
!
  __IAM(STATE_INITIALIZE)
  int :: i, j
  type(varray3df), pointer :: v
!
  if (__ME.eq.0) then ; warnlev=-1  ; else ; warnlev=get_minmessagelev()+2 ; endif ! produce output only on root node
!
  if (state_initialized) call state_done()
  nvar3df=izero
  allocate(vars3df(expand_increment))
  do i=1, expand_increment
    v=>vars3df(i)
    v%v=>null()
    v%vname='UNDEFINED';
    v%vdescription='UNDEFINED';
    v%vcontext='UNDEFINED';
    v%vinit=.false.
! bc data
    v%vbcinit(:)=.false.
    v%vbc_type(:)=undefined
    v%vbc_wgt(:)=zero
    do j=1,numbc ;  v%vbcs(j)%d=>null() ; enddo
  enddo
!
  state_initialized=.true.
!
  end subroutine state_initialize
!=======================================================================
  subroutine state_done()
  int :: i, j
  type(varray3df), pointer :: v
!
  if (state_initialized) then
   do i=1, size(vars3df) 
    v=>vars3df(i)
    if (associated(v%v)) deallocate(v%v)
    do j=1,numbc ; if (associated(v%vbcs(j)%d)) deallocate(v%vbcs(j)%d) ;  enddo
   enddo
!
   deallocate(vars3df)
   state_initialized=.false.
  endif
!
  end subroutine state_done
!******************************************************************
  subroutine state_add3df(vname_, vdescription, vdim_, &
! if vcomm_ is provided, parallel communication will be used for initialization (not yet complete 12.2013)
#ifdef __PARALLEL
&  vcomm, &
#endif
&  vcontext_, vptr, qinit_)
!
  use files
  use formats
  use chestio
  use plot3dio
!
  character(len=*) :: vname_, vdescription
  int, intent(in) :: vdim_(:)
  character(len=*), optional, intent(in) :: vcontext_
  type(varray3df), pointer, optional, intent(out) :: vptr
  bool, optional, intent(in) :: qinit_  ! whether to look for initialization options in parser
#ifdef __PARALLEL
  int4mpi, intent(in) :: vcomm
  int4mpi :: me
#endif
!
  __IAM(STATE_ADD3DF)
  character(len=varnamelen) :: vname
  character(len=contextnamelen):: vcontext
  int :: vdim(3)
  bool :: qinit
!
  int :: i, j, k, l, m, ifmt
  bool :: qbin
  type(varray3df), pointer :: var, vars3df_bkp(:) ! dummy pointers
  character(len=vartaglen) :: filename, file_mode, file_format
!
  if (.not. state_initialized) call state_initialize()
!
! NOTE : context specified for disambiguation, not to determine where the memory is physically allocated;
! that information is provided via the (optional) communicator vcomm
! check if name is valid (first convert to upper case)
  vname=vname_; l=len(vname);
  __TRIMA(vname,l)
  call toupper(vname)
!
  if (present(vcontext_)) then
   vcontext=vcontext_; m=len(vcontext);
   __TRIMA(vcontext,m)
   call toupper(vcontext)
  else
   vcontext='MAIN';m=4
  endif
!
  warnlev=get_minmessagelev()
!
#ifdef __PARALLEL
  if (vcomm.ne.MPI_COMM_NULL) then
   call MPI_COMM_RANK(vcomm, me, i)
   if (me.ne.0) warnlev=warnlev+2 ! trick to produce output on the root node
  else
   call warning(whoami, 'Null communicator handle on global node '//itoa(ME_GLOBAL)//'. Node aborting.', warnlev-1)
   return
  endif ! vcomm
#else
  warnlev=0
#endif
!
  if (vname.eq.'') then 
   call warning(whoami, 'Variable name cannot be blank. Nothing done.', warnlev)
   return
  elseif (vcontext.eq.'') then 
   call warning(whoami, 'Variable context can be omitted but cannot be blank. Returning null.', warnlev)
   return
  else
   do i=1, size(vars3df)
    if (vname.eq.vars3df(i)%vname.and.vcontext.eq.vars3df(i)%vcontext) then
     call warning(whoami, 'Variable with name "'//vname(1:l)//'" already exists in context "'//vcontext(1:m)//'"',warnlev)
     call warning(whoami, ' and has description "'//vars3df(i)%vdescription//'". Returning pointer',warnlev)
     if (present(vptr)) vptr=>vars3df(i)
     return
     endif
   enddo ! i
  endif ! vname
!
  vdim=1;
  do i=1,min(size(vdim_), size(vdim)) ; vdim(i)=vdim_(i) ; enddo
!
  do i=1,size(vdim)
   call message(whoami, 'Dimension '//itoa(i)//' size: '//itoa(vdim(i)), warnlev)
   if (vdim(i).lt.0) then ;  call warning(whoami, 'Dimension '//itoa(i)//' cannot be negative. Nothing done.',warnlev) ; return ; endif
  enddo
!
! check size
  if (nvar3df.eq.size(vars3df)) then ! reallocate
   allocate(vars3df_bkp(nvar3df + expand_increment))
   vars3df_bkp(1:nvar3df)=vars3df
   deallocate(vars3df) ; vars3df=>vars3df_bkp ; nullify(vars3df_bkp)
  endif
!
  nvar3df=nvar3df+1
  var=>vars3df(nvar3df)
  allocate(var%v(vdim(1),vdim(2), vdim(3)))
  var%vname=vname
  var%vdescription=vdescription
  var%vcontext=vcontext
  call message(whoami, 'Variable "'//vname(1:l)//'" added to context "'//vcontext(1:m)//'"',warnlev)
  if (present(vptr)) vptr=>var
!
! check for assignments to variable (at present, this probably conflicts with 'molecule.src', in that you cannot use both assignments)
! note that the boundary points are read, too; this is necessary because interpolated (e.g.) epsilon & kappa values are needed at cell boundaries
!
  if (present(qinit_)) then ; qinit=qinit_ ; else ; qinit=.true. ; endif
  if (qinit) then
! check for initialization options
   var%vinit=.false.
   l=len_trim(var%vname)
   select case(getval_nocase_upper(var%vname(1:l)//'INIT',vcontext(1:m)))
    case('CONST','CONSTANT')
     if (existtag_nocase(var%vname(1:l)//'CONSTANT',vcontext(1:m))) then
      var%v=atof(getval_nocase(var%vname(1:l)//'CONSTANT',vcontext(1:m)))
      var%vinit=.true.
     elseif (existtag_nocase(var%vname(1:l)//'CONST',vcontext(1:m))) then
      var%v=atof(getval_nocase(var%vname(1:l)//'CONST',vcontext(1:m)))
      var%vinit=.true.
     else
      call warning(whoami, 'Initialization constant for variable "'//var%vname(1:l)//'" not specified',warnlev-1)
     endif
    case('FILE')
     if (existtag_nocase(var%vname(1:l)//'FILE',vcontext(1:m))) then
      filename=getval_nocase(var%vname(1:l)//'FILE',vcontext(1:m))
      call adjustleft(filename)
      k=len_trim(filename)
      call message(whoami, 'Will initialize variable "'//var%vname(1:l)//'" from file "'//filename(1:k)//'"',warnlev)
     else
      call warning(whoami, 'Initialization file for variable "'//var%vname(1:l)//'" not specified',warnlev-1)
     endif
!
     if (existtag_nocase(var%vname(1:l)//'_MODE',vcontext(1:m))) then
      file_mode=getval_nocase_upper(var%vname(1:l)//'_MODE',vcontext(1:m))
      select case(file_mode);
       case('BINARY', 'BIN');      call message(whoami,'Using binary mode');  qbin=.true.
       case('ASCII', 'TEXT');      call message(whoami,'Using ASCII mode');   qbin=.false.
       case default ;  call warning(whoami,'Unknown output mode "'//file_mode(1:len_trim(file_mode))//'" requested',warnlev-1); qbin=.false.
      end select
     else
      qbin=.true.
     endif
!
     ifmt=chest ! default format
     if (existtag_nocase(var%vname(1:l)//'_FORMAT',vcontext(1:m))) then
      file_format=getval_nocase_upper(var%vname(1:l)//'_FORMAT',vcontext(1:m));
      ifmt=-999
      do j=1,num_format
       if (file_format.eq.format_name(j)) then 
        ifmt=j
        exit
       endif
      enddo
     endif
!
     if (ifmt.gt.0) then
      call message(whoami,format_name(ifmt)(1:len_trim(format_name(ifmt)))//' format will be used',warnlev);
     else
      call warning(whoami,'Format "'//file_format(1:len_trim(file_format))//'" is not recognized',warnlev-1)
     endif
!
!      if (me.le.0) &
!       call message(whoami, 'Reading data for variable "'//var%vname(1:l)//'" from file '//filename(1:k),warnlev)
#ifdef __PARALLEL
     select case(ifmt)
      case(plot3d); call plot3Dread_scalar(filename,var%v,vdim(1),vdim(2),vdim(3),1,qbin,vcomm)
      case(chest);  call chest_read_scalar(filename,var%v,vdim(1),vdim(2),vdim(3),qbin,vcomm)
      end select
     if (.not.fatal_warning(vcomm)) var%vinit=.true.
#else
     select case(ifmt)
      case(plot3d); call plot3Dread_scalar(filename,var%v,vdim(1),vdim(2),vdim(3),1,qbin)
      case(chest);  call chest_read_scalar(filename,var%v,vdim(1),vdim(2),vdim(3),qbin)
     end select
     if (.not.fatal_warning()) var%vinit=.true.
#endif
!
   case('OBJECT') ! do nothing here : object_grid_parameters will take care of correct initialization, but it is not clear yet how to do this well
    call message(whoami, 'Initialization for variable "'//var%vname(1:l)//'" will be computed from object',warnlev)
    var%vinit=.true.
    case default
     call warning(whoami, 'Initialization option for variable "'//var%vname(1:l)//'" not recognized',warnlev-1)
   end select
!
  endif ! qinit
!
  end subroutine state_add3df
!******************************************************************
  function state_get3df(vname_, vcontext_, ind) ! returns a pointer to the data of variable with name vname_, in context vcontext_
  character(len=*), intent(in) :: vname_
  character(len=*), optional, intent(in) :: vcontext_
  character(len=varnamelen) :: vname
  int, optional, intent(out) :: ind ! index into the vars3df array
  character(len=contextnamelen):: vcontext
  int :: i, l, m
  float, dimension(:,:,:), pointer :: state_get3df
  __IAM(STATE_GET3DF)
  nullify(state_get3df)
!
  if (.not.state_initialized) call state_initialize()
!
  vname=vname_; l=len(vname);
  __TRIMA(vname,l)
  call toupper(vname)
!
  if (present(vcontext_)) then
   vcontext=vcontext_; m=len(vcontext);
   __TRIMA(vcontext,m)
   call toupper(vcontext)
  else
   vcontext='MAIN';m=4
  endif
!
  if (present(ind)) ind=-1 ! initialize
!
  if (vname.eq.'') then 
   call warning(whoami, 'Variable name cannot be blank. Returning null.', 0)
  elseif (vcontext.eq.'') then 
   call warning(whoami, 'Variable context can be omitted but cannot be blank. Returning null.', 0)
  else
   do i=1, nvar3df
    if (vname.eq.vars3df(i)%vname.and.vcontext.eq.vars3df(i)%vcontext) then
     state_get3df=>vars3df(i)%v ; if (present(ind)) ind=i ; exit
    endif
   enddo ! i
   if (.not.associated(state_get3df)) &
#ifdef __PARALLEL
&   call warning(whoami, 'Cannot find variable with name "'//vname(1:l)//'" in context "'//vcontext(1:m)//'" on global node '// &
&    itoa(ME_GLOBAL)//'. Returning null.',0)
#else
&   call warning(whoami, 'Cannot find variable with name "'//vname(1:l)//'" in context "'//vcontext(1:m)//'". Returning null.',0)
#endif
  endif
!
  end function state_get3df
!******************************************************************
! boundary condition routines for 3D fields
  subroutine state_bc_add3df(vname_, ibc, &
! if vcomm_ is provided, parallel communication will be used for initialization
#ifdef __PARALLEL
 &  vcomm, &
#endif
 & vcontext_, vdim_)
!
  use files
!
  character(len=*), intent(in) :: vname_
#ifdef __PARALLEL
  int4mpi :: vcomm
  int4mpi :: me, ncpu
#endif
  character(len=*), optional, intent(in) :: vcontext_
  int, optional :: vdim_(2)
  character(len=contextnamelen):: vcontext
!
  int :: ibc ! boundary number (see fieldbcdef)
!
  type(varray3df), pointer :: v ! dummy pointer
  float, pointer :: v3df(:,:,:), vbcd(:,:)
  int :: vdim(2)
!
  __IAM(STATE_BC_ADD3DF)
  character(len=vartaglen) :: filename
  character(len=20) :: keyword
  character(len=varnamelen+len(bc_names(1))+1) :: bcname
  int :: i, k, ii, jj, bcsize, bcsizei, bcsizej, l, m
  int :: i1, i2
  int :: fid
  integer :: iostatus
  float :: value
!
#ifdef __PARALLEL
  int :: bug
#endif
!
  if (present(vcontext_)) then
   vcontext=vcontext_; m=len(vcontext);
   __TRIMA(vcontext,m)
   call toupper(vcontext)
  else
   vcontext='MAIN';m=4
  endif
!
#if __DEBUG
  call message(whoami,'SETTING BOUNDARY CONDITIONS FOR VARIABLE "'//trim(vname_)//'" IN CONTEXT "'//trim(vcontext)//'".',&
  &__DBGLEV)
#endif
!
  warnlev=get_minmessagelev()
!
#ifdef __PARALLEL
  if (vcomm.ne.MPI_COMM_NULL) then
   call MPI_COMM_RANK(vcomm, me, i)
   if (me.ne.0) warnlev=warnlev+2 ! trick to produce output on the root node
   call MPI_COMM_SIZE(vcomm, ncpu, i)
  else
   call warning(whoami, 'Null communicator handle on global node '//itoa(ME_GLOBAL)//'. Node aborting.', warnlev-1)
   return
  endif
#else
  warnlev=0
#endif
!
! basic checks:
! find variable
  v3df=>state_get3df(vname_, vcontext, i)
  if (i .lt. 0) return ! variable not found; warning issued by _get3df
  v=>vars3df(i)
!
! make sure bc index is valid
! bounds check
  select case(ibc)
    case(bcx0, bcx1); i1 = 2 ; i2 = 3
    case(bcy0, bcy1); i1 = 1 ; i2 = 3
    case(bcz0, bcz1); i1 = 1 ; i2 = 2
    case default
     call warning(whoami, 'Unknown boundary type "'//itoa(ibc)//'". Nothing done', warnlev)
     return
  end select
  vdim=(/ size(v%v,i1), size(v%v,i2) /)
!
  if (present(vdim_)) then
   do i=1,2
    if (vdim(i).ne.vdim_(i)) then 
     call warning(whoami, 'Incorrect boundary dimension '//itoa(i)//' specified (hope you know what you are doing): '//itoa(vdim_(i)), warnlev)
     if (vdim_(i).lt.0) then
      call warning(whoami, 'Boundary dimension '//itoa(i)//' cannot be negative. Nothing done.', warnlev)
      return
     endif
    endif
   enddo
   vdim=vdim_
  endif
!
! parse BC-spec from input file
  bcname=v%vname(1:len_trim(v%vname))//'_'//bc_names(ibc)
  l=len_trim(bcname)
!
  keyword=trim(getval_nocase_upper(bcname, vcontext))
  select case(keyword)
   case('DIRICHLET');                               !   Dirichlet applied between grid nodes
    v%vbc_type(ibc)=dirichlet;  v%vbc_wgt(ibc)=two
   case('DIRICHLETG');                              !   Dirichlet applied at grid node
    v%vbc_type(ibc)=dirichletg; v%vbc_wgt(ibc)=one
   case('PERIODIC');
    v%vbc_type(ibc)=periodic;
   case('NEUMANN');
    v%vbc_type(ibc)=neumann;    v%vbc_wgt(ibc)=one  !   valid assuming BC data have been scaled by metric
   case('NEUMANNG');
    v%vbc_type(ibc)=neumanng;   v%vbc_wgt(ibc)=one  !   Neumann applied at ghostpoint
   case default
    call warning(whoami, 'Unknown boundary condition for '//bcname(1:l)//'.',warnlev-1)
   return
  end select
!
!     set the actual boundary condition values
  if (associated(v%vbcs(ibc)%d)) then
   call warning(whoami, 'Data for boundary "'//bcname(1:l)//'" already allocated (this should not happen). Abort.', warnlev)
   return
  endif
  allocate(v%vbcs(ibc)%d(vdim(1),vdim(2)))
  vbcd=>v%vbcs(ibc)%d

  if (v%vbc_type(ibc).eq.dirichlet .or. &
&     v%vbc_type(ibc).eq.dirichletg.or. &
&     v%vbc_type(ibc).eq.neumann)       & ! others can potentially be added below, such as convective (for pressure)
&        then
!
   if (existtag_nocase(bcname(1:l)//'_CONSTANT', vcontext)) then
    vbcd=atof(getval_nocase(bcname(1:l)//'_CONSTANT', vcontext))
   elseif (existtag_nocase(bcname(1:l)//'_CONST', vcontext)) then
    vbcd=atof(getval_nocase(bcname(1:l)//'_CONST', vcontext))
   elseif (existtag_nocase(bcname(1:l)//'_FILE', vcontext)) then
! open and read boundary condition file
    filename=getval_nocase(bcname(1:l)//'_FILE', vcontext)
    call adjustleft(filename)
    m=len_trim(filename)
!
    bcsizei=vdim(1)-2; ! size of first dimension (inner pts only)
    bcsizej=vdim(2)-2; ! size of second dimension (inner pts only)
    bcsize=bcsizei*bcsizej;     ! total inner size
!
#ifdef __PARALLEL
    if (me.le.0) then
#endif
     call message(whoami, 'Reading boundary conditions ('//bcname(1:l)//') from file '//filename(1:m))
     if (l.gt.0) then
      fid=-1
      call files_open(fid, name_=filename(1:m), form_='FORMATTED', action_='READ')
      if (fid.lt.0) call warning(whoami, 'Cannot open file. Abort.',warnlev-1)
     else
      call warning(whoami, 'File name not specified. Abort.',warnlev-1)
     endif ! length positive
#ifdef __PARALLEL
    endif ! me>0
#endif
!
#ifdef __PARALLEL
    if (fatal_warning(vcomm)) then ; deallocate(v%vbcs(ibc)%d) ; return ; endif ! in case there was an error on the root processor, stop here
#else
    if (fatal_warning()) then ; deallocate(v%vbcs(ibc)%d) ; return ; endif
#endif
!
#ifdef __PARALLEL
    if (me.le.0) then
#endif
     k=0
     read(fid, *, IOSTAT=iostatus) value
     do while (iostatus.eq.0)
      k=k+1
!    individual indices
      jj=(k-1)/bcsizei+2                          ! slowly-varying second index ; offset is 2 for inner points only
      ii=mod((k-1),bcsizei)+2                     ! fast-varying first index
      if (k.le.bcsize) vbcd(ii,jj)=value ! make assignment if not out of bounds of bcs(i)
      read(fid, *, IOSTAT=iostatus) value
     enddo
     call files_close(fid)
#ifdef __PARALLEL
    endif ! me
#endif
!    check that the right number of entries was read
#ifdef __PARALLEL
    if (ncpu.gt.1) then 
     call MPI_BCAST(k,1,mpi_int,0,vcomm,bug)
     call MPI_BCAST(vbcd,size(vbcd),mpi_float,0,vcomm,bug)
    endif
#endif
!
!        write(0,*) k, bcsizei, bcsizej,bcsize ! aa
    if (k.gt.bcsize) then
     call warning(whoami, 'File "'//filename(1:m)//'" contains more entries than expected.', warnlev)
    elseif (k.lt.bcsize) then
     call warning(whoami, 'File "'//filename(1:m)//'" does not contain enough entries. Abort.', warnlev-1)
     deallocate(v%vbcs(ibc)%d)
     return
    endif
!
   else
    call warning(whoami, 'No values specified for boundary conditions ('//bcname(1:l)//'). Abort.', warnlev-1)
     deallocate(v%vbcs(ibc)%d)
     return
   endif ! read bc values
  endif !  certain bc_types
!
  v%vbcinit(ibc)=.true.
!
  end subroutine state_bc_add3df
!
!******************************************************************
!
end module state
