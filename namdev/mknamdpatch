#!/bin/bash 
:<<COMMENT
VO 5.2014 use a patch tree to patch a source directory The source
directory is "$1" and the patch directory is "$2".  If the arguments are
missing then default arguments will be used
\
COMMENT
# begin code
OUT="===>";
ERR="WARNING:"
BREAK="===================================================================================";
PREFLX2CPP=0 ; # indicate whether to replace charmm preflx macros with CPP macros prior to applying patch : 1 - yes; 0 - no
rdir=`pwd`;
#
dold_default="old"
patchdir_default="patchdir"
#
# files excluded from prefx2cpp (relevant only with preflx2cpp=1)
exclude_prefx2cpp=""
#==================== source
if [ -z $1 ] ; then
 echo " Source (existing) directory name unspecified. Trying \"$dold_default\""
 dold=$dold_default
else
 dold=$1
 echo " Source (existing) directory name is \"$dold\""
fi
#
if [ ! -d "$dold" ]; then
 echo " Directory "$dold" does not exist. Abort."
 exit 1
fi
#==================== patch tree
if [ -z $2 ] ; then
 echo " Patch tree directory name unspecified. Trying \"$patchdir_default\""
 patchdir=$patchdir_default
else
 patchdir=$2
 echo " Patch tree directory name is \"$patchdir\""
fi
#
if [ ! -d "$patchdir" ]; then
 echo " Directory "$patchdir" does not exist. Abort."
 exit 1
fi
#
echo $BREAK
echo "$OUT Patching directory \"$dold\""
#
dirs=`ls -R $patchdir | grep ":" | sed "s/\(.*\):/\1/;s/$patchdir/\.\//;s/\///"`
echo $dirs

for d in $dirs ; do
 pushd $patchdir/$d >& /dev/null
 patches=`ls | grep ".patch" `
 popd >& /dev/null
 for p in $patches ;do
  fname=${p%.patch}
  fold=$dold/$d/$fname
# copy patch to target dir
# check if an old file exists
  if [ ! -f $fold ] ; then
   echo "$ERR Patch \"$patchdir/$d/$p\" refers to nonexistent file \"$fold\" (file creation?). New source tree may be incomplete."
   test -d "$dold/$d" || mkdir -p "$dold/$d" # create directory if needed
   cp -f $patchdir/$d/$p $dold/$d
   pushd $dold/$d >&/dev/null
  else
# old file exists : try to apply prefx2cpp to it
   cp -f $patchdir/$d/$p $dold/$d
   pushd $dold/$d >&/dev/null
   if [ $PREFLX2CPP -eq 1 ]; then
    fext=${fname##*.}
    if [ `echo $exclude_prefx2cpp | grep $fname  | wc -l` -eq "0" ] && [ "$fext"!="src" ] ; then #  run prefx2cpp on this file
     $rdir/prefx2cpp $fname 0 > _tmp ;# 0 - flag means no parentheses
     mv _tmp $fname
    fi
   fi
  fi
  patch -E < $p
  rm -f $p
  popd >&/dev/null
 done
done
# make sure that necessary files are executable
exec_files="";
for f in $exec_files; do
 if [ -f $f ] ; then
  chmod ugo+x $f
 fi
done
#
echo "$OUT DONE!"
echo $BREAK
